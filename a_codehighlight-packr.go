// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package codehighlight

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./codehighlightjs/dist/", "codehighlight.css", "\"LmhsanN7ZGlzcGxheTpibG9jaztvdmVyZmxvdy14OmF1dG87cGFkZGluZzouNWVtO2NvbG9yOiMzMzM7YmFja2dyb3VuZDojZjhmOGY4fS5obGpzLWNvbW1lbnQsLmhsanMtcXVvdGV7Y29sb3I6Izk5ODtmb250LXN0eWxlOml0YWxpY30uaGxqcy1rZXl3b3JkLC5obGpzLXNlbGVjdG9yLXRhZywuaGxqcy1zdWJzdHtjb2xvcjojMzMzO2ZvbnQtd2VpZ2h0OjcwMH0uaGxqcy1saXRlcmFsLC5obGpzLW51bWJlciwuaGxqcy10YWcgLmhsanMtYXR0ciwuaGxqcy10ZW1wbGF0ZS12YXJpYWJsZSwuaGxqcy12YXJpYWJsZXtjb2xvcjp0ZWFsfS5obGpzLWRvY3RhZywuaGxqcy1zdHJpbmd7Y29sb3I6I2QxNH0uaGxqcy1zZWN0aW9uLC5obGpzLXNlbGVjdG9yLWlkLC5obGpzLXRpdGxle2NvbG9yOiM5MDA7Zm9udC13ZWlnaHQ6NzAwfS5obGpzLXN1YnN0e2ZvbnQtd2VpZ2h0OjQwMH0uaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwuaGxqcy10eXBle2NvbG9yOiM0NTg7Zm9udC13ZWlnaHQ6NzAwfS5obGpzLWF0dHJpYnV0ZSwuaGxqcy1uYW1lLC5obGpzLXRhZ3tjb2xvcjpuYXZ5O2ZvbnQtd2VpZ2h0OjQwMH0uaGxqcy1saW5rLC5obGpzLXJlZ2V4cHtjb2xvcjojMDA5OTI2fS5obGpzLWJ1bGxldCwuaGxqcy1zeW1ib2x7Y29sb3I6Izk5MDA3M30uaGxqcy1idWlsdF9pbiwuaGxqcy1idWlsdGluLW5hbWV7Y29sb3I6IzAwODZiM30uaGxqcy1tZXRhe2NvbG9yOiM5OTk7Zm9udC13ZWlnaHQ6NzAwfS5obGpzLWRlbGV0aW9ue2JhY2tncm91bmQ6I2ZkZH0uaGxqcy1hZGRpdGlvbntiYWNrZ3JvdW5kOiNkZmR9LmhsanMtZW1waGFzaXN7Zm9udC1zdHlsZTppdGFsaWN9LmhsanMtc3Ryb25ne2ZvbnQtd2VpZ2h0OjcwMH0=\"")
	packr.PackJSONBytes("./codehighlightjs/dist/", "codehighlight.umd.min.js", "\"(function(e,t){"object"===typeof exports&&"object"===typeof module?module.exports=t(require("Vue")):"function"===typeof define&&define.amd?define(["Vue"],t):"object"===typeof exports?exports["codehighlight"]=t(require("Vue")):e["codehighlight"]=t(e["Vue"])})("undefined"!==typeof self?self:this,function(e){return function(e){var t={};function a(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,a),r.l=!0,r.exports}return a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s="fae3")}({"0081":function(e,t){e.exports=function(e){var t="[A-Z_][A-Z0-9_.]*",a={keyword:"HEADER ENDSEC DATA"},n={className:"meta",begin:"ISO-10303-21;",relevance:10},r={className:"meta",begin:"END-ISO-10303-21;",relevance:10};return{aliases:["p21","step","stp"],case_insensitive:!0,lexemes:t,keywords:a,contains:[n,r,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.COMMENT("/\\*\\*!","\\*/"),e.C_NUMBER_MODE,e.inherit(e.APOS_STRING_MODE,{illegal:null}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),{className:"string",begin:"'",end:"'"},{className:"symbol",variants:[{begin:"#",end:"\\d+",illegal:"\\W"}]}]}}},"01ac":function(e,t){e.exports=function(e){var t="\\d(_|\\d)*",a="[eE][-+]?"+t,n=t+"(\\."+t+")?("+a+")?",r="\\w+",i=t+"#"+r+"(\\."+r+")?#("+a+")?",s="\\b("+i+"|"+n+")",o="[A-Za-z](_?[A-Za-z0-9.])*",l="[]{}%#'\"",_=e.COMMENT("--","$"),c={begin:"\\s+:\\s+",end:"\\s*(:=|;|\\)|=>|$)",illegal:l,contains:[{beginKeywords:"loop for declare others",endsParent:!0},{className:"keyword",beginKeywords:"not null constant access function procedure in out aliased exception"},{className:"type",begin:o,endsParent:!0,relevance:0}]};return{case_insensitive:!0,keywords:{keyword:"abort else new return abs elsif not reverse abstract end accept entry select access exception of separate aliased exit or some all others subtype and for out synchronized array function overriding at tagged generic package task begin goto pragma terminate body private then if procedure type case in protected constant interface is raise use declare range delay limited record when delta loop rem while digits renames with do mod requeue xor",literal:"True False"},contains:[_,{className:"string",begin:/"/,end:/"/,contains:[{begin:/""/,relevance:0}]},{className:"string",begin:/'.'/},{className:"number",begin:s,relevance:0},{className:"symbol",begin:"'"+o},{className:"title",begin:"(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",end:"(is|$)",keywords:"package body",excludeBegin:!0,excludeEnd:!0,illegal:l},{begin:"(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",end:"(\\bis|\\bwith|\\brenames|\\)\\s*;)",keywords:"overriding function procedure with is renames return",returnBegin:!0,contains:[_,{className:"title",begin:"(\\bwith\\s+)?\\b(function|procedure)\\s+",end:"(\\(|\\s+|$)",excludeBegin:!0,excludeEnd:!0,illegal:l},c,{className:"type",begin:"\\breturn\\s+",end:"(\\s+|;|$)",keywords:"return",excludeBegin:!0,excludeEnd:!0,endsParent:!0,illegal:l}]},{className:"type",begin:"\\b(sub)?type\\s+",end:"\\s+",keywords:"type",excludeBegin:!0,illegal:l},c]}}},"0209":function(e,t){e.exports=function(e){var t={className:"keyword",begin:"\\b[a-z\\d_]*_t\\b"},a={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\((?:.|\n)*?\)\1"/},{begin:"'\\\\?.",end:"'",illegal:"."}]},n={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},r={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{"meta-keyword":"if else elif endif define undef warning error line pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(a,{className:"meta-string"}),{className:"meta-string",begin:/<[^\n>]*>/,end:/$/,illegal:"\\n"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},i=e.IDENT_RE+"\\s*\\(",s={keyword:"int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and or not",built_in:"std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr",literal:"true false nullptr NULL"},o=[t,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,a];return{aliases:["c","cc","h","c++","h++","hpp"],keywords:s,illegal:"</",contains:o.concat([r,{begin:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",end:">",keywords:s,contains:["self",t]},{begin:e.IDENT_RE+"::",keywords:s},{variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:s,contains:o.concat([{begin:/\(/,end:/\)/,keywords:s,contains:o.concat(["self"]),relevance:0}]),relevance:0},{className:"function",begin:"("+e.IDENT_RE+"[\\*&\\s]+)+"+i,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:s,illegal:/[^\w\s\*&]/,contains:[{begin:i,returnBegin:!0,contains:[e.TITLE_MODE],relevance:0},{className:"params",begin:/\(/,end:/\)/,keywords:s,relevance:0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,n,t,{begin:/\(/,end:/\)/,keywords:s,relevance:0,contains:["self",e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,n,t]}]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,r]},{className:"class",beginKeywords:"class struct",end:/[{;:]/,contains:[{begin:/</,end:/>/,contains:["self"]},e.TITLE_MODE]}]),exports:{preprocessor:r,strings:a,keywords:s}}}},"0215":function(e,t){e.exports=function(e){var t={begin:"<",end:">",contains:[e.inherit(e.TITLE_MODE,{begin:/'[a-zA-Z0-9_]+/})]};return{aliases:["fs"],keywords:"abstract and as assert base begin class default delegate do done downcast downto elif else end exception extern false finally for fun function global if in inherit inline interface internal lazy let match member module mutable namespace new null of open or override private public rec return sig static struct then to true try type upcast use val void when while with yield",illegal:/\/\*/,contains:[{className:"keyword",begin:/\b(yield|return|let|do)!/},{className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]},{className:"string",begin:'"""',end:'"""'},e.COMMENT("\\(\\*","\\*\\)"),{className:"class",beginKeywords:"type",end:"\\(|=|$",excludeEnd:!0,contains:[e.UNDERSCORE_TITLE_MODE,t]},{className:"meta",begin:"\\[<",end:">\\]",relevance:10},{className:"symbol",begin:"\\B('[A-Za-z])\\b",contains:[e.BACKSLASH_ESCAPE]},e.C_LINE_COMMENT_MODE,e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),e.C_NUMBER_MODE]}}},"0290":function(e,t){e.exports=function(e){return{aliases:["adoc"],contains:[e.COMMENT("^/{4,}\\n","\\n/{4,}$",{relevance:10}),e.COMMENT("^//","$",{relevance:0}),{className:"title",begin:"^\\.\\w.*$"},{begin:"^[=\\*]{4,}\\n",end:"\\n^[=\\*]{4,}$",relevance:10},{className:"section",relevance:10,variants:[{begin:"^(={1,5}) .+?( \\1)?$"},{begin:"^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$"}]},{className:"meta",begin:"^:.+?:",end:"\\s",excludeEnd:!0,relevance:10},{className:"meta",begin:"^\\[.+?\\]$",relevance:0},{className:"quote",begin:"^_{4,}\\n",end:"\\n_{4,}$",relevance:10},{className:"code",begin:"^[\\-\\.]{4,}\\n",end:"\\n[\\-\\.]{4,}$",relevance:10},{begin:"^\\+{4,}\\n",end:"\\n\\+{4,}$",contains:[{begin:"<",end:">",subLanguage:"xml",relevance:0}],relevance:10},{className:"bullet",begin:"^(\\*+|\\-+|\\.+|[^\\n]+?::)\\s+"},{className:"symbol",begin:"^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",relevance:10},{className:"strong",begin:"\\B\\*(?![\\*\\s])",end:"(\\n{2}|\\*)",contains:[{begin:"\\\\*\\w",relevance:0}]},{className:"emphasis",begin:"\\B'(?!['\\s])",end:"(\\n{2}|')",contains:[{begin:"\\\\'\\w",relevance:0}],relevance:0},{className:"emphasis",begin:"_(?![_\\s])",end:"(\\n{2}|_)",relevance:0},{className:"string",variants:[{begin:"``.+?''"},{begin:"`.+?'"}]},{className:"code",begin:"(`.+?`|\\+.+?\\+)",relevance:0},{className:"code",begin:"^[ \\t]",end:"$",relevance:0},{begin:"^'{3,}[ \\t]*$",relevance:10},{begin:"(link:)?(http|https|ftp|file|irc|image:?):\\S+\\[.*?\\]",returnBegin:!0,contains:[{begin:"(link|image:?):",relevance:0},{className:"link",begin:"\\w",end:"[^\\[]+",relevance:0},{className:"string",begin:"\\[",end:"\\]",excludeBegin:!0,excludeEnd:!0,relevance:0}],relevance:10}]}}},"02ac":function(e,t){e.exports=function(e){var t={className:"string",begin:"\\[\n(multipart)?",end:"\\]\n"},a={className:"string",begin:"\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"},n={className:"string",begin:"(\\+|-)\\d+"},r={className:"keyword",relevance:10,variants:[{begin:"^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?"},{begin:"^progress(:?)(\\s+)?(pop|push)?"},{begin:"^tags:"},{begin:"^time:"}]};return{case_insensitive:!0,contains:[t,a,n,r]}}},"02c4":function(e,t){e.exports=function(e){var t={className:"keyword",begin:"\\$(f[asn]|t|vp[rtd]|children)"},a={className:"literal",begin:"false|true|PI|undef"},n={className:"number",begin:"\\b\\d+(\\.\\d+)?(e-?\\d+)?",relevance:0},r=e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),i={className:"meta",keywords:{"meta-keyword":"include use"},begin:"include|use <",end:">"},s={className:"params",begin:"\\(",end:"\\)",contains:["self",n,r,t,a]},o={begin:"[*!#%]",relevance:0},l={className:"function",beginKeywords:"module function",end:"\\=|\\{",contains:[s,e.UNDERSCORE_TITLE_MODE]};return{aliases:["scad"],keywords:{keyword:"function module include use for intersection_for if else \\%",literal:"false true PI undef",built_in:"circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,i,r,t,o,l]}}},"0481":function(e,t){e.exports=function(e){var t={begin:"`[\\s\\S]"};return{case_insensitive:!0,aliases:["ahk"],keywords:{keyword:"Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",literal:"A|0 true false NOT AND OR",built_in:"ComSpec Clipboard ClipboardAll ErrorLevel"},contains:[{className:"built_in",begin:"A_[a-zA-Z0-9]+"},t,e.inherit(e.QUOTE_STRING_MODE,{contains:[t]}),e.COMMENT(";","$",{relevance:0}),e.C_BLOCK_COMMENT_MODE,{className:"number",begin:e.NUMBER_RE,relevance:0},{className:"subst",begin:"%(?=[a-zA-Z0-9#_$@])",end:"%",illegal:"[^a-zA-Z0-9#_$@]"},{className:"built_in",begin:"^\\s*\\w+\\s*,"},{className:"meta",begin:"^\\s*#w+",end:"$",relevance:0},{className:"symbol",contains:[t],variants:[{begin:'^[^\\n";]+::(?!=)'},{begin:'^[^\\n";]+:(?!=)',relevance:0}]},{begin:",\\s*,"}]}}},"04a8":function(e,t){e.exports=function(e){var t={begin:/[\w-]+ *=/,returnBegin:!0,relevance:0,contains:[{className:"attr",begin:/[\w-]+/}]},a={className:"params",begin:/\(/,end:/\)/,contains:[t],relevance:0},n={className:"function",begin:/:[\w\-.]+/,relevance:0},r={className:"string",begin:/\B(([\/.])[\w\-.\/=]+)+/},i={className:"params",begin:/--[\w\-=\/]+/};return{aliases:["wildfly-cli"],lexemes:"[a-z-]+",keywords:{keyword:"alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",literal:"true false"},contains:[e.HASH_COMMENT_MODE,e.QUOTE_STRING_MODE,i,n,r,a]}}},"04b0":function(e,t){e.exports=function(e){return{aliases:["md","mkdown","mkd"],contains:[{className:"section",variants:[{begin:"^#{1,6}",end:"$"},{begin:"^.+?\\n[=-]{2,}$"}]},{begin:"<",end:">",subLanguage:"xml",relevance:0},{className:"bullet",begin:"^([*+-]|(\\d+\\.))\\s+"},{className:"strong",begin:"[*_]{2}.+?[*_]{2}"},{className:"emphasis",variants:[{begin:"\\*.+?\\*"},{begin:"_.+?_",relevance:0}]},{className:"quote",begin:"^>\\s+",end:"$"},{className:"code",variants:[{begin:"^```w*s*$",end:"^```s*$"},{begin:"`.+?`"},{begin:"^( {4}|\t)",end:"$",relevance:0}]},{begin:"^[-\\*]{3,}",end:"$"},{begin:"\\[.+?\\][\\(\\[].*?[\\)\\]]",returnBegin:!0,contains:[{className:"string",begin:"\\[",end:"\\]",excludeBegin:!0,returnEnd:!0,relevance:0},{className:"link",begin:"\\]\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0},{className:"symbol",begin:"\\]\\[",end:"\\]",excludeBegin:!0,excludeEnd:!0}],relevance:10},{begin:/^\[[^\n]+\]:/,returnBegin:!0,contains:[{className:"symbol",begin:/\[/,end:/\]/,excludeBegin:!0,excludeEnd:!0},{className:"link",begin:/:\s*/,end:/$/,excludeBegin:!0}]}]}}},"06b4":function(e,t){e.exports=function(e){return{case_insensitive:!0,contains:[e.HASH_COMMENT_MODE,{className:"meta",variants:[{begin:"^TAP version (\\d+)$"},{begin:"^1\\.\\.(\\d+)$"}]},{begin:"(s+)?---$",end:"\\.\\.\\.$",subLanguage:"yaml",relevance:0},{className:"number",begin:" (\\d+) "},{className:"symbol",variants:[{begin:"^ok"},{begin:"^not ok"}]}]}}},"074e":function(e,t){e.exports=function(e){var t={className:"params",begin:"\\(",end:"\\)"},a={literal:".False. .True.",keyword:"kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",built_in:"alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_ofacosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"};return{case_insensitive:!0,keywords:a,illegal:/\/\*/,contains:[e.inherit(e.APOS_STRING_MODE,{className:"string",relevance:0}),e.inherit(e.QUOTE_STRING_MODE,{className:"string",relevance:0}),{className:"function",beginKeywords:"subroutine function program",illegal:"[${=\\n]",contains:[e.UNDERSCORE_TITLE_MODE,t]},e.COMMENT("!","$",{relevance:0}),e.COMMENT("begin_doc","end_doc",{relevance:10}),{className:"number",begin:"(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?",relevance:0}]}}},"0b22":function(e,t){e.exports=function(e){var t={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",literal:"true false iota nil",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{aliases:["golang"],keywords:t,illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",variants:[e.QUOTE_STRING_MODE,{begin:"'",end:"[^\\\\]'"},{begin:"`",end:"`"}]},{className:"number",variants:[{begin:e.C_NUMBER_RE+"[dflsi]",relevance:1},e.C_NUMBER_MODE]},{begin:/:=/},{className:"function",beginKeywords:"func",end:/\s*\{/,excludeEnd:!0,contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,keywords:t,illegal:/["']/}]}]}}},"0f16":function(e,t){e.exports=function(e){return{keywords:"environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",contains:[e.COMMENT("::","$")]}}},"0f3c":function(e,t){e.exports=function(e){return{aliases:["nim"],keywords:{keyword:"addr and as asm bind block break case cast const continue converter discard distinct div do elif else end enum except export finally for from generic if import in include interface is isnot iterator let macro method mixin mod nil not notin object of or out proc ptr raise ref return shl shr static template try tuple type using var when while with without xor yield",literal:"shared guarded stdin stdout stderr result true false",built_in:"int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float float32 float64 bool char string cstring pointer expr stmt void auto any range array openarray varargs seq set clong culong cchar cschar cshort cint csize clonglong cfloat cdouble clongdouble cuchar cushort cuint culonglong cstringarray semistatic"},contains:[{className:"meta",begin:/{\./,end:/\.}/,relevance:10},{className:"string",begin:/[a-zA-Z]\w*"/,end:/"/,contains:[{begin:/""/}]},{className:"string",begin:/([a-zA-Z]\w*)?"""/,end:/"""/},e.QUOTE_STRING_MODE,{className:"type",begin:/\b[A-Z]\w+\b/,relevance:0},{className:"number",relevance:0,variants:[{begin:/\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},{begin:/\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},{begin:/\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},{begin:/\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/}]},e.HASH_COMMENT_MODE]}}},"0faf":function(e,t){e.exports=function(e){return{keywords:"ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",illegal:"</",contains:[e.HASH_COMMENT_MODE,e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]}}},1069:function(e,t){e.exports=function(e){var t={className:"variable",variants:[{begin:/\$[\w\d#@][\w\d_]*/},{begin:/\$\{(.*?)}/}]},a="BEGIN END if else while do for in break continue delete next nextfile function func exit|10",n={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/(u|b)?r?'''/,end:/'''/,relevance:10},{begin:/(u|b)?r?"""/,end:/"""/,relevance:10},{begin:/(u|r|ur)'/,end:/'/,relevance:10},{begin:/(u|r|ur)"/,end:/"/,relevance:10},{begin:/(b|br)'/,end:/'/},{begin:/(b|br)"/,end:/"/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]};return{keywords:{keyword:a},contains:[t,n,e.REGEXP_MODE,e.HASH_COMMENT_MODE,e.NUMBER_MODE]}}},1367:function(e,t){e.exports=function(e){return{subLanguage:"xml",contains:[e.COMMENT("<%#","%>"),{begin:"<%[%=-]?",end:"[%-]?%>",subLanguage:"ruby",excludeBegin:!0,excludeEnd:!0}]}}},1487:function(e,t,a){var n=a("a70e");n.registerLanguage("1c",a("f71c")),n.registerLanguage("abnf",a("b528")),n.registerLanguage("accesslog",a("998d")),n.registerLanguage("actionscript",a("f9f0")),n.registerLanguage("ada",a("01ac")),n.registerLanguage("angelscript",a("dbcc")),n.registerLanguage("apache",a("f0aa")),n.registerLanguage("applescript",a("7bc1")),n.registerLanguage("arcade",a("305e")),n.registerLanguage("cpp",a("0209")),n.registerLanguage("arduino",a("944e")),n.registerLanguage("armasm",a("a33c")),n.registerLanguage("xml",a("8dcb")),n.registerLanguage("asciidoc",a("0290")),n.registerLanguage("aspectj",a("9814")),n.registerLanguage("autohotkey",a("0481")),n.registerLanguage("autoit",a("ef99")),n.registerLanguage("avrasm",a("a6fb")),n.registerLanguage("awk",a("1069")),n.registerLanguage("axapta",a("a885")),n.registerLanguage("bash",a("f0f8")),n.registerLanguage("basic",a("a15a")),n.registerLanguage("bnf",a("75da")),n.registerLanguage("brainfuck",a("5921")),n.registerLanguage("cal",a("7781")),n.registerLanguage("capnproto",a("4a5e")),n.registerLanguage("ceylon",a("ba76")),n.registerLanguage("clean",a("51ab")),n.registerLanguage("clojure",a("b884")),n.registerLanguage("clojure-repl",a("149d")),n.registerLanguage("cmake",a("eaab")),n.registerLanguage("coffeescript",a("a995")),n.registerLanguage("coq",a("80b3")),n.registerLanguage("cos",a("8261")),n.registerLanguage("crmsh",a("c8e5")),n.registerLanguage("crystal",a("294a")),n.registerLanguage("cs",a("bb63")),n.registerLanguage("csp",a("4272")),n.registerLanguage("css",a("ee8c")),n.registerLanguage("d",a("8d6d")),n.registerLanguage("markdown",a("04b0")),n.registerLanguage("dart",a("7c46")),n.registerLanguage("delphi",a("1f8a")),n.registerLanguage("diff",a("48b8")),n.registerLanguage("django",a("d248")),n.registerLanguage("dns",a("8a86")),n.registerLanguage("dockerfile",a("44b5")),n.registerLanguage("dos",a("7cff")),n.registerLanguage("dsconfig",a("b91e")),n.registerLanguage("dts",a("b0cf")),n.registerLanguage("dust",a("f4da")),n.registerLanguage("ebnf",a("1b4d")),n.registerLanguage("elixir",a("7727")),n.registerLanguage("elm",a("5051")),n.registerLanguage("ruby",a("82cb")),n.registerLanguage("erb",a("1367")),n.registerLanguage("erlang-repl",a("f492")),n.registerLanguage("erlang",a("b3c5")),n.registerLanguage("excel",a("f5cf")),n.registerLanguage("fix",a("2b22")),n.registerLanguage("flix",a("a14e")),n.registerLanguage("fortran",a("485f")),n.registerLanguage("fsharp",a("0215")),n.registerLanguage("gams",a("7d9d")),n.registerLanguage("gauss",a("ae7a")),n.registerLanguage("gcode",a("94a2")),n.registerLanguage("gherkin",a("351a")),n.registerLanguage("glsl",a("df06")),n.registerLanguage("gml",a("e6ea")),n.registerLanguage("go",a("0b22")),n.registerLanguage("golo",a("919d")),n.registerLanguage("gradle",a("9544")),n.registerLanguage("groovy",a("1f64")),n.registerLanguage("haml",a("4f4a")),n.registerLanguage("handlebars",a("e55c")),n.registerLanguage("haskell",a("3f38")),n.registerLanguage("haxe",a("7c71")),n.registerLanguage("hsp",a("c22d")),n.registerLanguage("htmlbars",a("79b5")),n.registerLanguage("http",a("c01d")),n.registerLanguage("hy",a("8667")),n.registerLanguage("inform7",a("2e5d")),n.registerLanguage("ini",a("2a93")),n.registerLanguage("irpf90",a("074e")),n.registerLanguage("isbl",a("bb43")),n.registerLanguage("java",a("332f")),n.registerLanguage("javascript",a("4dd1")),n.registerLanguage("jboss-cli",a("04a8")),n.registerLanguage("json",a("5ad2")),n.registerLanguage("julia",a("2265")),n.registerLanguage("julia-repl",a("b7aa")),n.registerLanguage("kotlin",a("a941")),n.registerLanguage("lasso",a("25bd")),n.registerLanguage("ldif",a("1a06")),n.registerLanguage("leaf",a("2e9b")),n.registerLanguage("less",a("1846")),n.registerLanguage("lisp",a("9b32")),n.registerLanguage("livecodeserver",a("1beb")),n.registerLanguage("livescript",a("2e11")),n.registerLanguage("llvm",a("7c30")),n.registerLanguage("lsl",a("28ad")),n.registerLanguage("lua",a("ecfe")),n.registerLanguage("makefile",a("7a5e")),n.registerLanguage("mathematica",a("ef7a")),n.registerLanguage("matlab",a("8ca5")),n.registerLanguage("maxima",a("399d")),n.registerLanguage("mel",a("bb7e")),n.registerLanguage("mercury",a("2425")),n.registerLanguage("mipsasm",a("a342")),n.registerLanguage("mizar",a("0f16")),n.registerLanguage("perl",a("6a51")),n.registerLanguage("mojolicious",a("66ba")),n.registerLanguage("monkey",a("a710")),n.registerLanguage("moonscript",a("b1b9")),n.registerLanguage("n1ql",a("f4c8")),n.registerLanguage("nginx",a("f54f")),n.registerLanguage("nimrod",a("0f3c")),n.registerLanguage("nix",a("46ae")),n.registerLanguage("nsis",a("b322")),n.registerLanguage("objectivec",a("9bf2")),n.registerLanguage("ocaml",a("ee6c")),n.registerLanguage("openscad",a("02c4")),n.registerLanguage("oxygene",a("6de8")),n.registerLanguage("parser3",a("3728")),n.registerLanguage("pf",a("767a")),n.registerLanguage("pgsql",a("f851")),n.registerLanguage("php",a("2907")),n.registerLanguage("plaintext",a("44e5")),n.registerLanguage("pony",a("95d0")),n.registerLanguage("powershell",a("508e")),n.registerLanguage("processing",a("afba")),n.registerLanguage("profile",a("b90a")),n.registerLanguage("prolog",a("4396")),n.registerLanguage("properties",a("56b2")),n.registerLanguage("protobuf",a("2e8e")),n.registerLanguage("puppet",a("5027")),n.registerLanguage("purebasic",a("1b02")),n.registerLanguage("python",a("9510")),n.registerLanguage("q",a("5dfb")),n.registerLanguage("qml",a("612a")),n.registerLanguage("r",a("26bc")),n.registerLanguage("reasonml",a("e990")),n.registerLanguage("rib",a("0faf")),n.registerLanguage("roboconf",a("f50f")),n.registerLanguage("routeros",a("d959")),n.registerLanguage("rsl",a("a0a7")),n.registerLanguage("ruleslanguage",a("8aba")),n.registerLanguage("rust",a("2ce7")),n.registerLanguage("sas",a("40f4")),n.registerLanguage("scala",a("9f7f")),n.registerLanguage("scheme",a("4108")),n.registerLanguage("scilab",a("ea4d")),n.registerLanguage("scss",a("6113")),n.registerLanguage("shell",a("b65b")),n.registerLanguage("smali",a("1b1c")),n.registerLanguage("smalltalk",a("8d4f")),n.registerLanguage("sml",a("dc41")),n.registerLanguage("sqf",a("e2a7")),n.registerLanguage("sql",a("de09")),n.registerLanguage("stan",a("8931")),n.registerLanguage("stata",a("d4b5")),n.registerLanguage("step21",a("0081")),n.registerLanguage("stylus",a("bd88")),n.registerLanguage("subunit",a("02ac")),n.registerLanguage("swift",a("2a39")),n.registerLanguage("taggerscript",a("2468")),n.registerLanguage("yaml",a("2e7b")),n.registerLanguage("tap",a("06b4")),n.registerLanguage("tcl",a("a27d")),n.registerLanguage("tex",a("29c8")),n.registerLanguage("thrift",a("adf9")),n.registerLanguage("tp",a("a613")),n.registerLanguage("twig",a("f46e")),n.registerLanguage("typescript",a("af44")),n.registerLanguage("vala",a("f122")),n.registerLanguage("vbnet",a("89e7")),n.registerLanguage("vbscript",a("5a3e")),n.registerLanguage("vbscript-html",a("f45a")),n.registerLanguage("verilog",a("e10f")),n.registerLanguage("vhdl",a("310f")),n.registerLanguage("vim",a("3c69")),n.registerLanguage("x86asm",a("a154")),n.registerLanguage("xl",a("2639")),n.registerLanguage("xquery",a("268a")),n.registerLanguage("zephir",a("9f0c")),e.exports=n},"149d":function(e,t){e.exports=function(e){return{contains:[{className:"meta",begin:/^([\w.-]+|\s*#_)?=>/,starts:{end:/$/,subLanguage:"clojure"}}]}}},1846:function(e,t){e.exports=function(e){var t="[\\w-]+",a="("+t+"|@{"+t+"})",n=[],r=[],i=function(e){return{className:"string",begin:"~?"+e+".*?"+e}},s=function(e,t,a){return{className:e,begin:t,relevance:a}},o={begin:"\\(",end:"\\)",contains:r,relevance:0};r.push(e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,i("'"),i('"'),e.CSS_NUMBER_MODE,{begin:"(url|data-uri)\\(",starts:{className:"string",end:"[\\)\\n]",excludeEnd:!0}},s("number","#[0-9A-Fa-f]+\\b"),o,s("variable","@@?"+t,10),s("variable","@{"+t+"}"),s("built_in","~?`[^`]*?`"),{className:"attribute",begin:t+"\\s*:",end:":",returnBegin:!0,excludeEnd:!0},{className:"meta",begin:"!important"});var l=r.concat({begin:"{",end:"}",contains:n}),_={beginKeywords:"when",endsWithParent:!0,contains:[{beginKeywords:"and not"}].concat(r)},c={begin:a+"\\s*:",returnBegin:!0,end:"[;}]",relevance:0,contains:[{className:"attribute",begin:a,end:":",excludeEnd:!0,starts:{endsWithParent:!0,illegal:"[<=$]",relevance:0,contains:r}}]},d={className:"keyword",begin:"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",starts:{end:"[;{}]",returnEnd:!0,contains:r,relevance:0}},m={className:"variable",variants:[{begin:"@"+t+"\\s*:",relevance:15},{begin:"@"+t}],starts:{end:"[;}]",returnEnd:!0,contains:l}},p={variants:[{begin:"[\\.#:&\\[>]",end:"[;{}]"},{begin:a,end:"{"}],returnBegin:!0,returnEnd:!0,illegal:"[<='$\"]",relevance:0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,_,s("keyword","all\\b"),s("variable","@{"+t+"}"),s("selector-tag",a+"%?",0),s("selector-id","#"+a),s("selector-class","\\."+a,0),s("selector-tag","&",0),{className:"selector-attr",begin:"\\[",end:"\\]"},{className:"selector-pseudo",begin:/:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},{begin:"\\(",end:"\\)",contains:l},{begin:"!important"}]};return n.push(e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,d,m,c,p),{case_insensitive:!0,illegal:"[=>'/<($\"]",contains:n}}},"1a06":function(e,t){e.exports=function(e){return{contains:[{className:"attribute",begin:"^dn",end:": ",excludeEnd:!0,starts:{end:"$",relevance:0},relevance:10},{className:"attribute",begin:"^\\w",end:": ",excludeEnd:!0,starts:{end:"$",relevance:0}},{className:"literal",begin:"^-",end:"$"},e.HASH_COMMENT_MODE]}}},"1b02":function(e,t){e.exports=function(e){var t={className:"string",begin:'(~)?"',end:'"',illegal:"\\n"},a={className:"symbol",begin:"#[a-zA-Z_]\\w*\\$?"};return{aliases:["pb","pbi"],keywords:"And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro NewList Not Or ProcedureReturn Protected Prototype PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion Swap To Wend While With XIncludeFile XOr Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL",contains:[e.COMMENT(";","$",{relevance:0}),{className:"function",begin:"\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",end:"\\(",excludeEnd:!0,returnBegin:!0,contains:[{className:"keyword",begin:"(Procedure|Declare)(C|CDLL|DLL)?",excludeEnd:!0},{className:"type",begin:"\\.\\w*"},e.UNDERSCORE_TITLE_MODE]},t,a]}}},"1b1c":function(e,t){e.exports=function(e){var t=["add","and","cmp","cmpg","cmpl","const","div","double","float","goto","if","int","long","move","mul","neg","new","nop","not","or","rem","return","shl","shr","sput","sub","throw","ushr","xor"],a=["aget","aput","array","check","execute","fill","filled","goto/16","goto/32","iget","instance","invoke","iput","monitor","packed","sget","sparse"],n=["transient","constructor","abstract","final","synthetic","public","private","protected","static","bridge","system"];return{aliases:["smali"],contains:[{className:"string",begin:'"',end:'"',relevance:0},e.COMMENT("#","$",{relevance:0}),{className:"keyword",variants:[{begin:"\\s*\\.end\\s[a-zA-Z0-9]*"},{begin:"^[ ]*\\.[a-zA-Z]*",relevance:0},{begin:"\\s:[a-zA-Z_0-9]*",relevance:0},{begin:"\\s("+n.join("|")+")"}]},{className:"built_in",variants:[{begin:"\\s("+t.join("|")+")\\s"},{begin:"\\s("+t.join("|")+")((\\-|/)[a-zA-Z0-9]+)+\\s",relevance:10},{begin:"\\s("+a.join("|")+")((\\-|/)[a-zA-Z0-9]+)*\\s",relevance:10}]},{className:"class",begin:"L[^(;:\n]*;",relevance:0},{begin:"[vp][0-9]+"}]}}},"1b4d":function(e,t){e.exports=function(e){var t=e.COMMENT(/\(\*/,/\*\)/),a={className:"attribute",begin:/^[ ]*[a-zA-Z][a-zA-Z-]*([\s-]+[a-zA-Z][a-zA-Z]*)*/},n={className:"meta",begin:/\?.*\?/},r={begin:/=/,end:/;/,contains:[t,n,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]};return{illegal:/\S/,contains:[t,a,r]}}},"1beb":function(e,t){e.exports=function(e){var t={begin:"\\b[gtps][A-Z]+[A-Za-z0-9_\\-]*\\b|\\$_[A-Z]+",relevance:0},a=[e.C_BLOCK_COMMENT_MODE,e.HASH_COMMENT_MODE,e.COMMENT("--","$"),e.COMMENT("[^:]//","$")],n=e.inherit(e.TITLE_MODE,{variants:[{begin:"\\b_*rig[A-Z]+[A-Za-z0-9_\\-]*"},{begin:"\\b_[a-z0-9\\-]+"}]}),r=e.inherit(e.TITLE_MODE,{begin:"\\b([A-Za-z0-9_\\-]+)\\b"});return{case_insensitive:!1,keywords:{keyword:"$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",literal:"SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",built_in:"put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract union unload wait write"},contains:[t,{className:"keyword",begin:"\\bend\\sif\\b"},{className:"function",beginKeywords:"function",end:"$",contains:[t,r,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE,n]},{className:"function",begin:"\\bend\\s+",end:"$",keywords:"end",contains:[r,n],relevance:0},{beginKeywords:"command on",end:"$",contains:[t,r,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE,n]},{className:"meta",variants:[{begin:"<\\?(rev|lc|livecode)",relevance:10},{begin:"<\\?"},{begin:"\\?>"}]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE,n].concat(a),illegal:";$|^\\[|^=|&|{"}}},"1f64":function(e,t){e.exports=function(e){return{keywords:{literal:"true false null",keyword:"byte short char int long boolean float double void def as in assert trait super this abstract static volatile transient public private protected synchronized final class interface enum if else for while switch case break default continue throw throws try catch finally implements extends new import package return instanceof"},contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",begin:'"""',end:'"""'},{className:"string",begin:"'''",end:"'''"},{className:"string",begin:"\\$/",end:"/\\$",relevance:10},e.APOS_STRING_MODE,{className:"regexp",begin:/~?\/[^\/\n]+\//,contains:[e.BACKSLASH_ESCAPE]},e.QUOTE_STRING_MODE,{className:"meta",begin:"^#!/usr/bin/env",end:"$",illegal:"\n"},e.BINARY_NUMBER_MODE,{className:"class",beginKeywords:"class interface trait enum",end:"{",illegal:":",contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},e.C_NUMBER_MODE,{className:"meta",begin:"@[A-Za-z]+"},{className:"string",begin:/[^\?]{0}[A-Za-z0-9_$]+ *:/},{begin:/\?/,end:/\:/},{className:"symbol",begin:"^\\s*[A-Za-z0-9_$]+:",relevance:0}],illegal:/#|<\//}}},"1f8a":function(e,t){e.exports=function(e){var t="exports register file shl array record property for mod while set ally label uses raise not stored class safecall var interface or private static exit index inherited to else stdcall override shr asm far resourcestring finalization packed virtual out and protected library do xorwrite goto near function end div overload object unit begin string on inline repeat until destructor write message program with read initialization except default nil if case cdecl in downto threadvar of try pascal const external constructor type public then implementation finally published procedure absolute reintroduce operator as is abstract alias assembler bitpacked break continue cppdecl cvar enumerator experimental platform deprecated unimplemented dynamic export far16 forward generic helper implements interrupt iochecks local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat specialize strict unaligned varargs ",a=[e.C_LINE_COMMENT_MODE,e.COMMENT(/\{/,/\}/,{relevance:0}),e.COMMENT(/\(\*/,/\*\)/,{relevance:10})],n={className:"meta",variants:[{begin:/\{\$/,end:/\}/},{begin:/\(\*\$/,end:/\*\)/}]},r={className:"string",begin:/'/,end:/'/,contains:[{begin:/''/}]},i={className:"string",begin:/(#\d+)+/},s={begin:e.IDENT_RE+"\\s*=\\s*class\\s*\\(",returnBegin:!0,contains:[e.TITLE_MODE]},o={className:"function",beginKeywords:"function constructor destructor procedure",end:/[:;]/,keywords:"function constructor|10 destructor|10 procedure|10",contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,keywords:t,contains:[r,i,n].concat(a)},n].concat(a)};return{aliases:["dpr","dfm","pas","pascal","freepascal","lazarus","lpr","lfm"],case_insensitive:!0,keywords:t,illegal:/"|\$[G-Zg-z]|\/\*|<\/|\|/,contains:[r,i,e.NUMBER_MODE,s,o,n].concat(a)}}},2265:function(e,t){e.exports=function(e){var t={keyword:"in isa where baremodule begin break catch ccall const continue do else elseif end export false finally for function global if import importall let local macro module quote return true try using while type immutable abstract bitstype typealias ",literal:"true false ARGS C_NULL DevNull ENDIAN_BOM ENV I Inf Inf16 Inf32 Inf64 InsertionSort JULIA_HOME LOAD_PATH MergeSort NaN NaN16 NaN32 NaN64 PROGRAM_FILE QuickSort RoundDown RoundFromZero RoundNearest RoundNearestTiesAway RoundNearestTiesUp RoundToZero RoundUp STDERR STDIN STDOUT VERSION catalan e|0 eu|0 eulergamma golden im nothing pi γ π φ ",built_in:"ANY AbstractArray AbstractChannel AbstractFloat AbstractMatrix AbstractRNG AbstractSerializer AbstractSet AbstractSparseArray AbstractSparseMatrix AbstractSparseVector AbstractString AbstractUnitRange AbstractVecOrMat AbstractVector Any ArgumentError Array AssertionError Associative Base64DecodePipe Base64EncodePipe Bidiagonal BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError BufferStream CachingPool CapturedException CartesianIndex CartesianRange Cchar Cdouble Cfloat Channel Char Cint Cintmax_t Clong Clonglong ClusterManager Cmd CodeInfo Colon Complex Complex128 Complex32 Complex64 CompositeException Condition ConjArray ConjMatrix ConjVector Cptrdiff_t Cshort Csize_t Cssize_t Cstring Cuchar Cuint Cuintmax_t Culong Culonglong Cushort Cwchar_t Cwstring DataType Date DateFormat DateTime DenseArray DenseMatrix DenseVecOrMat DenseVector Diagonal Dict DimensionMismatch Dims DirectIndexString Display DivideError DomainError EOFError EachLine Enum Enumerate ErrorException Exception ExponentialBackOff Expr Factorization FileMonitor Float16 Float32 Float64 Function Future GlobalRef GotoNode HTML Hermitian IO IOBuffer IOContext IOStream IPAddr IPv4 IPv6 IndexCartesian IndexLinear IndexStyle InexactError InitError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException InvalidStateException Irrational KeyError LabelNode LinSpace LineNumberNode LoadError LowerTriangular MIME Matrix MersenneTwister Method MethodError MethodTable Module NTuple NewvarNode NullException Nullable Number ObjectIdDict OrdinalRange OutOfMemoryError OverflowError Pair ParseError PartialQuickSort PermutedDimsArray Pipe PollingFileWatcher ProcessExitedException Ptr QuoteNode RandomDevice Range RangeIndex Rational RawFD ReadOnlyMemoryError Real ReentrantLock Ref Regex RegexMatch RemoteChannel RemoteException RevString RoundingMode RowVector SSAValue SegmentationFault SerializationState Set SharedArray SharedMatrix SharedVector Signed SimpleVector Slot SlotNumber SparseMatrixCSC SparseVector StackFrame StackOverflowError StackTrace StepRange StepRangeLen StridedArray StridedMatrix StridedVecOrMat StridedVector String SubArray SubString SymTridiagonal Symbol Symmetric SystemError TCPSocket Task Text TextDisplay Timer Tridiagonal Tuple Type TypeError TypeMapEntry TypeMapLevel TypeName TypeVar TypedSlot UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UndefRefError UndefVarError UnicodeError UniformScaling Union UnionAll UnitRange Unsigned UpperTriangular Val Vararg VecElement VecOrMat Vector VersionNumber Void WeakKeyDict WeakRef WorkerConfig WorkerPool "},a="[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*",n={lexemes:a,keywords:t,illegal:/<\//},r={className:"number",begin:/(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,relevance:0},i={className:"string",begin:/'(.|\\[xXuU][a-zA-Z0-9]+)'/},s={className:"subst",begin:/\$\(/,end:/\)/,keywords:t},o={className:"variable",begin:"\\$"+a},l={className:"string",contains:[e.BACKSLASH_ESCAPE,s,o],variants:[{begin:/\w*"""/,end:/"""\w*/,relevance:10},{begin:/\w*"/,end:/"\w*/}]},_={className:"string",contains:[e.BACKSLASH_ESCAPE,s,o],begin:"`",end:"`"},c={className:"meta",begin:"@"+a},d={className:"comment",variants:[{begin:"#=",end:"=#",relevance:10},{begin:"#",end:"$"}]};return n.contains=[r,i,l,_,c,d,e.HASH_COMMENT_MODE,{className:"keyword",begin:"\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"},{begin:/<:/}],s.contains=n.contains,n}},2425:function(e,t){e.exports=function(e){var t={keyword:"module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",meta:"inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing",built_in:"some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"},a=e.COMMENT("%","$"),n={className:"number",begin:"0'.\\|0[box][0-9a-fA-F]*"},r=e.inherit(e.APOS_STRING_MODE,{relevance:0}),i=e.inherit(e.QUOTE_STRING_MODE,{relevance:0}),s={className:"subst",begin:"\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",relevance:0};i.contains.push(s);var o={className:"built_in",variants:[{begin:"<=>"},{begin:"<=",relevance:0},{begin:"=>",relevance:0},{begin:"/\\\\"},{begin:"\\\\/"}]},l={className:"built_in",variants:[{begin:":-\\|--\x3e"},{begin:"=",relevance:0}]};return{aliases:["m","moo"],keywords:t,contains:[o,l,a,e.C_BLOCK_COMMENT_MODE,n,e.NUMBER_MODE,r,i,{begin:/:-/}]}}},2468:function(e,t){e.exports=function(e){var t={className:"comment",begin:/\$noop\(/,end:/\)/,contains:[{begin:/\(/,end:/\)/,contains:["self",{begin:/\\./}]}],relevance:10},a={className:"keyword",begin:/\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,end:/\(/,excludeEnd:!0},n={className:"variable",begin:/%[_a-zA-Z0-9:]*/,end:"%"},r={className:"symbol",begin:/\\./};return{contains:[t,a,n,r]}}},"25bd":function(e,t){e.exports=function(e){var t="[a-zA-Z_][\\w.]*",a="<\\?(lasso(script)?|=)",n="\\]|\\?>",r={literal:"true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",built_in:"array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",keyword:"cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"},i=e.COMMENT("\x3c!--","--\x3e",{relevance:0}),s={className:"meta",begin:"\\[noprocess\\]",starts:{end:"\\[/noprocess\\]",returnEnd:!0,contains:[i]}},o={className:"meta",begin:"\\[/noprocess|"+a},l={className:"symbol",begin:"'"+t+"'"},_=[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.inherit(e.C_NUMBER_MODE,{begin:e.C_NUMBER_RE+"|(-?infinity|NaN)\\b"}),e.inherit(e.APOS_STRING_MODE,{illegal:null}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),{className:"string",begin:"`",end:"`"},{variants:[{begin:"[#$]"+t},{begin:"#",end:"\\d+",illegal:"\\W"}]},{className:"type",begin:"::\\s*",end:t,illegal:"\\W"},{className:"params",variants:[{begin:"-(?!infinity)"+t,relevance:0},{begin:"(\\.\\.\\.)"}]},{begin:/(->|\.)\s*/,relevance:0,contains:[l]},{className:"class",beginKeywords:"define",returnEnd:!0,end:"\\(|=>",contains:[e.inherit(e.TITLE_MODE,{begin:t+"(=(?!>))?|[-+*/%](?!>)"})]}];return{aliases:["ls","lassoscript"],case_insensitive:!0,lexemes:t+"|&[lg]t;",keywords:r,contains:[{className:"meta",begin:n,relevance:0,starts:{end:"\\[|"+a,returnEnd:!0,relevance:0,contains:[i]}},s,o,{className:"meta",begin:"\\[no_square_brackets",starts:{end:"\\[/no_square_brackets\\]",lexemes:t+"|&[lg]t;",keywords:r,contains:[{className:"meta",begin:n,relevance:0,starts:{end:"\\[noprocess\\]|"+a,returnEnd:!0,contains:[i]}},s,o].concat(_)}},{className:"meta",begin:"\\[",relevance:0},{className:"meta",begin:"^#!",end:"lasso9$",relevance:10}].concat(_)}}},2639:function(e,t){e.exports=function(e){var t="ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts",a={keyword:"if then else do while until for loop import with is as where when by data constant integer real text name boolean symbol infix prefix postfix block tree",literal:"true false nil",built_in:"in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin acos atan exp expm1 log log2 log10 log1p pi at text_length text_range text_find text_replace contains page slide basic_slide title_slide title subtitle fade_in fade_out fade_at clear_color color line_color line_width texture_wrap texture_transform texture scale_?x scale_?y scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y rotate_?z? rectangle circle ellipse sphere path line_to move_to quad_to curve_to theme background contents locally time mouse_?x mouse_?y mouse_buttons "+t},n={className:"string",begin:'"',end:'"',illegal:"\\n"},r={className:"string",begin:"'",end:"'",illegal:"\\n"},i={className:"string",begin:"<<",end:">>"},s={className:"number",begin:"[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"},o={beginKeywords:"import",end:"$",keywords:a,contains:[n]},l={className:"function",begin:/[a-z][^\n]*->/,returnBegin:!0,end:/->/,contains:[e.inherit(e.TITLE_MODE,{starts:{endsWithParent:!0,keywords:a}})]};return{aliases:["tao"],lexemes:/[a-zA-Z][a-zA-Z0-9_?]*/,keywords:a,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,r,i,l,o,s,e.NUMBER_MODE]}}},"268a":function(e,t){e.exports=function(e){var t="module schema namespace boundary-space preserve no-preserve strip default collation base-uri ordering context decimal-format decimal-separator copy-namespaces empty-sequence except exponent-separator external grouping-separator inherit no-inherit lax minus-sign per-mille percent schema-attribute schema-element strict unordered zero-digit declare import option function validate variable for at in let where order group by return if then else tumbling sliding window start when only end previous next stable ascending descending allowing empty greatest least some every satisfies switch case typeswitch try catch and or to union intersect instance of treat as castable cast map array delete insert into replace value rename copy modify update",a="item document-node node attribute document element comment namespace namespace-node processing-instruction text construction xs:anyAtomicType xs:untypedAtomic xs:duration xs:time xs:decimal xs:float xs:double xs:gYearMonth xs:gYear xs:gMonthDay xs:gMonth xs:gDay xs:boolean xs:base64Binary xs:hexBinary xs:anyURI xs:QName xs:NOTATION xs:dateTime xs:dateTimeStamp xs:date xs:string xs:normalizedString xs:token xs:language xs:NMTOKEN xs:Name xs:NCName xs:ID xs:IDREF xs:ENTITY xs:integer xs:nonPositiveInteger xs:negativeInteger xs:long xs:int xs:short xs:byte xs:nonNegativeInteger xs:unisignedLong xs:unsignedInt xs:unsignedShort xs:unsignedByte xs:positiveInteger xs:yearMonthDuration xs:dayTimeDuration",n="eq ne lt le gt ge is self:: child:: descendant:: descendant-or-self:: attribute:: following:: following-sibling:: parent:: ancestor:: ancestor-or-self:: preceding:: preceding-sibling:: NaN",r={className:"built_in",variants:[{begin:/\barray\:/,end:/(?:append|filter|flatten|fold\-(?:left|right)|for-each(?:\-pair)?|get|head|insert\-before|join|put|remove|reverse|size|sort|subarray|tail)\b/},{begin:/\bmap\:/,end:/(?:contains|entry|find|for\-each|get|keys|merge|put|remove|size)\b/},{begin:/\bmath\:/,end:/(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/},{begin:/\bop\:/,end:/\(/,excludeEnd:!0},{begin:/\bfn\:/,end:/\(/,excludeEnd:!0},{begin:/[^<\/\$\:'"-]\b(?:abs|accumulator\-(?:after|before)|adjust\-(?:date(?:Time)?|time)\-to\-timezone|analyze\-string|apply|available\-(?:environment\-variables|system\-properties)|avg|base\-uri|boolean|ceiling|codepoints?\-(?:equal|to\-string)|collation\-key|collection|compare|concat|contains(?:\-token)?|copy\-of|count|current(?:\-)?(?:date(?:Time)?|time|group(?:ing\-key)?|output\-uri|merge\-(?:group|key))?data|dateTime|days?\-from\-(?:date(?:Time)?|duration)|deep\-equal|default\-(?:collation|language)|distinct\-values|document(?:\-uri)?|doc(?:\-available)?|element\-(?:available|with\-id)|empty|encode\-for\-uri|ends\-with|environment\-variable|error|escape\-html\-uri|exactly\-one|exists|false|filter|floor|fold\-(?:left|right)|for\-each(?:\-pair)?|format\-(?:date(?:Time)?|time|integer|number)|function\-(?:arity|available|lookup|name)|generate\-id|has\-children|head|hours\-from\-(?:dateTime|duration|time)|id(?:ref)?|implicit\-timezone|in\-scope\-prefixes|index\-of|innermost|insert\-before|iri\-to\-uri|json\-(?:doc|to\-xml)|key|lang|last|load\-xquery\-module|local\-name(?:\-from\-QName)?|(?:lower|upper)\-case|matches|max|minutes\-from\-(?:dateTime|duration|time)|min|months?\-from\-(?:date(?:Time)?|duration)|name(?:space\-uri\-?(?:for\-prefix|from\-QName)?)?|nilled|node\-name|normalize\-(?:space|unicode)|not|number|one\-or\-more|outermost|parse\-(?:ietf\-date|json)|path|position|(?:prefix\-from\-)?QName|random\-number\-generator|regex\-group|remove|replace|resolve\-(?:QName|uri)|reverse|root|round(?:\-half\-to\-even)?|seconds\-from\-(?:dateTime|duration|time)|snapshot|sort|starts\-with|static\-base\-uri|stream\-available|string\-?(?:join|length|to\-codepoints)?|subsequence|substring\-?(?:after|before)?|sum|system\-property|tail|timezone\-from\-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type\-available|unordered|unparsed\-(?:entity|text)?\-?(?:public\-id|uri|available|lines)?|uri\-collection|xml\-to\-json|years?\-from\-(?:date(?:Time)?|duration)|zero\-or\-one)\b/},{begin:/\blocal\:/,end:/\(/,excludeEnd:!0},{begin:/\bzip\:/,end:/(?:zip\-file|(?:xml|html|text|binary)\-entry| (?:update\-)?entries)\b/},{begin:/\b(?:util|db|functx|app|xdmp|xmldb)\:/,end:/\(/,excludeEnd:!0}]},i={className:"title",begin:/\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,end:/;/},s={className:"variable",begin:/[\$][\w-:]+/},o={className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},l={className:"string",variants:[{begin:/"/,end:/"/,contains:[{begin:/""/,relevance:0}]},{begin:/'/,end:/'/,contains:[{begin:/''/,relevance:0}]}]},_={className:"meta",begin:/%[\w-:]+/},c={className:"comment",begin:"\\(:",end:":\\)",relevance:10,contains:[{className:"doctag",begin:"@\\w+"}]},d={beginKeywords:"element attribute comment document processing-instruction",end:"{",excludeEnd:!0},m={begin:/<([\w\._:\-]+)((\s*.*)=('|").*('|"))?>/,end:/(\/[\w\._:\-]+>)/,subLanguage:"xml",contains:[{begin:"{",end:"}",subLanguage:"xquery"},"self"]},p=[s,r,l,o,c,_,i,d,m];return{aliases:["xpath","xq"],case_insensitive:!1,lexemes:/[a-zA-Z\$][a-zA-Z0-9_:\-]*/,illegal:/(proc)|(abstract)|(extends)|(until)|(#)/,keywords:{keyword:t,type:a,literal:n},contains:p}}},"26bc":function(e,t){e.exports=function(e){var t="([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*";return{contains:[e.HASH_COMMENT_MODE,{begin:t,lexemes:t,keywords:{keyword:"function if in break next repeat else for return switch while try tryCatch stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ...",literal:"NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10"},relevance:0},{className:"number",begin:"0[xX][0-9a-fA-F]+[Li]?\\b",relevance:0},{className:"number",begin:"\\d+(?:[eE][+\\-]?\\d*)?L\\b",relevance:0},{className:"number",begin:"\\d+\\.(?!\\d)(?:i\\b)?",relevance:0},{className:"number",begin:"\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",relevance:0},{className:"number",begin:"\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",relevance:0},{begin:"`",end:"`",relevance:0},{className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:'"',end:'"'},{begin:"'",end:"'"}]}]}}},"28ad":function(e,t){e.exports=function(e){var t={className:"subst",begin:/\\[tn"\\]/},a={className:"string",begin:'"',end:'"',contains:[t]},n={className:"number",begin:e.C_NUMBER_RE},r={className:"literal",variants:[{begin:"\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b"},{begin:"\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b"},{begin:"\\b(?:FALSE|TRUE)\\b"},{begin:"\\b(?:ZERO_ROTATION)\\b"},{begin:"\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b"},{begin:"\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\b"}]},i={className:"built_in",begin:"\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"};return{illegal:":",contains:[a,{className:"comment",variants:[e.COMMENT("//","$"),e.COMMENT("/\\*","\\*/")]},n,{className:"section",variants:[{begin:"\\b(?:state|default)\\b"},{begin:"\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b"}]},i,r,{className:"type",begin:"\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\b"}]}}},2907:function(e,t){e.exports=function(e){var t={begin:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"},a={className:"meta",begin:/<\?(php)?|\?>/},n={className:"string",contains:[e.BACKSLASH_ESCAPE,a],variants:[{begin:'b"',end:'"'},{begin:"b'",end:"'"},e.inherit(e.APOS_STRING_MODE,{illegal:null}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null})]},r={variants:[e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE]};return{aliases:["php","php3","php4","php5","php6","php7"],case_insensitive:!0,keywords:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",contains:[e.HASH_COMMENT_MODE,e.COMMENT("//","$",{contains:[a]}),e.COMMENT("/\\*","\\*/",{contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.COMMENT("__halt_compiler.+?;",!1,{endsWithParent:!0,keywords:"__halt_compiler",lexemes:e.UNDERSCORE_IDENT_RE}),{className:"string",begin:/<<<['"]?\w+['"]?$/,end:/^\w+;?$/,contains:[e.BACKSLASH_ESCAPE,{className:"subst",variants:[{begin:/\$\w+/},{begin:/\{\$/,end:/\}/}]}]},a,{className:"keyword",begin:/\$this\b/},t,{begin:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{className:"function",beginKeywords:"function",end:/[;{]/,excludeEnd:!0,illegal:"\\$|\\[|%",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",begin:"\\(",end:"\\)",contains:["self",t,e.C_BLOCK_COMMENT_MODE,n,r]}]},{className:"class",beginKeywords:"class interface",end:"{",excludeEnd:!0,illegal:/[:\(\$"]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"namespace",end:";",illegal:/[\.']/,contains:[e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"use",end:";",contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"=>"},n,r]}}},"294a":function(e,t){e.exports=function(e){var t="(_*[ui](8|16|32|64|128))?",a="(_*f(32|64))?",n="[a-zA-Z_]\\w*[!?=]?",r="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?",i="[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?",s={keyword:"abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",literal:"false nil true"},o={className:"subst",begin:"#{",end:"}",keywords:s},l={className:"template-variable",variants:[{begin:"\\{\\{",end:"\\}\\}"},{begin:"\\{%",end:"%\\}"}],keywords:s};function _(e,t){var a=[{begin:e,end:t}];return a[0].contains=a,a}var c={className:"string",contains:[e.BACKSLASH_ESCAPE,o],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/`/,end:/`/},{begin:"%[Qwi]?\\(",end:"\\)",contains:_("\\(","\\)")},{begin:"%[Qwi]?\\[",end:"\\]",contains:_("\\[","\\]")},{begin:"%[Qwi]?{",end:"}",contains:_("{","}")},{begin:"%[Qwi]?<",end:">",contains:_("<",">")},{begin:"%[Qwi]?\\|",end:"\\|"},{begin:/<<-\w+$/,end:/^\s*\w+$/}],relevance:0},d={className:"string",variants:[{begin:"%q\\(",end:"\\)",contains:_("\\(","\\)")},{begin:"%q\\[",end:"\\]",contains:_("\\[","\\]")},{begin:"%q{",end:"}",contains:_("{","}")},{begin:"%q<",end:">",contains:_("<",">")},{begin:"%q\\|",end:"\\|"},{begin:/<<-'\w+'$/,end:/^\s*\w+$/}],relevance:0},m={begin:"(?!%})("+e.RE_STARTERS_RE+"|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",keywords:"case if select unless until when while",contains:[{className:"regexp",contains:[e.BACKSLASH_ESCAPE,o],variants:[{begin:"//[a-z]*",relevance:0},{begin:"/(?!\\/)",end:"/[a-z]*"}]}],relevance:0},p={className:"regexp",contains:[e.BACKSLASH_ESCAPE,o],variants:[{begin:"%r\\(",end:"\\)",contains:_("\\(","\\)")},{begin:"%r\\[",end:"\\]",contains:_("\\[","\\]")},{begin:"%r{",end:"}",contains:_("{","}")},{begin:"%r<",end:">",contains:_("<",">")},{begin:"%r\\|",end:"\\|"}],relevance:0},E={className:"meta",begin:"@\\[",end:"\\]",contains:[e.inherit(e.QUOTE_STRING_MODE,{className:"meta-string"})]},u=[l,c,d,p,m,E,e.HASH_COMMENT_MODE,{className:"class",beginKeywords:"class module struct",end:"$|;",illegal:/=/,contains:[e.HASH_COMMENT_MODE,e.inherit(e.TITLE_MODE,{begin:i}),{begin:"<"}]},{className:"class",beginKeywords:"lib enum union",end:"$|;",illegal:/=/,contains:[e.HASH_COMMENT_MODE,e.inherit(e.TITLE_MODE,{begin:i})],relevance:10},{beginKeywords:"annotation",end:"$|;",illegal:/=/,contains:[e.HASH_COMMENT_MODE,e.inherit(e.TITLE_MODE,{begin:i})],relevance:10},{className:"function",beginKeywords:"def",end:/\B\b/,contains:[e.inherit(e.TITLE_MODE,{begin:r,endsParent:!0})]},{className:"function",beginKeywords:"fun macro",end:/\B\b/,contains:[e.inherit(e.TITLE_MODE,{begin:r,endsParent:!0})],relevance:5},{className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"(\\!|\\?)?:",relevance:0},{className:"symbol",begin:":",contains:[c,{begin:r}],relevance:0},{className:"number",variants:[{begin:"\\b0b([01_]+)"+t},{begin:"\\b0o([0-7_]+)"+t},{begin:"\\b0x([A-Fa-f0-9_]+)"+t},{begin:"\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_*[-+]?[0-9_]*)?"+a+"(?!_)"},{begin:"\\b([1-9][0-9_]*|0)"+t}],relevance:0}];return o.contains=u,l.contains=u.slice(1),{aliases:["cr"],lexemes:n,keywords:s,contains:u}}},"29c8":function(e,t){e.exports=function(e){var t={className:"tag",begin:/\\/,relevance:0,contains:[{className:"name",variants:[{begin:/[a-zA-Z\u0430-\u044f\u0410-\u042f]+[*]?/},{begin:/[^a-zA-Z\u0430-\u044f\u0410-\u042f0-9]/}],starts:{endsWithParent:!0,relevance:0,contains:[{className:"string",variants:[{begin:/\[/,end:/\]/},{begin:/\{/,end:/\}/}]},{begin:/\s*=\s*/,endsWithParent:!0,relevance:0,contains:[{className:"number",begin:/-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/}]}]}}]};return{contains:[t,{className:"formula",contains:[t],relevance:0,variants:[{begin:/\$\$/,end:/\$\$/},{begin:/\$/,end:/\$/}]},e.COMMENT("%","$",{relevance:0})]}}},"2a39":function(e,t){e.exports=function(e){var t={keyword:"#available #colorLiteral #column #else #elseif #endif #file #fileLiteral #function #if #imageLiteral #line #selector #sourceLocation _ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype associativity break case catch class continue convenience default defer deinit didSet do dynamic dynamicType else enum extension fallthrough false fileprivate final for func get guard if import in indirect infix init inout internal is lazy left let mutating nil none nonmutating open operator optional override postfix precedence prefix private protocol Protocol public repeat required rethrows return right self Self set static struct subscript super switch throw throws true try try! try? Type typealias unowned var weak where while willSet",literal:"true false nil",built_in:"abs advance alignof alignofValue anyGenerator assert assertionFailure bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords enumerate equal fatalError filter find getBridgedObjectiveCType getVaList indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare map max maxElement min minElement numericCast overlaps partition posix precondition preconditionFailure print println quickSort readLine reduce reflect reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split startsWith stride strideof strideofValue swap toString transcode underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers withUnsafePointer withUnsafePointers withVaList zip"},a={className:"type",begin:"\\b[A-Z][\\wÀ-ʸ']*",relevance:0},n={className:"type",begin:"\\b[A-Z][\\wÀ-ʸ']*[!?]"},r=e.COMMENT("/\\*","\\*/",{contains:["self"]}),i={className:"subst",begin:/\\\(/,end:"\\)",keywords:t,contains:[]},s={className:"string",contains:[e.BACKSLASH_ESCAPE,i],variants:[{begin:/"""/,end:/"""/},{begin:/"/,end:/"/}]},o={className:"number",begin:"\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b",relevance:0};return i.contains=[o],{keywords:t,contains:[s,e.C_LINE_COMMENT_MODE,r,n,a,o,{className:"function",beginKeywords:"func",end:"{",excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/[A-Za-z$_][0-9A-Za-z$_]*/}),{begin:/</,end:/>/},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:t,contains:["self",o,s,e.C_BLOCK_COMMENT_MODE,{begin:":"}],illegal:/["']/}],illegal:/\[|%/},{className:"class",beginKeywords:"struct protocol class extension enum",keywords:t,end:"\\{",excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})]},{className:"meta",begin:"(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|@infix|@prefix|@postfix|@autoclosure|@testable|@available|@nonobjc|@NSApplicationMain|@UIApplicationMain)"},{beginKeywords:"import",end:/$/,contains:[e.C_LINE_COMMENT_MODE,r]}]}}},"2a93":function(e,t){e.exports=function(e){var t={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:"'''",end:"'''",relevance:10},{begin:'"""',end:'"""',relevance:10},{begin:'"',end:'"'},{begin:"'",end:"'"}]};return{aliases:["toml"],case_insensitive:!0,illegal:/\S/,contains:[e.COMMENT(";","$"),e.HASH_COMMENT_MODE,{className:"section",begin:/^\s*\[+/,end:/\]+/},{begin:/^[a-z0-9\[\]_\.-]+\s*=\s*/,end:"$",returnBegin:!0,contains:[{className:"attr",begin:/[a-z0-9\[\]_\.-]+/},{begin:/=/,endsWithParent:!0,relevance:0,contains:[{className:"literal",begin:/\bon|off|true|false|yes|no\b/},{className:"variable",variants:[{begin:/\$[\w\d"][\w\d_]*/},{begin:/\$\{(.*?)}/}]},t,{className:"number",begin:/([\+\-]+)?[\d]+_[\d_]+/},e.NUMBER_MODE]}]}]}}},"2b22":function(e,t){e.exports=function(e){return{contains:[{begin:/[^\u2401\u0001]+/,end:/[\u2401\u0001]/,excludeEnd:!0,returnBegin:!0,returnEnd:!1,contains:[{begin:/([^\u2401\u0001=]+)/,end:/=([^\u2401\u0001=]+)/,returnEnd:!0,returnBegin:!1,className:"attr"},{begin:/=/,end:/([\u2401\u0001])/,excludeEnd:!0,excludeBegin:!0,className:"string"}]}],case_insensitive:!0}}},"2c43":function(e,t,a){},"2ce7":function(e,t){e.exports=function(e){var t="([ui](8|16|32|64|128|size)|f(32|64))?",a="alignof as be box break const continue crate do else enum extern false fn for if impl in let loop match mod mut offsetof once priv proc pub pure ref return self Self sizeof static struct super trait true type typeof unsafe unsized use virtual while where yield move default",n="drop i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator Extend IntoIterator DoubleEndedIterator ExactSizeIterator SliceConcatExt ToString assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!";return{aliases:["rs"],keywords:{keyword:a,literal:"true false Some None Ok Err",built_in:n},lexemes:e.IDENT_RE+"!?",illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.COMMENT("/\\*","\\*/",{contains:["self"]}),e.inherit(e.QUOTE_STRING_MODE,{begin:/b?"/,illegal:null}),{className:"string",variants:[{begin:/r(#*)"(.|\n)*?"\1(?!#)/},{begin:/b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/}]},{className:"symbol",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:"number",variants:[{begin:"\\b0b([01_]+)"+t},{begin:"\\b0o([0-7_]+)"+t},{begin:"\\b0x([A-Fa-f0-9_]+)"+t},{begin:"\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)"+t}],relevance:0},{className:"function",beginKeywords:"fn",end:"(\\(|<)",excludeEnd:!0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"meta",begin:"#\\!?\\[",end:"\\]",contains:[{className:"meta-string",begin:/"/,end:/"/}]},{className:"class",beginKeywords:"type",end:";",contains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{endsParent:!0})],illegal:"\\S"},{className:"class",beginKeywords:"trait enum struct union",end:"{",contains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{endsParent:!0})],illegal:"[\\w\\d]"},{begin:e.IDENT_RE+"::",keywords:{built_in:n}},{begin:"->"}]}}},"2e11":function(e,t){e.exports=function(e){var t={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger case default function var with then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super case default function var void const let enum export import native __hasProp __extends __slice __bind __indexOf",literal:"true false null undefined yes no on off it that void",built_in:"npm require console print module global window document"},a="[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*",n=e.inherit(e.TITLE_MODE,{begin:a}),r={className:"subst",begin:/#\{/,end:/}/,keywords:t},i={className:"subst",begin:/#[A-Za-z$_]/,end:/(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,keywords:t},s=[e.BINARY_NUMBER_MODE,{className:"number",begin:"(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",relevance:0,starts:{end:"(\\s*/)?",relevance:0}},{className:"string",variants:[{begin:/'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE]},{begin:/'/,end:/'/,contains:[e.BACKSLASH_ESCAPE]},{begin:/"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,r,i]},{begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,r,i]},{begin:/\\/,end:/(\s|$)/,excludeEnd:!0}]},{className:"regexp",variants:[{begin:"//",end:"//[gim]*",contains:[r,e.HASH_COMMENT_MODE]},{begin:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{begin:"@"+a},{begin:"``",end:"``",excludeBegin:!0,excludeEnd:!0,subLanguage:"javascript"}];r.contains=s;var o={className:"params",begin:"\\(",returnBegin:!0,contains:[{begin:/\(/,end:/\)/,keywords:t,contains:["self"].concat(s)}]};return{aliases:["ls"],keywords:t,illegal:/\/\*/,contains:s.concat([e.COMMENT("\\/\\*","\\*\\/"),e.HASH_COMMENT_MODE,{className:"function",contains:[n,o],returnBegin:!0,variants:[{begin:"("+a+"\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B\\->\\*?",end:"\\->\\*?"},{begin:"("+a+"\\s*(?:=|:=)\\s*)?!?(\\(.*\\))?\\s*\\B[-~]{1,2}>\\*?",end:"[-~]{1,2}>\\*?"},{begin:"("+a+"\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B!?[-~]{1,2}>\\*?",end:"!?[-~]{1,2}>\\*?"}]},{className:"class",beginKeywords:"class",end:"$",illegal:/[:="\[\]]/,contains:[{beginKeywords:"extends",endsWithParent:!0,illegal:/[:="\[\]]/,contains:[n]},n]},{begin:a+":",end:":",returnBegin:!0,returnEnd:!0,relevance:0}])}}},"2e5d":function(e,t){e.exports=function(e){var t="\\[",a="\\]";return{aliases:["i7"],case_insensitive:!0,keywords:{keyword:"thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"},contains:[{className:"string",begin:'"',end:'"',relevance:0,contains:[{className:"subst",begin:t,end:a}]},{className:"section",begin:/^(Volume|Book|Part|Chapter|Section|Table)\b/,end:"$"},{begin:/^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,end:":",contains:[{begin:"\\(This",end:"\\)"}]},{className:"comment",begin:t,end:a,contains:["self"]}]}}},"2e7b":function(e,t){e.exports=function(e){var t="true false yes no null",a="^[ \\-]*",n="[a-zA-Z_][\\w\\-]*",r={className:"attr",variants:[{begin:a+n+":"},{begin:a+'"'+n+'":'},{begin:a+"'"+n+"':"}]},i={className:"template-variable",variants:[{begin:"{{",end:"}}"},{begin:"%{",end:"}"}]},s={className:"string",relevance:0,variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/\S+/}],contains:[e.BACKSLASH_ESCAPE,i]};return{case_insensitive:!0,aliases:["yml","YAML","yaml"],contains:[r,{className:"meta",begin:"^---s*$",relevance:10},{className:"string",begin:"[\\|>] *$",returnEnd:!0,contains:s.contains,end:r.variants[0].begin},{begin:"<%[%=-]?",end:"[%-]?%>",subLanguage:"ruby",excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:"!"+e.UNDERSCORE_IDENT_RE},{className:"type",begin:"!!"+e.UNDERSCORE_IDENT_RE},{className:"meta",begin:"&"+e.UNDERSCORE_IDENT_RE+"$"},{className:"meta",begin:"\\*"+e.UNDERSCORE_IDENT_RE+"$"},{className:"bullet",begin:"^ *-",relevance:0},e.HASH_COMMENT_MODE,{beginKeywords:t,keywords:{literal:t}},e.C_NUMBER_MODE,s]}}},"2e8e":function(e,t){e.exports=function(e){return{keywords:{keyword:"package import option optional required repeated group oneof",built_in:"double float int32 int64 uint32 uint64 sint32 sint64 fixed32 fixed64 sfixed32 sfixed64 bool string bytes",literal:"true false"},contains:[e.QUOTE_STRING_MODE,e.NUMBER_MODE,e.C_LINE_COMMENT_MODE,{className:"class",beginKeywords:"message enum service",end:/\{/,illegal:/\n/,contains:[e.inherit(e.TITLE_MODE,{starts:{endsWithParent:!0,excludeEnd:!0}})]},{className:"function",beginKeywords:"rpc",end:/;/,excludeEnd:!0,keywords:"rpc returns"},{begin:/^\s*[A-Z_]+/,end:/\s*=/,excludeEnd:!0}]}}},"2e9b":function(e,t){e.exports=function(e){return{contains:[{className:"function",begin:"#+[A-Za-z_0-9]*\\(",end:" {",returnBegin:!0,excludeEnd:!0,contains:[{className:"keyword",begin:"#+"},{className:"title",begin:"[A-Za-z_][A-Za-z_0-9]*"},{className:"params",begin:"\\(",end:"\\)",endsParent:!0,contains:[{className:"string",begin:'"',end:'"'},{className:"variable",begin:"[A-Za-z_][A-Za-z_0-9]*"}]}]}]}}},"305e":function(e,t){e.exports=function(e){var t="[A-Za-z_][0-9A-Za-z_]*",a={keyword:"if for while var new function do return void else break",literal:"true false null undefined NaN Infinity PI BackSlash DoubleQuote ForwardSlash NewLine SingleQuote Tab",built_in:"Abs Acos Area AreaGeodetic Asin Atan Atan2 Average Boolean Buffer BufferGeodetic Ceil Centroid Clip Console Constrain Contains Cos Count Crosses Cut Date DateAdd DateDiff Day Decode DefaultValue Dictionary Difference Disjoint Distance Distinct DomainCode DomainName Equals Exp Extent Feature FeatureSet FeatureSetById FeatureSetByTitle FeatureSetByUrl Filter First Floor Geometry Guid HasKey Hour IIf IndexOf Intersection Intersects IsEmpty Length LengthGeodetic Log Max Mean Millisecond Min Minute Month MultiPartToSinglePart Multipoint NextSequenceValue Now Number OrderBy Overlaps Point Polygon Polyline Pow Random Relate Reverse Round Second SetGeometry Sin Sort Sqrt Stdev Sum SymmetricDifference Tan Text Timestamp Today ToLocal Top Touches ToUTC TypeOf Union Variance Weekday When Within Year "},n={className:"symbol",begin:"\\$[feature|layer|map|value|view]+"},r={className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},i={className:"subst",begin:"\\$\\{",end:"\\}",keywords:a,contains:[]},s={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,i]};i.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,s,r,e.REGEXP_MODE];var o=i.contains.concat([e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]);return{aliases:["arcade"],keywords:a,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,s,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,r,{begin:/[{,]\s*/,relevance:0,contains:[{begin:t+"\\s*:",returnBegin:!0,relevance:0,contains:[{className:"attr",begin:t,relevance:0}]}]},{begin:"("+e.RE_STARTERS_RE+"|\\b(return)\\b)\\s*",keywords:"return",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+t+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:t},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:a,contains:o}]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:t}),{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:o}],illegal:/\[|%/},{begin:/\$[(.]/}],illegal:/#(?!!)/}}},"310f":function(e,t){e.exports=function(e){var t="\\d(_|\\d)*",a="[eE][-+]?"+t,n=t+"(\\."+t+")?("+a+")?",r="\\w+",i=t+"#"+r+"(\\."+r+")?#("+a+")?",s="\\b("+i+"|"+n+")";return{case_insensitive:!0,keywords:{keyword:"abs access after alias all and architecture array assert assume assume_guarantee attribute begin block body buffer bus case component configuration constant context cover disconnect downto default else elsif end entity exit fairness file for force function generate generic group guarded if impure in inertial inout is label library linkage literal loop map mod nand new next nor not null of on open or others out package parameter port postponed procedure process property protected pure range record register reject release rem report restrict restrict_guarantee return rol ror select sequence severity shared signal sla sll sra srl strong subtype then to transport type unaffected units until use variable view vmode vprop vunit wait when while with xnor xor",built_in:"boolean bit character integer time delay_length natural positive string bit_vector file_open_kind file_open_status std_logic std_logic_vector unsigned signed boolean_vector integer_vector std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed real_vector time_vector",literal:"false true note warning error failure line text side width"},illegal:"{",contains:[e.C_BLOCK_COMMENT_MODE,e.COMMENT("--","$"),e.QUOTE_STRING_MODE,{className:"number",begin:s,relevance:0},{className:"string",begin:"'(U|X|0|1|Z|W|L|H|-)'",contains:[e.BACKSLASH_ESCAPE]},{className:"symbol",begin:"'[A-Za-z](_?[A-Za-z0-9])*",contains:[e.BACKSLASH_ESCAPE]}]}}},"332f":function(e,t){e.exports=function(e){var t="[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",a=t+"(<"+t+"(\\s*,\\s*"+t+")*>)?",n="false synchronized int abstract float private char boolean var static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",r="\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",i={className:"number",begin:r,relevance:0};return{aliases:["jsp"],keywords:n,illegal:/<\/|#/,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"class",beginKeywords:"class interface",end:/[{;=]/,excludeEnd:!0,keywords:"class interface",illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"new throw return else",relevance:0},{className:"function",begin:"("+a+"\\s+)+"+e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:n,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"params",begin:/\(/,end:/\)/,keywords:n,relevance:0,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},i,{className:"meta",begin:"@[A-Za-z]+"}]}}},"351a":function(e,t){e.exports=function(e){return{aliases:["feature"],keywords:"Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",contains:[{className:"symbol",begin:"\\*",relevance:0},{className:"meta",begin:"@[^@\\s]+"},{begin:"\\|",end:"\\|\\w*$",contains:[{className:"string",begin:"[^|]+"}]},{className:"variable",begin:"<",end:">"},e.HASH_COMMENT_MODE,{className:"string",begin:'"""',end:'"""'},e.QUOTE_STRING_MODE]}}},3728:function(e,t){e.exports=function(e){var t=e.COMMENT("{","}",{contains:["self"]});return{subLanguage:"xml",relevance:0,contains:[e.COMMENT("^#","$"),e.COMMENT("\\^rem{","}",{relevance:10,contains:[t]}),{className:"meta",begin:"^@(?:BASE|USE|CLASS|OPTIONS)$",relevance:10},{className:"title",begin:"@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"},{className:"variable",begin:"\\$\\{?[\\w\\-\\.\\:]+\\}?"},{className:"keyword",begin:"\\^[\\w\\-\\.\\:]+"},{className:"number",begin:"\\^#[0-9a-fA-F]+"},e.C_NUMBER_MODE]}}},"399d":function(e,t){e.exports=function(e){var t="if then else elseif for thru do while unless step in and or not",a="true false unknown inf minf ind und %e %i %pi %phi %gamma",n=" abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest",r="_ __ %|0 %%|0";return{lexemes:"[A-Za-z_%][0-9A-Za-z_%]*",keywords:{keyword:t,literal:a,built_in:n,symbol:r},contains:[{className:"comment",begin:"/\\*",end:"\\*/",contains:["self"]},e.QUOTE_STRING_MODE,{className:"number",relevance:0,variants:[{begin:"\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"},{begin:"\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",relevance:10},{begin:"\\b(\\.\\d+|\\d+\\.\\d+)\\b"},{begin:"\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"}]}],illegal:/@/}}},"3c69":function(e,t){e.exports=function(e){return{lexemes:/[!#@\w]+/,keywords:{keyword:"N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank",built_in:"synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"},illegal:/;/,contains:[e.NUMBER_MODE,{className:"string",begin:"'",end:"'",illegal:"\\n"},{className:"string",begin:/"(\\"|\n\\|[^"\n])*"/},e.COMMENT('"',"$"),{className:"variable",begin:/[bwtglsav]:[\w\d_]*/},{className:"function",beginKeywords:"function function!",end:"$",relevance:0,contains:[e.TITLE_MODE,{className:"params",begin:"\\(",end:"\\)"}]},{className:"symbol",begin:/<[\w-]+>/}]}}},"3f38":function(e,t){e.exports=function(e){var t={variants:[e.COMMENT("--","$"),e.COMMENT("{-","-}",{contains:["self"]})]},a={className:"meta",begin:"{-#",end:"#-}"},n={className:"meta",begin:"^#",end:"$"},r={className:"type",begin:"\\b[A-Z][\\w']*",relevance:0},i={begin:"\\(",end:"\\)",illegal:'"',contains:[a,n,{className:"type",begin:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},e.inherit(e.TITLE_MODE,{begin:"[_a-z][\\w']*"}),t]},s={begin:"{",end:"}",contains:i.contains};return{aliases:["hs"],keywords:"let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",contains:[{beginKeywords:"module",end:"where",keywords:"module where",contains:[i,t],illegal:"\\W\\.|;"},{begin:"\\bimport\\b",end:"$",keywords:"import qualified as hiding",contains:[i,t],illegal:"\\W\\.|;"},{className:"class",begin:"^(\\s*)?(class|instance)\\b",end:"where",keywords:"class family instance where",contains:[r,i,t]},{className:"class",begin:"\\b(data|(new)?type)\\b",end:"$",keywords:"data family type newtype deriving",contains:[a,r,i,s,t]},{beginKeywords:"default",end:"$",contains:[r,i,t]},{beginKeywords:"infix infixl infixr",end:"$",contains:[e.C_NUMBER_MODE,t]},{begin:"\\bforeign\\b",end:"$",keywords:"foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",contains:[r,e.QUOTE_STRING_MODE,t]},{className:"meta",begin:"#!\\/usr\\/bin\\/env runhaskell",end:"$"},a,n,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,r,e.inherit(e.TITLE_MODE,{begin:"^[_a-z][\\w']*"}),t,{begin:"->|<-"}]}}},"40f4":function(e,t){e.exports=function(e){var t="do if then else end until while abort array attrib by call cards cards4 catname continue datalines datalines4 delete delim delimiter display dm drop endsas error file filename footnote format goto in infile informat input keep label leave length libname link list lostcard merge missing modify options output out page put redirect remove rename replace retain return select set skip startsas stop title update waitsas where window x systask add and alter as cascade check create delete describe distinct drop foreign from group having index insert into in key like message modify msgtype not null on or order primary references reset restrict select set table unique update validate view where",a="abs|addr|airy|arcos|arsin|atan|attrc|attrn|band|betainv|blshift|bnot|bor|brshift|bxor|byte|cdf|ceil|cexist|cinv|close|cnonct|collate|compbl|compound|compress|cos|cosh|css|curobs|cv|daccdb|daccdbsl|daccsl|daccsyd|dacctab|dairy|date|datejul|datepart|datetime|day|dclose|depdb|depdbsl|depdbsl|depsl|depsl|depsyd|depsyd|deptab|deptab|dequote|dhms|dif|digamma|dim|dinfo|dnum|dopen|doptname|doptnum|dread|dropnote|dsname|erf|erfc|exist|exp|fappend|fclose|fcol|fdelete|fetch|fetchobs|fexist|fget|fileexist|filename|fileref|finfo|finv|fipname|fipnamel|fipstate|floor|fnonct|fnote|fopen|foptname|foptnum|fpoint|fpos|fput|fread|frewind|frlen|fsep|fuzz|fwrite|gaminv|gamma|getoption|getvarc|getvarn|hbound|hms|hosthelp|hour|ibessel|index|indexc|indexw|input|inputc|inputn|int|intck|intnx|intrr|irr|jbessel|juldate|kurtosis|lag|lbound|left|length|lgamma|libname|libref|log|log10|log2|logpdf|logpmf|logsdf|lowcase|max|mdy|mean|min|minute|mod|month|mopen|mort|n|netpv|nmiss|normal|note|npv|open|ordinal|pathname|pdf|peek|peekc|pmf|point|poisson|poke|probbeta|probbnml|probchi|probf|probgam|probhypr|probit|probnegb|probnorm|probt|put|putc|putn|qtr|quote|ranbin|rancau|ranexp|rangam|range|rank|rannor|ranpoi|rantbl|rantri|ranuni|repeat|resolve|reverse|rewind|right|round|saving|scan|sdf|second|sign|sin|sinh|skewness|soundex|spedis|sqrt|std|stderr|stfips|stname|stnamel|substr|sum|symget|sysget|sysmsg|sysprod|sysrc|system|tan|tanh|time|timepart|tinv|tnonct|today|translate|tranwrd|trigamma|trim|trimn|trunc|uniform|upcase|uss|var|varfmt|varinfmt|varlabel|varlen|varname|varnum|varray|varrayx|vartype|verify|vformat|vformatd|vformatdx|vformatn|vformatnx|vformatw|vformatwx|vformatx|vinarray|vinarrayx|vinformat|vinformatd|vinformatdx|vinformatn|vinformatnx|vinformatw|vinformatwx|vinformatx|vlabel|vlabelx|vlength|vlengthx|vname|vnamex|vtype|vtypex|weekday|year|yyq|zipfips|zipname|zipnamel|zipstate",n="bquote|nrbquote|cmpres|qcmpres|compstor|datatyp|display|do|else|end|eval|global|goto|if|index|input|keydef|label|left|length|let|local|lowcase|macro|mend|nrbquote|nrquote|nrstr|put|qcmpres|qleft|qlowcase|qscan|qsubstr|qsysfunc|qtrim|quote|qupcase|scan|str|substr|superq|syscall|sysevalf|sysexec|sysfunc|sysget|syslput|sysprod|sysrc|sysrput|then|to|trim|unquote|until|upcase|verify|while|window";return{aliases:["sas","SAS"],case_insensitive:!0,keywords:{literal:"null missing _all_ _automatic_ _character_ _infile_ _n_ _name_ _null_ _numeric_ _user_ _webout_",meta:t},contains:[{className:"keyword",begin:/^\s*(proc [\w\d_]+|data|run|quit)[\s\;]/},{className:"variable",begin:/\&[a-zA-Z_\&][a-zA-Z0-9_]*\.?/},{className:"emphasis",begin:/^\s*datalines|cards.*;/,end:/^\s*;\s*$/},{className:"built_in",begin:"%("+n+")"},{className:"name",begin:/%[a-zA-Z_][a-zA-Z_0-9]*/},{className:"meta",begin:"[^%]("+a+")[(]"},{className:"string",variants:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},e.COMMENT("\\*",";"),e.C_BLOCK_COMMENT_MODE]}}},4108:function(e,t){e.exports=function(e){var t="[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",a="(\\-|\\+)?\\d+([./]\\d+)?",n=a+"[+\\-]"+a+"i",r={"builtin-name":"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"},i={className:"meta",begin:"^#!",end:"$"},s={className:"literal",begin:"(#t|#f|#\\\\"+t+"|#\\\\.)"},o={className:"number",variants:[{begin:a,relevance:0},{begin:n,relevance:0},{begin:"#b[0-1]+(/[0-1]+)?"},{begin:"#o[0-7]+(/[0-7]+)?"},{begin:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},l=e.QUOTE_STRING_MODE,_=[e.COMMENT(";","$",{relevance:0}),e.COMMENT("#\\|","\\|#")],c={begin:t,relevance:0},d={className:"symbol",begin:"'"+t},m={endsWithParent:!0,relevance:0},p={variants:[{begin:/'/},{begin:"`"}],contains:[{begin:"\\(",end:"\\)",contains:["self",s,l,o,c,d]}]},E={className:"name",begin:t,lexemes:t,keywords:r},u={begin:/lambda/,endsWithParent:!0,returnBegin:!0,contains:[E,{begin:/\(/,end:/\)/,endsParent:!0,contains:[c]}]},S={variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}],contains:[u,E,m]};return m.contains=[s,o,l,c,d,p,S].concat(_),{illegal:/\S/,contains:[i,o,l,d,p,S].concat(_)}}},4272:function(e,t){e.exports=function(e){return{case_insensitive:!1,lexemes:"[a-zA-Z][a-zA-Z0-9_-]*",keywords:{keyword:"base-uri child-src connect-src default-src font-src form-action frame-ancestors frame-src img-src media-src object-src plugin-types report-uri sandbox script-src style-src"},contains:[{className:"string",begin:"'",end:"'"},{className:"attribute",begin:"^Content",end:":",excludeEnd:!0}]}}},4396:function(e,t){e.exports=function(e){var t={begin:/[a-z][A-Za-z0-9_]*/,relevance:0},a={className:"symbol",variants:[{begin:/[A-Z][a-zA-Z0-9_]*/},{begin:/_[A-Za-z0-9_]*/}],relevance:0},n={begin:/\(/,end:/\)/,relevance:0},r={begin:/\[/,end:/\]/},i={className:"comment",begin:/%/,end:/$/,contains:[e.PHRASAL_WORDS_MODE]},s={className:"string",begin:/`/,end:/`/,contains:[e.BACKSLASH_ESCAPE]},o={className:"string",begin:/0\'(\\\'|.)/},l={className:"string",begin:/0\'\\s/},_={begin:/:-/},c=[t,a,n,_,r,i,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,s,o,l,e.C_NUMBER_MODE];return n.contains=c,r.contains=c,{contains:c.concat([{begin:/\.$/}])}}},"44b5":function(e,t){e.exports=function(e){return{aliases:["docker"],case_insensitive:!0,keywords:"from maintainer expose env arg user onbuild stopsignal",contains:[e.HASH_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.NUMBER_MODE,{beginKeywords:"run cmd entrypoint volume add copy workdir label healthcheck shell",starts:{end:/[^\\]$/,subLanguage:"bash"}}],illegal:"</"}}},"44e5":function(e,t){e.exports=function(e){return{disableAutodetect:!0}}},"46ae":function(e,t){e.exports=function(e){var t={keyword:"rec with let in inherit assert if else then",literal:"true false or and null",built_in:"import abort baseNameOf dirOf isNull builtins map removeAttrs throw toString derivation"},a={className:"subst",begin:/\$\{/,end:/}/,keywords:t},n={begin:/[a-zA-Z0-9-_]+(\s*=)/,returnBegin:!0,relevance:0,contains:[{className:"attr",begin:/\S+/}]},r={className:"string",contains:[a],variants:[{begin:"''",end:"''"},{begin:'"',end:'"'}]},i=[e.NUMBER_MODE,e.HASH_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,r,n];return a.contains=i,{aliases:["nixos"],keywords:t,contains:i}}},"485f":function(e,t){e.exports=function(e){var t={className:"params",begin:"\\(",end:"\\)"},a={literal:".False. .True.",keyword:"kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data",built_in:"alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_ofacosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image"};return{case_insensitive:!0,aliases:["f90","f95"],keywords:a,illegal:/\/\*/,contains:[e.inherit(e.APOS_STRING_MODE,{className:"string",relevance:0}),e.inherit(e.QUOTE_STRING_MODE,{className:"string",relevance:0}),{className:"function",beginKeywords:"subroutine function program",illegal:"[${=\\n]",contains:[e.UNDERSCORE_TITLE_MODE,t]},e.COMMENT("!","$",{relevance:0}),{className:"number",begin:"(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?",relevance:0}]}}},"48b8":function(e,t){e.exports=function(e){return{aliases:["patch"],contains:[{className:"meta",relevance:10,variants:[{begin:/^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},{begin:/^\*\*\* +\d+,\d+ +\*\*\*\*$/},{begin:/^\-\-\- +\d+,\d+ +\-\-\-\-$/}]},{className:"comment",variants:[{begin:/Index: /,end:/$/},{begin:/={3,}/,end:/$/},{begin:/^\-{3}/,end:/$/},{begin:/^\*{3} /,end:/$/},{begin:/^\+{3}/,end:/$/},{begin:/\*{5}/,end:/\*{5}$/}]},{className:"addition",begin:"^\\+",end:"$"},{className:"deletion",begin:"^\\-",end:"$"},{className:"addition",begin:"^\\!",end:"$"}]}}},"4a5e":function(e,t){e.exports=function(e){return{aliases:["capnp"],keywords:{keyword:"struct enum interface union group import using const annotation extends in of on as with from fixed",built_in:"Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 Text Data AnyPointer AnyStruct Capability List",literal:"true false"},contains:[e.QUOTE_STRING_MODE,e.NUMBER_MODE,e.HASH_COMMENT_MODE,{className:"meta",begin:/@0x[\w\d]{16};/,illegal:/\n/},{className:"symbol",begin:/@\d+\b/},{className:"class",beginKeywords:"struct enum",end:/\{/,illegal:/\n/,contains:[e.inherit(e.TITLE_MODE,{starts:{endsWithParent:!0,excludeEnd:!0}})]},{className:"class",beginKeywords:"interface",end:/\{/,illegal:/\n/,contains:[e.inherit(e.TITLE_MODE,{starts:{endsWithParent:!0,excludeEnd:!0}})]}]}}},"4dd1":function(e,t){e.exports=function(e){var t="[A-Za-z$_][0-9A-Za-z$_]*",a={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},n={className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},r={className:"subst",begin:"\\$\\{",end:"\\}",keywords:a,contains:[]},i={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,r]};r.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,n,e.REGEXP_MODE];var s=r.contains.concat([e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]);return{aliases:["js","jsx"],keywords:a,contains:[{className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},{className:"meta",begin:/^#!/,end:/$/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,{begin:/[{,]\s*/,relevance:0,contains:[{begin:t+"\\s*:",returnBegin:!0,relevance:0,contains:[{className:"attr",begin:t,relevance:0}]}]},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+t+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:t},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:a,contains:s}]}]},{begin:/</,end:/(\/\w+|\w+\/)>/,subLanguage:"xml",contains:[{begin:/<\w+\s*\/>/,skip:!0},{begin:/<\w+/,end:/(\/\w+|\w+\/)>/,skip:!0,contains:[{begin:/<\w+\s*\/>/,skip:!0},"self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:t}),{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:s}],illegal:/\[|%/},{begin:/\$[(.]/},e.METHOD_GUARD,{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"constructor get set",end:/\{/,excludeEnd:!0}],illegal:/#(?!!)/}}},"4f4a":function(e,t){e.exports=function(e){return{case_insensitive:!0,contains:[{className:"meta",begin:"^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",relevance:10},e.COMMENT("^\\s*(!=#|=#|-#|/).*$",!1,{relevance:0}),{begin:"^\\s*(-|=|!=)(?!#)",starts:{end:"\\n",subLanguage:"ruby"}},{className:"tag",begin:"^\\s*%",contains:[{className:"selector-tag",begin:"\\w+"},{className:"selector-id",begin:"#[\\w-]+"},{className:"selector-class",begin:"\\.[\\w-]+"},{begin:"{\\s*",end:"\\s*}",contains:[{begin:":\\w+\\s*=>",end:",\\s+",returnBegin:!0,endsWithParent:!0,contains:[{className:"attr",begin:":\\w+"},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{begin:"\\w+",relevance:0}]}]},{begin:"\\(\\s*",end:"\\s*\\)",excludeEnd:!0,contains:[{begin:"\\w+\\s*=",end:"\\s+",returnBegin:!0,endsWithParent:!0,contains:[{className:"attr",begin:"\\w+",relevance:0},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{begin:"\\w+",relevance:0}]}]}]},{begin:"^\\s*[=~]\\s*"},{begin:"#{",starts:{end:"}",subLanguage:"ruby"}}]}}},5027:function(e,t){e.exports=function(e){var t={keyword:"and case default else elsif false if in import enherits node or true undef unless main settings $string ",literal:"alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted",built_in:"architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"},a=e.COMMENT("#","$"),n="([A-Za-z_]|::)(\\w|::)*",r=e.inherit(e.TITLE_MODE,{begin:n}),i={className:"variable",begin:"\\$"+n},s={className:"string",contains:[e.BACKSLASH_ESCAPE,i],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/}]};return{aliases:["pp"],contains:[a,i,s,{beginKeywords:"class",end:"\\{|;",illegal:/=/,contains:[r,a]},{beginKeywords:"define",end:/\{/,contains:[{className:"section",begin:e.IDENT_RE,endsParent:!0}]},{begin:e.IDENT_RE+"\\s+\\{",returnBegin:!0,end:/\S/,contains:[{className:"keyword",begin:e.IDENT_RE},{begin:/\{/,end:/\}/,keywords:t,relevance:0,contains:[s,a,{begin:"[a-zA-Z_]+\\s*=>",returnBegin:!0,end:"=>",contains:[{className:"attr",begin:e.IDENT_RE}]},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},i]}],relevance:0}]}}},5051:function(e,t){e.exports=function(e){var t={variants:[e.COMMENT("--","$"),e.COMMENT("{-","-}",{contains:["self"]})]},a={className:"type",begin:"\\b[A-Z][\\w']*",relevance:0},n={begin:"\\(",end:"\\)",illegal:'"',contains:[{className:"type",begin:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},t]},r={begin:"{",end:"}",contains:n.contains},i={className:"string",begin:"'\\\\?.",end:"'",illegal:"."};return{keywords:"let in if then else case of where module import exposing type alias as infix infixl infixr port effect command subscription",contains:[{beginKeywords:"port effect module",end:"exposing",keywords:"port effect module where command subscription exposing",contains:[n,t],illegal:"\\W\\.|;"},{begin:"import",end:"$",keywords:"import as exposing",contains:[n,t],illegal:"\\W\\.|;"},{begin:"type",end:"$",keywords:"type alias",contains:[a,n,r,t]},{beginKeywords:"infix infixl infixr",end:"$",contains:[e.C_NUMBER_MODE,t]},{begin:"port",end:"$",keywords:"port",contains:[t]},i,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,a,e.inherit(e.TITLE_MODE,{begin:"^[_a-z][\\w']*"}),t,{begin:"->|<-"}],illegal:/;/}}},"508e":function(e,t){e.exports=function(e){var t={begin:"`[\\s\\S]",relevance:0},a={className:"variable",variants:[{begin:/\$[\w\d][\w\d_:]*/}]},n={className:"literal",begin:/\$(null|true|false)\b/},r={className:"string",variants:[{begin:/"/,end:/"/},{begin:/@"/,end:/^"@/}],contains:[t,a,{className:"variable",begin:/\$[A-z]/,end:/[^A-z]/}]},i={className:"string",variants:[{begin:/'/,end:/'/},{begin:/@'/,end:/^'@/}]},s={className:"doctag",variants:[{begin:/\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/},{begin:/\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/}]},o=e.inherit(e.COMMENT(null,null),{variants:[{begin:/#/,end:/$/},{begin:/<#/,end:/#>/}],contains:[s]});return{aliases:["ps"],lexemes:/-?[A-z\.\-]+/,case_insensitive:!0,keywords:{keyword:"if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch",built_in:"Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct",nomarkup:"-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace"},contains:[t,e.NUMBER_MODE,r,i,n,a,o]}}},"51ab":function(e,t){e.exports=function(e){return{aliases:["clean","icl","dcl"],keywords:{keyword:"if let in with where case of class instance otherwise implementation definition system module from import qualified as special code inline foreign export ccall stdcall generic derive infix infixl infixr",built_in:"Int Real Char Bool",literal:"True False"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,{begin:"->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"}]}}},"56b2":function(e,t){e.exports=function(e){var t="[ \\t\\f]*",a="[ \\t\\f]+",n="("+t+"[:=]"+t+"|"+a+")",r="([^\\\\\\W:= \\t\\f\\n]|\\\\.)+",i="([^\\\\:= \\t\\f\\n]|\\\\.)+",s={end:n,relevance:0,starts:{className:"string",end:/$/,relevance:0,contains:[{begin:"\\\\\\n"}]}};return{case_insensitive:!0,illegal:/\S/,contains:[e.COMMENT("^\\s*[!#]","$"),{begin:r+n,returnBegin:!0,contains:[{className:"attr",begin:r,endsParent:!0,relevance:0}],starts:s},{begin:i+n,returnBegin:!0,relevance:0,contains:[{className:"meta",begin:i,endsParent:!0,relevance:0}],starts:s},{className:"attr",relevance:0,begin:i+t+"$"}]}}},5921:function(e,t){e.exports=function(e){var t={className:"literal",begin:"[\\+\\-]",relevance:0};return{aliases:["bf"],contains:[e.COMMENT("[^\\[\\]\\.,\\+\\-<> \r\n]","[\\[\\]\\.,\\+\\-<> \r\n]",{returnEnd:!0,relevance:0}),{className:"title",begin:"[\\[\\]]",relevance:0},{className:"string",begin:"[\\.,]",relevance:0},{begin:/\+\+|\-\-/,returnBegin:!0,contains:[t]},t]}}},"5a3e":function(e,t){e.exports=function(e){return{aliases:["vbs"],case_insensitive:!0,keywords:{keyword:"call class const dim do loop erase execute executeglobal exit for each next function if then else on error option explicit new private property let get public randomize redim rem select case set stop sub while wend with end to elseif is or xor and not class_initialize class_terminate default preserve in me byval byref step resume goto",built_in:"lcase month vartype instrrev ubound setlocale getobject rgb getref string weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency conversions csng timevalue second year space abs clng timeserial fixs len asc isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion scriptengine split scriptengineminorversion cint sin datepart ltrim sqr scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw chrw regexp server response request cstr err",literal:"true false null nothing empty"},illegal:"//",contains:[e.inherit(e.QUOTE_STRING_MODE,{contains:[{begin:'""'}]}),e.COMMENT(/'/,/$/,{relevance:0}),e.C_NUMBER_MODE]}}},"5ad2":function(e,t){e.exports=function(e){var t={literal:"true false null"},a=[e.QUOTE_STRING_MODE,e.C_NUMBER_MODE],n={end:",",endsWithParent:!0,excludeEnd:!0,contains:a,keywords:t},r={begin:"{",end:"}",contains:[{className:"attr",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE],illegal:"\\n"},e.inherit(n,{begin:/:/})],illegal:"\\S"},i={begin:"\\[",end:"\\]",contains:[e.inherit(n)],illegal:"\\S"};return a.splice(a.length,0,r,i),{contains:a,keywords:t,illegal:"\\S"}}},"5dfb":function(e,t){e.exports=function(e){var t={keyword:"do while select delete by update from",literal:"0b 1b",built_in:"neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",type:"`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"};return{aliases:["k","kdb"],keywords:t,lexemes:/(`?)[A-Za-z0-9_]+\b/,contains:[e.C_LINE_COMMENT_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE]}}},6113:function(e,t){e.exports=function(e){var t="[a-zA-Z-][a-zA-Z0-9_-]*",a={className:"variable",begin:"(\\$"+t+")\\b"},n={className:"number",begin:"#[0-9A-Fa-f]+"};e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_BLOCK_COMMENT_MODE;return{case_insensitive:!0,illegal:"[=/|']",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"selector-id",begin:"\\#[A-Za-z0-9_-]+",relevance:0},{className:"selector-class",begin:"\\.[A-Za-z0-9_-]+",relevance:0},{className:"selector-attr",begin:"\\[",end:"\\]",illegal:"$"},{className:"selector-tag",begin:"\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b",relevance:0},{begin:":(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)"},{begin:"::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)"},a,{className:"attribute",begin:"\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b",illegal:"[^\\s]"},{begin:"\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b"},{begin:":",end:";",contains:[a,n,e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{className:"meta",begin:"!important"}]},{begin:"@",end:"[{;]",keywords:"mixin include extend for if else each while charset import debug media page content font-face namespace warn",contains:[a,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,n,e.CSS_NUMBER_MODE,{begin:"\\s[A-Za-z0-9_.-]+",relevance:0}]}]}}},"612a":function(e,t){e.exports=function(e){var t={keyword:"in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4dPromise"},a="[a-zA-Z_][a-zA-Z0-9\\._]*",n={className:"keyword",begin:"\\bproperty\\b",starts:{className:"string",end:"(:|=|;|,|//|/\\*|$)",returnEnd:!0}},r={className:"keyword",begin:"\\bsignal\\b",starts:{className:"string",end:"(\\(|:|=|;|,|//|/\\*|$)",returnEnd:!0}},i={className:"attribute",begin:"\\bid\\s*:",starts:{className:"string",end:a,returnEnd:!1}},s={begin:a+"\\s*:",returnBegin:!0,contains:[{className:"attribute",begin:a,end:"\\s*:",excludeEnd:!0,relevance:0}],relevance:0},o={begin:a+"\\s*{",end:"{",returnBegin:!0,relevance:0,contains:[e.inherit(e.TITLE_MODE,{begin:a})]};return{aliases:["qt"],case_insensitive:!1,keywords:t,contains:[{className:"meta",begin:/^\s*['"]use (strict|asm)['"]/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,{className:"subst",begin:"\\$\\{",end:"\\}"}]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{begin:/</,end:/>\s*[);\]]/,relevance:0,subLanguage:"xml"}],relevance:0},r,n,{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/[A-Za-z$_][0-9A-Za-z$_]*/}),{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}],illegal:/\[|%/},{begin:"\\."+e.IDENT_RE,relevance:0},i,s,o],illegal:/#/}}},"66ba":function(e,t){e.exports=function(e){return{subLanguage:"xml",contains:[{className:"meta",begin:"^__(END|DATA)__$"},{begin:"^\\s*%{1,2}={0,2}",end:"$",subLanguage:"perl"},{begin:"<%{1,2}={0,2}",end:"={0,1}%>",subLanguage:"perl",excludeBegin:!0,excludeEnd:!0}]}}},"6a51":function(e,t){e.exports=function(e){var t="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",a={className:"subst",begin:"[$@]\\{",end:"\\}",keywords:t},n={begin:"->{",end:"}"},r={variants:[{begin:/\$\d/},{begin:/[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},{begin:/[\$%@][^\s\w{]/,relevance:0}]},i=[e.BACKSLASH_ESCAPE,a,r],s=[r,e.HASH_COMMENT_MODE,e.COMMENT("^\\=\\w","\\=cut",{endsWithParent:!0}),n,{className:"string",contains:i,variants:[{begin:"q[qwxr]?\\s*\\(",end:"\\)",relevance:5},{begin:"q[qwxr]?\\s*\\[",end:"\\]",relevance:5},{begin:"q[qwxr]?\\s*\\{",end:"\\}",relevance:5},{begin:"q[qwxr]?\\s*\\|",end:"\\|",relevance:5},{begin:"q[qwxr]?\\s*\\<",end:"\\>",relevance:5},{begin:"qw\\s+q",end:"q",relevance:5},{begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"'},{begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE]},{begin:"{\\w+}",contains:[],relevance:0},{begin:"-?\\w+\\s*\\=\\>",contains:[],relevance:0}]},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\/\\/|"+e.RE_STARTERS_RE+"|\\b(split|return|print|reverse|grep)\\b)\\s*",keywords:"split return print reverse grep",relevance:0,contains:[e.HASH_COMMENT_MODE,{className:"regexp",begin:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",relevance:10},{className:"regexp",begin:"(m|qr)?/",end:"/[a-z]*",contains:[e.BACKSLASH_ESCAPE],relevance:0}]},{className:"function",beginKeywords:"sub",end:"(\\s*\\(.*?\\))?[;{]",excludeEnd:!0,relevance:5,contains:[e.TITLE_MODE]},{begin:"-\\w\\b",relevance:0},{begin:"^__DATA__$",end:"^__END__$",subLanguage:"mojolicious",contains:[{begin:"^@@.*",end:"$",className:"comment"}]}];return a.contains=s,n.contains=s,{aliases:["pl","pm"],lexemes:/[\w\.]+/,keywords:t,contains:s}}},"6de8":function(e,t){e.exports=function(e){var t="abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained",a=e.COMMENT("{","}",{relevance:0}),n=e.COMMENT("\\(\\*","\\*\\)",{relevance:10}),r={className:"string",begin:"'",end:"'",contains:[{begin:"''"}]},i={className:"string",begin:"(#\\d+)+"},s={className:"function",beginKeywords:"function constructor destructor procedure method",end:"[:;]",keywords:"function constructor|10 destructor|10 procedure|10 method|10",contains:[e.TITLE_MODE,{className:"params",begin:"\\(",end:"\\)",keywords:t,contains:[r,i]},a,n]};return{case_insensitive:!0,lexemes:/\.?\w+/,keywords:t,illegal:'("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',contains:[a,n,e.C_LINE_COMMENT_MODE,r,i,e.NUMBER_MODE,s,{className:"class",begin:"=\\bclass\\b",end:"end;",keywords:t,contains:[r,i,a,n,e.C_LINE_COMMENT_MODE,s]}]}}},"75da":function(e,t){e.exports=function(e){return{contains:[{className:"attribute",begin:/</,end:/>/},{begin:/::=/,starts:{end:/$/,contains:[{begin:/</,end:/>/},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]}}]}}},"767a":function(e,t){e.exports=function(e){var t={className:"variable",begin:/\$[\w\d#@][\w\d_]*/},a={className:"variable",begin:/<(?!\/)/,end:/>/};return{aliases:["pf.conf"],lexemes:/[a-z0-9_<>-]+/,keywords:{built_in:"block match pass load anchor|5 antispoof|10 set table",keyword:"in out log quick on rdomain inet inet6 proto from port os to routeallow-opts divert-packet divert-reply divert-to flags group icmp-typeicmp6-type label once probability recieved-on rtable prio queuetos tag tagged user keep fragment for os dropaf-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robinsource-hash static-portdup-to reply-to route-toparent bandwidth default min max qlimitblock-policy debug fingerprints hostid limit loginterface optimizationreassemble ruleset-optimization basic none profile skip state-defaultsstate-policy timeoutconst counters persistno modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppysource-track global rule max-src-nodes max-src-states max-src-connmax-src-conn-rate overload flushscrub|5 max-mss min-ttl no-df|10 random-id",literal:"all any no-route self urpf-failed egress|5 unknown"},contains:[e.HASH_COMMENT_MODE,e.NUMBER_MODE,e.QUOTE_STRING_MODE,t,a]}}},7727:function(e,t){e.exports=function(e){var t="[a-zA-Z_][a-zA-Z0-9_.]*(\\!|\\?)?",a="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",n="and false then defined module in return redo retry end for true self when next until do begin unless nil break not case cond alias while ensure or include use alias fn quote require import with|0",r={className:"subst",begin:"#\\{",end:"}",lexemes:t,keywords:n},i={className:"string",contains:[e.BACKSLASH_ESCAPE,r],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/}]},s={className:"function",beginKeywords:"def defp defmacro",end:/\B\b/,contains:[e.inherit(e.TITLE_MODE,{begin:t,endsParent:!0})]},o=e.inherit(s,{className:"class",beginKeywords:"defimpl defmodule defprotocol defrecord",end:/\bdo\b|$|;/}),l=[i,e.HASH_COMMENT_MODE,o,s,{begin:"::"},{className:"symbol",begin:":(?![\\s:])",contains:[i,{begin:a}],relevance:0},{className:"symbol",begin:t+":(?!:)",relevance:0},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{className:"variable",begin:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{begin:"->"},{begin:"("+e.RE_STARTERS_RE+")\\s*",contains:[e.HASH_COMMENT_MODE,{className:"regexp",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE,r],variants:[{begin:"/",end:"/[a-z]*"},{begin:"%r\\[",end:"\\][a-z]*"}]}],relevance:0}];return r.contains=l,{lexemes:t,keywords:n,contains:l}}},7781:function(e,t){e.exports=function(e){var t="div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to until while with var",a="false true",n=[e.C_LINE_COMMENT_MODE,e.COMMENT(/\{/,/\}/,{relevance:0}),e.COMMENT(/\(\*/,/\*\)/,{relevance:10})],r={className:"string",begin:/'/,end:/'/,contains:[{begin:/''/}]},i={className:"string",begin:/(#\d+)+/},s={className:"number",begin:"\\b\\d+(\\.\\d+)?(DT|D|T)",relevance:0},o={className:"string",begin:'"',end:'"'},l={className:"function",beginKeywords:"procedure",end:/[:;]/,keywords:"procedure|10",contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,keywords:t,contains:[r,i]}].concat(n)},_={className:"class",begin:"OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)",returnBegin:!0,contains:[e.TITLE_MODE,l]};return{case_insensitive:!0,keywords:{keyword:t,literal:a},illegal:/\/\*/,contains:[r,i,s,o,e.NUMBER_MODE,_,l]}}},"79b5":function(e,t){e.exports=function(e){var t="action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view",a={illegal:/\}\}/,begin:/[a-zA-Z0-9_]+=/,returnBegin:!0,relevance:0,contains:[{className:"attr",begin:/[a-zA-Z0-9_]+/}]},n=(e.QUOTE_STRING_MODE,{endsWithParent:!0,relevance:0,keywords:{keyword:"as",built_in:t},contains:[e.QUOTE_STRING_MODE,a,e.NUMBER_MODE]});return{case_insensitive:!0,subLanguage:"xml",contains:[e.COMMENT("{{!(--)?","(--)?}}"),{className:"template-tag",begin:/\{\{[#\/]/,end:/\}\}/,contains:[{className:"name",begin:/[a-zA-Z\.\-]+/,keywords:{"builtin-name":t},starts:n}]},{className:"template-variable",begin:/\{\{[a-zA-Z][a-zA-Z\-]+/,end:/\}\}/,keywords:{keyword:"as",built_in:t},contains:[e.QUOTE_STRING_MODE]}]}}},"7a5e":function(e,t){e.exports=function(e){var t={className:"variable",variants:[{begin:"\\$\\("+e.UNDERSCORE_IDENT_RE+"\\)",contains:[e.BACKSLASH_ESCAPE]},{begin:/\$[@%<?\^\+\*]/}]},a={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,t]},n={className:"variable",begin:/\$\([\w-]+\s/,end:/\)/,keywords:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},contains:[t]},r={begin:"^"+e.UNDERSCORE_IDENT_RE+"\\s*[:+?]?=",illegal:"\\n",returnBegin:!0,contains:[{begin:"^"+e.UNDERSCORE_IDENT_RE,end:"[:+?]?=",excludeEnd:!0}]},i={className:"meta",begin:/^\.PHONY:/,end:/$/,keywords:{"meta-keyword":".PHONY"},lexemes:/[\.\w]+/},s={className:"section",begin:/^[^\s]+:/,end:/$/,contains:[t]};return{aliases:["mk","mak"],keywords:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath",lexemes:/[\w-]+/,contains:[e.HASH_COMMENT_MODE,t,a,n,r,i,s]}}},"7bc1":function(e,t){e.exports=function(e){var t=e.inherit(e.QUOTE_STRING_MODE,{illegal:""}),a={className:"params",begin:"\\(",end:"\\)",contains:["self",e.C_NUMBER_MODE,t]},n=e.COMMENT("--","$"),r=e.COMMENT("\\(\\*","\\*\\)",{contains:["self",n]}),i=[n,r,e.HASH_COMMENT_MODE];return{aliases:["osascript"],keywords:{keyword:"about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",literal:"AppleScript false linefeed return pi quote result space tab true",built_in:"alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name paragraph paragraphs rest reverse running time version weekday word words year"},contains:[t,e.C_NUMBER_MODE,{className:"built_in",begin:"\\b(clipboard info|the clipboard|info for|list (disks|folder)|mount volume|path to|(close|open for) access|(get|set) eof|current date|do shell script|get volume settings|random number|set volume|system attribute|system info|time to GMT|(load|run|store) script|scripting components|ASCII (character|number)|localized string|choose (application|color|file|file name|folder|from list|remote application|URL)|display (alert|dialog))\\b|^\\s*return\\b"},{className:"literal",begin:"\\b(text item delimiters|current application|missing value)\\b"},{className:"keyword",begin:"\\b(apart from|aside from|instead of|out of|greater than|isn't|(doesn't|does not) (equal|come before|come after|contain)|(greater|less) than( or equal)?|(starts?|ends|begins?) with|contained by|comes (before|after)|a (ref|reference)|POSIX file|POSIX path|(date|time) string|quoted form)\\b"},{beginKeywords:"on",illegal:"[${=;\\n]",contains:[e.UNDERSCORE_TITLE_MODE,a]}].concat(i),illegal:"//|->|=>|\\[\\["}}},"7c30":function(e,t){e.exports=function(e){var t="([-a-zA-Z$._][\\w\\-$.]*)";return{keywords:"begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly double",contains:[{className:"keyword",begin:"i\\d+"},e.COMMENT(";","\\n",{relevance:0}),e.QUOTE_STRING_MODE,{className:"string",variants:[{begin:'"',end:'[^\\\\]"'}],relevance:0},{className:"title",variants:[{begin:"@"+t},{begin:"@\\d+"},{begin:"!"+t},{begin:"!\\d+"+t}]},{className:"symbol",variants:[{begin:"%"+t},{begin:"%\\d+"},{begin:"#\\d+"}]},{className:"number",variants:[{begin:"0[xX][a-fA-F0-9]+"},{begin:"-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?"}],relevance:0}]}}},"7c46":function(e,t){e.exports=function(e){var t={className:"subst",variants:[{begin:"\\$[A-Za-z0-9_]+"}]},a={className:"subst",variants:[{begin:"\\${",end:"}"}],keywords:"true false null this is new super"},n={className:"string",variants:[{begin:"r'''",end:"'''"},{begin:'r"""',end:'"""'},{begin:"r'",end:"'",illegal:"\\n"},{begin:'r"',end:'"',illegal:"\\n"},{begin:"'''",end:"'''",contains:[e.BACKSLASH_ESCAPE,t,a]},{begin:'"""',end:'"""',contains:[e.BACKSLASH_ESCAPE,t,a]},{begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE,t,a]},{begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE,t,a]}]};a.contains=[e.C_NUMBER_MODE,n];var r={keyword:"assert async await break case catch class const continue default do else enum extends false final finally for if in is new null rethrow return super switch sync this throw true try var void while with yield abstract as dynamic export external factory get implements import library operator part set static typedef",built_in:"print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num document window querySelector querySelectorAll Element ElementList"};return{keywords:r,contains:[n,e.COMMENT("/\\*\\*","\\*/",{subLanguage:"markdown"}),e.COMMENT("///","$",{subLanguage:"markdown"}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"class",beginKeywords:"class interface",end:"{",excludeEnd:!0,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},e.C_NUMBER_MODE,{className:"meta",begin:"@[A-Za-z]+"},{begin:"=>"}]}}},"7c71":function(e,t){e.exports=function(e){var t="Int Float String Bool Dynamic Void Array ";return{aliases:["hx"],keywords:{keyword:"break case cast catch continue default do dynamic else enum extern for function here if import in inline never new override package private get set public return static super switch this throw trace try typedef untyped using var while "+t,built_in:"trace this",literal:"true false null _"},contains:[{className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE,{className:"subst",begin:"\\$\\{",end:"\\}"},{className:"subst",begin:"\\$",end:"\\W}"}]},e.QUOTE_STRING_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"@:",end:"$"},{className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"if else elseif end error"}},{className:"type",begin:":[ \t]*",end:"[^A-Za-z0-9_ \t\\->]",excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:":[ \t]*",end:"\\W",excludeBegin:!0,excludeEnd:!0},{className:"type",begin:"new *",end:"\\W",excludeBegin:!0,excludeEnd:!0},{className:"class",beginKeywords:"enum",end:"\\{",contains:[e.TITLE_MODE]},{className:"class",beginKeywords:"abstract",end:"[\\{$]",contains:[{className:"type",begin:"\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0},{className:"type",begin:"from +",end:"\\W",excludeBegin:!0,excludeEnd:!0},{className:"type",begin:"to +",end:"\\W",excludeBegin:!0,excludeEnd:!0},e.TITLE_MODE],keywords:{keyword:"abstract from to"}},{className:"class",begin:"\\b(class|interface) +",end:"[\\{$]",excludeEnd:!0,keywords:"class interface",contains:[{className:"keyword",begin:"\\b(extends|implements) +",keywords:"extends implements",contains:[{className:"type",begin:e.IDENT_RE,relevance:0}]},e.TITLE_MODE]},{className:"function",beginKeywords:"function",end:"\\(",excludeEnd:!0,illegal:"\\S",contains:[e.TITLE_MODE]}],illegal:/<\//}}},"7cff":function(e,t){e.exports=function(e){var t=e.COMMENT(/^\s*@?rem\b/,/$/,{relevance:10}),a={className:"symbol",begin:"^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",relevance:0};return{aliases:["bat","cmd"],case_insensitive:!0,illegal:/\/\*/,keywords:{keyword:"if else goto for in do call exit not exist errorlevel defined equ neq lss leq gtr geq",built_in:"prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux shift cd dir echo setlocal endlocal set pause copy append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color comp compact convert date dir diskcomp diskcopy doskey erase fs find findstr format ftype graftabl help keyb label md mkdir mode more move path pause print popd pushd promt rd recover rem rename replace restore rmdir shiftsort start subst time title tree type ver verify vol ping net ipconfig taskkill xcopy ren del"},contains:[{className:"variable",begin:/%%[^ ]|%[^ ]+?%|![^ ]+?!/},{className:"function",begin:a.begin,end:"goto:eof",contains:[e.inherit(e.TITLE_MODE,{begin:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),t]},{className:"number",begin:"\\b\\d+",relevance:0},t]}}},"7d9d":function(e,t){e.exports=function(e){var t={keyword:"abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",literal:"eps inf na","built-in":"abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"},a={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0},n={className:"symbol",variants:[{begin:/\=[lgenxc]=/},{begin:/\$/}]},r={className:"comment",variants:[{begin:"'",end:"'"},{begin:'"',end:'"'}],illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},i={begin:"/",end:"/",keywords:t,contains:[r,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_NUMBER_MODE]},s={begin:/[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,excludeBegin:!0,end:"$",endsWithParent:!0,contains:[r,i,{className:"comment",begin:/([ ]*[a-z0-9&#*=?@>\\<:\-,()$\[\]_.{}!+%^]+)+/,relevance:0}]};return{aliases:["gms"],case_insensitive:!0,keywords:t,contains:[e.COMMENT(/^\$ontext/,/^\$offtext/),{className:"meta",begin:"^\\$[a-z0-9]+",end:"$",returnBegin:!0,contains:[{className:"meta-keyword",begin:"^\\$[a-z0-9]+"}]},e.COMMENT("^\\*","$"),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{beginKeywords:"set sets parameter parameters variable variables scalar scalars equation equations",end:";",contains:[e.COMMENT("^\\*","$"),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,i,s]},{beginKeywords:"table",end:";",returnBegin:!0,contains:[{beginKeywords:"table",end:"$",contains:[s]},e.COMMENT("^\\*","$"),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_NUMBER_MODE]},{className:"function",begin:/^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,returnBegin:!0,contains:[{className:"title",begin:/^[a-z0-9_]+/},a,n]},e.C_NUMBER_MODE,n]}}},"80b3":function(e,t){e.exports=function(e){return{keywords:{keyword:"_ as at cofix else end exists exists2 fix for forall fun if IF in let match mod Prop return Set then Type using where with Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture Conjectures Constant constr Constraint Constructors Context Corollary CreateHintDb Cut Declare Defined Definition Delimit Dependencies DependentDerive Drop eauto End Equality Eval Example Existential Existentials Existing Export exporting Extern Extract Extraction Fact Field Fields File Fixpoint Focus for From Function Functional Generalizable Global Goal Grab Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident Identity If Immediate Implicit Import Include Inductive Infix Info Initial Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation Obligations Opaque Open Optimize Options Parameter Parameters Parametric Path Paths pattern Polymorphic Preterm Print Printing Program Projections Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused Unfold Universe Universes Unset Unshelve using Variable Variables Variant Verbose Visibility where with",built_in:"abstract absurd admit after apply as assert assumption at auto autorewrite autounfold before bottom btauto by case case_eq cbn cbv change classical_left classical_right clear clearbody cofix compare compute congruence constr_eq constructor contradict contradiction cut cutrewrite cycle decide decompose dependent destruct destruction dintuition discriminate discrR do double dtauto eapply eassumption eauto ecase econstructor edestruct ediscriminate eelim eexact eexists einduction einjection eleft elim elimtype enough equality erewrite eright esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail field field_simplify field_simplify_eq first firstorder fix fold fourier functional generalize generalizing gfail give_up has_evar hnf idtac in induction injection instantiate intro intro_pattern intros intuition inversion inversion_clear is_evar is_var lapply lazy left lia lra move native_compute nia nsatz omega once pattern pose progress proof psatz quote record red refine reflexivity remember rename repeat replace revert revgoals rewrite rewrite_strat right ring ring_simplify rtauto set setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve specialize split split_Rabs split_Rmult stepl stepr subst sum swap symmetry tactic tauto time timeout top transitivity trivial try tryif unfold unify until using vm_compute with"},contains:[e.QUOTE_STRING_MODE,e.COMMENT("\\(\\*","\\*\\)"),e.C_NUMBER_MODE,{className:"type",excludeBegin:!0,begin:"\\|\\s*",end:"\\w+"},{begin:/[-=]>/}]}}},8261:function(e,t){e.exports=function(e){var t={className:"string",variants:[{begin:'"',end:'"',contains:[{begin:'""',relevance:0}]}]},a={className:"number",begin:"\\b(\\d+(\\.\\d*)?|\\.\\d+)",relevance:0},n="property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii";return{case_insensitive:!0,aliases:["cos","cls"],keywords:n,contains:[a,t,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"comment",begin:/;/,end:"$",relevance:0},{className:"built_in",begin:/(?:\$\$?|\.\.)\^?[a-zA-Z]+/},{className:"built_in",begin:/\$\$\$[a-zA-Z]+/},{className:"built_in",begin:/%[a-z]+(?:\.[a-z]+)*/},{className:"symbol",begin:/\^%?[a-zA-Z][\w]*/},{className:"keyword",begin:/##class|##super|#define|#dim/},{begin:/&sql\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,subLanguage:"sql"},{begin:/&(js|jscript|javascript)</,end:/>/,excludeBegin:!0,excludeEnd:!0,subLanguage:"javascript"},{begin:/&html<\s*</,end:/>\s*>/,subLanguage:"xml"}]}}},"82cb":function(e,t){e.exports=function(e){var t="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",a={keyword:"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",literal:"true false nil"},n={className:"doctag",begin:"@[A-Za-z]+"},r={begin:"#<",end:">"},i=[e.COMMENT("#","$",{contains:[n]}),e.COMMENT("^\\=begin","^\\=end",{contains:[n],relevance:10}),e.COMMENT("^__END__","\\n$")],s={className:"subst",begin:"#\\{",end:"}",keywords:a},o={className:"string",contains:[e.BACKSLASH_ESCAPE,s],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/`/,end:/`/},{begin:"%[qQwWx]?\\(",end:"\\)"},{begin:"%[qQwWx]?\\[",end:"\\]"},{begin:"%[qQwWx]?{",end:"}"},{begin:"%[qQwWx]?<",end:">"},{begin:"%[qQwWx]?/",end:"/"},{begin:"%[qQwWx]?%",end:"%"},{begin:"%[qQwWx]?-",end:"-"},{begin:"%[qQwWx]?\\|",end:"\\|"},{begin:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/},{begin:/<<(-?)\w+$/,end:/^\s*\w+$/}]},l={className:"params",begin:"\\(",end:"\\)",endsParent:!0,keywords:a},_=[o,r,{className:"class",beginKeywords:"class module",end:"$|;",illegal:/=/,contains:[e.inherit(e.TITLE_MODE,{begin:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{begin:"<\\s*",contains:[{begin:"("+e.IDENT_RE+"::)?"+e.IDENT_RE}]}].concat(i)},{className:"function",beginKeywords:"def",end:"$|;",contains:[e.inherit(e.TITLE_MODE,{begin:t}),l].concat(i)},{begin:e.IDENT_RE+"::"},{className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"(\\!|\\?)?:",relevance:0},{className:"symbol",begin:":(?!\\s)",contains:[o,{begin:t}],relevance:0},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{className:"params",begin:/\|/,end:/\|/,keywords:a},{begin:"("+e.RE_STARTERS_RE+"|unless)\\s*",keywords:"unless",contains:[r,{className:"regexp",contains:[e.BACKSLASH_ESCAPE,s],illegal:/\n/,variants:[{begin:"/",end:"/[a-z]*"},{begin:"%r{",end:"}[a-z]*"},{begin:"%r\\(",end:"\\)[a-z]*"},{begin:"%r!",end:"![a-z]*"},{begin:"%r\\[",end:"\\][a-z]*"}]}].concat(i),relevance:0}].concat(i);s.contains=_,l.contains=_;var c="[>?]>",d="[\\w#]+\\(\\w+\\):\\d+:\\d+>",m="(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",p=[{begin:/^\s*=>/,starts:{end:"$",contains:_}},{className:"meta",begin:"^("+c+"|"+d+"|"+m+")",starts:{end:"$",contains:_}}];return{aliases:["rb","gemspec","podspec","thor","irb"],keywords:a,illegal:/\/\*/,contains:i.concat(p).concat(_)}}},8667:function(e,t){e.exports=function(e){var t={"builtin-name":"!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"},a="a-zA-Z_\\-!.?+*=<>&#'",n="["+a+"]["+a+"0-9/;:]*",r="[-+]?\\d+(\\.\\d+)?",i={className:"meta",begin:"^#!",end:"$"},s={begin:n,relevance:0},o={className:"number",begin:r,relevance:0},l=e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),_=e.COMMENT(";","$",{relevance:0}),c={className:"literal",begin:/\b([Tt]rue|[Ff]alse|nil|None)\b/},d={begin:"[\\[\\{]",end:"[\\]\\}]"},m={className:"comment",begin:"\\^"+n},p=e.COMMENT("\\^\\{","\\}"),E={className:"symbol",begin:"[:]{1,2}"+n},u={begin:"\\(",end:"\\)"},S={endsWithParent:!0,relevance:0},g={keywords:t,lexemes:n,className:"name",begin:n,starts:S},T=[u,l,m,p,_,E,d,o,c,s];return u.contains=[e.COMMENT("comment",""),g,S],S.contains=T,d.contains=T,{aliases:["hylang"],illegal:/\S/,contains:[i,u,l,m,p,_,E,d,o,c]}}},8931:function(e,t){e.exports=function(e){return{contains:[e.HASH_COMMENT_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{begin:e.UNDERSCORE_IDENT_RE,lexemes:e.UNDERSCORE_IDENT_RE,keywords:{name:"for in while repeat until if then else",symbol:"bernoulli bernoulli_logit binomial binomial_logit beta_binomial hypergeometric categorical categorical_logit ordered_logistic neg_binomial neg_binomial_2 neg_binomial_2_log poisson poisson_log multinomial normal exp_mod_normal skew_normal student_t cauchy double_exponential logistic gumbel lognormal chi_square inv_chi_square scaled_inv_chi_square exponential inv_gamma weibull frechet rayleigh wiener pareto pareto_type_2 von_mises uniform multi_normal multi_normal_prec multi_normal_cholesky multi_gp multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet lkj_corr lkj_corr_cholesky wishart inv_wishart","selector-tag":"int real vector simplex unit_vector ordered positive_ordered row_vector matrix cholesky_factor_corr cholesky_factor_cov corr_matrix cov_matrix",title:"functions model data parameters quantities transformed generated",literal:"true false"},relevance:0},{className:"number",begin:"0[xX][0-9a-fA-F]+[Li]?\\b",relevance:0},{className:"number",begin:"0[xX][0-9a-fA-F]+[Li]?\\b",relevance:0},{className:"number",begin:"\\d+(?:[eE][+\\-]?\\d*)?L\\b",relevance:0},{className:"number",begin:"\\d+\\.(?!\\d)(?:i\\b)?",relevance:0},{className:"number",begin:"\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",relevance:0},{className:"number",begin:"\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",relevance:0}]}}},"89e7":function(e,t){e.exports=function(e){return{aliases:["vb"],case_insensitive:!0,keywords:{keyword:"addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass namespace narrowing new next not notinheritable notoverridable of off on operator option optional or order orelse overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim rem removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly xor",built_in:"boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype date decimal directcast double gettype getxmlnamespace iif integer long object sbyte short single string trycast typeof uinteger ulong ushort",literal:"true false nothing"},illegal:"//|{|}|endif|gosub|variant|wend|^\\$ ",contains:[e.inherit(e.QUOTE_STRING_MODE,{contains:[{begin:'""'}]}),e.COMMENT("'","$",{returnBegin:!0,contains:[{className:"doctag",begin:"'''|\x3c!--|--\x3e",contains:[e.PHRASAL_WORDS_MODE]},{className:"doctag",begin:"</?",end:">",contains:[e.PHRASAL_WORDS_MODE]}]}),e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"if else elseif end region externalsource"}}]}}},"8a86":function(e,t){e.exports=function(e){return{aliases:["bind","zone"],keywords:{keyword:"IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT"},contains:[e.COMMENT(";","$",{relevance:0}),{className:"meta",begin:/^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/},{className:"number",begin:"((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"},{className:"number",begin:"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"},e.inherit(e.NUMBER_MODE,{begin:/\b\d+[dhwm]?/})]}}},"8aba":function(e,t){e.exports=function(e){return{keywords:{keyword:"BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",built_in:"IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,{className:"literal",variants:[{begin:"#\\s+[a-zA-Z\\ \\.]*",relevance:0},{begin:"#[a-zA-Z\\ \\.]+"}]}]}}},"8bbf":function(t,a){t.exports=e},"8ca5":function(e,t){e.exports=function(e){var t="('|\\.')+",a={relevance:0,contains:[{begin:t}]};return{keywords:{keyword:"break case catch classdef continue else elseif end enumerated events for function global if methods otherwise parfor persistent properties return spmd switch try while",built_in:"sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "},illegal:'(//|"|#|/\\*|\\s+/\\w+)',contains:[{className:"function",beginKeywords:"function",end:"$",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}]}]},{className:"built_in",begin:/true|false/,relevance:0,starts:a},{begin:"[a-zA-Z][a-zA-Z_0-9]*"+t,relevance:0},{className:"number",begin:e.C_NUMBER_RE,relevance:0,starts:a},{className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE,{begin:"''"}]},{begin:/\]|}|\)/,relevance:0,starts:a},{className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE,{begin:'""'}],starts:a},e.COMMENT("^\\s*\\%\\{\\s*$","^\\s*\\%\\}\\s*$"),e.COMMENT("\\%","$")]}}},"8d4f":function(e,t){e.exports=function(e){var t="[a-z][a-zA-Z0-9_]*",a={className:"string",begin:"\\$.{1}"},n={className:"symbol",begin:"#"+e.UNDERSCORE_IDENT_RE};return{aliases:["st"],keywords:"self super nil true false thisContext",contains:[e.COMMENT('"','"'),e.APOS_STRING_MODE,{className:"type",begin:"\\b[A-Z][A-Za-z0-9_]*",relevance:0},{begin:t+":",relevance:0},e.C_NUMBER_MODE,n,a,{begin:"\\|[ ]*"+t+"([ ]+"+t+")*[ ]*\\|",returnBegin:!0,end:/\|/,illegal:/\S/,contains:[{begin:"(\\|[ ]*)?"+t}]},{begin:"\\#\\(",end:"\\)",contains:[e.APOS_STRING_MODE,a,e.C_NUMBER_MODE,n]}]}}},"8d6d":function(e,t){e.exports=function(e){var t={keyword:"abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",built_in:"bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",literal:"false null true"},a="(0|[1-9][\\d_]*)",n="(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)",r="0[bB][01_]+",i="([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)",s="0[xX]"+i,o="([eE][+-]?"+n+")",l="("+n+"(\\.\\d*|"+o+")|\\d+\\."+n+n+"|\\."+a+o+"?)",_="(0[xX]("+i+"\\."+i+"|\\.?"+i+")[pP][+-]?"+n+")",c="("+a+"|"+r+"|"+s+")",d="("+_+"|"+l+")",m="\\\\(['\"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};",p={className:"number",begin:"\\b"+c+"(L|u|U|Lu|LU|uL|UL)?",relevance:0},E={className:"number",begin:"\\b("+d+"([fF]|L|i|[fF]i|Li)?|"+c+"(i|[fF]i|Li))",relevance:0},u={className:"string",begin:"'("+m+"|.)",end:"'",illegal:"."},S={begin:m,relevance:0},g={className:"string",begin:'"',contains:[S],end:'"[cwd]?'},T={className:"string",begin:'[rq]"',end:'"[cwd]?',relevance:5},b={className:"string",begin:"`",end:"`[cwd]?"},C={className:"string",begin:'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',relevance:10},N={className:"string",begin:'q"\\{',end:'\\}"'},R={className:"meta",begin:"^#!",end:"$",relevance:5},O={className:"meta",begin:"#(line)",end:"$",relevance:5},f={className:"keyword",begin:"@[a-zA-Z_][a-zA-Z_\\d]*"},I=e.COMMENT("\\/\\+","\\+\\/",{contains:["self"],relevance:10});return{lexemes:e.UNDERSCORE_IDENT_RE,keywords:t,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,I,C,g,T,b,N,E,p,u,R,O,f]}}},"8dcb":function(e,t){e.exports=function(e){var t="[A-Za-z0-9\\._:-]+",a={endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",begin:t,relevance:0},{begin:/=\s*/,relevance:0,contains:[{className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/},{begin:/'/,end:/'/},{begin:/[^\s"'=<>`]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist"],case_insensitive:!0,contains:[{className:"meta",begin:"<!DOCTYPE",end:">",relevance:10,contains:[{begin:"\\[",end:"\\]"}]},e.COMMENT("\x3c!--","--\x3e",{relevance:10}),{begin:"<\\!\\[CDATA\\[",end:"\\]\\]>",relevance:10},{className:"meta",begin:/<\?xml/,end:/\?>/,relevance:10},{begin:/<\?(php)?/,end:/\?>/,subLanguage:"php",contains:[{begin:"/\\*",end:"\\*/",skip:!0},{begin:'b"',end:'"',skip:!0},{begin:"b'",end:"'",skip:!0},e.inherit(e.APOS_STRING_MODE,{illegal:null,className:null,contains:null,skip:!0}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null,className:null,contains:null,skip:!0})]},{className:"tag",begin:"<style(?=\\s|>|$)",end:">",keywords:{name:"style"},contains:[a],starts:{end:"</style>",returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",begin:"<script(?=\\s|>|$)",end:">",keywords:{name:"script"},contains:[a],starts:{end:"<\/script>",returnEnd:!0,subLanguage:["actionscript","javascript","handlebars","xml"]}},{className:"tag",begin:"</?",end:"/?>",contains:[{className:"name",begin:/[^\/><\s]+/,relevance:0},a]}]}}},"919d":function(e,t){e.exports=function(e){return{keywords:{keyword:"println readln print import module function local return let var while for foreach times in case when match with break continue augment augmentation each find filter reduce if then else otherwise try catch finally raise throw orIfNull DynamicObject|10 DynamicVariable struct Observable map set vector list array",literal:"true false null"},contains:[e.HASH_COMMENT_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"@[A-Za-z]+"}]}}},"944e":function(e,t){e.exports=function(e){var t=e.getLanguage("cpp").exports;return{keywords:{keyword:"boolean byte word string String array "+t.keywords.keyword,built_in:"setup loop while catch for if do goto try switch case else default break continue return KeyboardController MouseController SoftwareSerial EthernetServer EthernetClient LiquidCrystal RobotControl GSMVoiceCall EthernetUDP EsploraTFT HttpClient RobotMotor WiFiClient GSMScanner FileSystem Scheduler GSMServer YunClient YunServer IPAddress GSMClient GSMModem Keyboard Ethernet Console GSMBand Esplora Stepper Process WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage Client Server GSMPIN FileIO Bridge Serial EEPROM Stream Mouse Audio Servo File Task GPRS WiFi Wire TFT GSM SPI SD runShellCommandAsynchronously analogWriteResolution retrieveCallingNumber printFirmwareVersion analogReadResolution sendDigitalPortPair noListenOnLocalhost readJoystickButton setFirmwareVersion readJoystickSwitch scrollDisplayRight getVoiceCallStatus scrollDisplayLeft writeMicroseconds delayMicroseconds beginTransmission getSignalStrength runAsynchronously getAsynchronously listenOnLocalhost getCurrentCarrier readAccelerometer messageAvailable sendDigitalPorts lineFollowConfig countryNameWrite runShellCommand readStringUntil rewindDirectory readTemperature setClockDivider readLightSensor endTransmission analogReference detachInterrupt countryNameRead attachInterrupt encryptionType readBytesUntil robotNameWrite readMicrophone robotNameRead cityNameWrite userNameWrite readJoystickY readJoystickX mouseReleased openNextFile scanNetworks noInterrupts digitalWrite beginSpeaker mousePressed isActionDone mouseDragged displayLogos noAutoscroll addParameter remoteNumber getModifiers keyboardRead userNameRead waitContinue processInput parseCommand printVersion readNetworks writeMessage blinkVersion cityNameRead readMessage setDataMode parsePacket isListening setBitOrder beginPacket isDirectory motorsWrite drawCompass digitalRead clearScreen serialEvent rightToLeft setTextSize leftToRight requestFrom keyReleased compassRead analogWrite interrupts WiFiServer disconnect playMelody parseFloat autoscroll getPINUsed setPINUsed setTimeout sendAnalog readSlider analogRead beginWrite createChar motorsStop keyPressed tempoWrite readButton subnetMask debugPrint macAddress writeGreen randomSeed attachGPRS readString sendString remotePort releaseAll mouseMoved background getXChange getYChange answerCall getResult voiceCall endPacket constrain getSocket writeJSON getButton available connected findUntil readBytes exitValue readGreen writeBlue startLoop IPAddress isPressed sendSysex pauseMode gatewayIP setCursor getOemKey tuneWrite noDisplay loadImage switchPIN onRequest onReceive changePIN playFile noBuffer parseInt overflow checkPIN knobRead beginTFT bitClear updateIR bitWrite position writeRGB highByte writeRed setSpeed readBlue noStroke remoteIP transfer shutdown hangCall beginSMS endWrite attached maintain noCursor checkReg checkPUK shiftOut isValid shiftIn pulseIn connect println localIP pinMode getIMEI display noBlink process getBand running beginSD drawBMP lowByte setBand release bitRead prepare pointTo readRed setMode noFill remove listen stroke detach attach noTone exists buffer height bitSet circle config cursor random IRread setDNS endSMS getKey micros millis begin print write ready flush width isPIN blink clear press mkdir rmdir close point yield image BSSID click delay read text move peek beep rect line open seek fill size turn stop home find step tone sqrt RSSI SSID end bit tan cos sin pow map abs max min get run put",literal:"DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL DEFAULT OUTPUT INPUT HIGH LOW"},contains:[t.preprocessor,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE]}}},"94a2":function(e,t){e.exports=function(e){var t="[A-Z_][A-Z0-9_.]*",a="\\%",n="IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT EQ LT GT NE GE LE OR XOR",r={className:"meta",begin:"([O])([0-9]+)"},i=[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.COMMENT(/\(/,/\)/),e.inherit(e.C_NUMBER_MODE,{begin:"([-+]?([0-9]*\\.?[0-9]+\\.?))|"+e.C_NUMBER_RE}),e.inherit(e.APOS_STRING_MODE,{illegal:null}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),{className:"name",begin:"([G])([0-9]+\\.?[0-9]?)"},{className:"name",begin:"([M])([0-9]+\\.?[0-9]?)"},{className:"attr",begin:"(VC|VS|#)",end:"(\\d+)"},{className:"attr",begin:"(VZOFX|VZOFY|VZOFZ)"},{className:"built_in",begin:"(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)",end:"([-+]?([0-9]*\\.?[0-9]+\\.?))(\\])"},{className:"symbol",variants:[{begin:"N",end:"\\d+",illegal:"\\W"}]}];return{aliases:["nc"],case_insensitive:!0,lexemes:t,keywords:n,contains:[{className:"meta",begin:a},r].concat(i)}}},9510:function(e,t){e.exports=function(e){var t={keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10",built_in:"Ellipsis NotImplemented",literal:"False None True"},a={className:"meta",begin:/^(>>>|\.\.\.) /},n={className:"subst",begin:/\{/,end:/\}/,keywords:t,illegal:/#/},r={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/(u|b)?r?'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,a],relevance:10},{begin:/(u|b)?r?"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a],relevance:10},{begin:/(fr|rf|f)'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,a,n]},{begin:/(fr|rf|f)"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a,n]},{begin:/(u|r|ur)'/,end:/'/,relevance:10},{begin:/(u|r|ur)"/,end:/"/,relevance:10},{begin:/(b|br)'/,end:/'/},{begin:/(b|br)"/,end:/"/},{begin:/(fr|rf|f)'/,end:/'/,contains:[e.BACKSLASH_ESCAPE,n]},{begin:/(fr|rf|f)"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,n]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},i={className:"number",relevance:0,variants:[{begin:e.BINARY_NUMBER_RE+"[lLjJ]?"},{begin:"\\b(0o[0-7]+)[lLjJ]?"},{begin:e.C_NUMBER_RE+"[lLjJ]?"}]},s={className:"params",begin:/\(/,end:/\)/,contains:["self",a,i,r]};return n.contains=[r,i,a],{aliases:["py","gyp","ipython"],keywords:t,illegal:/(<\/|->|\?)|=>/,contains:[a,i,r,e.HASH_COMMENT_MODE,{variants:[{className:"function",beginKeywords:"def"},{className:"class",beginKeywords:"class"}],end:/:/,illegal:/[${=;\n,]/,contains:[e.UNDERSCORE_TITLE_MODE,s,{begin:/->/,endsWithParent:!0,keywords:"None"}]},{className:"meta",begin:/^[\t ]*@/,end:/$/},{begin:/\b(print|exec)\(/}]}}},9544:function(e,t){e.exports=function(e){return{case_insensitive:!0,keywords:{keyword:"task project allprojects subprojects artifacts buildscript configurations dependencies repositories sourceSets description delete from into include exclude source classpath destinationDir includes options sourceCompatibility targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant def abstract break case catch continue default do else extends final finally for if implements instanceof native new private protected public return static switch synchronized throw throws transient try volatile while strictfp package import false null super this true antlrtask checkstyle codenarc copy boolean byte char class double float int interface long short void compile runTime file fileTree abs any append asList asWritable call collect compareTo count div dump each eachByte eachFile eachLine every find findAll flatten getAt getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter newReader newWriter next plus pop power previous print println push putAt read readBytes readLines reverse reverseEach round size sort splitEachLine step subMap times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader withStream withWriter withWriterAppend write writeLine"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.NUMBER_MODE,e.REGEXP_MODE]}}},"95d0":function(e,t){e.exports=function(e){var t={keyword:"actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",meta:"iso val tag trn box ref",literal:"this false true"},a={className:"string",begin:'"""',end:'"""',relevance:10},n={className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE]},r={className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE],relevance:0},i={className:"type",begin:"\\b_?[A-Z][\\w]*",relevance:0},s={begin:e.IDENT_RE+"'",relevance:0};return{keywords:t,contains:[i,a,n,r,s,e.C_NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}}},9814:function(e,t){e.exports=function(e){var t="false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else extends implements break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws privileged aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization staticinitialization withincode target within execution getWithinTypeName handler thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents warning error soft precedence thisAspectInstance",a="get set args call";return{keywords:t,illegal:/<\/|#/,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"class",beginKeywords:"aspect",end:/[{;=]/,excludeEnd:!0,illegal:/[:;"\[\]]/,contains:[{beginKeywords:"extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton"},e.UNDERSCORE_TITLE_MODE,{begin:/\([^\)]*/,end:/[)]+/,keywords:t+" "+a,excludeEnd:!1}]},{className:"class",beginKeywords:"class interface",end:/[{;=]/,excludeEnd:!0,relevance:0,keywords:"class interface",illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"pointcut after before around throwing returning",end:/[)]/,excludeEnd:!1,illegal:/["\[\]]/,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,contains:[e.UNDERSCORE_TITLE_MODE]}]},{begin:/[:]/,returnBegin:!0,end:/[{;]/,relevance:0,excludeEnd:!1,keywords:t,illegal:/["\[\]]/,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",keywords:t+" "+a,relevance:0},e.QUOTE_STRING_MODE]},{beginKeywords:"new throw",relevance:0},{className:"function",begin:/\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,returnBegin:!0,end:/[{;=]/,keywords:t,excludeEnd:!0,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"params",begin:/\(/,end:/\)/,relevance:0,keywords:t,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},e.C_NUMBER_MODE,{className:"meta",begin:"@[A-Za-z]+"}]}}},"998c":function(e,t,a){"use strict";var n=a("1487"),r={install:function(e){e.directive("highlightjs",{deep:!0,bind:function(e,t){var a,r,i=e.querySelectorAll("code");for(r=0;r<i.length;r+=1)a=i[r],"string"===typeof t.value&&(a.textContent=t.value),n.highlightBlock(a)},componentUpdated:function(e,t){var a,r,i=e.querySelectorAll("code");for(r=0;r<i.length;r+=1)a=i[r],"string"===typeof t.value&&(a.textContent=t.value,n.highlightBlock(a))}})}};e.exports=r},"998d":function(e,t){e.exports=function(e){return{contains:[{className:"number",begin:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{className:"number",begin:"\\b\\d+\\b",relevance:0},{className:"string",begin:'"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)',end:'"',keywords:"GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE",illegal:"\\n",relevance:10},{className:"string",begin:/\[/,end:/\]/,illegal:"\\n"},{className:"string",begin:'"',end:'"',illegal:"\\n"}]}}},"9b32":function(e,t){e.exports=function(e){var t="[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*",a="\\|[^]*?\\|",n="(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?",r={className:"meta",begin:"^#!",end:"$"},i={className:"literal",begin:"\\b(t{1}|nil)\\b"},s={className:"number",variants:[{begin:n,relevance:0},{begin:"#(b|B)[0-1]+(/[0-1]+)?"},{begin:"#(o|O)[0-7]+(/[0-7]+)?"},{begin:"#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?"},{begin:"#(c|C)\\("+n+" +"+n,end:"\\)"}]},o=e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),l=e.COMMENT(";","$",{relevance:0}),_={begin:"\\*",end:"\\*"},c={className:"symbol",begin:"[:&]"+t},d={begin:t,relevance:0},m={begin:a},p={begin:"\\(",end:"\\)",contains:["self",i,o,s,d]},E={contains:[s,o,_,c,p,d],variants:[{begin:"['`]\\(",end:"\\)"},{begin:"\\(quote ",end:"\\)",keywords:{name:"quote"}},{begin:"'"+a}]},u={variants:[{begin:"'"+t},{begin:"#'"+t+"(::"+t+")*"}]},S={begin:"\\(\\s*",end:"\\)"},g={endsWithParent:!0,relevance:0};return S.contains=[{className:"name",variants:[{begin:t},{begin:a}]},g],g.contains=[E,u,S,i,s,o,l,_,c,m,d],{illegal:/\S/,contains:[s,r,i,o,l,E,u,S,d]}}},"9bf2":function(e,t){e.exports=function(e){var t={className:"built_in",begin:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},a={keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},n=/[a-zA-Z@][a-zA-Z0-9_]*/,r="@interface @class @protocol @implementation";return{aliases:["mm","objc","obj-c"],keywords:a,lexemes:n,illegal:"</",contains:[t,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,e.QUOTE_STRING_MODE,{className:"string",variants:[{begin:'@"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:"'",end:"[^\\\\]'",illegal:"[^\\\\][^']"}]},{className:"meta",begin:"#",end:"$",contains:[{className:"meta-string",variants:[{begin:'"',end:'"'},{begin:"<",end:">"}]}]},{className:"class",begin:"("+r.split(" ").join("|")+")\\b",end:"({|$)",excludeEnd:!0,keywords:r,lexemes:n,contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"\\."+e.UNDERSCORE_IDENT_RE,relevance:0}]}}},"9f0c":function(e,t){e.exports=function(e){var t={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:'b"',end:'"'},{begin:"b'",end:"'"},e.inherit(e.APOS_STRING_MODE,{illegal:null}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null})]},a={variants:[e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE]};return{aliases:["zep"],case_insensitive:!0,keywords:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var let while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally int uint long ulong char uchar double float bool boolean stringlikely unlikely",contains:[e.C_LINE_COMMENT_MODE,e.HASH_COMMENT_MODE,e.COMMENT("/\\*","\\*/",{contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.COMMENT("__halt_compiler.+?;",!1,{endsWithParent:!0,keywords:"__halt_compiler",lexemes:e.UNDERSCORE_IDENT_RE}),{className:"string",begin:"<<<['\"]?\\w+['\"]?$",end:"^\\w+;",contains:[e.BACKSLASH_ESCAPE]},{begin:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{className:"function",beginKeywords:"function",end:/[;{]/,excludeEnd:!0,illegal:"\\$|\\[|%",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",begin:"\\(",end:"\\)",contains:["self",e.C_BLOCK_COMMENT_MODE,t,a]}]},{className:"class",beginKeywords:"class interface",end:"{",excludeEnd:!0,illegal:/[:\(\$"]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"namespace",end:";",illegal:/[\.']/,contains:[e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"use",end:";",contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"=>"},t,a]}}},"9f7f":function(e,t){e.exports=function(e){var t={className:"meta",begin:"@[A-Za-z]+"},a={className:"subst",variants:[{begin:"\\$[A-Za-z0-9_]+"},{begin:"\\${",end:"}"}]},n={className:"string",variants:[{begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:'"""',end:'"""',relevance:10},{begin:'[a-z]+"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE,a]},{className:"string",begin:'[a-z]+"""',end:'"""',contains:[a],relevance:10}]},r={className:"symbol",begin:"'\\w[\\w\\d_]*(?!')"},i={className:"type",begin:"\\b[A-Z][A-Za-z0-9_]*",relevance:0},s={className:"title",begin:/[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,relevance:0},o={className:"class",beginKeywords:"class object trait type",end:/[:={\[\n;]/,excludeEnd:!0,contains:[{beginKeywords:"extends with",relevance:10},{begin:/\[/,end:/\]/,excludeBegin:!0,excludeEnd:!0,relevance:0,contains:[i]},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,relevance:0,contains:[i]},s]},l={className:"function",beginKeywords:"def",end:/[:={\[(\n;]/,excludeEnd:!0,contains:[s]};return{keywords:{literal:"true false null",keyword:"type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,r,i,l,o,e.C_NUMBER_MODE,t]}}},a0a7:function(e,t){e.exports=function(e){return{keywords:{keyword:"float color point normal vector matrix while for if do return else break extern continue",built_in:"abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp faceforward filterstep floor format fresnel incident length lightsource log match max min mod noise normalize ntransform opposite option phong pnoise pow printf ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan texture textureinfo trace transform vtransform xcomp ycomp zcomp"},illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$"},{className:"class",beginKeywords:"surface displacement light volume imager",end:"\\("},{beginKeywords:"illuminate illuminance gather",end:"\\("}]}}},a14e:function(e,t){e.exports=function(e){var t={className:"string",begin:/'(.|\\[xXuU][a-zA-Z0-9]+)'/},a={className:"string",variants:[{begin:'"',end:'"'}]},n={className:"title",begin:/[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/},r={className:"function",beginKeywords:"def",end:/[:={\[(\n;]/,excludeEnd:!0,contains:[n]};return{keywords:{literal:"true false",keyword:"case class def else enum if impl import in lat rel index let match namespace switch type yield with"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,t,a,r,e.C_NUMBER_MODE]}}},a154:function(e,t){e.exports=function(e){return{case_insensitive:!0,lexemes:"[.%]?"+e.IDENT_RE,keywords:{keyword:"lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",built_in:"ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr",meta:"%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"},contains:[e.COMMENT(";","$",{relevance:0}),{className:"number",variants:[{begin:"\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",relevance:0},{begin:"\\$[0-9][0-9A-Fa-f]*",relevance:0},{begin:"\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b"},{begin:"\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b"}]},e.QUOTE_STRING_MODE,{className:"string",variants:[{begin:"'",end:"[^\\\\]'"},{begin:"`",end:"[^\\\\]`"}],relevance:0},{className:"symbol",variants:[{begin:"^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)"},{begin:"^\\s*%%[A-Za-z0-9_$#@~.?]*:"}],relevance:0},{className:"subst",begin:"%[0-9]+",relevance:0},{className:"subst",begin:"%!S+",relevance:0},{className:"meta",begin:/^\s*\.[\w_-]+/}]}}},a15a:function(e,t){e.exports=function(e){return{case_insensitive:!0,illegal:"^.",lexemes:"[a-zA-Z][a-zA-Z0-9_$%!#]*",keywords:{keyword:"ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE WEND WIDTH WINDOW WRITE XOR"},contains:[e.QUOTE_STRING_MODE,e.COMMENT("REM","$",{relevance:10}),e.COMMENT("'","$",{relevance:0}),{className:"symbol",begin:"^[0-9]+ ",relevance:10},{className:"number",begin:"\\b([0-9]+[0-9edED.]*[#!]?)",relevance:0},{className:"number",begin:"(&[hH][0-9a-fA-F]{1,4})"},{className:"number",begin:"(&[oO][0-7]{1,6})"}]}}},a27d:function(e,t){e.exports=function(e){return{aliases:["tk"],keywords:"after append apply array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock close concat continue dde dict encoding eof error eval exec exit expr fblocked fconfigure fcopy file fileevent filename flush for foreach format gets glob global history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename return safe scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update uplevel upvar variable vwait while",contains:[e.COMMENT(";[ \\t]*#","$"),e.COMMENT("^[ \\t]*#","$"),{beginKeywords:"proc",end:"[\\{]",excludeEnd:!0,contains:[{className:"title",begin:"[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",end:"[ \\t\\n\\r]",endsWithParent:!0,excludeEnd:!0}]},{excludeEnd:!0,variants:[{begin:"\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)",end:"[^a-zA-Z0-9_\\}\\$]"},{begin:"\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",end:"(\\))?[^a-zA-Z0-9_\\}\\$]"}]},{className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[e.inherit(e.QUOTE_STRING_MODE,{illegal:null})]},{className:"number",variants:[e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE]}]}}},a33c:function(e,t){e.exports=function(e){return{case_insensitive:!0,aliases:["arm"],lexemes:"\\.?"+e.IDENT_RE,keywords:{meta:".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",built_in:"r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"},contains:[{className:"keyword",begin:"\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?",end:"\\s"},e.COMMENT("[;@]","$",{relevance:0}),e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"'",end:"[^\\\\]'",relevance:0},{className:"title",begin:"\\|",end:"\\|",illegal:"\\n",relevance:0},{className:"number",variants:[{begin:"[#$=]?0x[0-9a-f]+"},{begin:"[#$=]?0b[01]+"},{begin:"[#$=]\\d+"},{begin:"\\b\\d+"}],relevance:0},{className:"symbol",variants:[{begin:"^[a-z_\\.\\$][a-z0-9_\\.\\$]+"},{begin:"^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"},{begin:"[=#]\\w+"}],relevance:0}]}}},a342:function(e,t){e.exports=function(e){return{case_insensitive:!0,aliases:["mips"],lexemes:"\\.?"+e.IDENT_RE,keywords:{meta:".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ",built_in:"$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "},contains:[{className:"keyword",begin:"\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(.hb)?|jr(.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs.[sd]|add.[sd]|alnv.ps|bc1[ft]l?|c.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et]).[sd]|(ceil|floor|round|trunc).[lw].[sd]|cfc1|cvt.d.[lsw]|cvt.l.[dsw]|cvt.ps.s|cvt.s.[dlw]|cvt.s.p[lu]|cvt.w.[dls]|div.[ds]|ldx?c1|luxc1|lwx?c1|madd.[sd]|mfc1|mov[fntz]?.[ds]|msub.[sd]|mth?c1|mul.[ds]|neg.[ds]|nmadd.[ds]|nmsub.[ds]|p[lu][lu].ps|recip.fmt|r?sqrt.[ds]|sdx?c1|sub.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",end:"\\s"},e.COMMENT("[;#]","$"),e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"'",end:"[^\\\\]'",relevance:0},{className:"title",begin:"\\|",end:"\\|",illegal:"\\n",relevance:0},{className:"number",variants:[{begin:"0x[0-9a-f]+"},{begin:"\\b-?\\d+"}],relevance:0},{className:"symbol",variants:[{begin:"^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"},{begin:"^\\s*[0-9]+:"},{begin:"[0-9]+[bf]"}],relevance:0}],illegal:"/"}}},a613:function(e,t){e.exports=function(e){var t={className:"number",begin:"[1-9][0-9]*",relevance:0},a={className:"symbol",begin:":[^\\]]+"},n={className:"built_in",begin:"(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",end:"\\]",contains:["self",t,a]},r={className:"built_in",begin:"(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",end:"\\]",contains:["self",t,e.QUOTE_STRING_MODE,a]};return{keywords:{keyword:"ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN SUBSTR FINDSTR VOFFSET PROG ATTR MN POS",literal:"ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET"},contains:[n,r,{className:"keyword",begin:"/(PROG|ATTR|MN|POS|END)\\b"},{className:"keyword",begin:"(CALL|RUN|POINT_LOGIC|LBL)\\b"},{className:"keyword",begin:"\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"},{className:"number",begin:"\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",relevance:0},e.COMMENT("//","[;$]"),e.COMMENT("!","[;$]"),e.COMMENT("--eg:","$"),e.QUOTE_STRING_MODE,{className:"string",begin:"'",end:"'"},e.C_NUMBER_MODE,{className:"variable",begin:"\\$[A-Za-z0-9_]+"}]}}},a6fb:function(e,t){e.exports=function(e){return{case_insensitive:!0,lexemes:"\\.?"+e.IDENT_RE,keywords:{keyword:"adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr",built_in:"r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf",meta:".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"},contains:[e.C_BLOCK_COMMENT_MODE,e.COMMENT(";","$",{relevance:0}),e.C_NUMBER_MODE,e.BINARY_NUMBER_MODE,{className:"number",begin:"\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"},e.QUOTE_STRING_MODE,{className:"string",begin:"'",end:"[^\\\\]'",illegal:"[^\\\\][^']"},{className:"symbol",begin:"^[A-Za-z0-9_.$]+:"},{className:"meta",begin:"#",end:"$"},{className:"subst",begin:"@[0-9]+"}]}}},a70e:function(e,t,a){(function(e){"object"===typeof window&&window||"object"===typeof self&&self;e(t)})(function(e){var t,a=[],n=Object.keys,r={},i={},s=/^(no-?highlight|plain|text)$/i,o=/\blang(?:uage)?-([\w-]+)\b/i,l=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,_="</span>",c={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};function d(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function m(e){return e.nodeName.toLowerCase()}function p(e,t){var a=e&&e.exec(t);return a&&0===a.index}function E(e){return s.test(e)}function u(e){var t,a,n,r,i=e.className+" ";if(i+=e.parentNode?e.parentNode.className:"",a=o.exec(i),a)return L(a[1])?a[1]:"no-highlight";for(i=i.split(/\s+/),t=0,n=i.length;t<n;t++)if(r=i[t],E(r)||L(r))return r}function S(e){var t,a={},n=Array.prototype.slice.call(arguments,1);for(t in e)a[t]=e[t];return n.forEach(function(e){for(t in e)a[t]=e[t]}),a}function g(e){var t=[];return function e(a,n){for(var r=a.firstChild;r;r=r.nextSibling)3===r.nodeType?n+=r.nodeValue.length:1===r.nodeType&&(t.push({event:"start",offset:n,node:r}),n=e(r,n),m(r).match(/br|hr|img|input/)||t.push({event:"stop",offset:n,node:r}));return n}(e,0),t}function T(e,t,n){var r=0,i="",s=[];function o(){return e.length&&t.length?e[0].offset!==t[0].offset?e[0].offset<t[0].offset?e:t:"start"===t[0].event?e:t:e.length?e:t}function l(e){function t(e){return" "+e.nodeName+'="'+d(e.value).replace('"',"&quot;")+'"'}i+="<"+m(e)+a.map.call(e.attributes,t).join("")+">"}function _(e){i+="</"+m(e)+">"}function c(e){("start"===e.event?l:_)(e.node)}while(e.length||t.length){var p=o();if(i+=d(n.substring(r,p[0].offset)),r=p[0].offset,p===e){s.reverse().forEach(_);do{c(p.splice(0,1)[0]),p=o()}while(p===e&&p.length&&p[0].offset===r);s.reverse().forEach(l)}else"start"===p[0].event?s.push(p[0].node):s.pop(),c(p.splice(0,1)[0])}return i+d(n.substr(r))}function b(e){return e.variants&&!e.cached_variants&&(e.cached_variants=e.variants.map(function(t){return S(e,{variants:null},t)})),e.cached_variants||e.endsWithParent&&[S(e)]||[e]}function C(e){if(t&&!e.langApiRestored){for(var a in e.langApiRestored=!0,t)e[a]&&(e[t[a]]=e[a]);(e.contains||[]).concat(e.variants||[]).forEach(C)}}function N(e){function t(e){return e&&e.source||e}function a(a,n){return new RegExp(t(a),"m"+(e.case_insensitive?"i":"")+(n?"g":""))}function r(e,a){for(var n=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./,r=0,i="",s=0;s<e.length;s++){var o=r,l=t(e[s]);s>0&&(i+=a);while(l.length>0){var _=n.exec(l);if(null==_){i+=l;break}i+=l.substring(0,_.index),l=l.substring(_.index+_[0].length),"\\"==_[0][0]&&_[1]?i+="\\"+String(Number(_[1])+o):(i+=_[0],"("==_[0]&&r++)}}return i}function i(s,o){if(!s.compiled){if(s.compiled=!0,s.keywords=s.keywords||s.beginKeywords,s.keywords){var l={},_=function(t,a){e.case_insensitive&&(a=a.toLowerCase()),a.split(" ").forEach(function(e){var a=e.split("|");l[a[0]]=[t,a[1]?Number(a[1]):1]})};"string"===typeof s.keywords?_("keyword",s.keywords):n(s.keywords).forEach(function(e){_(e,s.keywords[e])}),s.keywords=l}s.lexemesRe=a(s.lexemes||/\w+/,!0),o&&(s.beginKeywords&&(s.begin="\\b("+s.beginKeywords.split(" ").join("|")+")\\b"),s.begin||(s.begin=/\B|\b/),s.beginRe=a(s.begin),s.endSameAsBegin&&(s.end=s.begin),s.end||s.endsWithParent||(s.end=/\B|\b/),s.end&&(s.endRe=a(s.end)),s.terminator_end=t(s.end)||"",s.endsWithParent&&o.terminator_end&&(s.terminator_end+=(s.end?"|":"")+o.terminator_end)),s.illegal&&(s.illegalRe=a(s.illegal)),null==s.relevance&&(s.relevance=1),s.contains||(s.contains=[]),s.contains=Array.prototype.concat.apply([],s.contains.map(function(e){return b("self"===e?s:e)})),s.contains.forEach(function(e){i(e,s)}),s.starts&&i(s.starts,o);var c=s.contains.map(function(e){return e.beginKeywords?"\\.?(?:"+e.begin+")\\.?":e.begin}).concat([s.terminator_end,s.illegal]).map(t).filter(Boolean);s.terminators=c.length?a(r(c,"|"),!0):{exec:function(){return null}}}}i(e)}function R(e,t,a,n){function i(e){return new RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),"m")}function s(e,t){var a,n;for(a=0,n=t.contains.length;a<n;a++)if(p(t.contains[a].beginRe,e))return t.contains[a].endSameAsBegin&&(t.contains[a].endRe=i(t.contains[a].beginRe.exec(e)[0])),t.contains[a]}function o(e,t){if(p(e.endRe,t)){while(e.endsParent&&e.parent)e=e.parent;return e}if(e.endsWithParent)return o(e.parent,t)}function l(e,t){return!a&&p(t.illegalRe,e)}function m(e,t){var a=C.case_insensitive?t[0].toLowerCase():t[0];return e.keywords.hasOwnProperty(a)&&e.keywords[a]}function E(e,t,a,n){var r=n?"":c.classPrefix,i='<span class="'+r,s=a?"":_;return i+=e+'">',i+t+s}function u(){var e,t,a,n;if(!I.keywords)return d(h);n="",t=0,I.lexemesRe.lastIndex=0,a=I.lexemesRe.exec(h);while(a)n+=d(h.substring(t,a.index)),e=m(I,a),e?(y+=e[1],n+=E(e[0],d(a[0]))):n+=d(a[0]),t=I.lexemesRe.lastIndex,a=I.lexemesRe.exec(h);return n+d(h.substr(t))}function S(){var e="string"===typeof I.subLanguage;if(e&&!r[I.subLanguage])return d(h);var t=e?R(I.subLanguage,h,!0,v[I.subLanguage]):O(h,I.subLanguage.length?I.subLanguage:void 0);return I.relevance>0&&(y+=t.relevance),e&&(v[I.subLanguage]=t.top),E(t.language,t.value,!1,!0)}function g(){A+=null!=I.subLanguage?S():u(),h=""}function T(e){A+=e.className?E(e.className,"",!0):"",I=Object.create(e,{parent:{value:I}})}function b(e,t){if(h+=e,null==t)return g(),0;var a=s(t,I);if(a)return a.skip?h+=t:(a.excludeBegin&&(h+=t),g(),a.returnBegin||a.excludeBegin||(h=t)),T(a,t),a.returnBegin?0:t.length;var n=o(I,t);if(n){var r=I;r.skip?h+=t:(r.returnEnd||r.excludeEnd||(h+=t),g(),r.excludeEnd&&(h=t));do{I.className&&(A+=_),I.skip||I.subLanguage||(y+=I.relevance),I=I.parent}while(I!==n.parent);return n.starts&&(n.endSameAsBegin&&(n.starts.endRe=n.endRe),T(n.starts,"")),r.returnEnd?0:t.length}if(l(t,I))throw new Error('Illegal lexeme "'+t+'" for mode "'+(I.className||"<unnamed>")+'"');return h+=t,t.length||1}var C=L(e);if(!C)throw new Error('Unknown language: "'+e+'"');N(C);var f,I=n||C,v={},A="";for(f=I;f!==C;f=f.parent)f.className&&(A=E(f.className,"",!0)+A);var h="",y=0;try{var D,M,x=0;while(1){if(I.terminators.lastIndex=x,D=I.terminators.exec(t),!D)break;M=b(t.substring(x,D.index),D[0]),x=D.index+M}for(b(t.substr(x)),f=I;f.parent;f=f.parent)f.className&&(A+=_);return{relevance:y,value:A,language:e,top:I}}catch(w){if(w.message&&-1!==w.message.indexOf("Illegal"))return{relevance:0,value:d(t)};throw w}}function O(e,t){t=t||c.languages||n(r);var a={relevance:0,value:d(e)},i=a;return t.filter(L).filter(x).forEach(function(t){var n=R(t,e,!1);n.language=t,n.relevance>i.relevance&&(i=n),n.relevance>a.relevance&&(i=a,a=n)}),i.language&&(a.second_best=i),a}function f(e){return c.tabReplace||c.useBR?e.replace(l,function(e,t){return c.useBR&&"\n"===e?"<br>":c.tabReplace?t.replace(/\t/g,c.tabReplace):""}):e}function I(e,t,a){var n=t?i[t]:a,r=[e.trim()];return e.match(/\bhljs\b/)||r.push("hljs"),-1===e.indexOf(n)&&r.push(n),r.join(" ").trim()}function v(e){var t,a,n,r,i,s=u(e);E(s)||(c.useBR?(t=document.createElementNS("http://www.w3.org/1999/xhtml","div"),t.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):t=e,i=t.textContent,n=s?R(s,i,!0):O(i),a=g(t),a.length&&(r=document.createElementNS("http://www.w3.org/1999/xhtml","div"),r.innerHTML=n.value,n.value=T(a,g(r),i)),n.value=f(n.value),e.innerHTML=n.value,e.className=I(e.className,s,n.language),e.result={language:n.language,re:n.relevance},n.second_best&&(e.second_best={language:n.second_best.language,re:n.second_best.relevance}))}function A(e){c=S(c,e)}function h(){if(!h.called){h.called=!0;var e=document.querySelectorAll("pre code");a.forEach.call(e,v)}}function y(){addEventListener("DOMContentLoaded",h,!1),addEventListener("load",h,!1)}function D(t,a){var n=r[t]=a(e);C(n),n.aliases&&n.aliases.forEach(function(e){i[e]=t})}function M(){return n(r)}function L(e){return e=(e||"").toLowerCase(),r[e]||r[i[e]]}function x(e){var t=L(e);return t&&!t.disableAutodetect}return e.highlight=R,e.highlightAuto=O,e.fixMarkup=f,e.highlightBlock=v,e.configure=A,e.initHighlighting=h,e.initHighlightingOnLoad=y,e.registerLanguage=D,e.listLanguages=M,e.getLanguage=L,e.autoDetection=x,e.inherit=S,e.IDENT_RE="[a-zA-Z]\\w*",e.UNDERSCORE_IDENT_RE="[a-zA-Z_]\\w*",e.NUMBER_RE="\\b\\d+(\\.\\d+)?",e.C_NUMBER_RE="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BINARY_NUMBER_RE="\\b(0b[01]+)",e.RE_STARTERS_RE="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BACKSLASH_ESCAPE={begin:"\\\\[\\s\\S]",relevance:0},e.APOS_STRING_MODE={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.QUOTE_STRING_MODE={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.PHRASAL_WORDS_MODE={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.COMMENT=function(t,a,n){var r=e.inherit({className:"comment",begin:t,end:a,contains:[]},n||{});return r.contains.push(e.PHRASAL_WORDS_MODE),r.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|XXX):",relevance:0}),r},e.C_LINE_COMMENT_MODE=e.COMMENT("//","$"),e.C_BLOCK_COMMENT_MODE=e.COMMENT("/\\*","\\*/"),e.HASH_COMMENT_MODE=e.COMMENT("#","$"),e.NUMBER_MODE={className:"number",begin:e.NUMBER_RE,relevance:0},e.C_NUMBER_MODE={className:"number",begin:e.C_NUMBER_RE,relevance:0},e.BINARY_NUMBER_MODE={className:"number",begin:e.BINARY_NUMBER_RE,relevance:0},e.CSS_NUMBER_MODE={className:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},e.REGEXP_MODE={className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,{begin:/\[/,end:/\]/,relevance:0,contains:[e.BACKSLASH_ESCAPE]}]},e.TITLE_MODE={className:"title",begin:e.IDENT_RE,relevance:0},e.UNDERSCORE_TITLE_MODE={className:"title",begin:e.UNDERSCORE_IDENT_RE,relevance:0},e.METHOD_GUARD={begin:"\\.\\s*"+e.UNDERSCORE_IDENT_RE,relevance:0},e})},a710:function(e,t){e.exports=function(e){var t={className:"number",relevance:0,variants:[{begin:"[$][a-fA-F0-9]+"},e.NUMBER_MODE]};return{case_insensitive:!0,keywords:{keyword:"public private property continue exit extern new try catch eachin not abstract final select case default const local global field end if then else elseif endif while wend repeat until forever for to step next return module inline throw import",built_in:"DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI",literal:"true false null and or shl shr mod"},illegal:/\/\*/,contains:[e.COMMENT("#rem","#end"),e.COMMENT("'","$",{relevance:0}),{className:"function",beginKeywords:"function method",end:"[(=:]|$",illegal:/\n/,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"class",beginKeywords:"class interface",end:"$",contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{className:"built_in",begin:"\\b(self|super)\\b"},{className:"meta",begin:"\\s*#",end:"$",keywords:{"meta-keyword":"if else elseif endif end then"}},{className:"meta",begin:"^\\s*strict\\b"},{beginKeywords:"alias",end:"=",contains:[e.UNDERSCORE_TITLE_MODE]},e.QUOTE_STRING_MODE,t]}}},a885:function(e,t){e.exports=function(e){return{keywords:"false int abstract private char boolean static null if for true while long throw finally protected final return void enum else break new catch byte super case short default double public try this switch continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count order group by asc desc index hint like dispaly edit client server ttsbegin ttscommit str real date container anytype common div mod",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$"},{className:"class",beginKeywords:"class interface",end:"{",excludeEnd:!0,illegal:":",contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]}]}}},a941:function(e,t){e.exports=function(e){var t={keyword:"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual trait volatile transient native default",built_in:"Byte Short Char Int Long Boolean Float Double Void Unit Nothing",literal:"true false null"},a={className:"keyword",begin:/\b(break|continue|return|this)\b/,starts:{contains:[{className:"symbol",begin:/@\w+/}]}},n={className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"@"},r={className:"subst",begin:"\\${",end:"}",contains:[e.APOS_STRING_MODE,e.C_NUMBER_MODE]},i={className:"variable",begin:"\\$"+e.UNDERSCORE_IDENT_RE},s={className:"string",variants:[{begin:'"""',end:'"""',contains:[i,r]},{begin:"'",end:"'",illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"',illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,i,r]}]},o={className:"meta",begin:"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*"+e.UNDERSCORE_IDENT_RE+")?"},l={className:"meta",begin:"@"+e.UNDERSCORE_IDENT_RE,contains:[{begin:/\(/,end:/\)/,contains:[e.inherit(s,{className:"meta-string"})]}]},_="\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",c={className:"number",begin:_,relevance:0};return{aliases:["kt"],keywords:t,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,n,o,l,{className:"function",beginKeywords:"fun",end:"[(]|$",returnBegin:!0,excludeEnd:!0,keywords:t,illegal:/fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,relevance:5,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"type",begin:/</,end:/>/,keywords:"reified",relevance:0},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:t,relevance:0,contains:[{begin:/:/,end:/[=,\/]/,endsWithParent:!0,contains:[{className:"type",begin:e.UNDERSCORE_IDENT_RE},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE],relevance:0},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,o,l,s,e.C_NUMBER_MODE]},e.C_BLOCK_COMMENT_MODE]},{className:"class",beginKeywords:"class interface trait",end:/[:\{(]|$/,excludeEnd:!0,illegal:"extends implements",contains:[{beginKeywords:"public protected internal private constructor"},e.UNDERSCORE_TITLE_MODE,{className:"type",begin:/</,end:/>/,excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:/[,:]\s*/,end:/[<\(,]|$/,excludeBegin:!0,returnEnd:!0},o,l]},s,{className:"meta",begin:"^#!/usr/bin/env",end:"$",illegal:"\n"},c]}}},a995:function(e,t){e.exports=function(e){var t={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",built_in:"npm require console print module global window document"},a="[A-Za-z$_][0-9A-Za-z$_]*",n={className:"subst",begin:/#\{/,end:/}/,keywords:t},r=[e.BINARY_NUMBER_MODE,e.inherit(e.C_NUMBER_MODE,{starts:{end:"(\\s*/)?",relevance:0}}),{className:"string",variants:[{begin:/'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE]},{begin:/'/,end:/'/,contains:[e.BACKSLASH_ESCAPE]},{begin:/"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,n]},{begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,n]}]},{className:"regexp",variants:[{begin:"///",end:"///",contains:[n,e.HASH_COMMENT_MODE]},{begin:"//[gim]*",relevance:0},{begin:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{begin:"@"+a},{subLanguage:"javascript",excludeBegin:!0,excludeEnd:!0,variants:[{begin:"```",end:"```"},{begin:"`",end:"`"}]}];n.contains=r;var i=e.inherit(e.TITLE_MODE,{begin:a}),s="(\\(.*\\))?\\s*\\B[-=]>",o={className:"params",begin:"\\([^\\(]",returnBegin:!0,contains:[{begin:/\(/,end:/\)/,keywords:t,contains:["self"].concat(r)}]};return{aliases:["coffee","cson","iced"],keywords:t,illegal:/\/\*/,contains:r.concat([e.COMMENT("###","###"),e.HASH_COMMENT_MODE,{className:"function",begin:"^\\s*"+a+"\\s*=\\s*"+s,end:"[-=]>",returnBegin:!0,contains:[i,o]},{begin:/[:\(,=]\s*/,relevance:0,contains:[{className:"function",begin:s,end:"[-=]>",returnBegin:!0,contains:[o]}]},{className:"class",beginKeywords:"class",end:"$",illegal:/[:="\[\]]/,contains:[{beginKeywords:"extends",endsWithParent:!0,illegal:/[:="\[\]]/,contains:[i]},i]},{begin:a+":",end:":",returnBegin:!0,returnEnd:!0,relevance:0}])}}},adf9:function(e,t){e.exports=function(e){var t="bool byte i16 i32 i64 double string binary";return{keywords:{keyword:"namespace const typedef struct enum service exception void oneway set list map required optional",built_in:t,literal:"true false"},contains:[e.QUOTE_STRING_MODE,e.NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"class",beginKeywords:"struct enum service exception",end:/\{/,illegal:/\n/,contains:[e.inherit(e.TITLE_MODE,{starts:{endsWithParent:!0,excludeEnd:!0}})]},{begin:"\\b(set|list|map)\\s*<",end:">",keywords:t,contains:["self"]}]}}},ae7a:function(e,t){e.exports=function(e){var t={keyword:"bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",built_in:"abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",literal:"DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"},a=e.COMMENT("@","@"),n={className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline"},contains:[{begin:/\\\n/,relevance:0},{beginKeywords:"include",end:"$",keywords:{"meta-keyword":"include"},contains:[{className:"meta-string",begin:'"',end:'"',illegal:"\\n"}]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a]},r={begin:/\bstruct\s+/,end:/\s/,keywords:"struct",contains:[{className:"type",begin:e.UNDERSCORE_IDENT_RE,relevance:0}]},i=[{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,endsWithParent:!0,relevance:0,contains:[{className:"literal",begin:/\.\.\./},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,a,r]}],s={className:"title",begin:e.UNDERSCORE_IDENT_RE,relevance:0},o=function(t,n,r){var o=e.inherit({className:"function",beginKeywords:t,end:n,excludeEnd:!0,contains:[].concat(i)},r||{});return o.contains.push(s),o.contains.push(e.C_NUMBER_MODE),o.contains.push(e.C_BLOCK_COMMENT_MODE),o.contains.push(a),o},l={className:"built_in",begin:"\\b("+t.built_in.split(" ").join("|")+")\\b"},_={className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE],relevance:0},c={begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,keywords:t,relevance:0,contains:[{beginKeywords:t.keyword},l,{className:"built_in",begin:e.UNDERSCORE_IDENT_RE,relevance:0}]},d={begin:/\(/,end:/\)/,relevance:0,keywords:{built_in:t.built_in,literal:t.literal},contains:[e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,a,l,c,_,"self"]};return c.contains.push(d),{aliases:["gss"],case_insensitive:!0,keywords:t,illegal:/(\{[%#]|[%#]\}| <- )/,contains:[e.C_NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,_,n,{className:"keyword",begin:/\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/},o("proc keyword",";"),o("fn","="),{beginKeywords:"for threadfor",end:/;/,relevance:0,contains:[e.C_BLOCK_COMMENT_MODE,a,d]},{variants:[{begin:e.UNDERSCORE_IDENT_RE+"\\."+e.UNDERSCORE_IDENT_RE},{begin:e.UNDERSCORE_IDENT_RE+"\\s*="}],relevance:0},c,r]}}},af44:function(e,t){e.exports=function(e){var t="[A-Za-z$_][0-9A-Za-z$_]*",a={keyword:"in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class public private protected get set super static implements enum export import declare type namespace abstract as from extends async await",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document any number boolean string void Promise"},n={className:"meta",begin:"@"+t},r={begin:"\\(",end:/\)/,keywords:a,contains:["self",e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.NUMBER_MODE]},i={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:a,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n,r]};return{aliases:["ts"],keywords:a,contains:[{className:"meta",begin:/^\s*['"]use strict['"]/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,{className:"subst",begin:"\\$\\{",end:"\\}"}]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+e.IDENT_RE+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:e.IDENT_RE},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:a,contains:["self",e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}]}]}],relevance:0},{className:"function",begin:"function",end:/[\{;]/,excludeEnd:!0,keywords:a,contains:["self",e.inherit(e.TITLE_MODE,{begin:t}),i],illegal:/%/,relevance:0},{beginKeywords:"constructor",end:/\{/,excludeEnd:!0,contains:["self",i]},{begin:/module\./,keywords:{built_in:"module"},relevance:0},{beginKeywords:"module",end:/\{/,excludeEnd:!0},{beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:"interface extends"},{begin:/\$[(.]/},{begin:"\\."+e.IDENT_RE,relevance:0},n,r]}}},afba:function(e,t){e.exports=function(e){return{keywords:{keyword:"BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject Object StringDict StringList Table TableRow XML false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private",literal:"P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI",title:"setup draw",built_in:"displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key keyCode pixels focused frameCount frameRate height width size createGraphics beginDraw createShape loadShape PShape arc ellipse line point quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour millis minute month second year background clear colorMode fill noFill noStroke stroke alpha blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE]}}},b0cf:function(e,t){e.exports=function(e){var t={className:"string",variants:[e.inherit(e.QUOTE_STRING_MODE,{begin:'((u8?|U)|L)?"'}),{begin:'(u8?|U)?R"',end:'"',contains:[e.BACKSLASH_ESCAPE]},{begin:"'\\\\?.",end:"'",illegal:"."}]},a={className:"number",variants:[{begin:"\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"},{begin:e.C_NUMBER_RE}],relevance:0},n={className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"if else elif endif define undef ifdef ifndef"},contains:[{begin:/\\\n/,relevance:0},{beginKeywords:"include",end:"$",keywords:{"meta-keyword":"include"},contains:[e.inherit(t,{className:"meta-string"}),{className:"meta-string",begin:"<",end:">",illegal:"\\n"}]},t,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},r={className:"variable",begin:"\\&[a-z\\d_]*\\b"},i={className:"meta-keyword",begin:"/[a-z][a-z\\d-]*/"},s={className:"symbol",begin:"^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"},o={className:"params",begin:"<",end:">",contains:[a,r]},l={className:"class",begin:/[a-zA-Z_][a-zA-Z\d_@]*\s{/,end:/[{;=]/,returnBegin:!0,excludeEnd:!0},_={className:"class",begin:"/\\s*{",end:"};",relevance:10,contains:[r,i,s,l,o,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,t]};return{keywords:"",contains:[_,r,i,s,l,o,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,t,n,{begin:e.IDENT_RE+"::",keywords:""}]}}},b1b9:function(e,t){e.exports=function(e){var t={keyword:"if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using",literal:"true false nil",built_in:"_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"},a="[A-Za-z$_][0-9A-Za-z$_]*",n={className:"subst",begin:/#\{/,end:/}/,keywords:t},r=[e.inherit(e.C_NUMBER_MODE,{starts:{end:"(\\s*/)?",relevance:0}}),{className:"string",variants:[{begin:/'/,end:/'/,contains:[e.BACKSLASH_ESCAPE]},{begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,n]}]},{className:"built_in",begin:"@__"+e.IDENT_RE},{begin:"@"+e.IDENT_RE},{begin:e.IDENT_RE+"\\\\"+e.IDENT_RE}];n.contains=r;var i=e.inherit(e.TITLE_MODE,{begin:a}),s="(\\(.*\\))?\\s*\\B[-=]>",o={className:"params",begin:"\\([^\\(]",returnBegin:!0,contains:[{begin:/\(/,end:/\)/,keywords:t,contains:["self"].concat(r)}]};return{aliases:["moon"],keywords:t,illegal:/\/\*/,contains:r.concat([e.COMMENT("--","$"),{className:"function",begin:"^\\s*"+a+"\\s*=\\s*"+s,end:"[-=]>",returnBegin:!0,contains:[i,o]},{begin:/[\(,:=]\s*/,relevance:0,contains:[{className:"function",begin:s,end:"[-=]>",returnBegin:!0,contains:[o]}]},{className:"class",beginKeywords:"class",end:"$",illegal:/[:="\[\]]/,contains:[{beginKeywords:"extends",endsWithParent:!0,illegal:/[:="\[\]]/,contains:[i]},i]},{className:"name",begin:a+":",end:":",returnBegin:!0,returnEnd:!0,relevance:0}])}}},b322:function(e,t){e.exports=function(e){var t={className:"variable",begin:/\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/},a={className:"variable",begin:/\$+{[\w\.:-]+}/},n={className:"variable",begin:/\$+\w+/,illegal:/\(\){}/},r={className:"variable",begin:/\$+\([\w\^\.:-]+\)/},i={className:"params",begin:"(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)"},s={className:"keyword",begin:/\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|searchparse|searchreplace|system|tempfile|undef|verbose|warning)/},o={className:"meta",begin:/\$(\\[nrt]|\$)/},l={className:"class",begin:/\w+\:\:\w+/},_={className:"string",variants:[{begin:'"',end:'"'},{begin:"'",end:"'"},{begin:"`",end:"`"}],illegal:/\n/,contains:[o,t,a,n,r]};return{case_insensitive:!1,keywords:{keyword:"Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecShellWait ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText Int64Cmp Int64CmpU Int64Fmt IntCmp IntCmpU IntFmt IntOp IntPtrCmp IntPtrCmpU IntPtrOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegMultiStr WriteRegNone WriteRegStr WriteUninstaller XPStyle",literal:"admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib"},contains:[e.HASH_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.COMMENT(";","$",{relevance:0}),{className:"function",beginKeywords:"Function PageEx Section SectionGroup",end:"$"},_,s,a,n,r,i,l,e.NUMBER_MODE]}}},b3c5:function(e,t){e.exports=function(e){var t="[a-z'][a-zA-Z0-9_']*",a="("+t+":"+t+"|"+t+")",n={keyword:"after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",literal:"false true"},r=e.COMMENT("%","$"),i={className:"number",begin:"\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)",relevance:0},s={begin:"fun\\s+"+t+"/\\d+"},o={begin:a+"\\(",end:"\\)",returnBegin:!0,relevance:0,contains:[{begin:a,relevance:0},{begin:"\\(",end:"\\)",endsWithParent:!0,returnEnd:!0,relevance:0}]},l={begin:"{",end:"}",relevance:0},_={begin:"\\b_([A-Z][A-Za-z0-9_]*)?",relevance:0},c={begin:"[A-Z][a-zA-Z0-9_]*",relevance:0},d={begin:"#"+e.UNDERSCORE_IDENT_RE,relevance:0,returnBegin:!0,contains:[{begin:"#"+e.UNDERSCORE_IDENT_RE,relevance:0},{begin:"{",end:"}",relevance:0}]},m={beginKeywords:"fun receive if try case",end:"end",keywords:n};m.contains=[r,s,e.inherit(e.APOS_STRING_MODE,{className:""}),m,o,e.QUOTE_STRING_MODE,i,l,_,c,d];var p=[r,s,m,o,e.QUOTE_STRING_MODE,i,l,_,c,d];o.contains[1].contains=p,l.contains=p,d.contains[1].contains=p;var E={className:"params",begin:"\\(",end:"\\)",contains:p};return{aliases:["erl"],keywords:n,illegal:"(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",contains:[{className:"function",begin:"^"+t+"\\s*\\(",end:"->",returnBegin:!0,illegal:"\\(|#|//|/\\*|\\\\|:|;",contains:[E,e.inherit(e.TITLE_MODE,{begin:t})],starts:{end:";|\\.",keywords:n,contains:p}},r,{begin:"^-",end:"\\.",relevance:0,excludeEnd:!0,returnBegin:!0,lexemes:"-"+e.IDENT_RE,keywords:"-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn -import -include -include_lib -compile -define -else -endif -file -behaviour -behavior -spec",contains:[E]},i,e.QUOTE_STRING_MODE,d,_,c,l,{begin:/\.$/}]}}},b528:function(e,t){e.exports=function(e){var t={ruleDeclaration:"^[a-zA-Z][a-zA-Z0-9-]*",unexpectedChars:"[!@#$^&',?+~`|:]"},a=["ALPHA","BIT","CHAR","CR","CRLF","CTL","DIGIT","DQUOTE","HEXDIG","HTAB","LF","LWSP","OCTET","SP","VCHAR","WSP"],n=e.COMMENT(";","$"),r={className:"symbol",begin:/%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/},i={className:"symbol",begin:/%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/},s={className:"symbol",begin:/%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/},o={className:"symbol",begin:/%[si]/},l={begin:t.ruleDeclaration+"\\s*=",returnBegin:!0,end:/=/,relevance:0,contains:[{className:"attribute",begin:t.ruleDeclaration}]};return{illegal:t.unexpectedChars,keywords:a.join(" "),contains:[l,n,r,i,s,o,e.QUOTE_STRING_MODE,e.NUMBER_MODE]}}},b65b:function(e,t){e.exports=function(e){return{aliases:["console"],contains:[{className:"meta",begin:"^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]",starts:{end:"$",subLanguage:"bash"}}]}}},b7aa:function(e,t){e.exports=function(e){return{contains:[{className:"meta",begin:/^julia>/,relevance:10,starts:{end:/^(?![ ]{6})/,subLanguage:"julia"},aliases:["jldoctest"]}]}}},b884:function(e,t){e.exports=function(e){var t={"builtin-name":"def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"},a="a-zA-Z_\\-!.?+*=<>&#'",n="["+a+"]["+a+"0-9/;:]*",r="[-+]?\\d+(\\.\\d+)?",i={begin:n,relevance:0},s={className:"number",begin:r,relevance:0},o=e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),l=e.COMMENT(";","$",{relevance:0}),_={className:"literal",begin:/\b(true|false|nil)\b/},c={begin:"[\\[\\{]",end:"[\\]\\}]"},d={className:"comment",begin:"\\^"+n},m=e.COMMENT("\\^\\{","\\}"),p={className:"symbol",begin:"[:]{1,2}"+n},E={begin:"\\(",end:"\\)"},u={endsWithParent:!0,relevance:0},S={keywords:t,lexemes:n,className:"name",begin:n,starts:u},g=[E,o,d,m,l,p,c,s,_,i];return E.contains=[e.COMMENT("comment",""),S,u],u.contains=g,c.contains=g,m.contains=[c],{aliases:["clj"],illegal:/\S/,contains:[E,o,d,m,l,p,c,s,_]}}},b90a:function(e,t){e.exports=function(e){return{contains:[e.C_NUMBER_MODE,{begin:"[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",end:":",excludeEnd:!0},{begin:"(ncalls|tottime|cumtime)",end:"$",keywords:"ncalls tottime|10 cumtime|10 filename",relevance:10},{begin:"function calls",end:"$",contains:[e.C_NUMBER_MODE],relevance:10},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"\\(",end:"\\)$",excludeBegin:!0,excludeEnd:!0,relevance:0}]}}},b91e:function(e,t){e.exports=function(e){var t={className:"string",begin:/"/,end:/"/},a={className:"string",begin:/'/,end:/'/},n={className:"string",begin:"[\\w-?]+:\\w+",end:"\\W",relevance:0},r={className:"string",begin:"\\w+-?\\w+",end:"\\W",relevance:0};return{keywords:"dsconfig",contains:[{className:"keyword",begin:"^dsconfig",end:"\\s",excludeEnd:!0,relevance:10},{className:"built_in",begin:"(list|create|get|set|delete)-(\\w+)",end:"\\s",excludeEnd:!0,illegal:"!@#$%^&*()",relevance:10},{className:"built_in",begin:"--(\\w+)",end:"\\s",excludeEnd:!0},t,a,n,r,e.HASH_COMMENT_MODE]}}},ba76:function(e,t){e.exports=function(e){var t="assembly module package import alias class interface object given value assign void function new of extends satisfies abstracts in out return break continue throw assert dynamic if else switch case for while try catch finally then let this outer super is exists nonempty",a="shared abstract formal default actual variable late native deprecatedfinal sealed annotation suppressWarnings small",n="doc by license see throws tagged",r={className:"subst",excludeBegin:!0,excludeEnd:!0,begin:/``/,end:/``/,keywords:t,relevance:10},i=[{className:"string",begin:'"""',end:'"""',relevance:10},{className:"string",begin:'"',end:'"',contains:[r]},{className:"string",begin:"'",end:"'"},{className:"number",begin:"#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",relevance:0}];return r.contains=i,{keywords:{keyword:t+" "+a,meta:n},illegal:"\\$[^01]|#[^0-9a-fA-F]",contains:[e.C_LINE_COMMENT_MODE,e.COMMENT("/\\*","\\*/",{contains:["self"]}),{className:"meta",begin:'@[a-z]\\w*(?:\\:"[^"]*")?'}].concat(i)}}},bb43:function(e,t){e.exports=function(e){var t="[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*",a="[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*",n="and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока except exitfor finally foreach все if если in в not не or или try while пока ",r="SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE ",i="CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ",s="ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ",o="DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ",l="ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ",_="JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY ",c="ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ",d="smHidden smMaximized smMinimized smNormal wmNo wmYes ",m="COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND ",p="COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ",E="MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ",u="NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY ",S="dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT ",g="CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM ",T="ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ",b="PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE ",C="ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE ",N="CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ",R="STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER ",O="COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE ",f="SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE SYSREQ_STATЕ SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID ",I="RESULT_VAR_NAME RESULT_VAR_NAME_ENG ",v="AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID ",A="SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY ",h="SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ",y="SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS ",D="SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ",M="SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS ",L="ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME ",x="TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME ",w="ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk ",P="EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE ",k="cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate ",U="ISBL_SYNTAX NO_SYNTAX XML_SYNTAX ",F="WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ",B="SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ",G=r+i+s+o+l+_+c+d+m+p+E+u+S+g+T+b+C+N+R+O+f+I+v+A+h+y+D+M+L+x+w+P+k+U+F+B,Y="atUser atGroup atRole ",H="aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty ",V="apBegin apEnd ",q="alLeft alRight ",z="asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways ",W="cirCommon cirRevoked ",Q="ctSignature ctEncode ctSignatureEncode ",K="clbUnchecked clbChecked clbGrayed ",$="ceISB ceAlways ceNever ",j="ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob ",X="cfInternal cfDisplay ",Z="ciUnspecified ciWrite ciRead ",J="ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog ",ee="ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton ",te="cctDate cctInteger cctNumeric cctPick cctReference cctString cctText ",ae="cltInternal cltPrimary cltGUI ",ne="dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange ",re="dssEdit dssInsert dssBrowse dssInActive ",ie="dftDate dftShortDate dftDateTime dftTimeStamp ",se="dotDays dotHours dotMinutes dotSeconds ",oe="dtkndLocal dtkndUTC ",le="arNone arView arEdit arFull ",_e="ddaView ddaEdit ",ce="emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode ",de="ecotFile ecotProcess ",me="eaGet eaCopy eaCreate eaCreateStandardRoute ",pe="edltAll edltNothing edltQuery ",Ee="essmText essmCard ",ue="esvtLast esvtLastActive esvtSpecified ",Se="edsfExecutive edsfArchive ",ge="edstSQLServer edstFile ",Te="edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ",be="vsDefault vsDesign vsActive vsObsolete ",Ce="etNone etCertificate etPassword etCertificatePassword ",Ne="ecException ecWarning ecInformation ",Re="estAll estApprovingOnly ",Oe="evtLast evtLastActive evtQuery ",fe="fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger ",Ie="ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch ",ve="grhAuto grhX1 grhX2 grhX3 ",Ae="hltText hltRTF hltHTML ",he="iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG ",ye="im8bGrayscale im24bRGB im1bMonochrome ",De="itBMP itJPEG itWMF itPNG ",Me="ikhInformation ikhWarning ikhError ikhNoIcon ",Le="icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler ",xe="isShow isHide isByUserSettings ",we="jkJob jkNotice jkControlJob ",Pe="jtInner jtLeft jtRight jtFull jtCross ",ke="lbpAbove lbpBelow lbpLeft lbpRight ",Ue="eltPerConnection eltPerUser ",Fe="sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac ",Be="sfsItalic sfsStrikeout sfsNormal ",Ge="ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents ",Ye="mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom ",He="vtEqual vtGreaterOrEqual vtLessOrEqual vtRange ",Ve="rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth ",qe="rdWindow rdFile rdPrinter ",ze="rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument ",We="reOnChange reOnChangeValues ",Qe="ttGlobal ttLocal ttUser ttSystem ",Ke="ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal ",$e="smSelect smLike smCard ",je="stNone stAuthenticating stApproving ",Xe="sctString sctStream ",Ze="sstAnsiSort sstNaturalSort ",Je="svtEqual svtContain ",et="soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown ",tt="tarAbortByUser tarAbortByWorkflowException ",at="tvtAllWords tvtExactPhrase tvtAnyWord ",nt="usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp ",rt="utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected ",it="btAnd btDetailAnd btOr btNotOr btOnly ",st="vmView vmSelect vmNavigation ",ot="vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection ",lt="wfatPrevious wfatNext wfatCancel wfatFinish ",_t="wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 ",ct="wfetQueryParameter wfetText wfetDelimiter wfetLabel ",dt="wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate ",mt="wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal ",pt="wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal ",Et="waAll waPerformers waManual ",ut="wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause ",St="wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection ",gt="wiLow wiNormal wiHigh ",Tt="wrtSoft wrtHard ",bt="wsInit wsRunning wsDone wsControlled wsAborted wsContinued ",Ct="wtmFull wtmFromCurrent wtmOnlyCurrent ",Nt=Y+H+V+q+z+W+Q+K+$+j+X+Z+J+ee+te+ae+ne+re+ie+se+oe+le+_e+ce+de+me+pe+Ee+ue+Se+ge+Te+be+Ce+Ne+Re+Oe+fe+Ie+ve+Ae+he+ye+De+Me+Le+xe+we+Pe+ke+Ue+Fe+Be+Ge+Ye+He+Ve+qe+ze+We+Qe+Ke+$e+je+Xe+Ze+Je+et+tt+at+nt+rt+it+st+ot+lt+_t+ct+dt+mt+pt+Et+ut+St+gt+Tt+bt+Ct,Rt="AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory Анализ БазаДанных БлокЕсть БлокЕстьРасш БлокИнфо БлокСнять БлокСнятьРасш БлокУстановить Ввод ВводМеню ВедС ВедСпр ВерхняяГраницаМассива ВнешПрогр Восст ВременнаяПапка Время ВыборSQL ВыбратьЗапись ВыделитьСтр Вызвать Выполнить ВыпПрогр ГрафическийФайл ГруппаДополнительно ДатаВремяСерв ДеньНедели ДиалогДаНет ДлинаСтр ДобПодстр ЕПусто ЕслиТо ЕЧисло ЗамПодстр ЗаписьСправочника ЗначПоляСпр ИДТипСпр ИзвлечьДиск ИзвлечьИмяФайла ИзвлечьПуть ИзвлечьРасширение ИзмДат ИзменитьРазмерМассива ИзмеренийМассива ИмяОрг ИмяПоляСпр Индекс ИндикаторЗакрыть ИндикаторОткрыть ИндикаторШаг ИнтерактивныйРежим ИтогТблСпр КодВидВедСпр КодВидСпрПоИД КодПоAnalit КодСимвола КодСпр КолПодстр КолПроп КонМес Конст КонстЕсть КонстЗнач КонТран КопироватьФайл КопияСтр КПериод КСтрТблСпр Макс МаксСтрТблСпр Массив Меню МенюРасш Мин НаборДанныхНайтиРасш НаимВидСпр НаимПоAnalit НаимСпр НастроитьПереводыСтрок НачМес НачТран НижняяГраницаМассива НомерСпр НПериод Окно Окр Окружение ОтлИнфДобавить ОтлИнфУдалить Отчет ОтчетАнал ОтчетИнт ПапкаСуществует Пауза ПВыборSQL ПереименоватьФайл Переменные ПереместитьФайл Подстр ПоискПодстр ПоискСтр ПолучитьИДТаблицы ПользовательДополнительно ПользовательИД ПользовательИмя ПользовательСтатус Прервать ПроверитьПараметр ПроверитьПараметрЗнач ПроверитьУсловие РазбСтр РазнВремя РазнДат РазнДатаВремя РазнРабВремя РегУстВрем РегУстДат РегУстЧсл РедТекст РеестрЗапись РеестрСписокИменПарам РеестрЧтение РеквСпр РеквСпрПр Сегодня Сейчас Сервер СерверПроцессИД СертификатФайлСчитать СжПроб Символ СистемаДиректумКод СистемаИнформация СистемаКод Содержит СоединениеЗакрыть СоединениеОткрыть СоздатьДиалог СоздатьДиалогВыбораИзДвухСписков СоздатьДиалогВыбораПапки СоздатьДиалогОткрытияФайла СоздатьДиалогСохраненияФайла СоздатьЗапрос СоздатьИндикатор СоздатьИсключение СоздатьКэшированныйСправочник СоздатьМассив СоздатьНаборДанных СоздатьОбъект СоздатьОтчет СоздатьПапку СоздатьРедактор СоздатьСоединение СоздатьСписок СоздатьСписокСтрок СоздатьСправочник СоздатьСценарий СоздСпр СостСпр Сохр СохрСпр СписокСистем Спр Справочник СпрБлокЕсть СпрБлокСнять СпрБлокСнятьРасш СпрБлокУстановить СпрИзмНабДан СпрКод СпрНомер СпрОбновить СпрОткрыть СпрОтменить СпрПарам СпрПолеЗнач СпрПолеИмя СпрРекв СпрРеквВведЗн СпрРеквНовые СпрРеквПр СпрРеквПредЗн СпрРеквРежим СпрРеквТипТекст СпрСоздать СпрСост СпрСохранить СпрТблИтог СпрТблСтр СпрТблСтрКол СпрТблСтрМакс СпрТблСтрМин СпрТблСтрПред СпрТблСтрСлед СпрТблСтрСозд СпрТблСтрУд СпрТекПредст СпрУдалить СравнитьСтр СтрВерхРегистр СтрНижнРегистр СтрТблСпр СумПроп Сценарий СценарийПарам ТекВерсия ТекОрг Точн Тран Транслитерация УдалитьТаблицу УдалитьФайл УдСпр УдСтрТблСпр Уст УстановкиКонстант ФайлАтрибутСчитать ФайлАтрибутУстановить ФайлВремя ФайлВремяУстановить ФайлВыбрать ФайлЗанят ФайлЗаписать ФайлИскать ФайлКопировать ФайлМожноЧитать ФайлОткрыть ФайлПереименовать ФайлПерекодировать ФайлПереместить ФайлПросмотреть ФайлРазмер ФайлСоздать ФайлСсылкаСоздать ФайлСуществует ФайлСчитать ФайлУдалить ФмтSQLДат ФмтДат ФмтСтр ФмтЧсл Формат ЦМассивЭлемент ЦНаборДанныхРеквизит ЦПодстр ",Ot="AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work ВызовСпособ ИмяОтчета РеквЗнач ",ft="IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ",It=G+Nt,vt=Ot,At="null true false nil ",ht={className:"number",begin:e.NUMBER_RE,relevance:0},yt={className:"string",variants:[{begin:'"',end:'"'},{begin:"'",end:"'"}]},Dt={className:"doctag",begin:"\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",relevance:0},Mt={className:"comment",begin:"//",end:"$",relevance:0,contains:[e.PHRASAL_WORDS_MODE,Dt]},Lt={className:"comment",begin:"/\\*",end:"\\*/",relevance:0,contains:[e.PHRASAL_WORDS_MODE,Dt]},xt={variants:[Mt,Lt]},wt={keyword:n,built_in:It,class:vt,literal:At},Pt={begin:"\\.\\s*"+e.UNDERSCORE_IDENT_RE,keywords:wt,relevance:0},kt={className:"type",begin:":[ \\t]*("+ft.trim().replace(/\s/g,"|")+")",end:"[ \\t]*=",excludeEnd:!0},Ut={className:"variable",lexemes:t,keywords:wt,begin:t,relevance:0,containts:[kt,Pt]},Ft=a+"\\(",Bt={className:"title",lexemes:t,keywords:{built_in:Rt},begin:Ft,end:"\\(",returnBegin:!0,excludeEnd:!0},Gt={className:"function",begin:Ft,end:"\\)$",returnBegin:!0,lexemes:t,keywords:wt,illegal:"[\\[\\]\\|\\$\\?%,~#@]",contains:[Bt,Pt,Ut,yt,ht,xt]};return{aliases:["isbl"],case_insensitive:!0,lexemes:t,keywords:wt,illegal:"\\$|\\?|%|,|;$|~|#|@|</",contains:[Gt,kt,Pt,Ut,yt,ht,xt]}}},bb63:function(e,t){e.exports=function(e){var t={keyword:"abstract as base bool break byte case catch char checked const continue decimal default delegate do double enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long nameof object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while add alias ascending async await by descending dynamic equals from get global group into join let on orderby partial remove select set value var where yield",literal:"null false true"},a={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},n={className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]},r=e.inherit(n,{illegal:/\n/}),i={className:"subst",begin:"{",end:"}",keywords:t},s=e.inherit(i,{illegal:/\n/}),o={className:"string",begin:/\$"/,end:'"',illegal:/\n/,contains:[{begin:"{{"},{begin:"}}"},e.BACKSLASH_ESCAPE,s]},l={className:"string",begin:/\$@"/,end:'"',contains:[{begin:"{{"},{begin:"}}"},{begin:'""'},i]},_=e.inherit(l,{illegal:/\n/,contains:[{begin:"{{"},{begin:"}}"},{begin:'""'},s]});i.contains=[l,o,n,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,a,e.C_BLOCK_COMMENT_MODE],s.contains=[_,o,r,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,a,e.inherit(e.C_BLOCK_COMMENT_MODE,{illegal:/\n/})];var c={variants:[l,o,n,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},d=e.IDENT_RE+"(<"+e.IDENT_RE+"(\\s*,\\s*"+e.IDENT_RE+")*>)?(\\[\\])?";return{aliases:["csharp","c#"],keywords:t,illegal:/::/,contains:[e.COMMENT("///","$",{returnBegin:!0,contains:[{className:"doctag",variants:[{begin:"///",relevance:0},{begin:"\x3c!--|--\x3e"},{begin:"</?",end:">"}]}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"if else elif endif define undef warning error line region endregion pragma checksum"}},c,a,{beginKeywords:"class interface",end:/[{;=]/,illegal:/[^\s:,]/,contains:[e.TITLE_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"namespace",end:/[{;=]/,illegal:/[^\s:]/,contains:[e.inherit(e.TITLE_MODE,{begin:"[a-zA-Z](\\.?\\w)*"}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"meta",begin:"^\\s*\\[",excludeBegin:!0,end:"\\]",excludeEnd:!0,contains:[{className:"meta-string",begin:/"/,end:/"/}]},{beginKeywords:"new return throw await else",relevance:0},{className:"function",begin:"("+d+"\\s+)+"+e.IDENT_RE+"\\s*\\(",returnBegin:!0,end:/\s*[{;=]/,excludeEnd:!0,keywords:t,contains:[{begin:e.IDENT_RE+"\\s*\\(",returnBegin:!0,contains:[e.TITLE_MODE],relevance:0},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:t,relevance:0,contains:[c,a,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}]}}},bb7e:function(e,t){e.exports=function(e){return{keywords:"int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",illegal:"</",contains:[e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE]},{begin:"[\\$\\%\\@](\\^\\w\\b|#\\w+|[^\\s\\w{]|{\\w+}|\\w+)"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}}},bd88:function(e,t){e.exports=function(e){var t={className:"variable",begin:"\\$"+e.IDENT_RE},a={className:"number",begin:"#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"},n=["charset","css","debug","extend","font-face","for","import","include","media","mixin","page","warn","while"],r=["after","before","first-letter","first-line","active","first-child","focus","hover","lang","link","visited"],i=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],s="[\\.\\s\\n\\[\\:,]",o=["align-content","align-items","align-self","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","auto","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","clip-path","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","font","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-variant-ligatures","font-weight","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inherit","initial","justify-content","left","letter-spacing","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","mask","max-height","max-width","min-height","min-width","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","perspective","perspective-origin","pointer-events","position","quotes","resize","right","tab-size","table-layout","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-indent","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","white-space","widows","width","word-break","word-spacing","word-wrap","z-index"],l=["\\?","(\\bReturn\\b)","(\\bEnd\\b)","(\\bend\\b)","(\\bdef\\b)",";","#\\s","\\*\\s","===\\s","\\|","%"];return{aliases:["styl"],case_insensitive:!1,keywords:"if else for in",illegal:"("+l.join("|")+")",contains:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,{begin:"\\.[a-zA-Z][a-zA-Z0-9_-]*"+s,returnBegin:!0,contains:[{className:"selector-class",begin:"\\.[a-zA-Z][a-zA-Z0-9_-]*"}]},{begin:"\\#[a-zA-Z][a-zA-Z0-9_-]*"+s,returnBegin:!0,contains:[{className:"selector-id",begin:"\\#[a-zA-Z][a-zA-Z0-9_-]*"}]},{begin:"\\b("+i.join("|")+")"+s,returnBegin:!0,contains:[{className:"selector-tag",begin:"\\b[a-zA-Z][a-zA-Z0-9_-]*"}]},{begin:"&?:?:\\b("+r.join("|")+")"+s},{begin:"@("+n.join("|")+")\\b"},t,e.CSS_NUMBER_MODE,e.NUMBER_MODE,{className:"function",begin:"^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",illegal:"[\\n]",returnBegin:!0,contains:[{className:"title",begin:"\\b[a-zA-Z][a-zA-Z0-9_-]*"},{className:"params",begin:/\(/,end:/\)/,contains:[a,t,e.APOS_STRING_MODE,e.CSS_NUMBER_MODE,e.NUMBER_MODE,e.QUOTE_STRING_MODE]}]},{className:"attribute",begin:"\\b("+o.reverse().join("|")+")\\b",starts:{end:/;|$/,contains:[a,t,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.CSS_NUMBER_MODE,e.NUMBER_MODE,e.C_BLOCK_COMMENT_MODE],illegal:/\./,relevance:0}}]}}},c01d:function(e,t){e.exports=function(e){var t="HTTP/[0-9\\.]+";return{aliases:["https"],illegal:"\\S",contains:[{begin:"^"+t,end:"$",contains:[{className:"number",begin:"\\b\\d{3}\\b"}]},{begin:"^[A-Z]+ (.*?) "+t+"$",returnBegin:!0,end:"$",contains:[{className:"string",begin:" ",end:" ",excludeBegin:!0,excludeEnd:!0},{begin:t},{className:"keyword",begin:"[A-Z]+"}]},{className:"attribute",begin:"^\\w",end:": ",excludeEnd:!0,illegal:"\\n|\\s|=",starts:{end:"$",relevance:0}},{begin:"\\n\\n",starts:{subLanguage:[],endsWithParent:!0}}]}}},c22d:function(e,t){e.exports=function(e){return{case_insensitive:!0,lexemes:/[\w\._]+/,keywords:"goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{className:"string",begin:'{"',end:'"}',contains:[e.BACKSLASH_ESCAPE]},e.COMMENT(";","$",{relevance:0}),{className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib"},contains:[e.inherit(e.QUOTE_STRING_MODE,{className:"meta-string"}),e.NUMBER_MODE,e.C_NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"symbol",begin:"^\\*(\\w+|@)"},e.NUMBER_MODE,e.C_NUMBER_MODE]}}},c8e5:function(e,t){e.exports=function(e){var t="primitive rsc_template",a="group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml",n="property rsc_defaults op_defaults",r="params meta operations op rule attributes utilization",i="read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\",s="number string",o="Master Started Slave Stopped start promote demote stop monitor true false";return{aliases:["crm","pcmk"],case_insensitive:!0,keywords:{keyword:r+" "+i+" "+s,literal:o},contains:[e.HASH_COMMENT_MODE,{beginKeywords:"node",starts:{end:"\\s*([\\w_-]+:)?",starts:{className:"title",end:"\\s*[\\$\\w_][\\w_-]*"}}},{beginKeywords:t,starts:{className:"title",end:"\\s*[\\$\\w_][\\w_-]*",starts:{end:"\\s*@?[\\w_][\\w_\\.:-]*"}}},{begin:"\\b("+a.split(" ").join("|")+")\\s+",keywords:a,starts:{className:"title",end:"[\\$\\w_][\\w_-]*"}},{beginKeywords:n,starts:{className:"title",end:"\\s*([\\w_-]+:)?"}},e.QUOTE_STRING_MODE,{className:"meta",begin:"(ocf|systemd|service|lsb):[\\w_:-]+",relevance:0},{className:"number",begin:"\\b\\d+(\\.\\d+)?(ms|s|h|m)?",relevance:0},{className:"literal",begin:"[-]?(infinity|inf)",relevance:0},{className:"attr",begin:/([A-Za-z\$_\#][\w_-]+)=/,relevance:0},{className:"tag",begin:"</?",end:"/?>",relevance:0}]}}},d248:function(e,t){e.exports=function(e){var t={begin:/\|[A-Za-z]+:?/,keywords:{name:"truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone"},contains:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE]};return{aliases:["jinja"],case_insensitive:!0,subLanguage:"xml",contains:[e.COMMENT(/\{%\s*comment\s*%}/,/\{%\s*endcomment\s*%}/),e.COMMENT(/\{#/,/#}/),{className:"template-tag",begin:/\{%/,end:/%}/,contains:[{className:"name",begin:/\w+/,keywords:{name:"comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim"},starts:{endsWithParent:!0,keywords:"in by as",contains:[t],relevance:0}}]},{className:"template-variable",begin:/\{\{/,end:/}}/,contains:[t]}]}}},d4b5:function(e,t){e.exports=function(e){return{aliases:["do","ado"],case_insensitive:!0,keywords:"if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",contains:[{className:"symbol",begin:/`[a-zA-Z0-9_]+'/},{className:"variable",begin:/\$\{?[a-zA-Z0-9_]+\}?/},{className:"string",variants:[{begin:'`"[^\r\n]*?"\''},{begin:'"[^\r\n"]*"'}]},{className:"built_in",variants:[{begin:"\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\(|$)"}]},e.COMMENT("^[ \t]*\\*.*$",!1),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}}},d959:function(e,t){e.exports=function(e){var t="foreach do while for if from to step else on-error and or not in",a="global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime",n="add remove enable disable set get print export edit find run debug error info warning",r="true false yes no nothing nil null",i="traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firewall firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw",s={className:"variable",variants:[{begin:/\$[\w\d#@][\w\d_]*/},{begin:/\$\{(.*?)}/}]},o={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,s,{className:"variable",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]}]},l={className:"string",begin:/'/,end:/'/};return{aliases:["routeros","mikrotik"],case_insensitive:!0,lexemes:/:?[\w-]+/,keywords:{literal:r,keyword:t+" :"+t.split(" ").join(" :")+" :"+a.split(" ").join(" :")},contains:[{variants:[{begin:/^@/,end:/$/},{begin:/\/\*/,end:/\*\//},{begin:/%%/,end:/$/},{begin:/^'/,end:/$/},{begin:/^\s*\/[\w-]+=/,end:/$/},{begin:/\/\//,end:/$/},{begin:/^\[\</,end:/\>\]$/},{begin:/<\//,end:/>/},{begin:/^facet /,end:/\}/},{begin:"^1\\.\\.(\\d+)$",end:/$/}],illegal:/./},e.COMMENT("^#","$"),o,l,s,{begin:/[\w-]+\=([^\s\{\}\[\]\(\)]+)/,relevance:0,returnBegin:!0,contains:[{className:"attribute",begin:/[^=]+/},{begin:/=/,endsWithParent:!0,relevance:0,contains:[o,l,s,{className:"literal",begin:"\\b("+r.split(" ").join("|")+")\\b"},{begin:/("[^"]*"|[^\s\{\}\[\]]+)/}]}]},{className:"number",begin:/\*[0-9a-fA-F]+/},{begin:"\\b("+n.split(" ").join("|")+")([\\s[(]|])",returnBegin:!0,contains:[{className:"builtin-name",begin:/\w+/}]},{className:"built_in",variants:[{begin:"(\\.\\./|/|\\s)(("+i.split(" ").join("|")+");?\\s)+",relevance:10},{begin:/\.\./}]}]}}},dbcc:function(e,t){e.exports=function(e){var t={className:"built_in",begin:"\\b(void|bool|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|string|ref|array|double|float|auto|dictionary)"},a={className:"symbol",begin:"[a-zA-Z0-9_]+@"},n={className:"keyword",begin:"<",end:">",contains:[t,a]};return t.contains=[n],a.contains=[n],{aliases:["asc"],keywords:"for in|0 break continue while do|0 return if else case switch namespace is cast or and xor not get|0 in inout|10 out override set|0 private public const default|0 final shared external mixin|10 enum typedef funcdef this super import from interface abstract|0 try catch protected explicit",illegal:"(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunctions*[^\\(])",contains:[{className:"string",begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE],relevance:0},{className:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE],relevance:0},{className:"string",begin:'"""',end:'"""'},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{beginKeywords:"interface namespace",end:"{",illegal:"[;.\\-]",contains:[{className:"symbol",begin:"[a-zA-Z0-9_]+"}]},{beginKeywords:"class",end:"{",illegal:"[;.\\-]",contains:[{className:"symbol",begin:"[a-zA-Z0-9_]+",contains:[{begin:"[:,]\\s*",contains:[{className:"symbol",begin:"[a-zA-Z0-9_]+"}]}]}]},t,a,{className:"literal",begin:"\\b(null|true|false)"},{className:"number",begin:"(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"}]}}},dc41:function(e,t){e.exports=function(e){return{aliases:["ml"],keywords:{keyword:"abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while",built_in:"array bool char exn int list option order real ref string substring vector unit word",literal:"true false NONE SOME LESS EQUAL GREATER nil"},illegal:/\/\/|>>/,lexemes:"[a-z_]\\w*!?",contains:[{className:"literal",begin:/\[(\|\|)?\]|\(\)/,relevance:0},e.COMMENT("\\(\\*","\\*\\)",{contains:["self"]}),{className:"symbol",begin:"'[A-Za-z_](?!')[\\w']*"},{className:"type",begin:"`[A-Z][\\w']*"},{className:"type",begin:"\\b[A-Z][\\w']*",relevance:0},{begin:"[a-z_]\\w*'[\\w']*"},e.inherit(e.APOS_STRING_MODE,{className:"string",relevance:0}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),{className:"number",begin:"\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",relevance:0},{begin:/[-=]>/}]}}},de09:function(e,t){e.exports=function(e){var t=e.COMMENT("--","$");return{case_insensitive:!0,illegal:/[<>{}*]/,contains:[{beginKeywords:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment values with",end:/;/,endsWithParent:!0,lexemes:/[\w\.]+/,keywords:{keyword:"as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select self semi sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",literal:"true false null unknown",built_in:"array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text time timestamp tinyint varchar varying void"},contains:[{className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE,{begin:"''"}]},{className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE,{begin:'""'}]},{className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE]},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,t,e.HASH_COMMENT_MODE]},e.C_BLOCK_COMMENT_MODE,t,e.HASH_COMMENT_MODE]}}},df06:function(e,t){e.exports=function(e){return{keywords:{keyword:"break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",type:"atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBufferiimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",built_in:"gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",literal:"true false"},illegal:'"',contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$"}]}}},e10f:function(e,t){e.exports=function(e){var t={keyword:"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor",literal:"null",built_in:"$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale $bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat $realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson $assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff $assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk $fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control $coverage_get $coverage_save $set_coverage_db_name $rose $stable $past $rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display $coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename $unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow $floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning $dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh $tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random $dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson $dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array $async$nand$array $async$or$array $async$nor$array $sync$and$array $sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf $async$and$plane $async$nand$plane $async$or$plane $async$nor$plane $sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system $display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo $write $readmemb $readmemh $writememh $value$plusargs $dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit $writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb $dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall $dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo $fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh $swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb $fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat $sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror"};return{aliases:["v","sv","svh"],case_insensitive:!1,keywords:t,lexemes:/[\w\$]+/,contains:[e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE,e.QUOTE_STRING_MODE,{className:"number",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:"\\b((\\d+'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)"},{begin:"\\B(('(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)"},{begin:"\\b([0-9_])+",relevance:0}]},{className:"variable",variants:[{begin:"#\\((?!parameter).+\\)"},{begin:"\\.\\w+",relevance:0}]},{className:"meta",begin:"`",end:"$",keywords:{"meta-keyword":"define __FILE__ __LINE__ begin_keywords celldefine default_nettype define else elsif end_keywords endcelldefine endif ifdef ifndef include line nounconnected_drive pragma resetall timescale unconnected_drive undef undefineall"},relevance:0}]}}},e2a7:function(e,t){e.exports=function(e){var t=e.getLanguage("cpp").exports,a={className:"variable",begin:/\b_+[a-zA-Z_]\w*/},n={className:"title",begin:/[a-zA-Z][a-zA-Z0-9]+_fnc_\w*/},r={className:"string",variants:[{begin:'"',end:'"',contains:[{begin:'""',relevance:0}]},{begin:"'",end:"'",contains:[{begin:"''",relevance:0}]}]};return{aliases:["sqf"],case_insensitive:!0,keywords:{keyword:"case catch default do else exit exitWith for forEach from if private switch then throw to try waitUntil while with",built_in:"abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler addForce addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo addItemCargoGlobal addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats addMagazine addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal addMagazinePool addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler addMPEventHandler addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem addSwitchableUnit addTeamMember addToRemainsCollector addTorque addUniform addVehicle addVest addWaypoint addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem addWeaponPool addWeaponTurret admin agent agents AGLToASL aimedAtTarget aimPos airDensityRTD airplaneThrottle airportSide AISFinishHeal alive all3DENEntities allAirports allControls allCurators allCutLayers allDead allDeadMen allDisplays allGroups allMapMarkers allMines allMissionObjects allow3DMode allowCrewInImmobile allowCuratorLogicIgnoreAreas allowDamage allowDammage allowFileOperations allowFleeing allowGetIn allowSprint allPlayers allSimpleObjects allSites allTurrets allUnits allUnitsUAV allVariables ammo ammoOnPylon and animate animateBay animateDoor animatePylon animateSource animationNames animationPhase animationSourcePhase animationState append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret assignCurator assignedCargo assignedCommander assignedDriver assignedGunner assignedItems assignedTarget assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam assignToAirport atan atan2 atg ATLToASL attachedObject attachedObjects attachedTo attachObject attachTo attackEnabled backpack backpackCargo backpackContainer backpackItems backpackMagazines backpackSpaceFor behaviour benchmark binocular boundingBox boundingBoxReal boundingCenter breakOut breakTo briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode call callExtension camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams camCreate camDestroy cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView campaignConfigFile camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive camPrepareFocus camPrepareFov camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget camSetBank camSetDir camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget camTarget camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend canTriggerDynamicSimulation canUnloadInCombat canVehicleCargo captive captiveNum cbChecked cbSetChecked ceil channelEnabled cheatsEnabled checkAIFeature checkVisibility className clearAllItemsFromBackpack clearBackpackCargo clearBackpackCargoGlobal clearGroupIcons clearItemCargo clearItemCargoGlobal clearItemPool clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool clearOverlay clearRadio clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool clientOwner closeDialog closeDisplay closeOverlay collapseObjectTree collect3DENHistory collectiveRTD combatMode commandArtilleryFire commandChat commander commandFire commandFollow commandFSM commandGetOut commandingMenu commandMove commandRadio commandStop commandSuppressiveFire commandTarget commandWatch comment commitOverlay compile compileFinal completedFSM composeText configClasses configFile configHierarchy configName configProperties configSourceAddonList configSourceMod configSourceModList confirmSensorTarget connectTerminalToUAV controlsGroupCtrl copyFromClipboard copyToClipboard copyWaypoints cos count countEnemy countFriendly countSide countType countUnknown create3DENComposition create3DENEntity createAgent createCenter createDialog createDiaryLink createDiaryRecord createDiarySubject createDisplay createGearDialog createGroup createGuardedPoint createLocation createMarker createMarkerLocal createMenu createMine createMissionDisplay createMPCampaignDisplay createSimpleObject createSimpleTask createSite createSoundSource createTask createTeam createTrigger createUnit createVehicle createVehicleCrew createVehicleLocal crew ctAddHeader ctAddRow ctClear ctCurSel ctData ctFindHeaderRows ctFindRowHeader ctHeaderControls ctHeaderCount ctRemoveHeaders ctRemoveRows ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPixelPrecision ctrlSetPosition ctrlSetScale ctrlSetStructuredText ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ctrlSetTooltipColorShade ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ctrlTextWidth ctrlType ctrlVisible ctRowControls ctRowCount ctSetCurSel ctSetData ctSetHeaderTemplate ctSetRowTemplate ctSetValue ctValue curatorAddons curatorCamera curatorCameraArea curatorCameraAreaCeiling curatorCoef curatorEditableObjects curatorEditingArea curatorEditingAreaType curatorMouseOver curatorPoints curatorRegisteredObjects curatorSelected curatorWaypointCost current3DENOperation currentChannel currentCommand currentMagazine currentMagazineDetail currentMagazineDetailTurret currentMagazineTurret currentMuzzle currentNamespace currentTask currentTasks currentThrowable currentVisionMode currentWaypoint currentWeapon currentWeaponMode currentWeaponTurret currentZeroing cursorObject cursorTarget customChat customRadio cutFadeOut cutObj cutRsc cutText damage date dateToNumber daytime deActivateKey debriefingText debugFSM debugLog deg delete3DENEntities deleteAt deleteCenter deleteCollection deleteEditorObject deleteGroup deleteGroupWhenEmpty deleteIdentity deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources deleteSite deleteStatus deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach detectedMines diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts diag_activeSQSScripts diag_captureFrame diag_captureFrameToFile diag_captureSlowFrame diag_codePerformance diag_drawMode diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_lightNewLoad diag_list diag_log diag_logSlowFrame diag_mergeConfigFile diag_recordTurretLimits diag_setLightNew diag_tickTime diag_toggle dialog diarySubjectExists didJIP didJIPOwner difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction directSay disableAI disableCollisionWith disableConversation disableDebriefingStats disableMapIndicators disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayParent displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler dissolveTeam distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire doFire doFollow doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch drawArrow drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon drawRectangle drawTriangle driver drop dynamicSimulationDistance dynamicSimulationDistanceCoef dynamicSimulationEnabled dynamicSimulationSystemEnabled echo edit3DENMissionAttributes editObject editorSetEventHandler effectiveCommander emptyPositions enableAI enableAIFeature enableAimPrecision enableAttack enableAudioFeature enableAutoStartUpRTD enableAutoTrimRTD enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot enableDebriefingStats enableDiagLegend enableDynamicSimulation enableDynamicSimulationSystem enableEndDialog enableEngineArtillery enableEnvironment enableFatigue enableGunLights enableInfoPanelComponent enableIRLasers enableMimics enablePersonTurret enableRadio enableReload enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences enableSimulation enableSimulationGlobal enableStamina enableTeamSwitch enableTraffic enableUAVConnectability enableUAVWaypoints enableVehicleCargo enableVehicleSensor enableWeaponDisassembly endLoadingScreen endMission engineOn enginesIsOnRTD enginesRpmRTD enginesTorqueRTD entities environmentEnabled estimatedEndServerTime estimatedTimeLeft evalObjectArgument everyBackpack everyContainer exec execEditorScript execFSM execVM exp expectedDestination exportJIPMessages eyeDirection eyePos face faction fadeMusic fadeRadio fadeSound fadeSpeech failMission fillWeaponsFromPool find findCover findDisplay findEditorObject findEmptyPosition findEmptyPositionReady findIf findNearestEnemy finishMissionInit finite fire fireAtTarget firstBackpack flag flagAnimationPhase flagOwner flagSide flagTexture fleeing floor flyInHeight flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceFlagTexture forceFollowRoad forceMap forceRespawn forceSpeed forceWalk forceWeaponFire forceWeatherChange forEachMember forEachMemberAgent forEachMemberTeam forgetTarget format formation formationDirection formationLeader formationMembers formationPosition formationTask formatText formLeader freeLook fromEditor fuel fullCrew gearIDCAmmoCount gearSlotAmmoCount gearSlotData get3DENActionState get3DENAttribute get3DENCamera get3DENConnections get3DENEntity get3DENEntityID get3DENGrid get3DENIconsVisible get3DENLayerEntities get3DENLinesVisible get3DENMissionAttribute get3DENMouseOver get3DENSelected getAimingCoef getAllEnvSoundControllers getAllHitPointsDamage getAllOwnedMines getAllSoundControllers getAmmoCargo getAnimAimPrecision getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState getClientStateNumber getCompatiblePylonMagazines getConnectedUAV getContainerMaxLoad getCursorObjectParams getCustomAimCoef getDammage getDescription getDir getDirVisual getDLCAssetsUsage getDLCAssetsUsageByName getDLCs getEditorCamera getEditorMode getEditorObjectScope getElevationOffset getEnvSoundController getFatigue getForcedFlagTexture getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons getHideFrom getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor getMarkerPos getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue getMissionDLCs getMissionLayerEntities getModelInfo getMousePosition getMusicPlayedTime getNumber getObjectArgument getObjectChildren getObjectDLC getObjectMaterials getObjectProxy getObjectTextures getObjectType getObjectViewDistance getOxygenRemaining getPersonUsedDLCs getPilotCameraDirection getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget getPlateNumber getPlayerChannel getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual getPosASLW getPosATL getPosATLVisual getPosVisual getPosWorld getPylonMagazines getRelDir getRelPos getRemoteSensorsDisabled getRepairCargo getResolution getShadowDistance getShotParents getSlingLoad getSoundController getSoundControllerResult getSpeed getStamina getStatValue getSuppression getTerrainGrid getTerrainHeightASL getText getTotalDLCUsageTime getUnitLoadout getUnitTrait getUserMFDText getUserMFDvalue getVariable getVehicleCargo getWeaponCargo getWeaponSway getWingsOrientationRTD getWingsPositionRTD getWPPos glanceAt globalChat globalRadio goggles goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId groupOwner groupRadio groupSelectedUnits groupSelectUnit gunner gusts halt handgunItems handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups importance in inArea inAreaArray incapacitatedState inflame inflamed infoPanel infoPanelComponentEnabled infoPanelComponents infoPanels inGameUISetEventHandler inheritsFrom initAmbientLife inPolygon inputAction inRangeOfArtillery insertEditorObject intersect is3DEN is3DENMultiplayer isAbleToBreathe isAgent isArray isAutoHoverOn isAutonomous isAutotest isBleeding isBurning isClass isCollisionLightOn isCopilotEnabled isDamageAllowed isDedicated isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll isEqualTypeAny isEqualTypeArray isEqualTypeParams isFilePatchingEnabled isFlashlightOn isFlatEmpty isForcedWalk isFormationLeader isGroupDeletedWhenEmpty isHidden isInRemainsCollector isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf isLaserOn isLightOn isLocalized isManualFire isMarkedForCollection isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden isObjectRTD isOnRoad isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP isServer isShowing3DIcons isSimpleObject isSprintAllowed isStaminaEnabled isSteamMission isStreamFriendlyUIEnabled isText isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable isUAVConnected isUIContext isUniformAllowed isVehicleCargo isVehicleRadarOn isVehicleSensorEnabled isWalking isWeaponDeployed isWeaponRested itemCargo items itemsWithMagazines join joinAs joinAsSilent joinSilent joinString kbAddDatabase kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic kbTell kbWasSaid keyImage keyName knowsAbout land landAt landResult language laserTarget lbAdd lbClear lbColor lbColorRight lbCurSel lbData lbDelete lbIsSelected lbPicture lbPictureRight lbSelection lbSetColor lbSetColorRight lbSetCurSel lbSetData lbSetPicture lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetPictureRight lbSetPictureRightColor lbSetPictureRightColorDisabled lbSetPictureRightColorSelected lbSetSelectColor lbSetSelectColorRight lbSetSelected lbSetText lbSetTextRight lbSetTooltip lbSetValue lbSize lbSort lbSortByValue lbText lbTextRight lbValue leader leaderboardDeInit leaderboardGetRows leaderboardInit leaderboardRequestRowsFriends leaderboardsRequestUploadScore leaderboardsRequestUploadScoreKeepBest leaderboardState leaveVehicle libraryCredits libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed linearConversion lineIntersects lineIntersectsObjs lineIntersectsSurfaces lineIntersectsWith linkItem list listObjects listRemoteTargets listVehicleSensors ln lnbAddArray lnbAddColumn lnbAddRow lnbClear lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData lnbSetPicture lnbSetText lnbSetValue lnbSize lnbSort lnbSortByValue lnbText lnbValue load loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine loadOverlay loadStatus loadUniform loadVest local localize locationPosition lock lockCameraTo lockCargo lockDriver locked lockedCargo lockedDriver lockedTurret lockIdentity lockTurret lockWP log logEntities logNetwork logNetworkTerminate lookAt lookAtPos magazineCargo magazines magazinesAllTurrets magazinesAmmo magazinesAmmoCargo magazinesAmmoFull magazinesDetail magazinesDetailBackpack magazinesDetailUniform magazinesDetailVest magazinesTurret magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera mapGridPosition markAsFinishedOnSteam markerAlpha markerBrush markerColor markerDir markerPos markerShape markerSize markerText markerType max members menuAction menuAdd menuChecked menuClear menuCollapse menuData menuDelete menuEnable menuEnabled menuExpand menuHover menuPicture menuSetAction menuSetCheck menuSetData menuSetPicture menuSetValue menuShortcut menuShortcutText menuSize menuSort menuText menuURL menuValue min mineActive mineDetectedBy missionConfigFile missionDifficulty missionName missionNamespace missionStart missionVersion mod modelToWorld modelToWorldVisual modelToWorldVisualWorld modelToWorldWorld modParams moonIntensity moonPhase morale move move3DENCamera moveInAny moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret moveObjectToEnd moveOut moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound nearEntities nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing nearestObject nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads nearSupplies nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex nextWeatherChange nMenuItems not numberOfEnginesRTD numberToDate objectCurators objectFromNetId objectParent objStatus onBriefingGroup onBriefingNotes onBriefingPlan onBriefingTeamSwitch onCommandModeChanged onDoubleClick onEachFrame onGroupIconClick onGroupIconOverEnter onGroupIconOverLeave onHCGroupSelectionChanged onMapSingleClick onPlayerConnected onPlayerDisconnected onPreloadFinished onPreloadStarted onShowNewObject onTeamSwitch openCuratorInterface openDLCPage openMap openSteamApp openYoutubeVideo or orderGetIn overcast overcastForecast owner param params parseNumber parseSimpleArray parseText parsingNamespace particlesQuality pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon primaryWeaponItems primaryWeaponMagazine priority processDiaryLink productVersion profileName profileNamespace profileNameSteam progressLoadingScreen progressPosition progressSetPosition publicVariable publicVariableClient publicVariableServer pushBack pushBackUnique putWeaponPool queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd radioChannelCreate radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume rain rainbow random rank rankId rating rectangular registeredTasks registerTask reload reloadEnabled remoteControl remoteExec remoteExecCall remoteExecutedOwner remove3DENConnection remove3DENEventHandler remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon removeWeaponAttachmentCargo removeWeaponCargo removeWeaponGlobal removeWeaponTurret reportRemoteTarget requiredVersion resetCamShake resetSubgroupDirection resize resources respawnVehicle restartEditorCamera reveal revealMine reverse reversedMouseY roadAt roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ropeAttachEnabled ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ropeLength ropes ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame saveIdentity saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say say2D say3D scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scudState secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectRandomWeighted selectWeapon selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult sendUDPMessage serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime set set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer set3DENLinesVisible set3DENLogicType set3DENMissionAttribute set3DENMissionAttributes set3DENModelsVisible set3DENObjectType set3DENSelected setAccTime setActualCollectiveRTD setAirplaneThrottle setAirportSide setAmmo setAmmoCargo setAmmoOnPylon setAnimSpeedCoef setAperture setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour setBleedingRemaining setBrakesRTD setCameraInterest setCamShakeDefParams setCamShakeParams setCamUseTI setCaptive setCenterOfMass setCollisionLight setCombatMode setCompassOscillation setConvoySeparation setCuratorCameraAreaCeiling setCuratorCoef setCuratorEditingAreaType setCuratorWaypointCost setCurrentChannel setCurrentTask setCurrentWaypoint setCustomAimCoef setCustomWeightRTD setDamage setDammage setDate setDebriefingText setDefaultCamera setDestination setDetailMapBlendPars setDir setDirection setDrawIcon setDriveOnPath setDropInterval setDynamicSimulationDistance setDynamicSimulationDistanceCoef setEditorMode setEditorObjectScope setEffectCondition setEngineRPMRTD setFace setFaceAnimation setFatigue setFeatureType setFlagAnimationPhase setFlagOwner setFlagSide setFlagTexture setFog setFormation setFormationTask setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo setGroupIcon setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId setGroupIdGlobal setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage setHorizonParallaxCoef setHUDMovementLevels setIdentity setImportance setInfoPanel setLeader setLightAmbient setLightAttenuation setLightBrightness setLightColor setLightDayLight setLightFlareMaxDistance setLightFlareSize setLightIntensity setLightnings setLightUseFlare setLocalWindParams setMagazineTurretAmmo setMarkerAlpha setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal setMarkerColor setMarkerColorLocal setMarkerDir setMarkerDirLocal setMarkerPos setMarkerPosLocal setMarkerShape setMarkerShapeLocal setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition setMusicEffect setMusicEventHandler setName setNameSound setObjectArguments setObjectMaterial setObjectMaterialGlobal setObjectProxy setObjectTexture setObjectTextureGlobal setObjectViewDistance setOvercast setOwner setOxygenRemaining setParticleCircle setParticleClass setParticleFire setParticleParams setParticleRandom setPilotCameraDirection setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect setPitch setPlateNumber setPlayable setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW setPosATL setPosition setPosWorld setPylonLoadOut setPylonsPriority setRadioMsg setRain setRainbow setRandomLip setRank setRectangular setRepairCargo setRotorBrakeRTD setShadowDistance setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits setTargetAge setTaskMarkerOffset setTaskResult setTaskState setTerrainGrid setText setTimeMultiplier setTitleEffect setTrafficDensity setTrafficDistance setTrafficGap setTrafficSpeed setTriggerActivation setTriggerArea setTriggerStatements setTriggerText setTriggerTimeout setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos setUnitPosWeak setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat setUserActionText setUserMFDText setUserMFDvalue setVariable setVectorDir setVectorDirAndUp setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor setVehicleCargo setVehicleId setVehicleLock setVehiclePosition setVehicleRadar setVehicleReceiveRemoteTargets setVehicleReportOwnPosition setVehicleReportRemoteTargets setVehicleTIPars setVehicleVarName setVelocity setVelocityModelSpace setVelocityTransformation setViewDistance setVisibleIfTreeCollapsed setWantedRPMRTD setWaves setWaypointBehaviour setWaypointCombatMode setWaypointCompletionRadius setWaypointDescription setWaypointForceBehaviour setWaypointFormation setWaypointHousePosition setWaypointLoiterRadius setWaypointLoiterType setWaypointName setWaypointPosition setWaypointScript setWaypointSpeed setWaypointStatements setWaypointTimeout setWaypointType setWaypointVisible setWeaponReloadingTime setWind setWindDir setWindForce setWindStr setWingForceScaleRTD setWPPos show3DIcons showChat showCinemaBorder showCommandingMenu showCompass showCuratorCompass showGPS showHUD showLegend showMap shownArtilleryComputer shownChat shownCompass shownCuratorCompass showNewEditorObject shownGPS shownHUD shownMap shownPad shownRadio shownScoretable shownUAVFeed shownWarrant shownWatch showPad showRadio showScoretable showSubtitles showUAVFeed showWarrant showWatch showWaypoint showWaypoints side sideChat sideEnemy sideFriendly sideRadio simpleTasks simulationEnabled simulCloudDensity simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth switchableUnits switchAction switchCamera switchGesture switchLight switchMove synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan targetKnowledge targets targetsAggregate targetsQuery taskAlwaysVisible taskChildren taskCompleted taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskParent taskResult taskState taskType teamMember teamName teams teamSwitch teamSwitchEnabled teamType terminate terrainIntersect terrainIntersectASL terrainIntersectAtASL text textLog textLogFormat tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray toFixed toLower toString toUpper triggerActivated triggerActivation triggerArea triggerAttachedVehicle triggerAttachObject triggerAttachVehicle triggerDynamicSimulation triggerStatements triggerText triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear tvCollapse tvCollapseAll tvCount tvCurSel tvData tvDelete tvExpand tvExpandAll tvPicture tvSetColor tvSetCurSel tvSetData tvSetPicture tvSetPictureColor tvSetPictureColorDisabled tvSetPictureColorSelected tvSetPictureRight tvSetPictureRightColor tvSetPictureRightColorDisabled tvSetPictureRightColorSelected tvSetText tvSetTooltip tvSetValue tvSort tvSortByValue tvText tvTooltip tvValue type typeName typeOf UAVControl uiNamespace uiSleep unassignCurator unassignItem unassignTeam unassignVehicle underwater uniform uniformContainer uniformItems uniformMagazines unitAddons unitAimPosition unitAimPositionVisual unitBackpack unitIsUAV unitPos unitReady unitRecoilCoefficient units unitsBelowHeight unlinkItem unlockAchievement unregisterTask updateDrawIcon updateMenuItem updateObjectTree useAISteeringComponent useAudioTimeForMoves userInputDisabled vectorAdd vectorCos vectorCrossProduct vectorDiff vectorDir vectorDirVisual vectorDistance vectorDistanceSqr vectorDotProduct vectorFromTo vectorMagnitude vectorMagnitudeSqr vectorModelToWorld vectorModelToWorldVisual vectorMultiply vectorNormalized vectorUp vectorUpVisual vectorWorldToModel vectorWorldToModelVisual vehicle vehicleCargoEnabled vehicleChat vehicleRadio vehicleReceiveRemoteTargets vehicleReportOwnPosition vehicleReportRemoteTargets vehicles vehicleVarName velocity velocityModelSpace verifySignature vest vestContainer vestItems vestMagazines viewDistance visibleCompass visibleGPS visibleMap visiblePosition visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD WFSideText wind ",literal:"blufor civilian configNull controlNull displayNull east endl false grpNull independent lineBreak locationNull nil objNull opfor pi resistance scriptNull sideAmbientLife sideEmpty sideLogic sideUnknown taskNull teamMemberNull true west"},contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.NUMBER_MODE,a,n,r,t.preprocessor],illegal:/#|^\$ /}}},e55c:function(e,t){e.exports=function(e){var t={"builtin-name":"each in with if else unless bindattr action collection debugger log outlet template unbound view yield"};return{aliases:["hbs","html.hbs","html.handlebars"],case_insensitive:!0,subLanguage:"xml",contains:[e.COMMENT("{{!(--)?","(--)?}}"),{className:"template-tag",begin:/\{\{[#\/]/,end:/\}\}/,contains:[{className:"name",begin:/[a-zA-Z\.-]+/,keywords:t,starts:{endsWithParent:!0,relevance:0,contains:[e.QUOTE_STRING_MODE]}}]},{className:"template-variable",begin:/\{\{/,end:/\}\}/,keywords:t}]}}},e6ea:function(e,t){e.exports=function(e){var t={keywords:"begin end if then else while do for break continue with until repeat exit and or xor not return mod div switch case default var globalvar enum #macro #region #endregion",built_in:"is_real is_string is_array is_undefined is_int32 is_int64 is_ptr is_vec3 is_vec4 is_matrix is_bool typeof variable_global_exists variable_global_get variable_global_set variable_instance_exists variable_instance_get variable_instance_set variable_instance_get_names array_length_1d array_length_2d array_height_2d array_equals array_create array_copy random random_range irandom irandom_range random_set_seed random_get_seed randomize randomise choose abs round floor ceil sign frac sqrt sqr exp ln log2 log10 sin cos tan arcsin arccos arctan arctan2 dsin dcos dtan darcsin darccos darctan darctan2 degtorad radtodeg power logn min max mean median clamp lerp dot_product dot_product_3d dot_product_normalised dot_product_3d_normalised dot_product_normalized dot_product_3d_normalized math_set_epsilon math_get_epsilon angle_difference point_distance_3d point_distance point_direction lengthdir_x lengthdir_y real string int64 ptr string_format chr ansi_char ord string_length string_byte_length string_pos string_copy string_char_at string_ord_at string_byte_at string_set_byte_at string_delete string_insert string_lower string_upper string_repeat string_letters string_digits string_lettersdigits string_replace string_replace_all string_count string_hash_to_newline clipboard_has_text clipboard_set_text clipboard_get_text date_current_datetime date_create_datetime date_valid_datetime date_inc_year date_inc_month date_inc_week date_inc_day date_inc_hour date_inc_minute date_inc_second date_get_year date_get_month date_get_week date_get_day date_get_hour date_get_minute date_get_second date_get_weekday date_get_day_of_year date_get_hour_of_year date_get_minute_of_year date_get_second_of_year date_year_span date_month_span date_week_span date_day_span date_hour_span date_minute_span date_second_span date_compare_datetime date_compare_date date_compare_time date_date_of date_time_of date_datetime_string date_date_string date_time_string date_days_in_month date_days_in_year date_leap_year date_is_today date_set_timezone date_get_timezone game_set_speed game_get_speed motion_set motion_add place_free place_empty place_meeting place_snapped move_random move_snap move_towards_point move_contact_solid move_contact_all move_outside_solid move_outside_all move_bounce_solid move_bounce_all move_wrap distance_to_point distance_to_object position_empty position_meeting path_start path_end mp_linear_step mp_potential_step mp_linear_step_object mp_potential_step_object mp_potential_settings mp_linear_path mp_potential_path mp_linear_path_object mp_potential_path_object mp_grid_create mp_grid_destroy mp_grid_clear_all mp_grid_clear_cell mp_grid_clear_rectangle mp_grid_add_cell mp_grid_get_cell mp_grid_add_rectangle mp_grid_add_instances mp_grid_path mp_grid_draw mp_grid_to_ds_grid collision_point collision_rectangle collision_circle collision_ellipse collision_line collision_point_list collision_rectangle_list collision_circle_list collision_ellipse_list collision_line_list instance_position_list instance_place_list point_in_rectangle point_in_triangle point_in_circle rectangle_in_rectangle rectangle_in_triangle rectangle_in_circle instance_find instance_exists instance_number instance_position instance_nearest instance_furthest instance_place instance_create_depth instance_create_layer instance_copy instance_change instance_destroy position_destroy position_change instance_id_get instance_deactivate_all instance_deactivate_object instance_deactivate_region instance_activate_all instance_activate_object instance_activate_region room_goto room_goto_previous room_goto_next room_previous room_next room_restart game_end game_restart game_load game_save game_save_buffer game_load_buffer event_perform event_user event_perform_object event_inherited show_debug_message show_debug_overlay debug_event debug_get_callstack alarm_get alarm_set font_texture_page_size keyboard_set_map keyboard_get_map keyboard_unset_map keyboard_check keyboard_check_pressed keyboard_check_released keyboard_check_direct keyboard_get_numlock keyboard_set_numlock keyboard_key_press keyboard_key_release keyboard_clear io_clear mouse_check_button mouse_check_button_pressed mouse_check_button_released mouse_wheel_up mouse_wheel_down mouse_clear draw_self draw_sprite draw_sprite_pos draw_sprite_ext draw_sprite_stretched draw_sprite_stretched_ext draw_sprite_tiled draw_sprite_tiled_ext draw_sprite_part draw_sprite_part_ext draw_sprite_general draw_clear draw_clear_alpha draw_point draw_line draw_line_width draw_rectangle draw_roundrect draw_roundrect_ext draw_triangle draw_circle draw_ellipse draw_set_circle_precision draw_arrow draw_button draw_path draw_healthbar draw_getpixel draw_getpixel_ext draw_set_colour draw_set_color draw_set_alpha draw_get_colour draw_get_color draw_get_alpha merge_colour make_colour_rgb make_colour_hsv colour_get_red colour_get_green colour_get_blue colour_get_hue colour_get_saturation colour_get_value merge_color make_color_rgb make_color_hsv color_get_red color_get_green color_get_blue color_get_hue color_get_saturation color_get_value merge_color screen_save screen_save_part draw_set_font draw_set_halign draw_set_valign draw_text draw_text_ext string_width string_height string_width_ext string_height_ext draw_text_transformed draw_text_ext_transformed draw_text_colour draw_text_ext_colour draw_text_transformed_colour draw_text_ext_transformed_colour draw_text_color draw_text_ext_color draw_text_transformed_color draw_text_ext_transformed_color draw_point_colour draw_line_colour draw_line_width_colour draw_rectangle_colour draw_roundrect_colour draw_roundrect_colour_ext draw_triangle_colour draw_circle_colour draw_ellipse_colour draw_point_color draw_line_color draw_line_width_color draw_rectangle_color draw_roundrect_color draw_roundrect_color_ext draw_triangle_color draw_circle_color draw_ellipse_color draw_primitive_begin draw_vertex draw_vertex_colour draw_vertex_color draw_primitive_end sprite_get_uvs font_get_uvs sprite_get_texture font_get_texture texture_get_width texture_get_height texture_get_uvs draw_primitive_begin_texture draw_vertex_texture draw_vertex_texture_colour draw_vertex_texture_color texture_global_scale surface_create surface_create_ext surface_resize surface_free surface_exists surface_get_width surface_get_height surface_get_texture surface_set_target surface_set_target_ext surface_reset_target surface_depth_disable surface_get_depth_disable draw_surface draw_surface_stretched draw_surface_tiled draw_surface_part draw_surface_ext draw_surface_stretched_ext draw_surface_tiled_ext draw_surface_part_ext draw_surface_general surface_getpixel surface_getpixel_ext surface_save surface_save_part surface_copy surface_copy_part application_surface_draw_enable application_get_position application_surface_enable application_surface_is_enabled display_get_width display_get_height display_get_orientation display_get_gui_width display_get_gui_height display_reset display_mouse_get_x display_mouse_get_y display_mouse_set display_set_ui_visibility window_set_fullscreen window_get_fullscreen window_set_caption window_set_min_width window_set_max_width window_set_min_height window_set_max_height window_get_visible_rects window_get_caption window_set_cursor window_get_cursor window_set_colour window_get_colour window_set_color window_get_color window_set_position window_set_size window_set_rectangle window_center window_get_x window_get_y window_get_width window_get_height window_mouse_get_x window_mouse_get_y window_mouse_set window_view_mouse_get_x window_view_mouse_get_y window_views_mouse_get_x window_views_mouse_get_y audio_listener_position audio_listener_velocity audio_listener_orientation audio_emitter_position audio_emitter_create audio_emitter_free audio_emitter_exists audio_emitter_pitch audio_emitter_velocity audio_emitter_falloff audio_emitter_gain audio_play_sound audio_play_sound_on audio_play_sound_at audio_stop_sound audio_resume_music audio_music_is_playing audio_resume_sound audio_pause_sound audio_pause_music audio_channel_num audio_sound_length audio_get_type audio_falloff_set_model audio_play_music audio_stop_music audio_master_gain audio_music_gain audio_sound_gain audio_sound_pitch audio_stop_all audio_resume_all audio_pause_all audio_is_playing audio_is_paused audio_exists audio_sound_set_track_position audio_sound_get_track_position audio_emitter_get_gain audio_emitter_get_pitch audio_emitter_get_x audio_emitter_get_y audio_emitter_get_z audio_emitter_get_vx audio_emitter_get_vy audio_emitter_get_vz audio_listener_set_position audio_listener_set_velocity audio_listener_set_orientation audio_listener_get_data audio_set_master_gain audio_get_master_gain audio_sound_get_gain audio_sound_get_pitch audio_get_name audio_sound_set_track_position audio_sound_get_track_position audio_create_stream audio_destroy_stream audio_create_sync_group audio_destroy_sync_group audio_play_in_sync_group audio_start_sync_group audio_stop_sync_group audio_pause_sync_group audio_resume_sync_group audio_sync_group_get_track_pos audio_sync_group_debug audio_sync_group_is_playing audio_debug audio_group_load audio_group_unload audio_group_is_loaded audio_group_load_progress audio_group_name audio_group_stop_all audio_group_set_gain audio_create_buffer_sound audio_free_buffer_sound audio_create_play_queue audio_free_play_queue audio_queue_sound audio_get_recorder_count audio_get_recorder_info audio_start_recording audio_stop_recording audio_sound_get_listener_mask audio_emitter_get_listener_mask audio_get_listener_mask audio_sound_set_listener_mask audio_emitter_set_listener_mask audio_set_listener_mask audio_get_listener_count audio_get_listener_info audio_system show_message show_message_async clickable_add clickable_add_ext clickable_change clickable_change_ext clickable_delete clickable_exists clickable_set_style show_question show_question_async get_integer get_string get_integer_async get_string_async get_login_async get_open_filename get_save_filename get_open_filename_ext get_save_filename_ext show_error highscore_clear highscore_add highscore_value highscore_name draw_highscore sprite_exists sprite_get_name sprite_get_number sprite_get_width sprite_get_height sprite_get_xoffset sprite_get_yoffset sprite_get_bbox_left sprite_get_bbox_right sprite_get_bbox_top sprite_get_bbox_bottom sprite_save sprite_save_strip sprite_set_cache_size sprite_set_cache_size_ext sprite_get_tpe sprite_prefetch sprite_prefetch_multi sprite_flush sprite_flush_multi sprite_set_speed sprite_get_speed_type sprite_get_speed font_exists font_get_name font_get_fontname font_get_bold font_get_italic font_get_first font_get_last font_get_size font_set_cache_size path_exists path_get_name path_get_length path_get_time path_get_kind path_get_closed path_get_precision path_get_number path_get_point_x path_get_point_y path_get_point_speed path_get_x path_get_y path_get_speed script_exists script_get_name timeline_add timeline_delete timeline_clear timeline_exists timeline_get_name timeline_moment_clear timeline_moment_add_script timeline_size timeline_max_moment object_exists object_get_name object_get_sprite object_get_solid object_get_visible object_get_persistent object_get_mask object_get_parent object_get_physics object_is_ancestor room_exists room_get_name sprite_set_offset sprite_duplicate sprite_assign sprite_merge sprite_add sprite_replace sprite_create_from_surface sprite_add_from_surface sprite_delete sprite_set_alpha_from_sprite sprite_collision_mask font_add_enable_aa font_add_get_enable_aa font_add font_add_sprite font_add_sprite_ext font_replace font_replace_sprite font_replace_sprite_ext font_delete path_set_kind path_set_closed path_set_precision path_add path_assign path_duplicate path_append path_delete path_add_point path_insert_point path_change_point path_delete_point path_clear_points path_reverse path_mirror path_flip path_rotate path_rescale path_shift script_execute object_set_sprite object_set_solid object_set_visible object_set_persistent object_set_mask room_set_width room_set_height room_set_persistent room_set_background_colour room_set_background_color room_set_view room_set_viewport room_get_viewport room_set_view_enabled room_add room_duplicate room_assign room_instance_add room_instance_clear room_get_camera room_set_camera asset_get_index asset_get_type file_text_open_from_string file_text_open_read file_text_open_write file_text_open_append file_text_close file_text_write_string file_text_write_real file_text_writeln file_text_read_string file_text_read_real file_text_readln file_text_eof file_text_eoln file_exists file_delete file_rename file_copy directory_exists directory_create directory_destroy file_find_first file_find_next file_find_close file_attributes filename_name filename_path filename_dir filename_drive filename_ext filename_change_ext file_bin_open file_bin_rewrite file_bin_close file_bin_position file_bin_size file_bin_seek file_bin_write_byte file_bin_read_byte parameter_count parameter_string environment_get_variable ini_open_from_string ini_open ini_close ini_read_string ini_read_real ini_write_string ini_write_real ini_key_exists ini_section_exists ini_key_delete ini_section_delete ds_set_precision ds_exists ds_stack_create ds_stack_destroy ds_stack_clear ds_stack_copy ds_stack_size ds_stack_empty ds_stack_push ds_stack_pop ds_stack_top ds_stack_write ds_stack_read ds_queue_create ds_queue_destroy ds_queue_clear ds_queue_copy ds_queue_size ds_queue_empty ds_queue_enqueue ds_queue_dequeue ds_queue_head ds_queue_tail ds_queue_write ds_queue_read ds_list_create ds_list_destroy ds_list_clear ds_list_copy ds_list_size ds_list_empty ds_list_add ds_list_insert ds_list_replace ds_list_delete ds_list_find_index ds_list_find_value ds_list_mark_as_list ds_list_mark_as_map ds_list_sort ds_list_shuffle ds_list_write ds_list_read ds_list_set ds_map_create ds_map_destroy ds_map_clear ds_map_copy ds_map_size ds_map_empty ds_map_add ds_map_add_list ds_map_add_map ds_map_replace ds_map_replace_map ds_map_replace_list ds_map_delete ds_map_exists ds_map_find_value ds_map_find_previous ds_map_find_next ds_map_find_first ds_map_find_last ds_map_write ds_map_read ds_map_secure_save ds_map_secure_load ds_map_secure_load_buffer ds_map_secure_save_buffer ds_map_set ds_priority_create ds_priority_destroy ds_priority_clear ds_priority_copy ds_priority_size ds_priority_empty ds_priority_add ds_priority_change_priority ds_priority_find_priority ds_priority_delete_value ds_priority_delete_min ds_priority_find_min ds_priority_delete_max ds_priority_find_max ds_priority_write ds_priority_read ds_grid_create ds_grid_destroy ds_grid_copy ds_grid_resize ds_grid_width ds_grid_height ds_grid_clear ds_grid_set ds_grid_add ds_grid_multiply ds_grid_set_region ds_grid_add_region ds_grid_multiply_region ds_grid_set_disk ds_grid_add_disk ds_grid_multiply_disk ds_grid_set_grid_region ds_grid_add_grid_region ds_grid_multiply_grid_region ds_grid_get ds_grid_get_sum ds_grid_get_max ds_grid_get_min ds_grid_get_mean ds_grid_get_disk_sum ds_grid_get_disk_min ds_grid_get_disk_max ds_grid_get_disk_mean ds_grid_value_exists ds_grid_value_x ds_grid_value_y ds_grid_value_disk_exists ds_grid_value_disk_x ds_grid_value_disk_y ds_grid_shuffle ds_grid_write ds_grid_read ds_grid_sort ds_grid_set ds_grid_get effect_create_below effect_create_above effect_clear part_type_create part_type_destroy part_type_exists part_type_clear part_type_shape part_type_sprite part_type_size part_type_scale part_type_orientation part_type_life part_type_step part_type_death part_type_speed part_type_direction part_type_gravity part_type_colour1 part_type_colour2 part_type_colour3 part_type_colour_mix part_type_colour_rgb part_type_colour_hsv part_type_color1 part_type_color2 part_type_color3 part_type_color_mix part_type_color_rgb part_type_color_hsv part_type_alpha1 part_type_alpha2 part_type_alpha3 part_type_blend part_system_create part_system_create_layer part_system_destroy part_system_exists part_system_clear part_system_draw_order part_system_depth part_system_position part_system_automatic_update part_system_automatic_draw part_system_update part_system_drawit part_system_get_layer part_system_layer part_particles_create part_particles_create_colour part_particles_create_color part_particles_clear part_particles_count part_emitter_create part_emitter_destroy part_emitter_destroy_all part_emitter_exists part_emitter_clear part_emitter_region part_emitter_burst part_emitter_stream external_call external_define external_free window_handle window_device matrix_get matrix_set matrix_build_identity matrix_build matrix_build_lookat matrix_build_projection_ortho matrix_build_projection_perspective matrix_build_projection_perspective_fov matrix_multiply matrix_transform_vertex matrix_stack_push matrix_stack_pop matrix_stack_multiply matrix_stack_set matrix_stack_clear matrix_stack_top matrix_stack_is_empty browser_input_capture os_get_config os_get_info os_get_language os_get_region os_lock_orientation display_get_dpi_x display_get_dpi_y display_set_gui_size display_set_gui_maximise display_set_gui_maximize device_mouse_dbclick_enable display_set_timing_method display_get_timing_method display_set_sleep_margin display_get_sleep_margin virtual_key_add virtual_key_hide virtual_key_delete virtual_key_show draw_enable_drawevent draw_enable_swf_aa draw_set_swf_aa_level draw_get_swf_aa_level draw_texture_flush draw_flush gpu_set_blendenable gpu_set_ztestenable gpu_set_zfunc gpu_set_zwriteenable gpu_set_lightingenable gpu_set_fog gpu_set_cullmode gpu_set_blendmode gpu_set_blendmode_ext gpu_set_blendmode_ext_sepalpha gpu_set_colorwriteenable gpu_set_colourwriteenable gpu_set_alphatestenable gpu_set_alphatestref gpu_set_alphatestfunc gpu_set_texfilter gpu_set_texfilter_ext gpu_set_texrepeat gpu_set_texrepeat_ext gpu_set_tex_filter gpu_set_tex_filter_ext gpu_set_tex_repeat gpu_set_tex_repeat_ext gpu_set_tex_mip_filter gpu_set_tex_mip_filter_ext gpu_set_tex_mip_bias gpu_set_tex_mip_bias_ext gpu_set_tex_min_mip gpu_set_tex_min_mip_ext gpu_set_tex_max_mip gpu_set_tex_max_mip_ext gpu_set_tex_max_aniso gpu_set_tex_max_aniso_ext gpu_set_tex_mip_enable gpu_set_tex_mip_enable_ext gpu_get_blendenable gpu_get_ztestenable gpu_get_zfunc gpu_get_zwriteenable gpu_get_lightingenable gpu_get_fog gpu_get_cullmode gpu_get_blendmode gpu_get_blendmode_ext gpu_get_blendmode_ext_sepalpha gpu_get_blendmode_src gpu_get_blendmode_dest gpu_get_blendmode_srcalpha gpu_get_blendmode_destalpha gpu_get_colorwriteenable gpu_get_colourwriteenable gpu_get_alphatestenable gpu_get_alphatestref gpu_get_alphatestfunc gpu_get_texfilter gpu_get_texfilter_ext gpu_get_texrepeat gpu_get_texrepeat_ext gpu_get_tex_filter gpu_get_tex_filter_ext gpu_get_tex_repeat gpu_get_tex_repeat_ext gpu_get_tex_mip_filter gpu_get_tex_mip_filter_ext gpu_get_tex_mip_bias gpu_get_tex_mip_bias_ext gpu_get_tex_min_mip gpu_get_tex_min_mip_ext gpu_get_tex_max_mip gpu_get_tex_max_mip_ext gpu_get_tex_max_aniso gpu_get_tex_max_aniso_ext gpu_get_tex_mip_enable gpu_get_tex_mip_enable_ext gpu_push_state gpu_pop_state gpu_get_state gpu_set_state draw_light_define_ambient draw_light_define_direction draw_light_define_point draw_light_enable draw_set_lighting draw_light_get_ambient draw_light_get draw_get_lighting shop_leave_rating url_get_domain url_open url_open_ext url_open_full get_timer achievement_login achievement_logout achievement_post achievement_increment achievement_post_score achievement_available achievement_show_achievements achievement_show_leaderboards achievement_load_friends achievement_load_leaderboard achievement_send_challenge achievement_load_progress achievement_reset achievement_login_status achievement_get_pic achievement_show_challenge_notifications achievement_get_challenges achievement_event achievement_show achievement_get_info cloud_file_save cloud_string_save cloud_synchronise ads_enable ads_disable ads_setup ads_engagement_launch ads_engagement_available ads_engagement_active ads_event ads_event_preload ads_set_reward_callback ads_get_display_height ads_get_display_width ads_move ads_interstitial_available ads_interstitial_display device_get_tilt_x device_get_tilt_y device_get_tilt_z device_is_keypad_open device_mouse_check_button device_mouse_check_button_pressed device_mouse_check_button_released device_mouse_x device_mouse_y device_mouse_raw_x device_mouse_raw_y device_mouse_x_to_gui device_mouse_y_to_gui iap_activate iap_status iap_enumerate_products iap_restore_all iap_acquire iap_consume iap_product_details iap_purchase_details facebook_init facebook_login facebook_status facebook_graph_request facebook_dialog facebook_logout facebook_launch_offerwall facebook_post_message facebook_send_invite facebook_user_id facebook_accesstoken facebook_check_permission facebook_request_read_permissions facebook_request_publish_permissions gamepad_is_supported gamepad_get_device_count gamepad_is_connected gamepad_get_description gamepad_get_button_threshold gamepad_set_button_threshold gamepad_get_axis_deadzone gamepad_set_axis_deadzone gamepad_button_count gamepad_button_check gamepad_button_check_pressed gamepad_button_check_released gamepad_button_value gamepad_axis_count gamepad_axis_value gamepad_set_vibration gamepad_set_colour gamepad_set_color os_is_paused window_has_focus code_is_compiled http_get http_get_file http_post_string http_request json_encode json_decode zip_unzip load_csv base64_encode base64_decode md5_string_unicode md5_string_utf8 md5_file os_is_network_connected sha1_string_unicode sha1_string_utf8 sha1_file os_powersave_enable analytics_event analytics_event_ext win8_livetile_tile_notification win8_livetile_tile_clear win8_livetile_badge_notification win8_livetile_badge_clear win8_livetile_queue_enable win8_secondarytile_pin win8_secondarytile_badge_notification win8_secondarytile_delete win8_livetile_notification_begin win8_livetile_notification_secondary_begin win8_livetile_notification_expiry win8_livetile_notification_tag win8_livetile_notification_text_add win8_livetile_notification_image_add win8_livetile_notification_end win8_appbar_enable win8_appbar_add_element win8_appbar_remove_element win8_settingscharm_add_entry win8_settingscharm_add_html_entry win8_settingscharm_add_xaml_entry win8_settingscharm_set_xaml_property win8_settingscharm_get_xaml_property win8_settingscharm_remove_entry win8_share_image win8_share_screenshot win8_share_file win8_share_url win8_share_text win8_search_enable win8_search_disable win8_search_add_suggestions win8_device_touchscreen_available win8_license_initialize_sandbox win8_license_trial_version winphone_license_trial_version winphone_tile_title winphone_tile_count winphone_tile_back_title winphone_tile_back_content winphone_tile_back_content_wide winphone_tile_front_image winphone_tile_front_image_small winphone_tile_front_image_wide winphone_tile_back_image winphone_tile_back_image_wide winphone_tile_background_colour winphone_tile_background_color winphone_tile_icon_image winphone_tile_small_icon_image winphone_tile_wide_content winphone_tile_cycle_images winphone_tile_small_background_image physics_world_create physics_world_gravity physics_world_update_speed physics_world_update_iterations physics_world_draw_debug physics_pause_enable physics_fixture_create physics_fixture_set_kinematic physics_fixture_set_density physics_fixture_set_awake physics_fixture_set_restitution physics_fixture_set_friction physics_fixture_set_collision_group physics_fixture_set_sensor physics_fixture_set_linear_damping physics_fixture_set_angular_damping physics_fixture_set_circle_shape physics_fixture_set_box_shape physics_fixture_set_edge_shape physics_fixture_set_polygon_shape physics_fixture_set_chain_shape physics_fixture_add_point physics_fixture_bind physics_fixture_bind_ext physics_fixture_delete physics_apply_force physics_apply_impulse physics_apply_angular_impulse physics_apply_local_force physics_apply_local_impulse physics_apply_torque physics_mass_properties physics_draw_debug physics_test_overlap physics_remove_fixture physics_set_friction physics_set_density physics_set_restitution physics_get_friction physics_get_density physics_get_restitution physics_joint_distance_create physics_joint_rope_create physics_joint_revolute_create physics_joint_prismatic_create physics_joint_pulley_create physics_joint_wheel_create physics_joint_weld_create physics_joint_friction_create physics_joint_gear_create physics_joint_enable_motor physics_joint_get_value physics_joint_set_value physics_joint_delete physics_particle_create physics_particle_delete physics_particle_delete_region_circle physics_particle_delete_region_box physics_particle_delete_region_poly physics_particle_set_flags physics_particle_set_category_flags physics_particle_draw physics_particle_draw_ext physics_particle_count physics_particle_get_data physics_particle_get_data_particle physics_particle_group_begin physics_particle_group_circle physics_particle_group_box physics_particle_group_polygon physics_particle_group_add_point physics_particle_group_end physics_particle_group_join physics_particle_group_delete physics_particle_group_count physics_particle_group_get_data physics_particle_group_get_mass physics_particle_group_get_inertia physics_particle_group_get_centre_x physics_particle_group_get_centre_y physics_particle_group_get_vel_x physics_particle_group_get_vel_y physics_particle_group_get_ang_vel physics_particle_group_get_x physics_particle_group_get_y physics_particle_group_get_angle physics_particle_set_group_flags physics_particle_get_group_flags physics_particle_get_max_count physics_particle_get_radius physics_particle_get_density physics_particle_get_damping physics_particle_get_gravity_scale physics_particle_set_max_count physics_particle_set_radius physics_particle_set_density physics_particle_set_damping physics_particle_set_gravity_scale network_create_socket network_create_socket_ext network_create_server network_create_server_raw network_connect network_connect_raw network_send_packet network_send_raw network_send_broadcast network_send_udp network_send_udp_raw network_set_timeout network_set_config network_resolve network_destroy buffer_create buffer_write buffer_read buffer_seek buffer_get_surface buffer_set_surface buffer_delete buffer_exists buffer_get_type buffer_get_alignment buffer_poke buffer_peek buffer_save buffer_save_ext buffer_load buffer_load_ext buffer_load_partial buffer_copy buffer_fill buffer_get_size buffer_tell buffer_resize buffer_md5 buffer_sha1 buffer_base64_encode buffer_base64_decode buffer_base64_decode_ext buffer_sizeof buffer_get_address buffer_create_from_vertex_buffer buffer_create_from_vertex_buffer_ext buffer_copy_from_vertex_buffer buffer_async_group_begin buffer_async_group_option buffer_async_group_end buffer_load_async buffer_save_async gml_release_mode gml_pragma steam_activate_overlay steam_is_overlay_enabled steam_is_overlay_activated steam_get_persona_name steam_initialised steam_is_cloud_enabled_for_app steam_is_cloud_enabled_for_account steam_file_persisted steam_get_quota_total steam_get_quota_free steam_file_write steam_file_write_file steam_file_read steam_file_delete steam_file_exists steam_file_size steam_file_share steam_is_screenshot_requested steam_send_screenshot steam_is_user_logged_on steam_get_user_steam_id steam_user_owns_dlc steam_user_installed_dlc steam_set_achievement steam_get_achievement steam_clear_achievement steam_set_stat_int steam_set_stat_float steam_set_stat_avg_rate steam_get_stat_int steam_get_stat_float steam_get_stat_avg_rate steam_reset_all_stats steam_reset_all_stats_achievements steam_stats_ready steam_create_leaderboard steam_upload_score steam_upload_score_ext steam_download_scores_around_user steam_download_scores steam_download_friends_scores steam_upload_score_buffer steam_upload_score_buffer_ext steam_current_game_language steam_available_languages steam_activate_overlay_browser steam_activate_overlay_user steam_activate_overlay_store steam_get_user_persona_name steam_get_app_id steam_get_user_account_id steam_ugc_download steam_ugc_create_item steam_ugc_start_item_update steam_ugc_set_item_title steam_ugc_set_item_description steam_ugc_set_item_visibility steam_ugc_set_item_tags steam_ugc_set_item_content steam_ugc_set_item_preview steam_ugc_submit_item_update steam_ugc_get_item_update_progress steam_ugc_subscribe_item steam_ugc_unsubscribe_item steam_ugc_num_subscribed_items steam_ugc_get_subscribed_items steam_ugc_get_item_install_info steam_ugc_get_item_update_info steam_ugc_request_item_details steam_ugc_create_query_user steam_ugc_create_query_user_ex steam_ugc_create_query_all steam_ugc_create_query_all_ex steam_ugc_query_set_cloud_filename_filter steam_ugc_query_set_match_any_tag steam_ugc_query_set_search_text steam_ugc_query_set_ranked_by_trend_days steam_ugc_query_add_required_tag steam_ugc_query_add_excluded_tag steam_ugc_query_set_return_long_description steam_ugc_query_set_return_total_only steam_ugc_query_set_allow_cached_response steam_ugc_send_query shader_set shader_get_name shader_reset shader_current shader_is_compiled shader_get_sampler_index shader_get_uniform shader_set_uniform_i shader_set_uniform_i_array shader_set_uniform_f shader_set_uniform_f_array shader_set_uniform_matrix shader_set_uniform_matrix_array shader_enable_corner_id texture_set_stage texture_get_texel_width texture_get_texel_height shaders_are_supported vertex_format_begin vertex_format_end vertex_format_delete vertex_format_add_position vertex_format_add_position_3d vertex_format_add_colour vertex_format_add_color vertex_format_add_normal vertex_format_add_texcoord vertex_format_add_textcoord vertex_format_add_custom vertex_create_buffer vertex_create_buffer_ext vertex_delete_buffer vertex_begin vertex_end vertex_position vertex_position_3d vertex_colour vertex_color vertex_argb vertex_texcoord vertex_normal vertex_float1 vertex_float2 vertex_float3 vertex_float4 vertex_ubyte4 vertex_submit vertex_freeze vertex_get_number vertex_get_buffer_size vertex_create_buffer_from_buffer vertex_create_buffer_from_buffer_ext push_local_notification push_get_first_local_notification push_get_next_local_notification push_cancel_local_notification skeleton_animation_set skeleton_animation_get skeleton_animation_mix skeleton_animation_set_ext skeleton_animation_get_ext skeleton_animation_get_duration skeleton_animation_get_frames skeleton_animation_clear skeleton_skin_set skeleton_skin_get skeleton_attachment_set skeleton_attachment_get skeleton_attachment_create skeleton_collision_draw_set skeleton_bone_data_get skeleton_bone_data_set skeleton_bone_state_get skeleton_bone_state_set skeleton_get_minmax skeleton_get_num_bounds skeleton_get_bounds skeleton_animation_get_frame skeleton_animation_set_frame draw_skeleton draw_skeleton_time draw_skeleton_instance draw_skeleton_collision skeleton_animation_list skeleton_skin_list skeleton_slot_data layer_get_id layer_get_id_at_depth layer_get_depth layer_create layer_destroy layer_destroy_instances layer_add_instance layer_has_instance layer_set_visible layer_get_visible layer_exists layer_x layer_y layer_get_x layer_get_y layer_hspeed layer_vspeed layer_get_hspeed layer_get_vspeed layer_script_begin layer_script_end layer_shader layer_get_script_begin layer_get_script_end layer_get_shader layer_set_target_room layer_get_target_room layer_reset_target_room layer_get_all layer_get_all_elements layer_get_name layer_depth layer_get_element_layer layer_get_element_type layer_element_move layer_force_draw_depth layer_is_draw_depth_forced layer_get_forced_depth layer_background_get_id layer_background_exists layer_background_create layer_background_destroy layer_background_visible layer_background_change layer_background_sprite layer_background_htiled layer_background_vtiled layer_background_stretch layer_background_yscale layer_background_xscale layer_background_blend layer_background_alpha layer_background_index layer_background_speed layer_background_get_visible layer_background_get_sprite layer_background_get_htiled layer_background_get_vtiled layer_background_get_stretch layer_background_get_yscale layer_background_get_xscale layer_background_get_blend layer_background_get_alpha layer_background_get_index layer_background_get_speed layer_sprite_get_id layer_sprite_exists layer_sprite_create layer_sprite_destroy layer_sprite_change layer_sprite_index layer_sprite_speed layer_sprite_xscale layer_sprite_yscale layer_sprite_angle layer_sprite_blend layer_sprite_alpha layer_sprite_x layer_sprite_y layer_sprite_get_sprite layer_sprite_get_index layer_sprite_get_speed layer_sprite_get_xscale layer_sprite_get_yscale layer_sprite_get_angle layer_sprite_get_blend layer_sprite_get_alpha layer_sprite_get_x layer_sprite_get_y layer_tilemap_get_id layer_tilemap_exists layer_tilemap_create layer_tilemap_destroy tilemap_tileset tilemap_x tilemap_y tilemap_set tilemap_set_at_pixel tilemap_get_tileset tilemap_get_tile_width tilemap_get_tile_height tilemap_get_width tilemap_get_height tilemap_get_x tilemap_get_y tilemap_get tilemap_get_at_pixel tilemap_get_cell_x_at_pixel tilemap_get_cell_y_at_pixel tilemap_clear draw_tilemap draw_tile tilemap_set_global_mask tilemap_get_global_mask tilemap_set_mask tilemap_get_mask tilemap_get_frame tile_set_empty tile_set_index tile_set_flip tile_set_mirror tile_set_rotate tile_get_empty tile_get_index tile_get_flip tile_get_mirror tile_get_rotate layer_tile_exists layer_tile_create layer_tile_destroy layer_tile_change layer_tile_xscale layer_tile_yscale layer_tile_blend layer_tile_alpha layer_tile_x layer_tile_y layer_tile_region layer_tile_visible layer_tile_get_sprite layer_tile_get_xscale layer_tile_get_yscale layer_tile_get_blend layer_tile_get_alpha layer_tile_get_x layer_tile_get_y layer_tile_get_region layer_tile_get_visible layer_instance_get_instance instance_activate_layer instance_deactivate_layer camera_create camera_create_view camera_destroy camera_apply camera_get_active camera_get_default camera_set_default camera_set_view_mat camera_set_proj_mat camera_set_update_script camera_set_begin_script camera_set_end_script camera_set_view_pos camera_set_view_size camera_set_view_speed camera_set_view_border camera_set_view_angle camera_set_view_target camera_get_view_mat camera_get_proj_mat camera_get_update_script camera_get_begin_script camera_get_end_script camera_get_view_x camera_get_view_y camera_get_view_width camera_get_view_height camera_get_view_speed_x camera_get_view_speed_y camera_get_view_border_x camera_get_view_border_y camera_get_view_angle camera_get_view_target view_get_camera view_get_visible view_get_xport view_get_yport view_get_wport view_get_hport view_get_surface_id view_set_camera view_set_visible view_set_xport view_set_yport view_set_wport view_set_hport view_set_surface_id gesture_drag_time gesture_drag_distance gesture_flick_speed gesture_double_tap_time gesture_double_tap_distance gesture_pinch_distance gesture_pinch_angle_towards gesture_pinch_angle_away gesture_rotate_time gesture_rotate_angle gesture_tap_count gesture_get_drag_time gesture_get_drag_distance gesture_get_flick_speed gesture_get_double_tap_time gesture_get_double_tap_distance gesture_get_pinch_distance gesture_get_pinch_angle_towards gesture_get_pinch_angle_away gesture_get_rotate_time gesture_get_rotate_angle gesture_get_tap_count keyboard_virtual_show keyboard_virtual_hide keyboard_virtual_status keyboard_virtual_height",literal:"self other all noone global local undefined pointer_invalid pointer_null path_action_stop path_action_restart path_action_continue path_action_reverse true false pi GM_build_date GM_version GM_runtime_version  timezone_local timezone_utc gamespeed_fps gamespeed_microseconds  ev_create ev_destroy ev_step ev_alarm ev_keyboard ev_mouse ev_collision ev_other ev_draw ev_draw_begin ev_draw_end ev_draw_pre ev_draw_post ev_keypress ev_keyrelease ev_trigger ev_left_button ev_right_button ev_middle_button ev_no_button ev_left_press ev_right_press ev_middle_press ev_left_release ev_right_release ev_middle_release ev_mouse_enter ev_mouse_leave ev_mouse_wheel_up ev_mouse_wheel_down ev_global_left_button ev_global_right_button ev_global_middle_button ev_global_left_press ev_global_right_press ev_global_middle_press ev_global_left_release ev_global_right_release ev_global_middle_release ev_joystick1_left ev_joystick1_right ev_joystick1_up ev_joystick1_down ev_joystick1_button1 ev_joystick1_button2 ev_joystick1_button3 ev_joystick1_button4 ev_joystick1_button5 ev_joystick1_button6 ev_joystick1_button7 ev_joystick1_button8 ev_joystick2_left ev_joystick2_right ev_joystick2_up ev_joystick2_down ev_joystick2_button1 ev_joystick2_button2 ev_joystick2_button3 ev_joystick2_button4 ev_joystick2_button5 ev_joystick2_button6 ev_joystick2_button7 ev_joystick2_button8 ev_outside ev_boundary ev_game_start ev_game_end ev_room_start ev_room_end ev_no_more_lives ev_animation_end ev_end_of_path ev_no_more_health ev_close_button ev_user0 ev_user1 ev_user2 ev_user3 ev_user4 ev_user5 ev_user6 ev_user7 ev_user8 ev_user9 ev_user10 ev_user11 ev_user12 ev_user13 ev_user14 ev_user15 ev_step_normal ev_step_begin ev_step_end ev_gui ev_gui_begin ev_gui_end ev_cleanup ev_gesture ev_gesture_tap ev_gesture_double_tap ev_gesture_drag_start ev_gesture_dragging ev_gesture_drag_end ev_gesture_flick ev_gesture_pinch_start ev_gesture_pinch_in ev_gesture_pinch_out ev_gesture_pinch_end ev_gesture_rotate_start ev_gesture_rotating ev_gesture_rotate_end ev_global_gesture_tap ev_global_gesture_double_tap ev_global_gesture_drag_start ev_global_gesture_dragging ev_global_gesture_drag_end ev_global_gesture_flick ev_global_gesture_pinch_start ev_global_gesture_pinch_in ev_global_gesture_pinch_out ev_global_gesture_pinch_end ev_global_gesture_rotate_start ev_global_gesture_rotating ev_global_gesture_rotate_end vk_nokey vk_anykey vk_enter vk_return vk_shift vk_control vk_alt vk_escape vk_space vk_backspace vk_tab vk_pause vk_printscreen vk_left vk_right vk_up vk_down vk_home vk_end vk_delete vk_insert vk_pageup vk_pagedown vk_f1 vk_f2 vk_f3 vk_f4 vk_f5 vk_f6 vk_f7 vk_f8 vk_f9 vk_f10 vk_f11 vk_f12 vk_numpad0 vk_numpad1 vk_numpad2 vk_numpad3 vk_numpad4 vk_numpad5 vk_numpad6 vk_numpad7 vk_numpad8 vk_numpad9 vk_divide vk_multiply vk_subtract vk_add vk_decimal vk_lshift vk_lcontrol vk_lalt vk_rshift vk_rcontrol vk_ralt  mb_any mb_none mb_left mb_right mb_middle c_aqua c_black c_blue c_dkgray c_fuchsia c_gray c_green c_lime c_ltgray c_maroon c_navy c_olive c_purple c_red c_silver c_teal c_white c_yellow c_orange fa_left fa_center fa_right fa_top fa_middle fa_bottom pr_pointlist pr_linelist pr_linestrip pr_trianglelist pr_trianglestrip pr_trianglefan bm_complex bm_normal bm_add bm_max bm_subtract bm_zero bm_one bm_src_colour bm_inv_src_colour bm_src_color bm_inv_src_color bm_src_alpha bm_inv_src_alpha bm_dest_alpha bm_inv_dest_alpha bm_dest_colour bm_inv_dest_colour bm_dest_color bm_inv_dest_color bm_src_alpha_sat tf_point tf_linear tf_anisotropic mip_off mip_on mip_markedonly audio_falloff_none audio_falloff_inverse_distance audio_falloff_inverse_distance_clamped audio_falloff_linear_distance audio_falloff_linear_distance_clamped audio_falloff_exponent_distance audio_falloff_exponent_distance_clamped audio_old_system audio_new_system audio_mono audio_stereo audio_3d cr_default cr_none cr_arrow cr_cross cr_beam cr_size_nesw cr_size_ns cr_size_nwse cr_size_we cr_uparrow cr_hourglass cr_drag cr_appstart cr_handpoint cr_size_all spritespeed_framespersecond spritespeed_framespergameframe asset_object asset_unknown asset_sprite asset_sound asset_room asset_path asset_script asset_font asset_timeline asset_tiles asset_shader fa_readonly fa_hidden fa_sysfile fa_volumeid fa_directory fa_archive  ds_type_map ds_type_list ds_type_stack ds_type_queue ds_type_grid ds_type_priority ef_explosion ef_ring ef_ellipse ef_firework ef_smoke ef_smokeup ef_star ef_spark ef_flare ef_cloud ef_rain ef_snow pt_shape_pixel pt_shape_disk pt_shape_square pt_shape_line pt_shape_star pt_shape_circle pt_shape_ring pt_shape_sphere pt_shape_flare pt_shape_spark pt_shape_explosion pt_shape_cloud pt_shape_smoke pt_shape_snow ps_distr_linear ps_distr_gaussian ps_distr_invgaussian ps_shape_rectangle ps_shape_ellipse ps_shape_diamond ps_shape_line ty_real ty_string dll_cdecl dll_stdcall matrix_view matrix_projection matrix_world os_win32 os_windows os_macosx os_ios os_android os_symbian os_linux os_unknown os_winphone os_tizen os_win8native os_wiiu os_3ds  os_psvita os_bb10 os_ps4 os_xboxone os_ps3 os_xbox360 os_uwp os_tvos os_switch browser_not_a_browser browser_unknown browser_ie browser_firefox browser_chrome browser_safari browser_safari_mobile browser_opera browser_tizen browser_edge browser_windows_store browser_ie_mobile  device_ios_unknown device_ios_iphone device_ios_iphone_retina device_ios_ipad device_ios_ipad_retina device_ios_iphone5 device_ios_iphone6 device_ios_iphone6plus device_emulator device_tablet display_landscape display_landscape_flipped display_portrait display_portrait_flipped tm_sleep tm_countvsyncs of_challenge_win of_challen ge_lose of_challenge_tie leaderboard_type_number leaderboard_type_time_mins_secs cmpfunc_never cmpfunc_less cmpfunc_equal cmpfunc_lessequal cmpfunc_greater cmpfunc_notequal cmpfunc_greaterequal cmpfunc_always cull_noculling cull_clockwise cull_counterclockwise lighttype_dir lighttype_point iap_ev_storeload iap_ev_product iap_ev_purchase iap_ev_consume iap_ev_restore iap_storeload_ok iap_storeload_failed iap_status_uninitialised iap_status_unavailable iap_status_loading iap_status_available iap_status_processing iap_status_restoring iap_failed iap_unavailable iap_available iap_purchased iap_canceled iap_refunded fb_login_default fb_login_fallback_to_webview fb_login_no_fallback_to_webview fb_login_forcing_webview fb_login_use_system_account fb_login_forcing_safari  phy_joint_anchor_1_x phy_joint_anchor_1_y phy_joint_anchor_2_x phy_joint_anchor_2_y phy_joint_reaction_force_x phy_joint_reaction_force_y phy_joint_reaction_torque phy_joint_motor_speed phy_joint_angle phy_joint_motor_torque phy_joint_max_motor_torque phy_joint_translation phy_joint_speed phy_joint_motor_force phy_joint_max_motor_force phy_joint_length_1 phy_joint_length_2 phy_joint_damping_ratio phy_joint_frequency phy_joint_lower_angle_limit phy_joint_upper_angle_limit phy_joint_angle_limits phy_joint_max_length phy_joint_max_torque phy_joint_max_force phy_debug_render_aabb phy_debug_render_collision_pairs phy_debug_render_coms phy_debug_render_core_shapes phy_debug_render_joints phy_debug_render_obb phy_debug_render_shapes  phy_particle_flag_water phy_particle_flag_zombie phy_particle_flag_wall phy_particle_flag_spring phy_particle_flag_elastic phy_particle_flag_viscous phy_particle_flag_powder phy_particle_flag_tensile phy_particle_flag_colourmixing phy_particle_flag_colormixing phy_particle_group_flag_solid phy_particle_group_flag_rigid phy_particle_data_flag_typeflags phy_particle_data_flag_position phy_particle_data_flag_velocity phy_particle_data_flag_colour phy_particle_data_flag_color phy_particle_data_flag_category  achievement_our_info achievement_friends_info achievement_leaderboard_info achievement_achievement_info achievement_filter_all_players achievement_filter_friends_only achievement_filter_favorites_only achievement_type_achievement_challenge achievement_type_score_challenge achievement_pic_loaded  achievement_show_ui achievement_show_profile achievement_show_leaderboard achievement_show_achievement achievement_show_bank achievement_show_friend_picker achievement_show_purchase_prompt network_socket_tcp network_socket_udp network_socket_bluetooth network_type_connect network_type_disconnect network_type_data network_type_non_blocking_connect network_config_connect_timeout network_config_use_non_blocking_socket network_config_enable_reliable_udp network_config_disable_reliable_udp buffer_fixed buffer_grow buffer_wrap buffer_fast buffer_vbuffer buffer_network buffer_u8 buffer_s8 buffer_u16 buffer_s16 buffer_u32 buffer_s32 buffer_u64 buffer_f16 buffer_f32 buffer_f64 buffer_bool buffer_text buffer_string buffer_surface_copy buffer_seek_start buffer_seek_relative buffer_seek_end buffer_generalerror buffer_outofspace buffer_outofbounds buffer_invalidtype  text_type button_type input_type ANSI_CHARSET DEFAULT_CHARSET EASTEUROPE_CHARSET RUSSIAN_CHARSET SYMBOL_CHARSET SHIFTJIS_CHARSET HANGEUL_CHARSET GB2312_CHARSET CHINESEBIG5_CHARSET JOHAB_CHARSET HEBREW_CHARSET ARABIC_CHARSET GREEK_CHARSET TURKISH_CHARSET VIETNAMESE_CHARSET THAI_CHARSET MAC_CHARSET BALTIC_CHARSET OEM_CHARSET  gp_face1 gp_face2 gp_face3 gp_face4 gp_shoulderl gp_shoulderr gp_shoulderlb gp_shoulderrb gp_select gp_start gp_stickl gp_stickr gp_padu gp_padd gp_padl gp_padr gp_axislh gp_axislv gp_axisrh gp_axisrv ov_friends ov_community ov_players ov_settings ov_gamegroup ov_achievements lb_sort_none lb_sort_ascending lb_sort_descending lb_disp_none lb_disp_numeric lb_disp_time_sec lb_disp_time_ms ugc_result_success ugc_filetype_community ugc_filetype_microtrans ugc_visibility_public ugc_visibility_friends_only ugc_visibility_private ugc_query_RankedByVote ugc_query_RankedByPublicationDate ugc_query_AcceptedForGameRankedByAcceptanceDate ugc_query_RankedByTrend ugc_query_FavoritedByFriendsRankedByPublicationDate ugc_query_CreatedByFriendsRankedByPublicationDate ugc_query_RankedByNumTimesReported ugc_query_CreatedByFollowedUsersRankedByPublicationDate ugc_query_NotYetRated ugc_query_RankedByTotalVotesAsc ugc_query_RankedByVotesUp ugc_query_RankedByTextSearch ugc_sortorder_CreationOrderDesc ugc_sortorder_CreationOrderAsc ugc_sortorder_TitleAsc ugc_sortorder_LastUpdatedDesc ugc_sortorder_SubscriptionDateDesc ugc_sortorder_VoteScoreDesc ugc_sortorder_ForModeration ugc_list_Published ugc_list_VotedOn ugc_list_VotedUp ugc_list_VotedDown ugc_list_WillVoteLater ugc_list_Favorited ugc_list_Subscribed ugc_list_UsedOrPlayed ugc_list_Followed ugc_match_Items ugc_match_Items_Mtx ugc_match_Items_ReadyToUse ugc_match_Collections ugc_match_Artwork ugc_match_Videos ugc_match_Screenshots ugc_match_AllGuides ugc_match_WebGuides ugc_match_IntegratedGuides ugc_match_UsableInGame ugc_match_ControllerBindings  vertex_usage_position vertex_usage_colour vertex_usage_color vertex_usage_normal vertex_usage_texcoord vertex_usage_textcoord vertex_usage_blendweight vertex_usage_blendindices vertex_usage_psize vertex_usage_tangent vertex_usage_binormal vertex_usage_fog vertex_usage_depth vertex_usage_sample vertex_type_float1 vertex_type_float2 vertex_type_float3 vertex_type_float4 vertex_type_colour vertex_type_color vertex_type_ubyte4 layerelementtype_undefined layerelementtype_background layerelementtype_instance layerelementtype_oldtilemap layerelementtype_sprite layerelementtype_tilemap layerelementtype_particlesystem layerelementtype_tile tile_rotate tile_flip tile_mirror tile_index_mask kbv_type_default kbv_type_ascii kbv_type_url kbv_type_email kbv_type_numbers kbv_type_phone kbv_type_phone_name kbv_returnkey_default kbv_returnkey_go kbv_returnkey_google kbv_returnkey_join kbv_returnkey_next kbv_returnkey_route kbv_returnkey_search kbv_returnkey_send kbv_returnkey_yahoo kbv_returnkey_done kbv_returnkey_continue kbv_returnkey_emergency kbv_autocapitalize_none kbv_autocapitalize_words kbv_autocapitalize_sentences kbv_autocapitalize_characters",symbol:"argument_relative argument argument0 argument1 argument2 argument3 argument4 argument5 argument6 argument7 argument8 argument9 argument10 argument11 argument12 argument13 argument14 argument15 argument_count x y xprevious yprevious xstart ystart hspeed vspeed direction speed friction gravity gravity_direction path_index path_position path_positionprevious path_speed path_scale path_orientation path_endaction object_index id solid persistent mask_index instance_count instance_id room_speed fps fps_real current_time current_year current_month current_day current_weekday current_hour current_minute current_second alarm timeline_index timeline_position timeline_speed timeline_running timeline_loop room room_first room_last room_width room_height room_caption room_persistent score lives health show_score show_lives show_health caption_score caption_lives caption_health event_type event_number event_object event_action application_surface gamemaker_pro gamemaker_registered gamemaker_version error_occurred error_last debug_mode keyboard_key keyboard_lastkey keyboard_lastchar keyboard_string mouse_x mouse_y mouse_button mouse_lastbutton cursor_sprite visible sprite_index sprite_width sprite_height sprite_xoffset sprite_yoffset image_number image_index image_speed depth image_xscale image_yscale image_angle image_alpha image_blend bbox_left bbox_right bbox_top bbox_bottom layer background_colour  background_showcolour background_color background_showcolor view_enabled view_current view_visible view_xview view_yview view_wview view_hview view_xport view_yport view_wport view_hport view_angle view_hborder view_vborder view_hspeed view_vspeed view_object view_surface_id view_camera game_id game_display_name game_project_name game_save_id working_directory temp_directory program_directory browser_width browser_height os_type os_device os_browser os_version display_aa async_load delta_time webgl_enabled event_data iap_data phy_rotation phy_position_x phy_position_y phy_angular_velocity phy_linear_velocity_x phy_linear_velocity_y phy_speed_x phy_speed_y phy_speed phy_angular_damping phy_linear_damping phy_bullet phy_fixed_rotation phy_active phy_mass phy_inertia phy_com_x phy_com_y phy_dynamic phy_kinematic phy_sleeping phy_collision_points phy_collision_x phy_collision_y phy_col_normal_x phy_col_normal_y phy_position_xprevious phy_position_yprevious"};return{aliases:["gml","GML"],case_insensitive:!1,keywords:t,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE]}}},e990:function(e,t){e.exports=function(e){function t(e){return e.map(function(e){return e.split("").map(function(e){return"\\"+e}).join("")}).join("|")}var a="~?[a-z$_][0-9a-zA-Z$_]*",n="`?[A-Z$_][0-9a-zA-Z$_]*",r="'?[a-z$_][0-9a-z$_]*",i="s*:s*[a-z$_][0-9a-z$_]*((s*("+r+"s*(,"+r+")*)?s*))?",s=a+"("+i+")?("+i+")?",o="("+t(["||","&&","++","**","+.","*","/","*.","/.","...","|>"])+"|==|===)",l="\\s+"+o+"\\s+",_={keyword:"and as asr assert begin class constraint do done downto else end exception externalfor fun function functor if in include inherit initializerland lazy let lor lsl lsr lxor match method mod module mutable new nonrecobject of open or private rec sig struct then to try type val virtual when while with",built_in:"array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 ref string unit ",literal:"true false"},c="\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",d={className:"number",relevance:0,variants:[{begin:c},{begin:"\\(\\-"+c+"\\)"}]},m={className:"operator",relevance:0,begin:o},p=[{className:"identifier",relevance:0,begin:a},m,d],E=[e.QUOTE_STRING_MODE,m,{className:"module",begin:"\\b"+n,returnBegin:!0,end:".",contains:[{className:"identifier",begin:n,relevance:0}]}],u=[{className:"module",begin:"\\b"+n,returnBegin:!0,end:".",relevance:0,contains:[{className:"identifier",begin:n,relevance:0}]}],S={begin:a,end:"(,|\\n|\\))",relevance:0,contains:[m,{className:"typing",begin:":",end:"(,|\\n)",returnBegin:!0,relevance:0,contains:u}]},g={className:"function",relevance:0,keywords:_,variants:[{begin:"\\s(\\(\\.?.*?\\)|"+a+")\\s*=>",end:"\\s*=>",returnBegin:!0,relevance:0,contains:[{className:"params",variants:[{begin:a},{begin:s},{begin:/\(\s*\)/}]}]},{begin:"\\s\\(\\.?[^;\\|]*\\)\\s*=>",end:"\\s=>",returnBegin:!0,relevance:0,contains:[{className:"params",relevance:0,variants:[S]}]},{begin:"\\(\\.\\s"+a+"\\)\\s*=>"}]};E.push(g);var T={className:"constructor",begin:n+"\\(",end:"\\)",illegal:"\\n",keywords:_,contains:[e.QUOTE_STRING_MODE,m,{className:"params",begin:"\\b"+a}]},b={className:"pattern-match",begin:"\\|",returnBegin:!0,keywords:_,end:"=>",relevance:0,contains:[T,m,{relevance:0,className:"constructor",begin:n}]},C={className:"module-access",keywords:_,returnBegin:!0,variants:[{begin:"\\b("+n+"\\.)+"+a},{begin:"\\b("+n+"\\.)+\\(",end:"\\)",returnBegin:!0,contains:[g,{begin:"\\(",end:"\\)",skip:!0}].concat(E)},{begin:"\\b("+n+"\\.)+{",end:"}"}],contains:E};return u.push(C),{aliases:["re"],keywords:_,illegal:"(:\\-|:=|\\${|\\+=)",contains:[e.COMMENT("/\\*","\\*/",{illegal:"^(\\#,\\/\\/)"}),{className:"character",begin:"'(\\\\[^']+|[^'])'",illegal:"\\n",relevance:0},e.QUOTE_STRING_MODE,{className:"literal",begin:"\\(\\)",relevance:0},{className:"literal",begin:"\\[\\|",end:"\\|\\]",relevance:0,contains:p},{className:"literal",begin:"\\[",end:"\\]",relevance:0,contains:p},T,{className:"operator",begin:l,illegal:"\\-\\->",relevance:0},d,e.C_LINE_COMMENT_MODE,b,g,{className:"module-def",begin:"\\bmodule\\s+"+a+"\\s+"+n+"\\s+=\\s+{",end:"}",returnBegin:!0,keywords:_,relevance:0,contains:[{className:"module",relevance:0,begin:n},{begin:"{",end:"}",skip:!0}].concat(E)},C]}}},ea4d:function(e,t){e.exports=function(e){var t=[e.C_NUMBER_MODE,{className:"string",begin:"'|\"",end:"'|\"",contains:[e.BACKSLASH_ESCAPE,{begin:"''"}]}];return{aliases:["sci"],lexemes:/%?\w+/,keywords:{keyword:"abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",literal:"%f %F %t %T %pi %eps %inf %nan %e %i %z %s",built_in:"abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"},illegal:'("|#|/\\*|\\s+/\\w+)',contains:[{className:"function",beginKeywords:"function",end:"$",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",begin:"\\(",end:"\\)"}]},{begin:"[a-zA-Z_][a-zA-Z_0-9]*('+[\\.']*|[\\.']+)",end:"",relevance:0},{begin:"\\[",end:"\\]'*[\\.']*",relevance:0,contains:t},e.COMMENT("//","$")].concat(t)}}},eaab:function(e,t){e.exports=function(e){return{aliases:["cmake.in"],case_insensitive:!0,keywords:{keyword:"break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined"},contains:[{className:"variable",begin:"\\${",end:"}"},e.HASH_COMMENT_MODE,e.QUOTE_STRING_MODE,e.NUMBER_MODE]}}},ecfe:function(e,t){e.exports=function(e){var t="\\[=*\\[",a="\\]=*\\]",n={begin:t,end:a,contains:["self"]},r=[e.COMMENT("--(?!"+t+")","$"),e.COMMENT("--"+t,a,{contains:[n],relevance:10})];return{lexemes:e.UNDERSCORE_IDENT_RE,keywords:{literal:"true false nil",keyword:"and break do else elseif end for goto if in local not or repeat return then until while",built_in:"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstringmodule next pairs pcall print rawequal rawget rawset require select setfenvsetmetatable tonumber tostring type unpack xpcall arg selfcoroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"},contains:r.concat([{className:"function",beginKeywords:"function",end:"\\)",contains:[e.inherit(e.TITLE_MODE,{begin:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{className:"params",begin:"\\(",endsWithParent:!0,contains:r}].concat(r)},e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:t,end:a,contains:[n],relevance:5}])}}},ee6c:function(e,t){e.exports=function(e){return{aliases:["ml"],keywords:{keyword:"and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",built_in:"array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref",literal:"true false"},illegal:/\/\/|>>/,lexemes:"[a-z_]\\w*!?",contains:[{className:"literal",begin:"\\[(\\|\\|)?\\]|\\(\\)",relevance:0},e.COMMENT("\\(\\*","\\*\\)",{contains:["self"]}),{className:"symbol",begin:"'[A-Za-z_](?!')[\\w']*"},{className:"type",begin:"`[A-Z][\\w']*"},{className:"type",begin:"\\b[A-Z][\\w']*",relevance:0},{begin:"[a-z_]\\w*'[\\w']*",relevance:0},e.inherit(e.APOS_STRING_MODE,{className:"string",relevance:0}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),{className:"number",begin:"\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",relevance:0},{begin:/[-=]>/}]}}},ee8c:function(e,t){e.exports=function(e){var t="[a-zA-Z-][a-zA-Z0-9_-]*",a={begin:/[A-Z\_\.\-]+\s*:/,returnBegin:!0,end:";",endsWithParent:!0,contains:[{className:"attribute",begin:/\S/,end:":",excludeEnd:!0,starts:{endsWithParent:!0,excludeEnd:!0,contains:[{begin:/[\w-]+\(/,returnBegin:!0,contains:[{className:"built_in",begin:/[\w-]+/},{begin:/\(/,end:/\)/,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]}]},e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_BLOCK_COMMENT_MODE,{className:"number",begin:"#[0-9A-Fa-f]+"},{className:"meta",begin:"!important"}]}}]};return{case_insensitive:!0,illegal:/[=\/|'\$]/,contains:[e.C_BLOCK_COMMENT_MODE,{className:"selector-id",begin:/#[A-Za-z0-9_-]+/},{className:"selector-class",begin:/\.[A-Za-z0-9_-]+/},{className:"selector-attr",begin:/\[/,end:/\]/,illegal:"$"},{className:"selector-pseudo",begin:/:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},{begin:"@(font-face|page)",lexemes:"[a-z-]+",keywords:"font-face page"},{begin:"@",end:"[{;]",illegal:/:/,contains:[{className:"keyword",begin:/\w+/},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.CSS_NUMBER_MODE]}]},{className:"selector-tag",begin:t,relevance:0},{begin:"{",end:"}",illegal:/\S/,contains:[e.C_BLOCK_COMMENT_MODE,a]}]}}},ef7a:function(e,t){e.exports=function(e){return{aliases:["mma"],lexemes:"(\\$|\\b)"+e.IDENT_RE+"\\b",keywords:"AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine Transparent UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian XMLElement XMLObject Xnor Xor Yellow YuleDissimilarity ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform $Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber",contains:[{className:"comment",begin:/\(\*/,end:/\*\)/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,{begin:/\{/,end:/\}/,illegal:/:/}]}}},ef99:function(e,t){e.exports=function(e){var t="ByRef Case Const ContinueCase ContinueLoop Default Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With",a="True False And Null Not Or",n="Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait",r={variants:[e.COMMENT(";","$",{relevance:0}),e.COMMENT("#cs","#ce"),e.COMMENT("#comments-start","#comments-end")]},i={begin:"\\$[A-z0-9_]+"},s={className:"string",variants:[{begin:/"/,end:/"/,contains:[{begin:/""/,relevance:0}]},{begin:/'/,end:/'/,contains:[{begin:/''/,relevance:0}]}]},o={variants:[e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE]},l={className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin"},contains:[{begin:/\\\n/,relevance:0},{beginKeywords:"include",keywords:{"meta-keyword":"include"},end:"$",contains:[s,{className:"meta-string",variants:[{begin:"<",end:">"},{begin:/"/,end:/"/,contains:[{begin:/""/,relevance:0}]},{begin:/'/,end:/'/,contains:[{begin:/''/,relevance:0}]}]}]},s,r]},_={className:"symbol",begin:"@[A-z0-9_]+"},c={className:"function",beginKeywords:"Func",end:"$",illegal:"\\$|\\[|%",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",begin:"\\(",end:"\\)",contains:[i,s,o]}]};return{case_insensitive:!0,illegal:/\/\*/,keywords:{keyword:t,built_in:n,literal:a},contains:[r,i,s,o,l,_,c]}}},f0aa:function(e,t){e.exports=function(e){var t={className:"number",begin:"[\\$%]\\d+"};return{aliases:["apacheconf"],case_insensitive:!0,contains:[e.HASH_COMMENT_MODE,{className:"section",begin:"</?",end:">"},{className:"attribute",begin:/\w+/,relevance:0,keywords:{nomarkup:"order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"},starts:{end:/$/,relevance:0,keywords:{literal:"on off all"},contains:[{className:"meta",begin:"\\s\\[",end:"\\]$"},{className:"variable",begin:"[\\$%]\\{",end:"\\}",contains:["self",t]},t,e.QUOTE_STRING_MODE]}}],illegal:/\S/}}},f0f8:function(e,t){e.exports=function(e){var t={className:"variable",variants:[{begin:/\$[\w\d#@][\w\d_]*/},{begin:/\$\{(.*?)}/}]},a={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,t,{className:"variable",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]}]},n={className:"string",begin:/'/,end:/'/};return{aliases:["sh","zsh"],lexemes:/\b-?[a-z\._]+\b/,keywords:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",_:"-ne -eq -lt -gt -f -d -e -s -l -a"},contains:[{className:"meta",begin:/^#![^\n]+sh\s*$/,relevance:10},{className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0},e.HASH_COMMENT_MODE,a,n,t]}}},f122:function(e,t){e.exports=function(e){return{keywords:{keyword:"char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var",built_in:"DBus GLib CCode Gee Object Gtk Posix",literal:"false true null"},contains:[{className:"class",beginKeywords:"class interface namespace",end:"{",excludeEnd:!0,illegal:"[^,:\\n\\s\\.]",contains:[e.UNDERSCORE_TITLE_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",begin:'"""',end:'"""',relevance:5},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"^#",end:"$",relevance:2}]}}},f45a:function(e,t){e.exports=function(e){return{subLanguage:"xml",contains:[{begin:"<%",end:"%>",subLanguage:"vbscript"}]}}},f46e:function(e,t){e.exports=function(e){var t={className:"params",begin:"\\(",end:"\\)"},a="attribute block constant cycle date dump include max min parent random range source template_from_string",n={beginKeywords:a,keywords:{name:a},relevance:0,contains:[t]},r={begin:/\|[A-Za-z_]+:?/,keywords:"abs batch capitalize convert_encoding date date_modify default escape first format join json_encode keys last length lower merge nl2br number_format raw replace reverse round slice sort split striptags title trim upper url_encode",contains:[n]},i="autoescape block do embed extends filter flush for if import include macro sandbox set spaceless use verbatim";return i=i+" "+i.split(" ").map(function(e){return"end"+e}).join(" "),{aliases:["craftcms"],case_insensitive:!0,subLanguage:"xml",contains:[e.COMMENT(/\{#/,/#}/),{className:"template-tag",begin:/\{%/,end:/%}/,contains:[{className:"name",begin:/\w+/,keywords:i,starts:{endsWithParent:!0,contains:[r,n],relevance:0}}]},{className:"template-variable",begin:/\{\{/,end:/}}/,contains:["self",r,n]}]}}},f492:function(e,t){e.exports=function(e){return{keywords:{built_in:"spawn spawn_link self",keyword:"after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"},contains:[{className:"meta",begin:"^[0-9]+> ",relevance:10},e.COMMENT("%","$"),{className:"number",begin:"\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)",relevance:0},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{begin:"\\?(::)?([A-Z]\\w*(::)?)+"},{begin:"->"},{begin:"ok"},{begin:"!"},{begin:"(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",relevance:0},{begin:"[A-Z][a-zA-Z0-9_']*",relevance:0}]}}},f4c8:function(e,t){e.exports=function(e){return{case_insensitive:!0,contains:[{beginKeywords:"build create index delete drop explain infer|10 insert merge prepare select update upsert|10",end:/;/,endsWithParent:!0,keywords:{keyword:"all alter analyze and any array as asc begin between binary boolean break bucket build by call case cast cluster collate collection commit connect continue correlate cover create database dataset datastore declare decrement delete derived desc describe distinct do drop each element else end every except exclude execute exists explain fetch first flatten for force from function grant group gsi having if ignore ilike in include increment index infer inline inner insert intersect into is join key keys keyspace known last left let letting like limit lsm map mapping matched materialized merge minus namespace nest not number object offset on option or order outer over parse partition password path pool prepare primary private privilege procedure public raw realm reduce rename return returning revoke right role rollback satisfies schema select self semi set show some start statistics string system then to transaction trigger truncate under union unique unknown unnest unset update upsert use user using validate value valued values via view when where while with within work xor",literal:"true false null missing|5",built_in:"array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring"},contains:[{className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE],relevance:0},{className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE],relevance:0},{className:"symbol",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE],relevance:2},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE]},e.C_BLOCK_COMMENT_MODE]}}},f4da:function(e,t){e.exports=function(e){var t="if eq ne lt lte gt gte select default math sep";return{aliases:["dst"],case_insensitive:!0,subLanguage:"xml",contains:[{className:"template-tag",begin:/\{[#\/]/,end:/\}/,illegal:/;/,contains:[{className:"name",begin:/[a-zA-Z\.-]+/,starts:{endsWithParent:!0,relevance:0,contains:[e.QUOTE_STRING_MODE]}}]},{className:"template-variable",begin:/\{/,end:/\}/,illegal:/;/,keywords:t}]}}},f50f:function(e,t){e.exports=function(e){var t="[a-zA-Z-_][^\\n{]+\\{",a={className:"attribute",begin:/[a-zA-Z-_]+/,end:/\s*:/,excludeEnd:!0,starts:{end:";",relevance:0,contains:[{className:"variable",begin:/\.[a-zA-Z-_]+/},{className:"keyword",begin:/\(optional\)/}]}};return{aliases:["graph","instances"],case_insensitive:!0,keywords:"import",contains:[{begin:"^facet "+t,end:"}",keywords:"facet",contains:[a,e.HASH_COMMENT_MODE]},{begin:"^\\s*instance of "+t,end:"}",keywords:"name count channels instance-data instance-state instance of",illegal:/\S/,contains:["self",a,e.HASH_COMMENT_MODE]},{begin:"^"+t,end:"}",contains:[a,e.HASH_COMMENT_MODE]},e.HASH_COMMENT_MODE]}}},f54f:function(e,t){e.exports=function(e){var t={className:"variable",variants:[{begin:/\$\d+/},{begin:/\$\{/,end:/}/},{begin:"[\\$\\@]"+e.UNDERSCORE_IDENT_RE}]},a={endsWithParent:!0,lexemes:"[a-z/_]+",keywords:{literal:"on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"},relevance:0,illegal:"=>",contains:[e.HASH_COMMENT_MODE,{className:"string",contains:[e.BACKSLASH_ESCAPE,t],variants:[{begin:/"/,end:/"/},{begin:/'/,end:/'/}]},{begin:"([a-z]+):/",end:"\\s",endsWithParent:!0,excludeEnd:!0,contains:[t]},{className:"regexp",contains:[e.BACKSLASH_ESCAPE,t],variants:[{begin:"\\s\\^",end:"\\s|{|;",returnEnd:!0},{begin:"~\\*?\\s+",end:"\\s|{|;",returnEnd:!0},{begin:"\\*(\\.[a-z\\-]+)+"},{begin:"([a-z\\-]+\\.)+\\*"}]},{className:"number",begin:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{className:"number",begin:"\\b\\d+[kKmMgGdshdwy]*\\b",relevance:0},t]};return{aliases:["nginxconf"],contains:[e.HASH_COMMENT_MODE,{begin:e.UNDERSCORE_IDENT_RE+"\\s+{",returnBegin:!0,end:"{",contains:[{className:"section",begin:e.UNDERSCORE_IDENT_RE}],relevance:0},{begin:e.UNDERSCORE_IDENT_RE+"\\s",end:";|{",returnBegin:!0,contains:[{className:"attribute",begin:e.UNDERSCORE_IDENT_RE,starts:a}],relevance:0}],illegal:"[^\\s\\}]"}}},f5cf:function(e,t){e.exports=function(e){return{aliases:["xlsx","xls"],case_insensitive:!0,lexemes:/[a-zA-Z][\w\.]*/,keywords:{built_in:"ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST"},contains:[{begin:/^=/,end:/[^=]/,returnEnd:!0,illegal:/=/,relevance:10},{className:"symbol",begin:/\b[A-Z]{1,2}\d+\b/,end:/[^\d]/,excludeEnd:!0,relevance:0},{className:"symbol",begin:/[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,relevance:0},e.BACKSLASH_ESCAPE,e.QUOTE_STRING_MODE,{className:"number",begin:e.NUMBER_RE+"(%)?",relevance:0},e.COMMENT(/\bN\(/,/\)/,{excludeBegin:!0,excludeEnd:!0,illegal:/\n/})]}}},f6fd:function(e,t){(function(e){var t="currentScript",a=e.getElementsByTagName("script");t in e||Object.defineProperty(e,t,{get:function(){try{throw new Error}catch(n){var e,t=(/.*at [^\(]*\((.*):.+:.+\)$/gi.exec(n.stack)||[!1])[1];for(e in a)if(a[e].src==t||"interactive"==a[e].readyState)return a[e];return null}}})})(document)},f71c:function(e,t){e.exports=function(e){var t="[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+",a="далее ",n="возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ",r=a+n,i="загрузитьизфайла ",s="вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ",o=i+s,l="разделительстраниц разделительстрок символтабуляции ",_="ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ",c="acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ",d="wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ",m=l+_+c+d,p="webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ",E="автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени форматкартинки ширинаподчиненныхэлементовформы ",u="виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ",S="авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ",g="использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ",T="отображениевремениэлементовпланировщика ",b="типфайлаформатированногодокумента ",C="обходрезультатазапроса типзаписизапроса ",N="видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ",R="доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ",O="типизмеренияпостроителязапроса ",f="видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ",I="wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs форматдатыjson экранированиесимволовjson ",v="видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных использованиеусловногооформлениякомпоновкиданных ",A="важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты статусразборапочтовогосообщения ",h="режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ",y="расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии типхранилищасертификатовкриптографии ",D="кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip режимсохраненияпутейzip уровеньсжатияzip ",M="звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ",L="направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ",x="httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса типномерадокумента типномеразадачи типформы удалениедвижений ",w="важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты",P=p+E+u+S+g+T+b+C+N+R+O+f+I+v+A+h+y+D+M+L+x+w,k="comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ",U="comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура фиксированноесоответствие фиксированныймассив ",F=k+U,B="null истина ложь неопределено",G=e.inherit(e.NUMBER_MODE),Y={className:"string",begin:'"|\\|',end:'"|$',contains:[{begin:'""'}]},H={begin:"'",end:"'",excludeBegin:!0,excludeEnd:!0,contains:[{className:"number",begin:"\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"}]},V=e.inherit(e.C_LINE_COMMENT_MODE),q={className:"meta",lexemes:t,begin:"#|&",end:"$",keywords:{"meta-keyword":r+o},contains:[V]},z={className:"symbol",begin:"~",end:";|:",excludeEnd:!0},W={className:"function",lexemes:t,variants:[{begin:"процедура|функция",end:"\\)",keywords:"процедура функция"},{begin:"конецпроцедуры|конецфункции",keywords:"конецпроцедуры конецфункции"}],contains:[{begin:"\\(",end:"\\)",endsParent:!0,contains:[{className:"params",lexemes:t,begin:t,end:",",excludeEnd:!0,endsWithParent:!0,keywords:{keyword:"знач",literal:B},contains:[G,Y,H]},V]},e.inherit(e.TITLE_MODE,{begin:t})]};return{case_insensitive:!0,lexemes:t,keywords:{keyword:r,built_in:m,class:P,type:F,literal:B},contains:[q,W,V,z,G,Y,H]}}},f851:function(e,t){e.exports=function(e){var t=e.COMMENT("--","$"),a="[a-zA-Z_][a-zA-Z_0-9$]*",n="\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$",r="<<\\s*"+a+"\\s*>>",i="ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY ",s="SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ",o="ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ",l="BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ",_=l.trim().split(" ").map(function(e){return e.split("|")[0]}).join("|"),c="CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ",d="FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ",m="SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED ",p="ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAPLEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILYINET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ",E=p.trim().split(" ").map(function(e){return e.split("|")[0]}).join("|");return{aliases:["postgres","postgresql"],case_insensitive:!0,keywords:{keyword:i+o+s,built_in:c+d+m},illegal:/:==|\W\s*\(\*|(^|\s)\$[a-z]|{{|[a-z]:\s*$|\.\.\.|TO:|DO:/,contains:[{className:"keyword",variants:[{begin:/\bTEXT\s*SEARCH\b/},{begin:/\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/},{begin:/\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/},{begin:/\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/},{begin:/\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/},{begin:/\bNULLS\s+(FIRST|LAST)\b/},{begin:/\bEVENT\s+TRIGGER\b/},{begin:/\b(MAPPING|OR)\s+REPLACE\b/},{begin:/\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/},{begin:/\b(SHARE|EXCLUSIVE)\s+MODE\b/},{begin:/\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/},{begin:/\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/},{begin:/\bPRESERVE\s+ROWS\b/},{begin:/\bDISCARD\s+PLANS\b/},{begin:/\bREFERENCING\s+(OLD|NEW)\b/},{begin:/\bSKIP\s+LOCKED\b/},{begin:/\bGROUPING\s+SETS\b/},{begin:/\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/},{begin:/\b(WITH|WITHOUT)\s+HOLD\b/},{begin:/\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/},{begin:/\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/},{begin:/\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/},{begin:/\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/},{begin:/\bIS\s+(NOT\s+)?UNKNOWN\b/},{begin:/\bSECURITY\s+LABEL\b/},{begin:/\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/},{begin:/\bWITH\s+(NO\s+)?DATA\b/},{begin:/\b(FOREIGN|SET)\s+DATA\b/},{begin:/\bSET\s+(CATALOG|CONSTRAINTS)\b/},{begin:/\b(WITH|FOR)\s+ORDINALITY\b/},{begin:/\bIS\s+(NOT\s+)?DOCUMENT\b/},{begin:/\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/},{begin:/\b(STRIP|PRESERVE)\s+WHITESPACE\b/},{begin:/\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/},{begin:/\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/},{begin:/\bAT\s+TIME\s+ZONE\b/},{begin:/\bGRANTED\s+BY\b/},{begin:/\bRETURN\s+(QUERY|NEXT)\b/},{begin:/\b(ATTACH|DETACH)\s+PARTITION\b/},{begin:/\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/},{begin:/\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/},{begin:/\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/}]},{begin:/\b(FORMAT|FAMILY|VERSION)\s*\(/},{begin:/\bINCLUDE\s*\(/,keywords:"INCLUDE"},{begin:/\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/},{begin:/\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/},{begin:/\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,relevance:10},{begin:/\bEXTRACT\s*\(/,end:/\bFROM\b/,returnEnd:!0,keywords:{type:"CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"}},{begin:/\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,keywords:{keyword:"NAME"}},{begin:/\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,keywords:{keyword:"DOCUMENT CONTENT"}},{beginKeywords:"CACHE INCREMENT MAXVALUE MINVALUE",end:e.C_NUMBER_RE,returnEnd:!0,keywords:"BY CACHE INCREMENT MAXVALUE MINVALUE"},{className:"type",begin:/\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/},{className:"type",begin:/\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/},{begin:/\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,keywords:{keyword:"RETURNS",type:"LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"}},{begin:"\\b("+E+")\\s*\\("},{begin:"\\.("+_+")\\b"},{begin:"\\b("+_+")\\s+PATH\\b",keywords:{keyword:"PATH",type:l.replace("PATH ","")}},{className:"type",begin:"\\b("+_+")\\b"},{className:"string",begin:"'",end:"'",contains:[{begin:"''"}]},{className:"string",begin:"(e|E|u&|U&)'",end:"'",contains:[{begin:"\\\\."}],relevance:10},{begin:n,endSameAsBegin:!0,contains:[{subLanguage:["pgsql","perl","python","tcl","r","lua","java","php","ruby","bash","scheme","xml","json"],endsWithParent:!0}]},{begin:'"',end:'"',contains:[{begin:'""'}]},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,t,{className:"meta",variants:[{begin:"%(ROW)?TYPE",relevance:10},{begin:"\\$\\d+"},{begin:"^#\\w",end:"$"}]},{className:"symbol",begin:r,relevance:10}]}}},f9f0:function(e,t){e.exports=function(e){var t="[a-zA-Z_$][a-zA-Z0-9_$]*",a="([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)",n={className:"rest_arg",begin:"[.]{3}",end:t,relevance:10};return{aliases:["as"],keywords:{keyword:"as break case catch class const continue default delete do dynamic each else extends final finally for function get if implements import in include instanceof interface internal is namespace native new override package private protected public return set static super switch this throw try typeof use var void while with",literal:"true false null undefined"},contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,{className:"class",beginKeywords:"package",end:"{",contains:[e.TITLE_MODE]},{className:"class",beginKeywords:"class interface",end:"{",excludeEnd:!0,contains:[{beginKeywords:"extends implements"},e.TITLE_MODE]},{className:"meta",beginKeywords:"import include",end:";",keywords:{"meta-keyword":"import include"}},{className:"function",beginKeywords:"function",end:"[{;]",excludeEnd:!0,illegal:"\\S",contains:[e.TITLE_MODE,{className:"params",begin:"\\(",end:"\\)",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n]},{begin:":\\s*"+a}]},e.METHOD_GUARD],illegal:/#/}}},fae3:function(e,t,a){"use strict";var n;(a.r(t),"undefined"!==typeof window)&&(a("f6fd"),(n=window.document.currentScript)&&(n=n.src.match(/(.+\/)[^\/]+\.js(\?.*)?$/))&&(a.p=n[1]));var r=a("8bbf"),i=a.n(r),s=a("998c"),o=a.n(s);a("2c43");i.a.use(o.a),(window.__branVueComponentRegisters=window.__branVueComponentRegisters||[]).push(function(e){e.component("BranCode",{name:"BranCode",props:["language"],template:'<pre v-highlightjs><code :class="language"><slot name="sourcecode"></slot></code></pre>'})})}})});
//# sourceMappingURL=codehighlight.umd.min.js.map\"")
	packr.PackJSONBytes("./codehighlightjs/dist/", "codehighlight.umd.min.js.map", "\"{"version":3,"sources":["webpack://codehighlight/webpack/universalModuleDefinition","webpack://codehighlight/webpack/bootstrap","webpack://codehighlight/./node_modules/highlight.js/lib/languages/step21.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ada.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/cpp.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/fsharp.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/asciidoc.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/subunit.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/openscad.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/autohotkey.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/jboss-cli.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/markdown.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/tap.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/irpf90.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/go.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/mizar.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/nimrod.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/rib.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/awk.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/erb.js","webpack://codehighlight/./node_modules/highlight.js/lib/index.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/clojure-repl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/less.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ldif.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/purebasic.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/smali.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ebnf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/livecodeserver.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/groovy.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/delphi.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/julia.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/mercury.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/taggerscript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/lasso.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/xl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/xquery.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/r.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/lsl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/php.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/crystal.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/tex.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/swift.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ini.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/fix.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/rust.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/livescript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/inform7.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/yaml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/protobuf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/leaf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/arcade.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/vhdl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/java.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/gherkin.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/parser3.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/maxima.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/vim.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/haskell.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/sas.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/scheme.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/csp.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/prolog.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dockerfile.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/plaintext.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/nix.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/fortran.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/diff.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/capnproto.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/javascript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/haml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/puppet.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/elm.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/powershell.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/clean.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/properties.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/brainfuck.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/vbscript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/json.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/q.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/scss.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/qml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/mojolicious.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/perl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/oxygene.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/bnf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/pf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/elixir.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/cal.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/htmlbars.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/makefile.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/applescript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/llvm.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dart.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/haxe.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dos.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/gams.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/coq.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/cos.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ruby.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/hy.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/stan.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/vbnet.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dns.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ruleslanguage.js","webpack://codehighlight/external \"Vue\"","webpack://codehighlight/./node_modules/highlight.js/lib/languages/matlab.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/smalltalk.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/d.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/xml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/golo.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/arduino.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/gcode.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/python.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/gradle.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/pony.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/aspectj.js","webpack://codehighlight/./node_modules/vue-highlightjs/index.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/accesslog.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/lisp.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/objectivec.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/zephir.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/scala.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/rsl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/flix.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/x86asm.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/basic.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/tcl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/armasm.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/mipsasm.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/tp.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/avrasm.js","webpack://codehighlight/./node_modules/highlight.js/lib/highlight.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/monkey.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/axapta.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/kotlin.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/coffeescript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/thrift.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/gauss.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/typescript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/processing.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dts.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/moonscript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/nsis.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/erlang.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/abnf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/shell.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/julia-repl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/clojure.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/profile.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dsconfig.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ceylon.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/isbl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/cs.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/mel.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/stylus.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/http.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/hsp.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/crmsh.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/django.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/stata.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/routeros.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/angelscript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/sml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/sql.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/glsl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/verilog.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/sqf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/handlebars.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/gml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/reasonml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/scilab.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/cmake.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/lua.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/ocaml.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/css.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/mathematica.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/autoit.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/apache.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/bash.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/vala.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/vbscript-html.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/twig.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/erlang-repl.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/n1ql.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/dust.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/roboconf.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/nginx.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/excel.js","webpack://codehighlight/./node_modules/current-script-polyfill/currentScript.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/1c.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/pgsql.js","webpack://codehighlight/./node_modules/highlight.js/lib/languages/actionscript.js","webpack://codehighlight/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://codehighlight/./src/main.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__8bbf__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hljs","STEP21_IDENT_RE","STEP21_KEYWORDS","keyword","STEP21_START","className","begin","relevance","STEP21_CLOSE","aliases","case_insensitive","lexemes","keywords","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","COMMENT","C_NUMBER_MODE","inherit","APOS_STRING_MODE","illegal","QUOTE_STRING_MODE","end","variants","INTEGER_RE","EXPONENT_RE","DECIMAL_LITERAL_RE","BASED_INTEGER_RE","BASED_LITERAL_RE","NUMBER_RE","ID_REGEX","BAD_CHARS","COMMENTS","VAR_DECLS","beginKeywords","endsParent","literal","excludeBegin","excludeEnd","returnBegin","CPP_PRIMITIVE_TYPES","STRINGS","BACKSLASH_ESCAPE","NUMBERS","PREPROCESSOR","meta-keyword","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","built_in","EXPRESSION_CONTAINS","concat","TITLE_MODE","preprocessor","strings","TYPEPARAM","UNDERSCORE_TITLE_MODE","subLanguage","DETAILS","TIME","PROGRESSVALUE","KEYWORDS","SPECIAL_VARS","LITERALS","STRING","PREPRO","PARAMS","MODIFIERS","FUNCTIONS","BACKTICK_ESCAPE","PARAM","PARAMSBLOCK","OPERATION","PATH","COMMAND_PARAMS","HASH_COMMENT_MODE","returnEnd","F_KEYWORDS","GO_KEYWORDS","C_NUMBER_RE","VARIABLE","REGEXP_MODE","NUMBER_MODE","registerLanguage","starts","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","IDENT_MODE","PARENS_MODE","push","CSS_NUMBER_MODE","VALUE_WITH_RULESETS","MIXIN_GUARD_MODE","endsWithParent","RULE_MODE","AT_RULE_MODE","VAR_RULE_MODE","SELECTOR_MODE","CONSTANTS","smali_instr_low_prio","smali_instr_high_prio","smali_keywords","join","commentMode","nonTerminalMode","specialSequenceMode","ruleBodyMode","COMMENT_MODES","TITLE1","TITLE2","BINARY_NUMBER_MODE","DIRECTIVE","CHAR_STRING","CLASS","FUNCTION","VARIABLE_NAME_RE","DEFAULT","NUMBER","CHAR","INTERPOLATION","INTERPOLATED_VARIABLE","COMMAND","MACROCALL","meta","NUMCODE","ATOM","STRING_FMT","IMPLICATION","HEAD_BODY_CONJUNCTION","ESCAPE_SEQUENCE","LASSO_IDENT_RE","LASSO_ANGLE_RE","LASSO_CLOSE_RE","LASSO_KEYWORDS","HTML_COMMENT","LASSO_NOPROCESS","LASSO_START","LASSO_DATAMEMBER","LASSO_CODE","BUILTIN_MODULES","XL_KEYWORDS","DOUBLE_QUOTE_TEXT","SINGLE_QUOTE_TEXT","LONG_TEXT","BASED_NUMBER","IMPORT","FUNCTION_DEFINITION","TYPE","LITERAL","BUILT_IN","TITLE","VAR","ANNOTATION","COMPUTED","DIRECT","CONTAINS","type","LSL_STRING_ESCAPE_CHARS","LSL_STRINGS","LSL_NUMBERS","LSL_CONSTANTS","LSL_FUNCTIONS","UNDERSCORE_IDENT_RE","INT_SUFFIX","FLOAT_SUFFIX","CRYSTAL_IDENT_RE","CRYSTAL_METHOD_RE","CRYSTAL_PATH_RE","CRYSTAL_KEYWORDS","SUBST","EXPANSION","recursiveParen","Q_STRING","REGEXP","RE_STARTERS_RE","REGEXP2","ATTRIBUTE","CRYSTAL_DEFAULT_CONTAINS","slice","SWIFT_KEYWORDS","OPTIONAL_USING_TYPE","BLOCK_COMMENT","NUM_SUFFIX","BUILTINS","JS_IDENT_RE","SUBST_SIMPLE","EXPRESSIONS","START_BRACKET","END_BRACKET","keyPrefix","keyName","KEY","TEMPLATE_VARIABLES","SYMBOL","TEMPLATE_STRING","PARAMS_CONTAINS","JAVA_IDENT_RE","GENERIC_IDENT_RE","JAVA_NUMBER_RE","JAVA_NUMBER_MODE","CURLY_SUBCOMMENT","BUILTIN_FUNCTIONS","SYMBOLS","symbol","PRAGMA","CONSTRUCTOR","LIST","RECORD","SAS_KEYWORDS","SAS_FUN","SAS_MACRO_FUN","SCHEME_IDENT_RE","SCHEME_SIMPLE_NUMBER_RE","SCHEME_COMPLEX_NUMBER_RE","builtin-name","SHEBANG","IDENT","QUOTED_IDENT","BODY","QUOTED_LIST","NAME","LAMBDA","PARENTED","LINE_COMMENT","PHRASAL_WORDS_MODE","BACKTICK_STRING","CHAR_CODE","SPACE_CODE","PRED_OP","inner","disableAutodetect","NIX_KEYWORDS","ANTIQUOTE","ATTRS","skip","METHOD_GUARD","PUPPET_KEYWORDS","CHARACTER","QUOTE_STRING","APOS_STRING","PS_HELPTAGS","PS_COMMENT","nomarkup","WS0","WS1","DELIM","KEY_ALPHANUM","KEY_OTHER","DELIM_AND_VALUE","TYPES","VALUE_CONTAINER","OBJECT","ARRAY","splice","length","Q_KEYWORDS","HEXCOLOR","QML_IDENT_RE","PROPERTY","SIGNAL","ID_ID","QML_ATTRIBUTE","QML_OBJECT","PERL_KEYWORDS","METHOD","STRING_CONTAINS","PERL_DEFAULT_CONTAINS","OXYGENE_KEYWORDS","CURLY_COMMENT","PAREN_COMMENT","MACRO","TABLE","ELIXIR_IDENT_RE","ELIXIR_METHOD_RE","ELIXIR_KEYWORDS","ELIXIR_DEFAULT_CONTAINS","DATE","DBL_QUOTED_VARIABLE","PROCEDURE","BUILT_INS","ATTR_ASSIGNMENT","TAG_INNARDS","FUNC","VAR_ASSIG","META","TARGET","COMMENT_MODE_1","COMMENT_MODE_2","identifier","BRACED_SUBST","HAXE_BASIC_TYPES","LABEL","built-in","QSTR","ASSIGNMENT","DESCTEXT","COS_KEYWORDS","RUBY_METHOD_RE","RUBY_KEYWORDS","YARDOCTAG","IRB_OBJECT","RUBY_DEFAULT_CONTAINS","SIMPLE_PROMPT","DEFAULT_PROMPT","RVM_PROMPT","IRB_DEFAULT","SYMBOLSTART","SYMBOL_RE","SIMPLE_NUMBER_RE","COLLECTION","HINT","HINT_COL","DEFAULT_CONTAINS","selector-tag","title","TRANSPOSE_RE","TRANSPOSE","VAR_IDENT_RE","D_KEYWORDS","decimal_integer_re","decimal_integer_nosus_re","binary_integer_re","hexadecimal_digits_re","hexadecimal_integer_re","decimal_exponent_re","decimal_float_re","hexadecimal_float_re","integer_re","float_re","escape_sequence_re","D_INTEGER_MODE","D_FLOAT_MODE","D_CHARACTER_MODE","D_ESCAPE_SEQUENCE","D_STRING_MODE","D_WYSIWYG_DELIMITED_STRING_MODE","D_ALTERNATE_WYSIWYG_STRING_MODE","D_HEX_STRING_MODE","D_TOKEN_STRING_MODE","D_HASHBANG_MODE","D_SPECIAL_TOKEN_SEQUENCE_MODE","D_ATTRIBUTE_MODE","D_NESTING_COMMENT_MODE","XML_IDENT_RE","TAG_INTERNALS","CPP","getLanguage","GCODE_IDENT_RE","GCODE_CLOSE_RE","GCODE_KEYWORDS","GCODE_START","GCODE_CODE","PROMPT","BINARY_NUMBER_RE","TRIPLE_QUOTE_STRING_MODE","SINGLE_QUOTE_CHAR_MODE","TYPE_NAME","PRIMED_NAME","SHORTKEYS","vueHighlightJS","install","Vue","directive","deep","el","binding","target","targets","querySelectorAll","textContent","highlightBlock","componentUpdated","LISP_IDENT_RE","MEC_RE","LISP_SIMPLE_NUMBER_RE","KEYWORD","MEC","QUOTED","QUOTED_ATOM","API_CLASS","OBJC_KEYWORDS","LEXEMES","CLASS_KEYWORDS","split","TPID","TPLABEL","TPDATA","TPIO","window","API_REPLACES","ArrayProto","objectKeys","keys","languages","noHighlightRe","languagePrefixRe","fixMarkupRe","spanEndTag","options","classPrefix","tabReplace","useBR","undefined","escape","replace","tag","node","nodeName","toLowerCase","testRe","re","lexeme","match","exec","index","isNotHighlighted","language","test","blockLanguage","block","_class","classes","parentNode","parent","result","objects","Array","arguments","forEach","obj","nodeStream","_nodeStream","offset","child","firstChild","nextSibling","nodeType","nodeValue","event","mergeStreams","original","highlighted","processed","nodeStack","selectStream","open","attr_str","a","map","attributes","close","render","stream","substring","reverse","pop","substr","expand_mode","cached_variants","variant","restoreLanguageApi","langApiRestored","compileLanguage","reStr","source","langRe","global","RegExp","joinRe","regexps","separator","backreferenceRe","numCaptures","ret","String","Number","compileMode","compiled","compiled_keywords","flatten","str","kw","pair","lexemesRe","beginRe","endSameAsBegin","endRe","terminator_end","illegalRe","apply","terminators","filter","Boolean","highlight","ignore_illegals","continuation","escapeRe","subMode","endOfMode","isIllegal","keywordMatch","match_str","buildSpan","classname","insideSpan","leaveOpen","noPrefix","openSpan","closeSpan","processKeywords","keyword_match","last_index","top","mode_buffer","lastIndex","processSubLanguage","explicit","continuations","highlightAuto","processBuffer","startNewMode","processLexeme","buffer","new_mode","end_mode","origin","Error","current","count","e","message","indexOf","text","languageSubset","second_best","autoDetection","fixMarkup","p1","buildClassName","prevClassName","currentLang","resultLang","trim","originalStream","resultNode","document","createElementNS","innerHTML","configure","user_options","initHighlighting","called","blocks","initHighlightingOnLoad","addEventListener","lang","alias","listLanguages","inherits","KEYWORDS_WITH_LABEL","ANNOTATION_USE_SITE","KOTLIN_NUMBER_RE","KOTLIN_NUMBER_MODE","PARAMS_RE","BUILT_IN_TYPES","AT_COMMENT_MODE","STRUCT_TYPE","PARSE_PARAMS","FUNCTION_DEF","DEFINITION","BUILT_IN_REF","STRING_REF","FUNCTION_REF","FUNCTION_REF_PARAMS","DECORATOR","ARGS","DTS_REFERENCE","DTS_KEYWORD","DTS_LABEL","DTS_CELL_PROPERTY","DTS_NODE","DTS_ROOT_NODE","DEFINES","VARIABLES","LANGUAGES","PARAMETERS","COMPILER","METACHARS","PLUGINS","BASIC_ATOM_RE","FUNCTION_NAME_RE","ERLANG_RESERVED","NAMED_FUN","FUNCTION_CALL","TUPLE","VAR1","VAR2","RECORD_ACCESS","BLOCK_STATEMENTS","BASIC_MODES","regexes","ruleDeclaration","unexpectedChars","terminalBinaryMode","terminalDecimalMode","terminalHexadecimalMode","caseSensitivityIndicatorMode","ruleDeclarationMode","QUOTED_PROPERTY","APOS_PROPERTY","UNQUOTED_PROPERTY","VALUELESS_PROPERTY","DECLARATION_MODIFIERS","DOCUMENTATION","FUNCTION_NAME_IDENT_RE","sysres_constants","base_constants","base_group_name_constants","decision_block_properties_constants","file_extension_constants","job_block_properties_constants","language_code_constants","launching_external_applications_constants","link_kind_constants","lock_type_constants","monitor_block_properties_constants","notice_block_properties_constants","object_events_constants","object_params_constants","other_constants","privileges_constants","pseudoreference_code_constants","requisite_ISBCertificateType_values_constants","requisite_ISBEDocStorageType_values_constants","requisite_compType2_values_constants","requisite_name_constants","result_constants","rule_identification_constants","script_block_properties_constants","subtask_block_properties_constants","system_component_constants","system_dialogs_constants","system_reference_names_constants","table_name_constants","test_constants","using_the_dialog_windows_constants","using_the_document_constants","using_the_EA_and_encryption_constants","using_the_ISBL_editor_constants","wait_block_properties_constants","sysres_common_constants","TAccountType","TActionEnabledMode","TAddPosition","TAlignment","TAreaShowMode","TCertificateInvalidationReason","TCertificateType","TCheckListBoxItemState","TCloseOnEsc","TCompType","TConditionFormat","TConnectionIntent","TContentKind","TControlType","TCriterionContentType","TCultureType","TDataSetEventType","TDataSetState","TDateFormatType","TDateOffsetType","TDateTimeKind","TDeaAccessRights","TDocumentDefaultAction","TEditMode","TEditorCloseObservType","TEdmsApplicationAction","TEDocumentLockType","TEDocumentStepShowMode","TEDocumentStepVersionType","TEDocumentStorageFunction","TEDocumentStorageType","TEDocumentVersionSourceType","TEDocumentVersionState","TEncodeType","TExceptionCategory","TExportedSignaturesType","TExportedVersionType","TFieldDataType","TFolderType","TGridRowHeight","THyperlinkType","TImageFileFormat","TImageMode","TImageType","TInplaceHintKind","TISBLContext","TItemShow","TJobKind","TJoinType","TLabelPos","TLicensingType","TLifeCycleStageFontColor","TLifeCycleStageFontStyle","TLockableDevelopmentComponentType","TMaxRecordCountRestrictionType","TRangeValueType","TRelativeDate","TReportDestination","TReqDataType","TRequisiteEventType","TSBTimeType","TSearchShowMode","TSelectMode","TSignatureType","TSignerContentType","TStringsSortType","TStringValueType","TStructuredObjectAttributeType","TTaskAbortReason","TTextValueType","TUserObjectStatus","TUserType","TValuesBuildType","TViewMode","TViewSelectionMode","TWizardActionType","TWizardFormElementProperty","TWizardFormElementType","TWizardParamType","TWizardStepResult","TWizardStepType","TWorkAccessType","TWorkflowBlockType","TWorkflowDataType","TWorkImportance","TWorkRouteType","TWorkState","TWorkTextBuildingMode","ENUMS","system_functions","predefined_variables","interfaces","BUILTIN","DOCTAGS","ISBL_LINE_COMMENT_MODE","ISBL_BLOCK_COMMENT_MODE","class","METHODS","containts","VERBATIM_STRING","VERBATIM_STRING_NO_LF","SUBST_NO_LF","INTERPOLATED_STRING","INTERPOLATED_VERBATIM_STRING","INTERPOLATED_VERBATIM_STRING_NO_LF","TYPE_IDENT_RE","HEX_COLOR","AT_KEYWORDS","PSEUDO_SELECTORS","TAGS","TAG_END","ATTRIBUTES","ILLEGAL","VERSION","RESOURCES","COMMANDS","PROPERTY_SETS","OPERATORS","FILTER","STATEMENTS","GLOBAL_COMMANDS","COMMON_COMMANDS","OBJECTS","builtInTypeMode","objectHandleMode","genericMode","COMMENT_MODE","SV_KEYWORDS","GML_KEYWORDS","orReValues","ops","op","char","RE_IDENT","RE_MODULE_IDENT","RE_PARAM_TYPEPARAM","RE_PARAM_TYPE","RE_PARAM","RE_OPERATOR","RE_OPERATOR_SPACED","RE_NUMBER","OPERATOR_MODE","LIST_CONTENTS_MODES","MODULE_ACCESS_CONTENTS","PARAMS_CONTENTS","PARAMS_MODE","FUNCTION_BLOCK_MODE","CONSTRUCTOR_MODE","PATTERN_MATCH_BLOCK_MODE","MODULE_ACCESS_MODE","COMMON_CONTAINS","OPENING_LONG_BRACKET","CLOSING_LONG_BRACKET","LONG_BRACKETS","RULE","CONSTANT","_","FUNCTION_NAMES","EXPRESSION_KEYWORDS","IDENTIFIER","currentScript","scripts","getElementsByTagName","err","res","stack","src","readyState","v7_keywords","v8_keywords","v7_meta_keywords","v8_meta_keywords","METAKEYWORD","v7_system_constants","v7_global_context_methods","v8_global_context_methods","v8_global_context_property","v8_system_sets_of_values","v8_system_enums_interface","v8_system_enums_objects_properties","v8_system_enums_exchange_plans","v8_system_enums_tabular_document","v8_system_enums_sheduler","v8_system_enums_formatted_document","v8_system_enums_query","v8_system_enums_report_builder","v8_system_enums_files","v8_system_enums_query_builder","v8_system_enums_data_analysis","v8_system_enums_xml_json_xs_dom_xdto_ws","v8_system_enums_data_composition_system","v8_system_enums_email","v8_system_enums_logbook","v8_system_enums_cryptography","v8_system_enums_zip","v8_system_enums_other","v8_system_enums_request_schema","v8_system_enums_properties_of_metadata_objects","v8_system_enums_differents","v8_shared_object","v8_universal_collection","UNQUOTED_IDENT","DOLLAR_STRING","SQL_KW","ROLE_ATTRS","PLPGSQL_KW","TYPES_RE","val","SQL_BI","PLPGSQL_BI","PLPGSQL_EXCEPTIONS","FUNCTIONS_RE","IDENT_FUNC_RETURN_TYPE_RE","AS3_REST_ARG_MODE","use","VueHighlightJS","__branVueComponentRegisters","component","props","template"],"mappings":"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Af,EAAAc,oBACAd,EAAAe,8CClLAzD,EAAAD,QAAA,SAAA2C,GACA,OACAY,SACA,o0fA2MAQ,QAAA,KACAP,SAAA,CACAb,EAAAiB,cACAjB,EAAAmB,iBACAnB,EAAAqB,kBACA,CACAhB,UAAA,SACAC,MAAA,IAAAgB,IAAA,IACAT,SAAA,CAAAb,EAAA0C,mBAEA,CACApC,MAAA,uDAEAN,EAAAc,oBACAd,EAAAe,4CC5NAzD,EAAAD,QAAA,SAAA2C,GAEA,IAAAgF,EAAA,CACA3E,UAAA,WACAC,MAAA,MAAAN,EAAA+C,UAGAwsB,EAAA,CACAlvB,UAAA,SACAC,MAAA,oCAGAkvB,EAAA,CACA,UACA,MACA,QACA,SACA,YACA,MACA,SACA,UACA,QACA,QACA,OACA,OACA,SAGAC,EAAA,CACA,QACA,SACA,eACA,aACA,SACA,cACA,QACA,QACA,OACA,OACA,WAGAC,EAAA,CACA,IACA,OACA,UACA,UACA,QACA,QACA,IACA,aACA,OACA,SACA,SACA,UACA,OACA,OACA,KACA,MACA,UACA,MACA,MACA,KACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,SACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,SACA,KACA,IACA,IACA,QACA,OACA,UACA,OACA,SACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QACA,OACA,KACA,KACA,MACA,SAGAC,EAAA,qBAEAC,EAAA,CACA,gBACA,cACA,aACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,OACA,sBACA,aACA,wBACA,kBACA,mBACA,mBACA,oBACA,sBACA,oBACA,kBACA,SACA,gBACA,sBACA,4BACA,6BACA,sBACA,sBACA,kBACA,eACA,eACA,sBACA,sBACA,qBACA,sBACA,qBACA,cACA,oBACA,oBACA,oBACA,gBACA,eACA,qBACA,qBACA,qBACA,iBACA,eACA,aACA,mBACA,yBACA,0BACA,mBACA,mBACA,eACA,SACA,uBACA,aACA,aACA,cACA,eACA,eACA,eACA,QACA,OACA,YACA,QACA,eACA,cACA,aACA,cACA,oBACA,oBACA,oBACA,cACA,eACA,UACA,UACA,oBACA,gBACA,SACA,YACA,UACA,cACA,SACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,QACA,OACA,cACA,wBACA,eACA,yBACA,YACA,mBACA,eACA,aACA,eACA,yBACA,cACA,SACA,UACA,OACA,oBACA,kBACA,mBACA,WACA,UACA,UACA,kBACA,OACA,iBACA,cACA,aACA,mBACA,sBACA,kBACA,SACA,gBACA,cACA,eACA,aACA,QACA,OACA,aACA,YACA,aACA,YACA,WACA,YACA,WACA,YACA,SACA,OACA,SACA,aACA,kBACA,UACA,QACA,UACA,UACA,gBACA,iBACA,gBACA,gBACA,WACA,gBACA,aACA,aACA,UACA,iBACA,eACA,gBACA,cACA,mBACA,oBACA,oBACA,cACA,qBACA,iBACA,WACA,SACA,SACA,QACA,WACA,eACA,aACA,kBACA,kBACA,wBACA,uBACA,wBACA,cACA,gBACA,iBACA,cACA,iBACA,0BACA,MACA,YACA,mBACA,kBACA,aACA,mBACA,sBACA,sBACA,6BACA,eACA,iBACA,aACA,cACA,SACA,QACA,aACA,eACA,YACA,WAIAC,EAAA,CACA,MACA,iBACA,cACA,cACA,cACA,IACA,OACA,SACA,SACA,MACA,KAGA,OACApvB,QAAA,SACAC,kBAAA,EACAE,SAAA,iBACAQ,QAAA,IAAAyuB,EAAArpB,KAAA,SACA3F,SAAA,CAGAb,EAAAqB,kBACArB,EAAAmB,iBAGAnB,EAAAc,oBACAd,EAAAe,qBAGAwuB,EAGA,CACAjvB,MAAA,4BAAAqvB,EACAptB,aAAA,EACA1B,SAAA,CACA,CAAWR,UAAA,iBAAAC,MAAA,+BAKX,CACAA,MAAA,4BAAAqvB,EACAptB,aAAA,EACA1B,SAAA,CACA,CAAWR,UAAA,cAAAC,MAAA,+BAKX,CACAA,MAAA,OAAAovB,E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","file":"codehighlight.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Vue\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"Vue\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"codehighlight\"] = factory(require(\"Vue\"));\n\telse\n\t\troot[\"codehighlight\"] = factory(root[\"Vue\"]);\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__8bbf__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fae3\");\n","module.exports = function(hljs) {\n  var STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';\n  var STEP21_KEYWORDS = {\n    keyword: 'HEADER ENDSEC DATA'\n  };\n  var STEP21_START = {\n    className: 'meta',\n    begin: 'ISO-10303-21;',\n    relevance: 10\n  };\n  var STEP21_CLOSE = {\n    className: 'meta',\n    begin: 'END-ISO-10303-21;',\n    relevance: 10\n  };\n\n  return {\n    aliases: ['p21', 'step', 'stp'],\n    case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.\n    lexemes: STEP21_IDENT_RE,\n    keywords: STEP21_KEYWORDS,\n    contains: [\n      STEP21_START,\n      STEP21_CLOSE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*\\\\*!', '\\\\*/'),\n      hljs.C_NUMBER_MODE,\n      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'string',\n        begin: \"'\", end: \"'\"\n      },\n      {\n        className: 'symbol',\n        variants: [\n          {\n            begin: '#', end: '\\\\d+',\n            illegal: '\\\\W'\n          }\n        ]\n      }\n    ]\n  };\n};","module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"'\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n};","module.exports = function(hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ },\n      {\n        begin: '\\'\\\\\\\\?.', end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<[^\\n>]*>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignof constexpr decltype ' +\n      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and or not',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {begin: /=/, end: /;/},\n          {begin: /\\(/, end: /\\)/},\n          {beginKeywords: 'new throw return else', end: /;/}\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat(['self']),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n        returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&]/,\n        contains: [\n          {\n            begin: FUNCTION_TITLE, returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES,\n              // Count matching parentheses.\n              {\n                begin: /\\(/, end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                  'self',\n                  hljs.C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE,\n                  STRINGS,\n                  NUMBERS,\n                  CPP_PRIMITIVE_TYPES\n                ]\n              }\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};","module.exports = function(hljs) {\n  var TYPEPARAM = {\n    begin: '<', end: '>',\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {begin: /'[a-zA-Z0-9_]+/})\n    ]\n  };\n\n  return {\n    aliases: ['fs'],\n    keywords:\n      'abstract and as assert base begin class default delegate do done ' +\n      'downcast downto elif else end exception extern false finally for ' +\n      'fun function global if in inherit inline interface internal lazy let ' +\n      'match member module mutable namespace new null of open or ' +\n      'override private public rec return sig static struct then to ' +\n      'true try type upcast use val void when while with yield',\n    illegal: /\\/\\*/,\n    contains: [\n      {\n        // monad builder keywords (matches before non-bang kws)\n        className: 'keyword',\n        begin: /\\b(yield|return|let|do)!/\n      },\n      {\n        className: 'string',\n        begin: '@\"', end: '\"',\n        contains: [{begin: '\"\"'}]\n      },\n      {\n        className: 'string',\n        begin: '\"\"\"', end: '\"\"\"'\n      },\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      {\n        className: 'class',\n        beginKeywords: 'type', end: '\\\\(|=|$', excludeEnd: true,\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          TYPEPARAM\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '\\\\[<', end: '>\\\\]',\n        relevance: 10\n      },\n      {\n        className: 'symbol',\n        begin: '\\\\B(\\'[A-Za-z])\\\\b',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['adoc'],\n    contains: [\n      // block comment\n      hljs.COMMENT(\n        '^/{4,}\\\\n',\n        '\\\\n/{4,}$',\n        // can also be done as...\n        //'^/{4,}$',\n        //'^/{4,}$',\n        {\n          relevance: 10\n        }\n      ),\n      // line comment\n      hljs.COMMENT(\n        '^//',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      // title\n      {\n        className: 'title',\n        begin: '^\\\\.\\\\w.*$'\n      },\n      // example, admonition & sidebar blocks\n      {\n        begin: '^[=\\\\*]{4,}\\\\n',\n        end: '\\\\n^[=\\\\*]{4,}$',\n        relevance: 10\n      },\n      // headings\n      {\n        className: 'section',\n        relevance: 10,\n        variants: [\n          {begin: '^(={1,5}) .+?( \\\\1)?$'},\n          {begin: '^[^\\\\[\\\\]\\\\n]+?\\\\n[=\\\\-~\\\\^\\\\+]{2,}$'},\n        ]\n      },\n      // document attributes\n      {\n        className: 'meta',\n        begin: '^:.+?:',\n        end: '\\\\s',\n        excludeEnd: true,\n        relevance: 10\n      },\n      // block attributes\n      {\n        className: 'meta',\n        begin: '^\\\\[.+?\\\\]$',\n        relevance: 0\n      },\n      // quoteblocks\n      {\n        className: 'quote',\n        begin: '^_{4,}\\\\n',\n        end: '\\\\n_{4,}$',\n        relevance: 10\n      },\n      // listing and literal blocks\n      {\n        className: 'code',\n        begin: '^[\\\\-\\\\.]{4,}\\\\n',\n        end: '\\\\n[\\\\-\\\\.]{4,}$',\n        relevance: 10\n      },\n      // passthrough blocks\n      {\n        begin: '^\\\\+{4,}\\\\n',\n        end: '\\\\n\\\\+{4,}$',\n        contains: [\n          {\n            begin: '<', end: '>',\n            subLanguage: 'xml',\n            relevance: 0\n          }\n        ],\n        relevance: 10\n      },\n      // lists (can only capture indicators)\n      {\n        className: 'bullet',\n        begin: '^(\\\\*+|\\\\-+|\\\\.+|[^\\\\n]+?::)\\\\s+'\n      },\n      // admonition\n      {\n        className: 'symbol',\n        begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\\\s+',\n        relevance: 10\n      },\n      // inline strong\n      {\n        className: 'strong',\n        // must not follow a word character or be followed by an asterisk or space\n        begin: '\\\\B\\\\*(?![\\\\*\\\\s])',\n        end: '(\\\\n{2}|\\\\*)',\n        // allow escaped asterisk followed by word char\n        contains: [\n          {\n            begin: '\\\\\\\\*\\\\w',\n            relevance: 0\n          }\n        ]\n      },\n      // inline emphasis\n      {\n        className: 'emphasis',\n        // must not follow a word character or be followed by a single quote or space\n        begin: '\\\\B\\'(?![\\'\\\\s])',\n        end: '(\\\\n{2}|\\')',\n        // allow escaped single quote followed by word char\n        contains: [\n          {\n            begin: '\\\\\\\\\\'\\\\w',\n            relevance: 0\n          }\n        ],\n        relevance: 0\n      },\n      // inline emphasis (alt)\n      {\n        className: 'emphasis',\n        // must not follow a word character or be followed by an underline or space\n        begin: '_(?![_\\\\s])',\n        end: '(\\\\n{2}|_)',\n        relevance: 0\n      },\n      // inline smart quotes\n      {\n        className: 'string',\n        variants: [\n          {begin: \"``.+?''\"},\n          {begin: \"`.+?'\"}\n        ]\n      },\n      // inline code snippets (TODO should get same treatment as strong and emphasis)\n      {\n        className: 'code',\n        begin: '(`.+?`|\\\\+.+?\\\\+)',\n        relevance: 0\n      },\n      // indented literal block\n      {\n        className: 'code',\n        begin: '^[ \\\\t]',\n        end: '$',\n        relevance: 0\n      },\n      // horizontal rules\n      {\n        begin: '^\\'{3,}[ \\\\t]*$',\n        relevance: 10\n      },\n      // images and links\n      {\n        begin: '(link:)?(http|https|ftp|file|irc|image:?):\\\\S+\\\\[.*?\\\\]',\n        returnBegin: true,\n        contains: [\n          {\n            begin: '(link|image:?):',\n            relevance: 0\n          },\n          {\n            className: 'link',\n            begin: '\\\\w',\n            end: '[^\\\\[]+',\n            relevance: 0\n          },\n          {\n            className: 'string',\n            begin: '\\\\[',\n            end: '\\\\]',\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0\n          }\n        ],\n        relevance: 10\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var DETAILS = {\n    className: 'string',\n    begin: '\\\\[\\n(multipart)?', end: '\\\\]\\n'\n  };\n  var TIME = {\n    className: 'string',\n    begin: '\\\\d{4}-\\\\d{2}-\\\\d{2}(\\\\s+)\\\\d{2}:\\\\d{2}:\\\\d{2}\\.\\\\d+Z'\n  };\n  var PROGRESSVALUE = {\n    className: 'string',\n    begin: '(\\\\+|-)\\\\d+'\n  };\n  var KEYWORDS = {\n    className: 'keyword',\n    relevance: 10,\n    variants: [\n      { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\\\s+(test)?' },\n      { begin: '^progress(:?)(\\\\s+)?(pop|push)?' },\n      { begin: '^tags:' },\n      { begin: '^time:' }\n    ],\n  };\n  return {\n    case_insensitive: true,\n    contains: [\n      DETAILS,\n      TIME,\n      PROGRESSVALUE,\n      KEYWORDS\n    ]\n  };\n};","module.exports = function(hljs) {\n\tvar SPECIAL_VARS = {\n\t\tclassName: 'keyword',\n\t\tbegin: '\\\\$(f[asn]|t|vp[rtd]|children)'\n\t},\n\tLITERALS = {\n\t\tclassName: 'literal',\n\t\tbegin: 'false|true|PI|undef'\n\t},\n\tNUMBERS = {\n\t\tclassName: 'number',\n\t\tbegin: '\\\\b\\\\d+(\\\\.\\\\d+)?(e-?\\\\d+)?', //adds 1e5, 1e-10\n\t\trelevance: 0\n\t},\n\tSTRING = hljs.inherit(hljs.QUOTE_STRING_MODE,{illegal: null}),\n\tPREPRO = {\n\t\tclassName: 'meta',\n\t\tkeywords: {'meta-keyword': 'include use'},\n\t\tbegin: 'include|use <',\n\t\tend: '>'\n\t},\n\tPARAMS = {\n\t\tclassName: 'params',\n\t\tbegin: '\\\\(', end: '\\\\)',\n\t\tcontains: ['self', NUMBERS, STRING, SPECIAL_VARS, LITERALS]\n\t},\n\tMODIFIERS = {\n\t\tbegin: '[*!#%]',\n\t\trelevance: 0\n\t},\n\tFUNCTIONS = {\n\t\tclassName: 'function',\n\t\tbeginKeywords: 'module function',\n\t\tend: '\\\\=|\\\\{',\n\t\tcontains: [PARAMS, hljs.UNDERSCORE_TITLE_MODE]\n\t};\n\n\treturn {\n\t\taliases: ['scad'],\n\t\tkeywords: {\n\t\t\tkeyword: 'function module include use for intersection_for if else \\\\%',\n\t\t\tliteral: 'false true PI undef',\n\t\t\tbuilt_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'\n\t\t},\n\t\tcontains: [\n\t\t\thljs.C_LINE_COMMENT_MODE,\n\t\t\thljs.C_BLOCK_COMMENT_MODE,\n\t\t\tNUMBERS,\n\t\t\tPREPRO,\n\t\t\tSTRING,\n\t\t\tSPECIAL_VARS,\n\t\t\tMODIFIERS,\n\t\t\tFUNCTIONS\n\t\t]\n\t}\n};","module.exports = function(hljs) {\n  var BACKTICK_ESCAPE = {\n    begin: '`[\\\\s\\\\S]'\n  };\n\n  return {\n    case_insensitive: true,\n    aliases: [ 'ahk' ],\n    keywords: {\n      keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',\n      literal: 'A|0 true false NOT AND OR',\n      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel',\n    },\n    contains: [\n      {\n        className: 'built_in',\n        begin: 'A_[a-zA-Z0-9]+'\n      },\n      BACKTICK_ESCAPE,\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [BACKTICK_ESCAPE]}),\n      hljs.COMMENT(';', '$', {relevance: 0}),\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'number',\n        begin: hljs.NUMBER_RE,\n        relevance: 0\n      },\n      {\n        className: 'subst', // FIXED\n        begin: '%(?=[a-zA-Z0-9#_$@])', end: '%',\n        illegal: '[^a-zA-Z0-9#_$@]'\n      },\n      {\n        className: 'built_in',\n        begin: '^\\\\s*\\\\w+\\\\s*,'\n        //I don't really know if this is totally relevant\n      },\n      {\n        className: 'meta', \n        begin: '^\\\\s*#\\w+', end:'$',\n        relevance: 0\n      },\n      {\n        className: 'symbol',\n        contains: [BACKTICK_ESCAPE],\n        variants: [\n          {begin: '^[^\\\\n\";]+::(?!=)'},\n          {begin: '^[^\\\\n\";]+:(?!=)', relevance: 0} // zero relevance as it catches a lot of things\n                                                    // followed by a single ':' in many languages\n        ]\n      },\n      {\n        // consecutive commas, not for highlighting but just for relevance\n        begin: ',\\\\s*,'\n      }\n    ]\n  }\n};","module.exports = function (hljs) {\n  var PARAM = {\n    begin: /[\\w-]+ *=/, returnBegin: true,\n    relevance: 0,\n    contains: [{className: 'attr', begin: /[\\w-]+/}]\n  };\n  var PARAMSBLOCK = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    contains: [PARAM],\n    relevance : 0\n  };\n  var OPERATION = {\n    className: 'function',\n    begin: /:[\\w\\-.]+/,\n    relevance: 0\n  };\n  var PATH = {\n    className: 'string',\n    begin: /\\B(([\\/.])[\\w\\-.\\/=]+)+/,\n  };\n  var COMMAND_PARAMS = {\n    className: 'params',\n    begin: /--[\\w\\-=\\/]+/,\n  };\n  return {\n    aliases: ['wildfly-cli'],\n    lexemes: '[a-z\\-]+',\n    keywords: {\n      keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy ' +\n      'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls ' +\n      'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias ' +\n      'undeploy unset version xa-data-source', // module\n      literal: 'true false'\n    },\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      COMMAND_PARAMS,\n      OPERATION,\n      PATH,\n      PARAMSBLOCK\n    ]\n  }\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [\n      // highlight headers\n      {\n        className: 'section',\n        variants: [\n          { begin: '^#{1,6}', end: '$' },\n          { begin: '^.+?\\\\n[=-]{2,}$' }\n        ]\n      },\n      // inline html\n      {\n        begin: '<', end: '>',\n        subLanguage: 'xml',\n        relevance: 0\n      },\n      // lists (indicators only)\n      {\n        className: 'bullet',\n        begin: '^([*+-]|(\\\\d+\\\\.))\\\\s+'\n      },\n      // strong segments\n      {\n        className: 'strong',\n        begin: '[*_]{2}.+?[*_]{2}'\n      },\n      // emphasis segments\n      {\n        className: 'emphasis',\n        variants: [\n          { begin: '\\\\*.+?\\\\*' },\n          { begin: '_.+?_'\n          , relevance: 0\n          }\n        ]\n      },\n      // blockquotes\n      {\n        className: 'quote',\n        begin: '^>\\\\s+', end: '$'\n      },\n      // code snippets\n      {\n        className: 'code',\n        variants: [\n          {\n            begin: '^```\\w*\\s*$', end: '^```\\s*$'\n          },\n          {\n            begin: '`.+?`'\n          },\n          {\n            begin: '^( {4}|\\t)', end: '$',\n            relevance: 0\n          }\n        ]\n      },\n      // horizontal rules\n      {\n        begin: '^[-\\\\*]{3,}', end: '$'\n      },\n      // using links - title and link\n      {\n        begin: '\\\\[.+?\\\\][\\\\(\\\\[].*?[\\\\)\\\\]]',\n        returnBegin: true,\n        contains: [\n          {\n            className: 'string',\n            begin: '\\\\[', end: '\\\\]',\n            excludeBegin: true,\n            returnEnd: true,\n            relevance: 0\n          },\n          {\n            className: 'link',\n            begin: '\\\\]\\\\(', end: '\\\\)',\n            excludeBegin: true, excludeEnd: true\n          },\n          {\n            className: 'symbol',\n            begin: '\\\\]\\\\[', end: '\\\\]',\n            excludeBegin: true, excludeEnd: true\n          }\n        ],\n        relevance: 10\n      },\n      {\n        begin: /^\\[[^\\n]+\\]:/,\n        returnBegin: true,\n        contains: [\n          {\n            className: 'symbol',\n            begin: /\\[/, end: /\\]/,\n            excludeBegin: true, excludeEnd: true\n          },\n          {\n            className: 'link',\n            begin: /:\\s*/, end: /$/,\n            excludeBegin: true\n          }\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      // version of format and total amount of testcases\n      {\n        className: 'meta',\n        variants: [\n          { begin: '^TAP version (\\\\d+)$' },\n          { begin: '^1\\\\.\\\\.(\\\\d+)$' }\n        ],\n      },\n      // YAML block\n      {\n        begin: '(\\s+)?---$', end: '\\\\.\\\\.\\\\.$',\n        subLanguage: 'yaml',\n        relevance: 0\n      },\n\t  // testcase number\n      {\n        className: 'number',\n        begin: ' (\\\\d+) '\n      },\n\t  // testcase status and description\n      {\n        className: 'symbol',\n        variants: [\n          { begin: '^ok' },\n          { begin: '^not ok' }\n        ],\n      },\n    ]\n  };\n};","module.exports = function(hljs) {\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', end: '\\\\)'\n  };\n\n  var F_KEYWORDS = {\n    literal: '.False. .True.',\n    keyword: 'kind do while private call intrinsic where elsewhere ' +\n      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +\n      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +\n      'goto save else use module select case ' +\n      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +\n      'continue format pause cycle exit ' +\n      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +\n      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +\n      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +\n      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +\n      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +\n      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +\n      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +\n      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +\n      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +\n      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +\n      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +\n      'integer real character complex logical dimension allocatable|10 parameter ' +\n      'external implicit|10 none double precision assign intent optional pointer ' +\n      'target in out common equivalence data ' +\n      // IRPF90 special keywords\n      'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch ' +\n      'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',\n    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +\n      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +\n      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +\n      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +\n      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +\n      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +\n      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +\n      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +\n      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +\n      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +\n      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +\n      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +\n      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +\n      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +\n      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +\n      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +\n      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +\n      'num_images parity popcnt poppar shifta shiftl shiftr this_image ' +\n      // IRPF90 special built_ins\n      'IRP_ALIGN irp_here'\n  };\n  return {\n    case_insensitive: true,\n    keywords: F_KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: [\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),\n      {\n        className: 'function',\n        beginKeywords: 'subroutine function program',\n        illegal: '[${=\\\\n]',\n        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]\n      },\n      hljs.COMMENT('!', '$', {relevance: 0}),\n      hljs.COMMENT('begin_doc', 'end_doc', {relevance: 10}),\n      {\n        className: 'number',\n        begin: '(?=\\\\b|\\\\+|\\\\-|\\\\.)(?=\\\\.\\\\d|\\\\d)(?:\\\\d+)?(?:\\\\.?\\\\d*)(?:[de][+-]?\\\\d+)?\\\\b\\\\.?',\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var GO_KEYWORDS = {\n    keyword:\n      'break default func interface select case map struct chan else goto package switch ' +\n      'const fallthrough if range type continue for import return var go defer ' +\n      'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' +\n      'uint16 uint32 uint64 int uint uintptr rune',\n    literal:\n       'true false iota nil',\n    built_in:\n      'append cap close complex copy imag len make new panic print println real recover delete'\n  };\n  return {\n    aliases: ['golang'],\n    keywords: GO_KEYWORDS,\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'string',\n        variants: [\n          hljs.QUOTE_STRING_MODE,\n          {begin: '\\'', end: '[^\\\\\\\\]\\''},\n          {begin: '`', end: '`'},\n        ]\n      },\n      {\n        className: 'number',\n        variants: [\n          {begin: hljs.C_NUMBER_RE + '[dflsi]', relevance: 1},\n          hljs.C_NUMBER_MODE\n        ]\n      },\n      {\n        begin: /:=/ // relevance booster\n      },\n      {\n        className: 'function',\n        beginKeywords: 'func', end: /\\s*\\{/, excludeEnd: true,\n        contains: [\n          hljs.TITLE_MODE,\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: GO_KEYWORDS,\n            illegal: /[\"']/\n          }\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords:\n      'environ vocabularies notations constructors definitions ' +\n      'registrations theorems schemes requirements begin end definition ' +\n      'registration cluster existence pred func defpred deffunc theorem ' +\n      'proof let take assume then thus hence ex for st holds consider ' +\n      'reconsider such that and in provided of as from be being by means ' +\n      'equals implies iff redefine define now not or attr is mode ' +\n      'suppose per cases set thesis contradiction scheme reserve struct ' +\n      'correctness compatibility coherence symmetry assymetry ' +\n      'reflexivity irreflexivity connectedness uniqueness commutativity ' +\n      'idempotence involutiveness projectivity',\n    contains: [\n      hljs.COMMENT('::', '$')\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['nim'],\n    keywords: {\n      keyword:\n        'addr and as asm bind block break case cast const continue converter ' +\n        'discard distinct div do elif else end enum except export finally ' +\n        'for from generic if import in include interface is isnot iterator ' +\n        'let macro method mixin mod nil not notin object of or out proc ptr ' +\n        'raise ref return shl shr static template try tuple type using var ' +\n        'when while with without xor yield',\n      literal:\n        'shared guarded stdin stdout stderr result true false',\n      built_in:\n        'int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float ' +\n        'float32 float64 bool char string cstring pointer expr stmt void ' +\n        'auto any range array openarray varargs seq set clong culong cchar ' +\n        'cschar cshort cint csize clonglong cfloat cdouble clongdouble ' +\n        'cuchar cushort cuint culonglong cstringarray semistatic'\n    },\n    contains: [ {\n        className: 'meta', // Actually pragma\n        begin: /{\\./,\n        end: /\\.}/,\n        relevance: 10\n      }, {\n        className: 'string',\n        begin: /[a-zA-Z]\\w*\"/,\n        end: /\"/,\n        contains: [{begin: /\"\"/}]\n      }, {\n        className: 'string',\n        begin: /([a-zA-Z]\\w*)?\"\"\"/,\n        end: /\"\"\"/\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'type',\n        begin: /\\b[A-Z]\\w+\\b/,\n        relevance: 0\n      }, {\n        className: 'number',\n        relevance: 0,\n        variants: [\n          {begin: /\\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},\n          {begin: /\\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},\n          {begin: /\\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},\n          {begin: /\\b(\\d[_\\d]*)('?[iIuUfF](8|16|32|64))?/}\n        ]\n      },\n      hljs.HASH_COMMENT_MODE\n    ]\n  }\n};","module.exports = function(hljs) {\n  return {\n    keywords:\n      'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis ' +\n      'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone ' +\n      'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail ' +\n      'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format ' +\n      'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry ' +\n      'Hider Hyperboloid Identity Illuminate Imager Interior LightSource ' +\n      'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte ' +\n      'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option ' +\n      'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples ' +\n      'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection ' +\n      'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ' +\n      'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere ' +\n      'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd ' +\n      'TransformPoints Translate TrimCurve WorldBegin WorldEnd',\n    illegal: '</',\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var VARIABLE = {\n    className: 'variable',\n    variants: [\n      {begin: /\\$[\\w\\d#@][\\w\\d_]*/},\n      {begin: /\\$\\{(.*?)}/}\n    ]\n  };\n  var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: /(u|b)?r?'''/, end: /'''/,\n        relevance: 10\n      },\n      {\n        begin: /(u|b)?r?\"\"\"/, end: /\"\"\"/,\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)'/, end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)\"/, end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /(b|br)'/, end: /'/\n      },\n      {\n        begin: /(b|br)\"/, end: /\"/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n  return {\n\t keywords: {\n\t   keyword: KEYWORDS\n    },\n    contains: [\n      VARIABLE,\n      STRING,\n      hljs.REGEXP_MODE,\n      hljs.HASH_COMMENT_MODE,\n      hljs.NUMBER_MODE\n    ]\n  }\n};","module.exports = function(hljs) {\n  return {\n    subLanguage: 'xml',\n    contains: [\n      hljs.COMMENT('<%#', '%>'),\n      {\n        begin: '<%[%=-]?', end: '[%-]?%>',\n        subLanguage: 'ruby',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n};","var hljs = require('./highlight');\n\nhljs.registerLanguage('1c', require('./languages/1c'));\nhljs.registerLanguage('abnf', require('./languages/abnf'));\nhljs.registerLanguage('accesslog', require('./languages/accesslog'));\nhljs.registerLanguage('actionscript', require('./languages/actionscript'));\nhljs.registerLanguage('ada', require('./languages/ada'));\nhljs.registerLanguage('angelscript', require('./languages/angelscript'));\nhljs.registerLanguage('apache', require('./languages/apache'));\nhljs.registerLanguage('applescript', require('./languages/applescript'));\nhljs.registerLanguage('arcade', require('./languages/arcade'));\nhljs.registerLanguage('cpp', require('./languages/cpp'));\nhljs.registerLanguage('arduino', require('./languages/arduino'));\nhljs.registerLanguage('armasm', require('./languages/armasm'));\nhljs.registerLanguage('xml', require('./languages/xml'));\nhljs.registerLanguage('asciidoc', require('./languages/asciidoc'));\nhljs.registerLanguage('aspectj', require('./languages/aspectj'));\nhljs.registerLanguage('autohotkey', require('./languages/autohotkey'));\nhljs.registerLanguage('autoit', require('./languages/autoit'));\nhljs.registerLanguage('avrasm', require('./languages/avrasm'));\nhljs.registerLanguage('awk', require('./languages/awk'));\nhljs.registerLanguage('axapta', require('./languages/axapta'));\nhljs.registerLanguage('bash', require('./languages/bash'));\nhljs.registerLanguage('basic', require('./languages/basic'));\nhljs.registerLanguage('bnf', require('./languages/bnf'));\nhljs.registerLanguage('brainfuck', require('./languages/brainfuck'));\nhljs.registerLanguage('cal', require('./languages/cal'));\nhljs.registerLanguage('capnproto', require('./languages/capnproto'));\nhljs.registerLanguage('ceylon', require('./languages/ceylon'));\nhljs.registerLanguage('clean', require('./languages/clean'));\nhljs.registerLanguage('clojure', require('./languages/clojure'));\nhljs.registerLanguage('clojure-repl', require('./languages/clojure-repl'));\nhljs.registerLanguage('cmake', require('./languages/cmake'));\nhljs.registerLanguage('coffeescript', require('./languages/coffeescript'));\nhljs.registerLanguage('coq', require('./languages/coq'));\nhljs.registerLanguage('cos', require('./languages/cos'));\nhljs.registerLanguage('crmsh', require('./languages/crmsh'));\nhljs.registerLanguage('crystal', require('./languages/crystal'));\nhljs.registerLanguage('cs', require('./languages/cs'));\nhljs.registerLanguage('csp', require('./languages/csp'));\nhljs.registerLanguage('css', require('./languages/css'));\nhljs.registerLanguage('d', require('./languages/d'));\nhljs.registerLanguage('markdown', require('./languages/markdown'));\nhljs.registerLanguage('dart', require('./languages/dart'));\nhljs.registerLanguage('delphi', require('./languages/delphi'));\nhljs.registerLanguage('diff', require('./languages/diff'));\nhljs.registerLanguage('django', require('./languages/django'));\nhljs.registerLanguage('dns', require('./languages/dns'));\nhljs.registerLanguage('dockerfile', require('./languages/dockerfile'));\nhljs.registerLanguage('dos', require('./languages/dos'));\nhljs.registerLanguage('dsconfig', require('./languages/dsconfig'));\nhljs.registerLanguage('dts', require('./languages/dts'));\nhljs.registerLanguage('dust', require('./languages/dust'));\nhljs.registerLanguage('ebnf', require('./languages/ebnf'));\nhljs.registerLanguage('elixir', require('./languages/elixir'));\nhljs.registerLanguage('elm', require('./languages/elm'));\nhljs.registerLanguage('ruby', require('./languages/ruby'));\nhljs.registerLanguage('erb', require('./languages/erb'));\nhljs.registerLanguage('erlang-repl', require('./languages/erlang-repl'));\nhljs.registerLanguage('erlang', require('./languages/erlang'));\nhljs.registerLanguage('excel', require('./languages/excel'));\nhljs.registerLanguage('fix', require('./languages/fix'));\nhljs.registerLanguage('flix', require('./languages/flix'));\nhljs.registerLanguage('fortran', require('./languages/fortran'));\nhljs.registerLanguage('fsharp', require('./languages/fsharp'));\nhljs.registerLanguage('gams', require('./languages/gams'));\nhljs.registerLanguage('gauss', require('./languages/gauss'));\nhljs.registerLanguage('gcode', require('./languages/gcode'));\nhljs.registerLanguage('gherkin', require('./languages/gherkin'));\nhljs.registerLanguage('glsl', require('./languages/glsl'));\nhljs.registerLanguage('gml', require('./languages/gml'));\nhljs.registerLanguage('go', require('./languages/go'));\nhljs.registerLanguage('golo', require('./languages/golo'));\nhljs.registerLanguage('gradle', require('./languages/gradle'));\nhljs.registerLanguage('groovy', require('./languages/groovy'));\nhljs.registerLanguage('haml', require('./languages/haml'));\nhljs.registerLanguage('handlebars', require('./languages/handlebars'));\nhljs.registerLanguage('haskell', require('./languages/haskell'));\nhljs.registerLanguage('haxe', require('./languages/haxe'));\nhljs.registerLanguage('hsp', require('./languages/hsp'));\nhljs.registerLanguage('htmlbars', require('./languages/htmlbars'));\nhljs.registerLanguage('http', require('./languages/http'));\nhljs.registerLanguage('hy', require('./languages/hy'));\nhljs.registerLanguage('inform7', require('./languages/inform7'));\nhljs.registerLanguage('ini', require('./languages/ini'));\nhljs.registerLanguage('irpf90', require('./languages/irpf90'));\nhljs.registerLanguage('isbl', require('./languages/isbl'));\nhljs.registerLanguage('java', require('./languages/java'));\nhljs.registerLanguage('javascript', require('./languages/javascript'));\nhljs.registerLanguage('jboss-cli', require('./languages/jboss-cli'));\nhljs.registerLanguage('json', require('./languages/json'));\nhljs.registerLanguage('julia', require('./languages/julia'));\nhljs.registerLanguage('julia-repl', require('./languages/julia-repl'));\nhljs.registerLanguage('kotlin', require('./languages/kotlin'));\nhljs.registerLanguage('lasso', require('./languages/lasso'));\nhljs.registerLanguage('ldif', require('./languages/ldif'));\nhljs.registerLanguage('leaf', require('./languages/leaf'));\nhljs.registerLanguage('less', require('./languages/less'));\nhljs.registerLanguage('lisp', require('./languages/lisp'));\nhljs.registerLanguage('livecodeserver', require('./languages/livecodeserver'));\nhljs.registerLanguage('livescript', require('./languages/livescript'));\nhljs.registerLanguage('llvm', require('./languages/llvm'));\nhljs.registerLanguage('lsl', require('./languages/lsl'));\nhljs.registerLanguage('lua', require('./languages/lua'));\nhljs.registerLanguage('makefile', require('./languages/makefile'));\nhljs.registerLanguage('mathematica', require('./languages/mathematica'));\nhljs.registerLanguage('matlab', require('./languages/matlab'));\nhljs.registerLanguage('maxima', require('./languages/maxima'));\nhljs.registerLanguage('mel', require('./languages/mel'));\nhljs.registerLanguage('mercury', require('./languages/mercury'));\nhljs.registerLanguage('mipsasm', require('./languages/mipsasm'));\nhljs.registerLanguage('mizar', require('./languages/mizar'));\nhljs.registerLanguage('perl', require('./languages/perl'));\nhljs.registerLanguage('mojolicious', require('./languages/mojolicious'));\nhljs.registerLanguage('monkey', require('./languages/monkey'));\nhljs.registerLanguage('moonscript', require('./languages/moonscript'));\nhljs.registerLanguage('n1ql', require('./languages/n1ql'));\nhljs.registerLanguage('nginx', require('./languages/nginx'));\nhljs.registerLanguage('nimrod', require('./languages/nimrod'));\nhljs.registerLanguage('nix', require('./languages/nix'));\nhljs.registerLanguage('nsis', require('./languages/nsis'));\nhljs.registerLanguage('objectivec', require('./languages/objectivec'));\nhljs.registerLanguage('ocaml', require('./languages/ocaml'));\nhljs.registerLanguage('openscad', require('./languages/openscad'));\nhljs.registerLanguage('oxygene', require('./languages/oxygene'));\nhljs.registerLanguage('parser3', require('./languages/parser3'));\nhljs.registerLanguage('pf', require('./languages/pf'));\nhljs.registerLanguage('pgsql', require('./languages/pgsql'));\nhljs.registerLanguage('php', require('./languages/php'));\nhljs.registerLanguage('plaintext', require('./languages/plaintext'));\nhljs.registerLanguage('pony', require('./languages/pony'));\nhljs.registerLanguage('powershell', require('./languages/powershell'));\nhljs.registerLanguage('processing', require('./languages/processing'));\nhljs.registerLanguage('profile', require('./languages/profile'));\nhljs.registerLanguage('prolog', require('./languages/prolog'));\nhljs.registerLanguage('properties', require('./languages/properties'));\nhljs.registerLanguage('protobuf', require('./languages/protobuf'));\nhljs.registerLanguage('puppet', require('./languages/puppet'));\nhljs.registerLanguage('purebasic', require('./languages/purebasic'));\nhljs.registerLanguage('python', require('./languages/python'));\nhljs.registerLanguage('q', require('./languages/q'));\nhljs.registerLanguage('qml', require('./languages/qml'));\nhljs.registerLanguage('r', require('./languages/r'));\nhljs.registerLanguage('reasonml', require('./languages/reasonml'));\nhljs.registerLanguage('rib', require('./languages/rib'));\nhljs.registerLanguage('roboconf', require('./languages/roboconf'));\nhljs.registerLanguage('routeros', require('./languages/routeros'));\nhljs.registerLanguage('rsl', require('./languages/rsl'));\nhljs.registerLanguage('ruleslanguage', require('./languages/ruleslanguage'));\nhljs.registerLanguage('rust', require('./languages/rust'));\nhljs.registerLanguage('sas', require('./languages/sas'));\nhljs.registerLanguage('scala', require('./languages/scala'));\nhljs.registerLanguage('scheme', require('./languages/scheme'));\nhljs.registerLanguage('scilab', require('./languages/scilab'));\nhljs.registerLanguage('scss', require('./languages/scss'));\nhljs.registerLanguage('shell', require('./languages/shell'));\nhljs.registerLanguage('smali', require('./languages/smali'));\nhljs.registerLanguage('smalltalk', require('./languages/smalltalk'));\nhljs.registerLanguage('sml', require('./languages/sml'));\nhljs.registerLanguage('sqf', require('./languages/sqf'));\nhljs.registerLanguage('sql', require('./languages/sql'));\nhljs.registerLanguage('stan', require('./languages/stan'));\nhljs.registerLanguage('stata', require('./languages/stata'));\nhljs.registerLanguage('step21', require('./languages/step21'));\nhljs.registerLanguage('stylus', require('./languages/stylus'));\nhljs.registerLanguage('subunit', require('./languages/subunit'));\nhljs.registerLanguage('swift', require('./languages/swift'));\nhljs.registerLanguage('taggerscript', require('./languages/taggerscript'));\nhljs.registerLanguage('yaml', require('./languages/yaml'));\nhljs.registerLanguage('tap', require('./languages/tap'));\nhljs.registerLanguage('tcl', require('./languages/tcl'));\nhljs.registerLanguage('tex', require('./languages/tex'));\nhljs.registerLanguage('thrift', require('./languages/thrift'));\nhljs.registerLanguage('tp', require('./languages/tp'));\nhljs.registerLanguage('twig', require('./languages/twig'));\nhljs.registerLanguage('typescript', require('./languages/typescript'));\nhljs.registerLanguage('vala', require('./languages/vala'));\nhljs.registerLanguage('vbnet', require('./languages/vbnet'));\nhljs.registerLanguage('vbscript', require('./languages/vbscript'));\nhljs.registerLanguage('vbscript-html', require('./languages/vbscript-html'));\nhljs.registerLanguage('verilog', require('./languages/verilog'));\nhljs.registerLanguage('vhdl', require('./languages/vhdl'));\nhljs.registerLanguage('vim', require('./languages/vim'));\nhljs.registerLanguage('x86asm', require('./languages/x86asm'));\nhljs.registerLanguage('xl', require('./languages/xl'));\nhljs.registerLanguage('xquery', require('./languages/xquery'));\nhljs.registerLanguage('zephir', require('./languages/zephir'));\n\nmodule.exports = hljs;","module.exports = function(hljs) {\n  return {\n    contains: [\n      {\n        className: 'meta',\n        begin: /^([\\w.-]+|\\s*#_)?=>/,\n        starts: {\n          end: /$/,\n          subLanguage: 'clojure'\n        }\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};","module.exports = function(hljs) {\n  return {\n    contains: [\n      {\n        className: 'attribute',\n        begin: '^dn', end: ': ', excludeEnd: true,\n        starts: {end: '$', relevance: 0},\n        relevance: 10\n      },\n      {\n        className: 'attribute',\n        begin: '^\\\\w', end: ': ', excludeEnd: true,\n        starts: {end: '$', relevance: 0}\n      },\n      {\n        className: 'literal',\n        begin: '^-', end: '$'\n      },\n      hljs.HASH_COMMENT_MODE\n    ]\n  };\n};","module.exports = // Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;\n\nfunction(hljs) {\n  var STRINGS = { // PB IDE color: #0080FF (Azure Radiance)\n    className: 'string',\n    begin: '(~)?\"', end: '\"',\n    illegal: '\\\\n'\n  };\n  var CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)\n    //  \"#\" + a letter or underscore + letters, digits or underscores + (optional) \"$\"\n    className: 'symbol',\n    begin: '#[a-zA-Z_]\\\\w*\\\\$?'\n  };\n\n  return {\n    aliases: ['pb', 'pbi'],\n    keywords: // PB IDE color: #006666 (Blue Stone) + Bold\n      // The following keywords list was taken and adapted from GuShH's PureBasic language file for GeSHi...\n      'And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect ' +\n      'CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel ' +\n      'Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM ' +\n      'EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure ' +\n      'EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ' +\n      'ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro ' +\n      'NewList Not Or ProcedureReturn Protected Prototype ' +\n      'PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion ' +\n      'Swap To Wend While With XIncludeFile XOr ' +\n      'Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL',\n    contains: [\n      // COMMENTS | PB IDE color: #00AAAA (Persian Green)\n      hljs.COMMENT(';', '$', {relevance: 0}),\n\n      { // PROCEDURES DEFINITIONS\n        className: 'function',\n        begin: '\\\\b(Procedure|Declare)(C|CDLL|DLL)?\\\\b',\n        end: '\\\\(',\n        excludeEnd: true,\n        returnBegin: true,\n        contains: [\n          { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold\n            className: 'keyword',\n            begin: '(Procedure|Declare)(C|CDLL|DLL)?',\n            excludeEnd: true\n          },\n          { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)\n            className: 'type',\n            begin: '\\\\.\\\\w*'\n            // end: ' ',\n          },\n          hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)\n        ]\n      },\n      STRINGS,\n      CONSTANTS\n    ]\n  };\n};","module.exports = function(hljs) {\n  var smali_instr_low_prio = ['add', 'and', 'cmp', 'cmpg', 'cmpl', 'const', 'div', 'double', 'float', 'goto', 'if', 'int', 'long', 'move', 'mul', 'neg', 'new', 'nop', 'not', 'or', 'rem', 'return', 'shl', 'shr', 'sput', 'sub', 'throw', 'ushr', 'xor'];\n  var smali_instr_high_prio = ['aget', 'aput', 'array', 'check', 'execute', 'fill', 'filled', 'goto/16', 'goto/32', 'iget', 'instance', 'invoke', 'iput', 'monitor', 'packed', 'sget', 'sparse'];\n  var smali_keywords = ['transient', 'constructor', 'abstract', 'final', 'synthetic', 'public', 'private', 'protected', 'static', 'bridge', 'system'];\n  return {\n    aliases: ['smali'],\n    contains: [\n      {\n        className: 'string',\n        begin: '\"', end: '\"',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '#',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      {\n        className: 'keyword',\n        variants: [\n          {begin: '\\\\s*\\\\.end\\\\s[a-zA-Z0-9]*'},\n          {begin: '^[ ]*\\\\.[a-zA-Z]*', relevance: 0},\n          {begin: '\\\\s:[a-zA-Z_0-9]*', relevance: 0},\n          {begin: '\\\\s(' + smali_keywords.join('|') + ')'}\n        ]\n      },\n      {\n        className: 'built_in',\n        variants : [\n          {\n            begin: '\\\\s('+smali_instr_low_prio.join('|')+')\\\\s'\n          },\n          {\n            begin: '\\\\s('+smali_instr_low_prio.join('|')+')((\\\\-|/)[a-zA-Z0-9]+)+\\\\s',\n            relevance: 10\n          },\n          {\n            begin: '\\\\s('+smali_instr_high_prio.join('|')+')((\\\\-|/)[a-zA-Z0-9]+)*\\\\s',\n            relevance: 10\n          },\n        ]\n      },\n      {\n        className: 'class',\n        begin: 'L[^\\(;:\\n]*;',\n        relevance: 0\n      },\n      {\n        begin: '[vp][0-9]+',\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n    var commentMode = hljs.COMMENT(/\\(\\*/, /\\*\\)/);\n\n    var nonTerminalMode = {\n        className: \"attribute\",\n        begin: /^[ ]*[a-zA-Z][a-zA-Z-]*([\\s-]+[a-zA-Z][a-zA-Z]*)*/\n    };\n\n    var specialSequenceMode = {\n        className: \"meta\",\n        begin: /\\?.*\\?/\n    };\n\n    var ruleBodyMode = {\n        begin: /=/, end: /;/,\n        contains: [\n            commentMode,\n            specialSequenceMode,\n            // terminals\n            hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE\n        ]\n    };\n\n    return {\n        illegal: /\\S/,\n        contains: [\n            commentMode,\n            nonTerminalMode,\n            ruleBodyMode\n        ]\n    };\n};","module.exports = function(hljs) {\n  var VARIABLE = {\n    begin: '\\\\b[gtps][A-Z]+[A-Za-z0-9_\\\\-]*\\\\b|\\\\$_[A-Z]+',\n    relevance: 0\n  };\n  var COMMENT_MODES = [\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.HASH_COMMENT_MODE,\n    hljs.COMMENT('--', '$'),\n    hljs.COMMENT('[^:]//', '$')\n  ];\n  var TITLE1 = hljs.inherit(hljs.TITLE_MODE, {\n    variants: [\n      {begin: '\\\\b_*rig[A-Z]+[A-Za-z0-9_\\\\-]*'},\n      {begin: '\\\\b_[a-z0-9\\\\-]+'}\n    ]\n  });\n  var TITLE2 = hljs.inherit(hljs.TITLE_MODE, {begin: '\\\\b([A-Za-z0-9_\\\\-]+)\\\\b'});\n  return {\n    case_insensitive: false,\n    keywords: {\n      keyword:\n        '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER ' +\n        'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph ' +\n        'after byte bytes english the until http forever descending using line real8 with seventh ' +\n        'for stdout finally element word words fourth before black ninth sixth characters chars stderr ' +\n        'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid ' +\n        'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 ' +\n        'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat ' +\n        'end repeat URL in try into switch to words https token binfile each tenth as ticks tick ' +\n        'system real4 by dateItems without char character ascending eighth whole dateTime numeric short ' +\n        'first ftp integer abbreviated abbr abbrev private case while if ' +\n        'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within ' +\n        'contains ends with begins the keys of keys',\n      literal:\n        'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE ' +\n        'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO ' +\n        'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five ' +\n        'quote empty one true return cr linefeed right backslash null seven tab three two ' +\n        'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK ' +\n        'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',\n      built_in:\n        'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode ' +\n        'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum ' +\n        'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress ' +\n        'constantNames cos date dateFormat decompress directories ' +\n        'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global ' +\n        'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset ' +\n        'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders ' +\n        'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 ' +\n        'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec ' +\n        'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar ' +\n        'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets ' +\n        'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation ' +\n        'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile ' +\n        'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull ' +\n        'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered ' +\n        'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames ' +\n        'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull ' +\n        'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections ' +\n        'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype ' +\n        'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext ' +\n        'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames ' +\n        'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase ' +\n        'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute ' +\n        'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces ' +\n        'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode ' +\n        'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling ' +\n        'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error ' +\n        'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute ' +\n        'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort ' +\n        'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree ' +\n        'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance ' +\n        'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound ' +\n        'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper ' +\n        'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames ' +\n        'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet ' +\n        'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process ' +\n        'combine constant convert create new alias folder directory decrypt delete variable word line folder ' +\n        'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile ' +\n        'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback ' +\n        'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime ' +\n        'libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename ' +\n        'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase ' +\n        'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees ' +\n        'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord ' +\n        'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase ' +\n        'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD ' +\n        'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost ' +\n        'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData ' +\n        'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel ' +\n        'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback ' +\n        'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop ' +\n        'subtract union unload wait write'\n    },\n    contains: [\n      VARIABLE,\n      {\n        className: 'keyword',\n        begin: '\\\\bend\\\\sif\\\\b'\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: '$',\n        contains: [\n          VARIABLE,\n          TITLE2,\n          hljs.APOS_STRING_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.BINARY_NUMBER_MODE,\n          hljs.C_NUMBER_MODE,\n          TITLE1\n        ]\n      },\n      {\n        className: 'function',\n        begin: '\\\\bend\\\\s+', end: '$',\n        keywords: 'end',\n        contains: [\n          TITLE2,\n          TITLE1\n        ],\n        relevance: 0\n      },\n      {\n        beginKeywords: 'command on', end: '$',\n        contains: [\n          VARIABLE,\n          TITLE2,\n          hljs.APOS_STRING_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.BINARY_NUMBER_MODE,\n          hljs.C_NUMBER_MODE,\n          TITLE1\n        ]\n      },\n      {\n        className: 'meta',\n        variants: [\n          {\n            begin: '<\\\\?(rev|lc|livecode)',\n            relevance: 10\n          },\n          { begin: '<\\\\?' },\n          { begin: '\\\\?>' }\n        ]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.BINARY_NUMBER_MODE,\n      hljs.C_NUMBER_MODE,\n      TITLE1\n    ].concat(COMMENT_MODES),\n    illegal: ';$|^\\\\[|^=|&|{'\n  };\n};","module.exports = function(hljs) {\n    return {\n        keywords: {\n            literal : 'true false null',\n            keyword:\n            'byte short char int long boolean float double void ' +\n            // groovy specific keywords\n            'def as in assert trait ' +\n            // common keywords with Java\n            'super this abstract static volatile transient public private protected synchronized final ' +\n            'class interface enum if else for while switch case break default continue ' +\n            'throw throws try catch finally implements extends new import package return instanceof'\n        },\n\n        contains: [\n            hljs.COMMENT(\n                '/\\\\*\\\\*',\n                '\\\\*/',\n                {\n                    relevance : 0,\n                    contains : [\n                      {\n                          // eat up @'s in emails to prevent them to be recognized as doctags\n                          begin: /\\w+@/, relevance: 0\n                      },\n                      {\n                          className : 'doctag',\n                          begin : '@[A-Za-z]+'\n                      }\n                    ]\n                }\n            ),\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: 'string',\n                begin: '\"\"\"', end: '\"\"\"'\n            },\n            {\n                className: 'string',\n                begin: \"'''\", end: \"'''\"\n            },\n            {\n                className: 'string',\n                begin: \"\\\\$/\", end: \"/\\\\$\",\n                relevance: 10\n            },\n            hljs.APOS_STRING_MODE,\n            {\n                className: 'regexp',\n                begin: /~?\\/[^\\/\\n]+\\//,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            hljs.QUOTE_STRING_MODE,\n            {\n                className: 'meta',\n                begin: \"^#!/usr/bin/env\", end: '$',\n                illegal: '\\n'\n            },\n            hljs.BINARY_NUMBER_MODE,\n            {\n                className: 'class',\n                beginKeywords: 'class interface trait enum', end: '{',\n                illegal: ':',\n                contains: [\n                    {beginKeywords: 'extends implements'},\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            hljs.C_NUMBER_MODE,\n            {\n                className: 'meta', begin: '@[A-Za-z]+'\n            },\n            {\n                // highlight map keys and named parameters as strings\n                className: 'string', begin: /[^\\?]{0}[A-Za-z0-9_$]+ *:/\n            },\n            {\n                // catch middle element of the ternary operator\n                // to avoid highlight it as a label, named parameter, or map key\n                begin: /\\?/, end: /\\:/\n            },\n            {\n                // highlight labeled statements\n                className: 'symbol', begin: '^\\\\s*[A-Za-z0-9_$]+:',\n                relevance: 0\n            }\n        ],\n        illegal: /#|<\\//\n    }\n};","module.exports = function(hljs) {\n  var KEYWORDS =\n    'exports register file shl array record property for mod while set ally label uses raise not ' +\n    'stored class safecall var interface or private static exit index inherited to else stdcall ' +\n    'override shr asm far resourcestring finalization packed virtual out and protected library do ' +\n    'xorwrite goto near function end div overload object unit begin string on inline repeat until ' +\n    'destructor write message program with read initialization except default nil if case cdecl in ' +\n    'downto threadvar of try pascal const external constructor type public then implementation ' +\n    'finally published procedure absolute reintroduce operator as is abstract alias assembler ' +\n    'bitpacked break continue cppdecl cvar enumerator experimental platform deprecated ' +\n    'unimplemented dynamic export far16 forward generic helper implements interrupt iochecks ' +\n    'local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat ' +\n    'specialize strict unaligned varargs ';\n  var COMMENT_MODES = [\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.COMMENT(/\\{/, /\\}/, {relevance: 0}),\n    hljs.COMMENT(/\\(\\*/, /\\*\\)/, {relevance: 10})\n  ];\n  var DIRECTIVE = {\n    className: 'meta',\n    variants: [\n      {begin: /\\{\\$/, end: /\\}/},\n      {begin: /\\(\\*\\$/, end: /\\*\\)/}\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    begin: /'/, end: /'/,\n    contains: [{begin: /''/}]\n  };\n  var CHAR_STRING = {\n    className: 'string', begin: /(#\\d+)+/\n  };\n  var CLASS = {\n    begin: hljs.IDENT_RE + '\\\\s*=\\\\s*class\\\\s*\\\\(', returnBegin: true,\n    contains: [\n      hljs.TITLE_MODE\n    ]\n  };\n  var FUNCTION = {\n    className: 'function',\n    beginKeywords: 'function constructor destructor procedure', end: /[:;]/,\n    keywords: 'function constructor|10 destructor|10 procedure|10',\n    contains: [\n      hljs.TITLE_MODE,\n      {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [STRING, CHAR_STRING, DIRECTIVE].concat(COMMENT_MODES)\n      },\n      DIRECTIVE\n    ].concat(COMMENT_MODES)\n  };\n  return {\n    aliases: ['dpr', 'dfm', 'pas', 'pascal', 'freepascal', 'lazarus', 'lpr', 'lfm'],\n    case_insensitive: true,\n    keywords: KEYWORDS,\n    illegal: /\"|\\$[G-Zg-z]|\\/\\*|<\\/|\\|/,\n    contains: [\n      STRING, CHAR_STRING,\n      hljs.NUMBER_MODE,\n      CLASS,\n      FUNCTION,\n      DIRECTIVE\n    ].concat(COMMENT_MODES)\n  };\n};","module.exports = function(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia v0.6 itself through\n  // the following scripts for each.\n\n  var KEYWORDS = {\n    // # keyword generator, multi-word keywords handled manually below\n    // foreach(println, [\"in\", \"isa\", \"where\"])\n    // for kw in Base.REPLCompletions.complete_keyword(\"\")\n    //     if !(contains(kw, \" \") || kw == \"struct\")\n    //         println(kw)\n    //     end\n    // end\n    keyword:\n      'in isa where ' +\n      'baremodule begin break catch ccall const continue do else elseif end export false finally for function ' +\n      'global if import importall let local macro module quote return true try using while ' +\n      // legacy, to be deprecated in the next release\n      'type immutable abstract bitstype typealias ',\n\n    // # literal generator\n    // println(\"true\")\n    // println(\"false\")\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         v = eval(Symbol(name))\n    //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n    //             println(name)\n    //         end\n    //     end\n    // end\n    literal:\n      'true false ' +\n      'ARGS C_NULL DevNull ENDIAN_BOM ENV I Inf Inf16 Inf32 Inf64 InsertionSort JULIA_HOME LOAD_PATH MergeSort ' +\n      'NaN NaN16 NaN32 NaN64 PROGRAM_FILE QuickSort RoundDown RoundFromZero RoundNearest RoundNearestTiesAway ' +\n      'RoundNearestTiesUp RoundToZero RoundUp STDERR STDIN STDOUT VERSION catalan e|0 eu|0 eulergamma golden im ' +\n      'nothing pi γ π φ ',\n\n    // # built_in generator:\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         v = eval(Symbol(name))\n    //         if v isa Type || v isa TypeVar\n    //             println(name)\n    //         end\n    //     end\n    // end\n    built_in:\n      'ANY AbstractArray AbstractChannel AbstractFloat AbstractMatrix AbstractRNG AbstractSerializer AbstractSet ' +\n      'AbstractSparseArray AbstractSparseMatrix AbstractSparseVector AbstractString AbstractUnitRange AbstractVecOrMat ' +\n      'AbstractVector Any ArgumentError Array AssertionError Associative Base64DecodePipe Base64EncodePipe Bidiagonal '+\n      'BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError BufferStream CachingPool CapturedException ' +\n      'CartesianIndex CartesianRange Cchar Cdouble Cfloat Channel Char Cint Cintmax_t Clong Clonglong ClusterManager ' +\n      'Cmd CodeInfo Colon Complex Complex128 Complex32 Complex64 CompositeException Condition ConjArray ConjMatrix ' +\n      'ConjVector Cptrdiff_t Cshort Csize_t Cssize_t Cstring Cuchar Cuint Cuintmax_t Culong Culonglong Cushort Cwchar_t ' +\n      'Cwstring DataType Date DateFormat DateTime DenseArray DenseMatrix DenseVecOrMat DenseVector Diagonal Dict ' +\n      'DimensionMismatch Dims DirectIndexString Display DivideError DomainError EOFError EachLine Enum Enumerate ' +\n      'ErrorException Exception ExponentialBackOff Expr Factorization FileMonitor Float16 Float32 Float64 Function ' +\n      'Future GlobalRef GotoNode HTML Hermitian IO IOBuffer IOContext IOStream IPAddr IPv4 IPv6 IndexCartesian IndexLinear ' +\n      'IndexStyle InexactError InitError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException ' +\n      'InvalidStateException Irrational KeyError LabelNode LinSpace LineNumberNode LoadError LowerTriangular MIME Matrix ' +\n      'MersenneTwister Method MethodError MethodTable Module NTuple NewvarNode NullException Nullable Number ObjectIdDict ' +\n      'OrdinalRange OutOfMemoryError OverflowError Pair ParseError PartialQuickSort PermutedDimsArray Pipe ' +\n      'PollingFileWatcher ProcessExitedException Ptr QuoteNode RandomDevice Range RangeIndex Rational RawFD ' +\n      'ReadOnlyMemoryError Real ReentrantLock Ref Regex RegexMatch RemoteChannel RemoteException RevString RoundingMode ' +\n      'RowVector SSAValue SegmentationFault SerializationState Set SharedArray SharedMatrix SharedVector Signed ' +\n      'SimpleVector Slot SlotNumber SparseMatrixCSC SparseVector StackFrame StackOverflowError StackTrace StepRange ' +\n      'StepRangeLen StridedArray StridedMatrix StridedVecOrMat StridedVector String SubArray SubString SymTridiagonal ' +\n      'Symbol Symmetric SystemError TCPSocket Task Text TextDisplay Timer Tridiagonal Tuple Type TypeError TypeMapEntry ' +\n      'TypeMapLevel TypeName TypeVar TypedSlot UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UndefRefError UndefVarError ' +\n      'UnicodeError UniformScaling Union UnionAll UnitRange Unsigned UpperTriangular Val Vararg VecElement VecOrMat Vector ' +\n      'VersionNumber Void WeakKeyDict WeakRef WorkerConfig WorkerPool '\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n  // placeholder for recursive self-reference\n  var DEFAULT = {\n    lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS, illegal: /<\\//\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/\n  var NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n\n  var CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    keywords: KEYWORDS\n  };\n\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/, relevance: 10 },\n      { begin: /\\w*\"/, end: /\"\\w*/ }\n    ]\n  };\n\n  var COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`', end: '`'\n  };\n\n  var MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n\n  var COMMENT = {\n    className: 'comment',\n    variants: [\n      { begin: '#=', end: '=#', relevance: 10 },\n      { begin: '#', end: '$' }\n    ]\n  };\n\n  DEFAULT.contains = [\n    NUMBER,\n    CHAR,\n    STRING,\n    COMMAND,\n    MACROCALL,\n    COMMENT,\n    hljs.HASH_COMMENT_MODE,\n    {\n      className: 'keyword',\n      begin:\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n    },\n    {begin: /<:/}  // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n\n  return DEFAULT;\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      'module use_module import_module include_module end_module initialise ' +\n      'mutable initialize finalize finalise interface implementation pred ' +\n      'mode func type inst solver any_pred any_func is semidet det nondet ' +\n      'multi erroneous failure cc_nondet cc_multi typeclass instance where ' +\n      'pragma promise external trace atomic or_else require_complete_switch ' +\n      'require_det require_semidet require_multi require_nondet ' +\n      'require_cc_multi require_cc_nondet require_erroneous require_failure',\n    meta:\n      // pragma\n      'inline no_inline type_spec source_file fact_table obsolete memo ' +\n      'loop_check minimal_model terminates does_not_terminate ' +\n      'check_termination promise_equivalent_clauses ' +\n      // preprocessor\n      'foreign_proc foreign_decl foreign_code foreign_type ' +\n      'foreign_import_module foreign_export_enum foreign_export ' +\n      'foreign_enum may_call_mercury will_not_call_mercury thread_safe ' +\n      'not_thread_safe maybe_thread_safe promise_pure promise_semipure ' +\n      'tabled_for_io local untrailed trailed attach_to_io_state ' +\n      'can_pass_as_mercury_type stable will_not_throw_exception ' +\n      'may_modify_trail will_not_modify_trail may_duplicate ' +\n      'may_not_duplicate affects_liveness does_not_affect_liveness ' +\n      'doesnt_affect_liveness no_sharing unknown_sharing sharing',\n    built_in:\n      'some all not if then else true fail false try catch catch_any ' +\n      'semidet_true semidet_false semidet_fail impure_true impure semipure'\n  };\n\n  var COMMENT = hljs.COMMENT('%', '$');\n\n  var NUMCODE = {\n    className: 'number',\n    begin: \"0'.\\\\|0[box][0-9a-fA-F]*\"\n  };\n\n  var ATOM = hljs.inherit(hljs.APOS_STRING_MODE, {relevance: 0});\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {relevance: 0});\n  var STRING_FMT = {\n    className: 'subst',\n    begin: '\\\\\\\\[abfnrtv]\\\\|\\\\\\\\x[0-9a-fA-F]*\\\\\\\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',\n    relevance: 0\n  };\n  STRING.contains.push(STRING_FMT);\n\n  var IMPLICATION = {\n    className: 'built_in',\n    variants: [\n      {begin: '<=>'},\n      {begin: '<=', relevance: 0},\n      {begin: '=>', relevance: 0},\n      {begin: '/\\\\\\\\'},\n      {begin: '\\\\\\\\/'}\n    ]\n  };\n\n  var HEAD_BODY_CONJUNCTION = {\n    className: 'built_in',\n    variants: [\n      {begin: ':-\\\\|-->'},\n      {begin: '=', relevance: 0}\n    ]\n  };\n\n  return {\n    aliases: ['m', 'moo'],\n    keywords: KEYWORDS,\n    contains: [\n      IMPLICATION,\n      HEAD_BODY_CONJUNCTION,\n      COMMENT,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMCODE,\n      hljs.NUMBER_MODE,\n      ATOM,\n      STRING,\n      {begin: /:-/} // relevance booster\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  var COMMENT = {\n    className: 'comment',\n    begin: /\\$noop\\(/,\n    end: /\\)/,\n    contains: [{\n      begin: /\\(/,\n      end: /\\)/,\n      contains: ['self', {\n        begin: /\\\\./\n      }]\n    }],\n    relevance: 10\n  };\n\n  var FUNCTION = {\n    className: 'keyword',\n    begin: /\\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,\n    end: /\\(/,\n    excludeEnd: true\n  };\n\n  var VARIABLE = {\n    className: 'variable',\n    begin: /%[_a-zA-Z0-9:]*/,\n    end: '%'\n  };\n\n  var ESCAPE_SEQUENCE = {\n    className: 'symbol',\n    begin: /\\\\./\n  };\n\n  return {\n    contains: [\n      COMMENT,\n      FUNCTION,\n      VARIABLE,\n      ESCAPE_SEQUENCE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var LASSO_IDENT_RE = '[a-zA-Z_][\\\\w.]*';\n  var LASSO_ANGLE_RE = '<\\\\?(lasso(script)?|=)';\n  var LASSO_CLOSE_RE = '\\\\]|\\\\?>';\n  var LASSO_KEYWORDS = {\n    literal:\n      'true false none minimal full all void and or not ' +\n      'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',\n    built_in:\n      'array date decimal duration integer map pair string tag xml null ' +\n      'boolean bytes keyword list locale queue set stack staticarray ' +\n      'local var variable global data self inherited currentcapture givenblock',\n    keyword:\n      'cache database_names database_schemanames database_tablenames ' +\n      'define_tag define_type email_batch encode_set html_comment handle ' +\n      'handle_error header if inline iterate ljax_target link ' +\n      'link_currentaction link_currentgroup link_currentrecord link_detail ' +\n      'link_firstgroup link_firstrecord link_lastgroup link_lastrecord ' +\n      'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log ' +\n      'loop namespace_using output_none portal private protect records ' +\n      'referer referrer repeating resultset rows search_args ' +\n      'search_arguments select sort_args sort_arguments thread_atomic ' +\n      'value_list while abort case else fail_if fail_ifnot fail if_empty ' +\n      'if_false if_null if_true loop_abort loop_continue loop_count params ' +\n      'params_up return return_value run_children soap_definetag ' +\n      'soap_lastrequest soap_lastresponse tag_name ascending average by ' +\n      'define descending do equals frozen group handle_failure import in ' +\n      'into join let match max min on order parent protected provide public ' +\n      'require returnhome skip split_thread sum take thread to trait type ' +\n      'where with yield yieldhome'\n  };\n  var HTML_COMMENT = hljs.COMMENT(\n    '<!--',\n    '-->',\n    {\n      relevance: 0\n    }\n  );\n  var LASSO_NOPROCESS = {\n    className: 'meta',\n    begin: '\\\\[noprocess\\\\]',\n    starts: {\n      end: '\\\\[/noprocess\\\\]',\n      returnEnd: true,\n      contains: [HTML_COMMENT]\n    }\n  };\n  var LASSO_START = {\n    className: 'meta',\n    begin: '\\\\[/noprocess|' + LASSO_ANGLE_RE\n  };\n  var LASSO_DATAMEMBER = {\n    className: 'symbol',\n    begin: '\\'' + LASSO_IDENT_RE + '\\''\n  };\n  var LASSO_CODE = [\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.inherit(hljs.C_NUMBER_MODE, {begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\\\b'}),\n    hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),\n    hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n    {\n      className: 'string',\n      begin: '`', end: '`'\n    },\n    { // variables\n      variants: [\n        {\n          begin: '[#$]' + LASSO_IDENT_RE\n        },\n        {\n          begin: '#', end: '\\\\d+',\n          illegal: '\\\\W'\n        }\n      ]\n    },\n    {\n      className: 'type',\n      begin: '::\\\\s*', end: LASSO_IDENT_RE,\n      illegal: '\\\\W'\n    },\n    {\n      className: 'params',\n      variants: [\n        {\n          begin: '-(?!infinity)' + LASSO_IDENT_RE,\n          relevance: 0\n        },\n        {\n          begin: '(\\\\.\\\\.\\\\.)'\n        }\n      ]\n    },\n    {\n      begin: /(->|\\.)\\s*/,\n      relevance: 0,\n      contains: [LASSO_DATAMEMBER]\n    },\n    {\n      className: 'class',\n      beginKeywords: 'define',\n      returnEnd: true, end: '\\\\(|=>',\n      contains: [\n        hljs.inherit(hljs.TITLE_MODE, {begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)'})\n      ]\n    }\n  ];\n  return {\n    aliases: ['ls', 'lassoscript'],\n    case_insensitive: true,\n    lexemes: LASSO_IDENT_RE + '|&[lg]t;',\n    keywords: LASSO_KEYWORDS,\n    contains: [\n      {\n        className: 'meta',\n        begin: LASSO_CLOSE_RE,\n        relevance: 0,\n        starts: { // markup\n          end: '\\\\[|' + LASSO_ANGLE_RE,\n          returnEnd: true,\n          relevance: 0,\n          contains: [HTML_COMMENT]\n        }\n      },\n      LASSO_NOPROCESS,\n      LASSO_START,\n      {\n        className: 'meta',\n        begin: '\\\\[no_square_brackets',\n        starts: {\n          end: '\\\\[/no_square_brackets\\\\]', // not implemented in the language\n          lexemes: LASSO_IDENT_RE + '|&[lg]t;',\n          keywords: LASSO_KEYWORDS,\n          contains: [\n            {\n              className: 'meta',\n              begin: LASSO_CLOSE_RE,\n              relevance: 0,\n              starts: {\n                end: '\\\\[noprocess\\\\]|' + LASSO_ANGLE_RE,\n                returnEnd: true,\n                contains: [HTML_COMMENT]\n              }\n            },\n            LASSO_NOPROCESS,\n            LASSO_START\n          ].concat(LASSO_CODE)\n        }\n      },\n      {\n        className: 'meta',\n        begin: '\\\\[',\n        relevance: 0\n      },\n      {\n        className: 'meta',\n        begin: '^#!', end:'lasso9$',\n        relevance: 10\n      }\n    ].concat(LASSO_CODE)\n  };\n};","module.exports = function(hljs) {\n  var BUILTIN_MODULES =\n    'ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo ' +\n    'StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts';\n\n  var XL_KEYWORDS = {\n    keyword:\n      'if then else do while until for loop import with is as where when by data constant ' +\n      'integer real text name boolean symbol infix prefix postfix block tree',\n    literal:\n      'true false nil',\n    built_in:\n      'in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin ' +\n      'acos atan exp expm1 log log2 log10 log1p pi at text_length text_range ' +\n      'text_find text_replace contains page slide basic_slide title_slide ' +\n      'title subtitle fade_in fade_out fade_at clear_color color line_color ' +\n      'line_width texture_wrap texture_transform texture scale_?x scale_?y ' +\n      'scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y ' +\n      'rotate_?z? rectangle circle ellipse sphere path line_to move_to ' +\n      'quad_to curve_to theme background contents locally time mouse_?x ' +\n      'mouse_?y mouse_buttons ' +\n      BUILTIN_MODULES\n  };\n\n  var DOUBLE_QUOTE_TEXT = {\n    className: 'string',\n    begin: '\"', end: '\"', illegal: '\\\\n'\n  };\n  var SINGLE_QUOTE_TEXT = {\n    className: 'string',\n    begin: '\\'', end: '\\'', illegal: '\\\\n'\n  };\n  var LONG_TEXT = {\n    className: 'string',\n    begin: '<<', end: '>>'\n  };\n  var BASED_NUMBER = {\n    className: 'number',\n    begin: '[0-9]+#[0-9A-Z_]+(\\\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'\n  };\n  var IMPORT = {\n    beginKeywords: 'import', end: '$',\n    keywords: XL_KEYWORDS,\n    contains: [DOUBLE_QUOTE_TEXT]\n  };\n  var FUNCTION_DEFINITION = {\n    className: 'function',\n    begin: /[a-z][^\\n]*->/, returnBegin: true, end: /->/,\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {starts: {\n        endsWithParent: true,\n        keywords: XL_KEYWORDS\n      }})\n    ]\n  };\n  return {\n    aliases: ['tao'],\n    lexemes: /[a-zA-Z][a-zA-Z0-9_?]*/,\n    keywords: XL_KEYWORDS,\n    contains: [\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    DOUBLE_QUOTE_TEXT,\n    SINGLE_QUOTE_TEXT,\n    LONG_TEXT,\n    FUNCTION_DEFINITION,\n    IMPORT,\n    BASED_NUMBER,\n    hljs.NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  // see https://www.w3.org/TR/xquery/#id-terminal-delimitation\n  var KEYWORDS = 'module schema namespace boundary-space preserve no-preserve strip default collation base-uri ordering context decimal-format decimal-separator copy-namespaces empty-sequence except exponent-separator external grouping-separator inherit no-inherit lax minus-sign per-mille percent schema-attribute schema-element strict unordered zero-digit ' +\n  'declare import option function validate variable ' +\n  'for at in let where order group by return if then else ' +\n  'tumbling sliding window start when only end previous next stable ' +\n  'ascending descending allowing empty greatest least some every satisfies switch case typeswitch try catch ' +\n  'and or to union intersect instance of treat as castable cast map array ' +\n  'delete insert into replace value rename copy modify update';\n\n  // Node Types (sorted by inheritance)\n  // atomic types (sorted by inheritance)\n  var TYPE = 'item document-node node attribute document element comment namespace namespace-node processing-instruction text construction ' +\n  'xs:anyAtomicType xs:untypedAtomic xs:duration xs:time xs:decimal xs:float xs:double xs:gYearMonth xs:gYear xs:gMonthDay xs:gMonth xs:gDay xs:boolean xs:base64Binary xs:hexBinary xs:anyURI xs:QName xs:NOTATION xs:dateTime xs:dateTimeStamp xs:date xs:string xs:normalizedString xs:token xs:language xs:NMTOKEN xs:Name xs:NCName xs:ID xs:IDREF xs:ENTITY xs:integer xs:nonPositiveInteger xs:negativeInteger xs:long xs:int xs:short xs:byte xs:nonNegativeInteger xs:unisignedLong xs:unsignedInt xs:unsignedShort xs:unsignedByte xs:positiveInteger xs:yearMonthDuration xs:dayTimeDuration';\n\n  var LITERAL = 'eq ne lt le gt ge is ' +\n    'self:: child:: descendant:: descendant-or-self:: attribute:: following:: following-sibling:: parent:: ancestor:: ancestor-or-self:: preceding:: preceding-sibling:: ' +\n    'NaN';\n\n  // functions (TODO: find regex for op: without breaking build)\n  var BUILT_IN = {\n    className: 'built_in',\n    variants: [{\n      begin: /\\barray\\:/,\n      end: /(?:append|filter|flatten|fold\\-(?:left|right)|for-each(?:\\-pair)?|get|head|insert\\-before|join|put|remove|reverse|size|sort|subarray|tail)\\b/\n    }, {\n      begin: /\\bmap\\:/,\n      end: /(?:contains|entry|find|for\\-each|get|keys|merge|put|remove|size)\\b/\n    }, {\n      begin: /\\bmath\\:/,\n      end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\\b/\n    }, {\n      begin: /\\bop\\:/,\n      end: /\\(/,\n      excludeEnd: true\n    }, {\n      begin: /\\bfn\\:/,\n      end: /\\(/,\n      excludeEnd: true\n    },\n// do not highlight inbuilt strings as variable or xml element names\n    {\n      begin: /[^<\\/\\$\\:'\"-]\\b(?:abs|accumulator\\-(?:after|before)|adjust\\-(?:date(?:Time)?|time)\\-to\\-timezone|analyze\\-string|apply|available\\-(?:environment\\-variables|system\\-properties)|avg|base\\-uri|boolean|ceiling|codepoints?\\-(?:equal|to\\-string)|collation\\-key|collection|compare|concat|contains(?:\\-token)?|copy\\-of|count|current(?:\\-)?(?:date(?:Time)?|time|group(?:ing\\-key)?|output\\-uri|merge\\-(?:group|key))?data|dateTime|days?\\-from\\-(?:date(?:Time)?|duration)|deep\\-equal|default\\-(?:collation|language)|distinct\\-values|document(?:\\-uri)?|doc(?:\\-available)?|element\\-(?:available|with\\-id)|empty|encode\\-for\\-uri|ends\\-with|environment\\-variable|error|escape\\-html\\-uri|exactly\\-one|exists|false|filter|floor|fold\\-(?:left|right)|for\\-each(?:\\-pair)?|format\\-(?:date(?:Time)?|time|integer|number)|function\\-(?:arity|available|lookup|name)|generate\\-id|has\\-children|head|hours\\-from\\-(?:dateTime|duration|time)|id(?:ref)?|implicit\\-timezone|in\\-scope\\-prefixes|index\\-of|innermost|insert\\-before|iri\\-to\\-uri|json\\-(?:doc|to\\-xml)|key|lang|last|load\\-xquery\\-module|local\\-name(?:\\-from\\-QName)?|(?:lower|upper)\\-case|matches|max|minutes\\-from\\-(?:dateTime|duration|time)|min|months?\\-from\\-(?:date(?:Time)?|duration)|name(?:space\\-uri\\-?(?:for\\-prefix|from\\-QName)?)?|nilled|node\\-name|normalize\\-(?:space|unicode)|not|number|one\\-or\\-more|outermost|parse\\-(?:ietf\\-date|json)|path|position|(?:prefix\\-from\\-)?QName|random\\-number\\-generator|regex\\-group|remove|replace|resolve\\-(?:QName|uri)|reverse|root|round(?:\\-half\\-to\\-even)?|seconds\\-from\\-(?:dateTime|duration|time)|snapshot|sort|starts\\-with|static\\-base\\-uri|stream\\-available|string\\-?(?:join|length|to\\-codepoints)?|subsequence|substring\\-?(?:after|before)?|sum|system\\-property|tail|timezone\\-from\\-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type\\-available|unordered|unparsed\\-(?:entity|text)?\\-?(?:public\\-id|uri|available|lines)?|uri\\-collection|xml\\-to\\-json|years?\\-from\\-(?:date(?:Time)?|duration)|zero\\-or\\-one)\\b/,\n    }, {\n      begin: /\\blocal\\:/,\n      end: /\\(/,\n      excludeEnd: true\n    }, {\n      begin: /\\bzip\\:/,\n      end: /(?:zip\\-file|(?:xml|html|text|binary)\\-entry| (?:update\\-)?entries)\\b/\n    }, {\n      begin: /\\b(?:util|db|functx|app|xdmp|xmldb)\\:/,\n      end: /\\(/,\n      excludeEnd: true\n    }\n  ]\n  };\n\n  var TITLE = {\n    className: 'title',\n    begin: /\\bxquery version \"[13]\\.[01]\"\\s?(?:encoding \".+\")?/,\n    end: /;/\n  };\n\n  var VAR = {\n    className: 'variable',\n    begin: /[\\$][\\w-:]+/\n  };\n\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  };\n\n  var STRING = {\n    className: 'string',\n    variants: [{\n        begin: /\"/,\n        end: /\"/,\n        contains: [{\n          begin: /\"\"/,\n          relevance: 0\n        }]\n      },\n      {\n        begin: /'/,\n        end: /'/,\n        contains: [{\n          begin: /''/,\n          relevance: 0\n        }]\n      }\n    ]\n  };\n\n  var ANNOTATION = {\n    className: 'meta',\n    begin: /%[\\w-:]+/\n  };\n\n  var COMMENT = {\n    className: 'comment',\n    begin: '\\\\(:',\n    end: ':\\\\)',\n    relevance: 10,\n    contains: [{\n      className: 'doctag',\n      begin: '@\\\\w+'\n    }]\n  };\n\n  // see https://www.w3.org/TR/xquery/#id-computedConstructors\n  // mocha: computed_inbuilt\n  // see https://www.regexpal.com/?fam=99749\n  var COMPUTED = {\n    beginKeywords: 'element attribute comment document processing-instruction',\n    end: '{',\n    excludeEnd: true\n  };\n\n  // mocha: direct_method\n    var DIRECT = {\n      begin: /<([\\w\\._:\\-]+)((\\s*.*)=('|\").*('|\"))?>/,\n      end: /(\\/[\\w\\._:\\-]+>)/,\n      subLanguage: 'xml',\n      contains: [{\n        begin: '{',\n        end: '}',\n        subLanguage: 'xquery'\n      }, 'self']\n    };\n\n\n  var CONTAINS = [\n    VAR,\n    BUILT_IN,\n    STRING,\n    NUMBER,\n    COMMENT,\n    ANNOTATION,\n    TITLE,\n    COMPUTED,\n    DIRECT\n  ];\n\n\n\n    var METHOD = {\n      begin: '{',\n      end: '}',\n      contains: CONTAINS\n    };\n\n\n\n  return {\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    lexemes: /[a-zA-Z\\$][a-zA-Z0-9_:\\-]*/,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      keyword: KEYWORDS,\n      type: TYPE,\n      literal: LITERAL\n    },\n    contains: CONTAINS\n  };\n};","module.exports = function(hljs) {\n  var IDENT_RE = '([a-zA-Z]|\\\\.[a-zA-Z.])[a-zA-Z0-9._]*';\n\n  return {\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      {\n        begin: IDENT_RE,\n        lexemes: IDENT_RE,\n        keywords: {\n          keyword:\n            'function if in break next repeat else for return switch while try tryCatch ' +\n            'stop warning require library attach detach source setMethod setGeneric ' +\n            'setGroupGeneric setClass ...',\n          literal:\n            'NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 ' +\n            'NA_complex_|10'\n        },\n        relevance: 0\n      },\n      {\n        // hex value\n        className: 'number',\n        begin: \"0[xX][0-9a-fA-F]+[Li]?\\\\b\",\n        relevance: 0\n      },\n      {\n        // explicit integer\n        className: 'number',\n        begin: \"\\\\d+(?:[eE][+\\\\-]?\\\\d*)?L\\\\b\",\n        relevance: 0\n      },\n      {\n        // number with trailing decimal\n        className: 'number',\n        begin: \"\\\\d+\\\\.(?!\\\\d)(?:i\\\\b)?\",\n        relevance: 0\n      },\n      {\n        // number\n        className: 'number',\n        begin: \"\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\",\n        relevance: 0\n      },\n      {\n        // number with leading decimal\n        className: 'number',\n        begin: \"\\\\.\\\\d+(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\",\n        relevance: 0\n      },\n\n      {\n        // escaped identifier\n        begin: '`',\n        end: '`',\n        relevance: 0\n      },\n\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          {begin: '\"', end: '\"'},\n          {begin: \"'\", end: \"'\"}\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n\n    var LSL_STRING_ESCAPE_CHARS = {\n        className: 'subst',\n        begin: /\\\\[tn\"\\\\]/\n    };\n\n    var LSL_STRINGS = {\n        className: 'string',\n        begin: '\"',\n        end: '\"',\n        contains: [\n            LSL_STRING_ESCAPE_CHARS\n        ]\n    };\n\n    var LSL_NUMBERS = {\n        className: 'number',\n        begin: hljs.C_NUMBER_RE\n    };\n\n    var LSL_CONSTANTS = {\n        className: 'literal',\n        variants: [\n            {\n                begin: '\\\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\\\b'\n            },\n            {\n                begin: '\\\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\\\b'\n            },\n            {\n                begin: '\\\\b(?:FALSE|TRUE)\\\\b'\n            },\n            {\n                begin: '\\\\b(?:ZERO_ROTATION)\\\\b'\n            },\n            {\n                begin: '\\\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\\\b'\n            },\n            {\n                begin: '\\\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\\\b'\n            }\n        ]\n    };\n\n    var LSL_FUNCTIONS = {\n        className: 'built_in',\n        begin: '\\\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\\\b'\n    };\n\n    return {\n        illegal: ':',\n        contains: [\n            LSL_STRINGS,\n            {\n                className: 'comment',\n                variants: [\n                    hljs.COMMENT('//', '$'),\n                    hljs.COMMENT('/\\\\*', '\\\\*/')\n                ]\n            },\n            LSL_NUMBERS,\n            {\n                className: 'section',\n                variants: [\n                    {\n                        begin: '\\\\b(?:state|default)\\\\b'\n                    },\n                    {\n                        begin: '\\\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\\\b'\n                    }\n                ]\n            },\n            LSL_FUNCTIONS,\n            LSL_CONSTANTS,\n            {\n                className: 'type',\n                begin: '\\\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\\\b'\n            }\n        ]\n    };\n};","module.exports = function(hljs) {\n  var VARIABLE = {\n    begin: '\\\\$+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'\n  };\n  var PREPROCESSOR = {\n    className: 'meta', begin: /<\\?(php)?|\\?>/\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],\n    variants: [\n      {\n        begin: 'b\"', end: '\"'\n      },\n      {\n        begin: 'b\\'', end: '\\''\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})\n    ]\n  };\n  var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};\n  return {\n    aliases: ['php', 'php3', 'php4', 'php5', 'php6', 'php7'],\n    case_insensitive: true,\n    keywords:\n      'and include_once list abstract global private echo interface as static endswitch ' +\n      'array null if endwhile or const for endforeach self var while isset public ' +\n      'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +\n      'return parent clone use __CLASS__ __LINE__ else break print eval new ' +\n      'catch __METHOD__ case exception default die require __FUNCTION__ ' +\n      'enddeclare final try switch continue endfor endif declare unset true false ' +\n      'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +\n      'yield finally',\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),\n      hljs.COMMENT(\n        '/\\\\*',\n        '\\\\*/',\n        {\n          contains: [\n            {\n              className: 'doctag',\n              begin: '@[A-Za-z]+'\n            }\n          ]\n        }\n      ),\n      hljs.COMMENT(\n        '__halt_compiler.+?;',\n        false,\n        {\n          endsWithParent: true,\n          keywords: '__halt_compiler',\n          lexemes: hljs.UNDERSCORE_IDENT_RE\n        }\n      ),\n      {\n        className: 'string',\n        begin: /<<<['\"]?\\w+['\"]?$/, end: /^\\w+;?$/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {\n            className: 'subst',\n            variants: [\n              {begin: /\\$\\w+/},\n              {begin: /\\{\\$/, end: /\\}/}\n            ]\n          }\n        ]\n      },\n      PREPROCESSOR,\n      {\n        className: 'keyword', begin: /\\$this\\b/\n      },\n      VARIABLE,\n      {\n        // swallow composed identifiers to avoid parsing them as keywords\n        begin: /(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /[;{]/, excludeEnd: true,\n        illegal: '\\\\$|\\\\[|%',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            className: 'params',\n            begin: '\\\\(', end: '\\\\)',\n            contains: [\n              'self',\n              VARIABLE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRING,\n              NUMBER\n            ]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: '{', excludeEnd: true,\n        illegal: /[:\\(\\$\"]/,\n        contains: [\n          {beginKeywords: 'extends implements'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'namespace', end: ';',\n        illegal: /[\\.']/,\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        beginKeywords: 'use', end: ';',\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        begin: '=>' // No markup, just a relevance booster\n      },\n      STRING,\n      NUMBER\n    ]\n  };\n};","module.exports = function(hljs) {\n  var INT_SUFFIX = '(_*[ui](8|16|32|64|128))?';\n  var FLOAT_SUFFIX = '(_*f(32|64))?';\n  var CRYSTAL_IDENT_RE = '[a-zA-Z_]\\\\w*[!?=]?';\n  var CRYSTAL_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]\\\\@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\\\*\\\\*|\\\\[\\\\][=?]?';\n  var CRYSTAL_PATH_RE = '[A-Za-z_]\\\\w*(::\\\\w+)*(\\\\?|\\\\!)?';\n  var CRYSTAL_KEYWORDS = {\n    keyword:\n      'abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if ' +\n      'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? ' +\n      'return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield ' +\n      '__DIR__ __END_LINE__ __FILE__ __LINE__',\n    literal: 'false nil true'\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '#{', end: '}',\n    keywords: CRYSTAL_KEYWORDS\n  };\n  var EXPANSION = {\n    className: 'template-variable',\n    variants: [\n      {begin: '\\\\{\\\\{', end: '\\\\}\\\\}'},\n      {begin: '\\\\{%', end: '%\\\\}'}\n    ],\n    keywords: CRYSTAL_KEYWORDS\n  };\n\n  function recursiveParen(begin, end) {\n    var\n    contains = [{begin: begin, end: end}];\n    contains[0].contains = contains;\n    return contains;\n  }\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {begin: /'/, end: /'/},\n      {begin: /\"/, end: /\"/},\n      {begin: /`/, end: /`/},\n      {begin: '%[Qwi]?\\\\(', end: '\\\\)', contains: recursiveParen('\\\\(', '\\\\)')},\n      {begin: '%[Qwi]?\\\\[', end: '\\\\]', contains: recursiveParen('\\\\[', '\\\\]')},\n      {begin: '%[Qwi]?{', end: '}', contains: recursiveParen('{', '}')},\n      {begin: '%[Qwi]?<', end: '>', contains: recursiveParen('<', '>')},\n      {begin: '%[Qwi]?\\\\|', end: '\\\\|'},\n      {begin: /<<-\\w+$/, end: /^\\s*\\w+$/},\n    ],\n    relevance: 0,\n  };\n  var Q_STRING = {\n    className: 'string',\n    variants: [\n      {begin: '%q\\\\(', end: '\\\\)', contains: recursiveParen('\\\\(', '\\\\)')},\n      {begin: '%q\\\\[', end: '\\\\]', contains: recursiveParen('\\\\[', '\\\\]')},\n      {begin: '%q{', end: '}', contains: recursiveParen('{', '}')},\n      {begin: '%q<', end: '>', contains: recursiveParen('<', '>')},\n      {begin: '%q\\\\|', end: '\\\\|'},\n      {begin: /<<-'\\w+'$/, end: /^\\s*\\w+$/},\n    ],\n    relevance: 0,\n  };\n  var REGEXP = {\n    begin: '(?!%})(' + hljs.RE_STARTERS_RE + '|\\\\n|\\\\b(case|if|select|unless|until|when|while)\\\\b)\\\\s*',\n    keywords: 'case if select unless until when while',\n    contains: [\n      {\n        className: 'regexp',\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n        variants: [\n          {begin: '//[a-z]*', relevance: 0},\n          {begin: '/(?!\\\\/)', end: '/[a-z]*'},\n        ]\n      }\n    ],\n    relevance: 0\n  };\n  var REGEXP2 = {\n    className: 'regexp',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {begin: '%r\\\\(', end: '\\\\)', contains: recursiveParen('\\\\(', '\\\\)')},\n      {begin: '%r\\\\[', end: '\\\\]', contains: recursiveParen('\\\\[', '\\\\]')},\n      {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},\n      {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},\n      {begin: '%r\\\\|', end: '\\\\|'},\n    ],\n    relevance: 0\n  };\n  var ATTRIBUTE = {\n    className: 'meta',\n    begin: '@\\\\[', end: '\\\\]',\n    contains: [\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'})\n    ]\n  };\n  var CRYSTAL_DEFAULT_CONTAINS = [\n    EXPANSION,\n    STRING,\n    Q_STRING,\n    REGEXP2,\n    REGEXP,\n    ATTRIBUTE,\n    hljs.HASH_COMMENT_MODE,\n    {\n      className: 'class',\n      beginKeywords: 'class module struct', end: '$|;',\n      illegal: /=/,\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        hljs.inherit(hljs.TITLE_MODE, {begin: CRYSTAL_PATH_RE}),\n        {begin: '<'} // relevance booster for inheritance\n      ]\n    },\n    {\n      className: 'class',\n      beginKeywords: 'lib enum union', end: '$|;',\n      illegal: /=/,\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        hljs.inherit(hljs.TITLE_MODE, {begin: CRYSTAL_PATH_RE}),\n      ],\n      relevance: 10\n    },\n    {\n      beginKeywords: 'annotation', end: '$|;',\n      illegal: /=/,\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        hljs.inherit(hljs.TITLE_MODE, {begin: CRYSTAL_PATH_RE}),\n      ],\n      relevance: 10\n    },\n    {\n      className: 'function',\n      beginKeywords: 'def', end: /\\B\\b/,\n      contains: [\n        hljs.inherit(hljs.TITLE_MODE, {\n          begin: CRYSTAL_METHOD_RE,\n          endsParent: true\n        })\n      ]\n    },\n    {\n      className: 'function',\n      beginKeywords: 'fun macro', end: /\\B\\b/,\n      contains: [\n        hljs.inherit(hljs.TITLE_MODE, {\n          begin: CRYSTAL_METHOD_RE,\n          endsParent: true\n        })\n      ],\n      relevance: 5\n    },\n    {\n      className: 'symbol',\n      begin: hljs.UNDERSCORE_IDENT_RE + '(\\\\!|\\\\?)?:',\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ':',\n      contains: [STRING, {begin: CRYSTAL_METHOD_RE}],\n      relevance: 0\n    },\n    {\n      className: 'number',\n      variants: [\n        { begin: '\\\\b0b([01_]+)' + INT_SUFFIX },\n        { begin: '\\\\b0o([0-7_]+)' + INT_SUFFIX },\n        { begin: '\\\\b0x([A-Fa-f0-9_]+)' + INT_SUFFIX },\n        { begin: '\\\\b([1-9][0-9_]*[0-9]|[0-9])(\\\\.[0-9][0-9_]*)?([eE]_*[-+]?[0-9_]*)?' + FLOAT_SUFFIX + '(?!_)' },\n        { begin: '\\\\b([1-9][0-9_]*|0)' + INT_SUFFIX }\n      ],\n      relevance: 0\n    }\n  ];\n  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;\n  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION\n\n  return {\n    aliases: ['cr'],\n    lexemes: CRYSTAL_IDENT_RE,\n    keywords: CRYSTAL_KEYWORDS,\n    contains: CRYSTAL_DEFAULT_CONTAINS\n  };\n};","module.exports = function(hljs) {\n  var COMMAND = {\n    className: 'tag',\n    begin: /\\\\/,\n    relevance: 0,\n    contains: [\n      {\n        className: 'name',\n        variants: [\n          {begin: /[a-zA-Z\\u0430-\\u044f\\u0410-\\u042f]+[*]?/},\n          {begin: /[^a-zA-Z\\u0430-\\u044f\\u0410-\\u042f0-9]/}\n        ],\n        starts: {\n          endsWithParent: true,\n          relevance: 0,\n          contains: [\n            {\n              className: 'string', // because it looks like attributes in HTML tags\n              variants: [\n                {begin: /\\[/, end: /\\]/},\n                {begin: /\\{/, end: /\\}/}\n              ]\n            },\n            {\n              begin: /\\s*=\\s*/, endsWithParent: true,\n              relevance: 0,\n              contains: [\n                {\n                  className: 'number',\n                  begin: /-?\\d*\\.?\\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  };\n\n  return {\n    contains: [\n      COMMAND,\n      {\n        className: 'formula',\n        contains: [COMMAND],\n        relevance: 0,\n        variants: [\n          {begin: /\\$\\$/, end: /\\$\\$/},\n          {begin: /\\$/, end: /\\$/}\n        ]\n      },\n      hljs.COMMENT(\n        '%',\n        '$',\n        {\n          relevance: 0\n        }\n      )\n    ]\n  };\n};","module.exports = function(hljs) {\n  var SWIFT_KEYWORDS = {\n      keyword: '#available #colorLiteral #column #else #elseif #endif #file ' +\n        '#fileLiteral #function #if #imageLiteral #line #selector #sourceLocation ' +\n        '_ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype ' +\n        'associativity break case catch class continue convenience default defer deinit didSet do ' +\n        'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' +\n        'get guard if import in indirect infix init inout internal is lazy left let ' +\n        'mutating nil none nonmutating open operator optional override postfix precedence ' +\n        'prefix private protocol Protocol public repeat required rethrows return ' +\n        'right self Self set static struct subscript super switch throw throws true ' +\n        'try try! try? Type typealias unowned var weak where while willSet',\n      literal: 'true false nil',\n      built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' +\n        'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' +\n        'bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros ' +\n        'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' +\n        'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' +\n        'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' +\n        'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' +\n        'map max maxElement min minElement numericCast overlaps partition posix ' +\n        'precondition preconditionFailure print println quickSort readLine reduce reflect ' +\n        'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' +\n        'startsWith stride strideof strideofValue swap toString transcode ' +\n        'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' +\n        'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' +\n        'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' +\n        'withUnsafePointer withUnsafePointers withVaList zip'\n    };\n\n  var TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\u00C0-\\u02B8\\']*',\n    relevance: 0\n  };\n  // slightly more special to swift\n  var OPTIONAL_USING_TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\u00C0-\\u02B8\\']*[!?]'\n  }\n  var BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    {\n      contains: ['self']\n    }\n  );\n  var SUBST = {\n    className: 'subst',\n    begin: /\\\\\\(/, end: '\\\\)',\n    keywords: SWIFT_KEYWORDS,\n    contains: [] // assigned later\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {begin: /\"\"\"/, end: /\"\"\"/},\n      {begin: /\"/, end: /\"/},\n    ]\n  };\n  var NUMBERS = {\n      className: 'number',\n      begin: '\\\\b([\\\\d_]+(\\\\.[\\\\deE_]+)?|0x[a-fA-F0-9_]+(\\\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\\\b',\n      relevance: 0\n  };\n  SUBST.contains = [NUMBERS];\n\n  return {\n    keywords: SWIFT_KEYWORDS,\n    contains: [\n      STRING,\n      hljs.C_LINE_COMMENT_MODE,\n      BLOCK_COMMENT,\n      OPTIONAL_USING_TYPE,\n      TYPE,\n      NUMBERS,\n      {\n        className: 'function',\n        beginKeywords: 'func', end: '{', excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/\n          }),\n          {\n            begin: /</, end: />/\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/, endsParent: true,\n            keywords: SWIFT_KEYWORDS,\n            contains: [\n              'self',\n              NUMBERS,\n              STRING,\n              hljs.C_BLOCK_COMMENT_MODE,\n              {begin: ':'} // relevance booster\n            ],\n            illegal: /[\"']/\n          }\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        className: 'class',\n        beginKeywords: 'struct protocol class extension enum',\n        keywords: SWIFT_KEYWORDS,\n        end: '\\\\{',\n        excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/})\n        ]\n      },\n      {\n        className: 'meta', // @attributes\n        begin: '(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|' +\n                  '@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|' +\n                  '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' +\n                  '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' +\n                  '@nonobjc|@NSApplicationMain|@UIApplicationMain)'\n\n      },\n      {\n        beginKeywords: 'import', end: /$/,\n        contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var STRING = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: \"'''\", end: \"'''\",\n        relevance: 10\n      }, {\n        begin: '\"\"\"', end: '\"\"\"',\n        relevance: 10\n      }, {\n        begin: '\"', end: '\"'\n      }, {\n        begin: \"'\", end: \"'\"\n      }\n    ]\n  };\n  return {\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      hljs.COMMENT(';', '$'),\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'section',\n        begin: /^\\s*\\[+/, end: /\\]+/\n      },\n      {\n        begin: /^[a-z0-9\\[\\]_\\.-]+\\s*=\\s*/, end: '$',\n        returnBegin: true,\n        contains: [\n          {\n            className: 'attr',\n            begin: /[a-z0-9\\[\\]_\\.-]+/\n          },\n          {\n            begin: /=/, endsWithParent: true,\n            relevance: 0,\n            contains: [\n              {\n                className: 'literal',\n                begin: /\\bon|off|true|false|yes|no\\b/\n              },\n              {\n                className: 'variable',\n                variants: [\n                  {begin: /\\$[\\w\\d\"][\\w\\d_]*/},\n                  {begin: /\\$\\{(.*?)}/}\n                ]\n              },\n              STRING,\n              {\n                className: 'number',\n                begin: /([\\+\\-]+)?[\\d]+_[\\d_]+/\n              },\n              hljs.NUMBER_MODE\n            ]\n          }\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    contains: [\n    {\n      begin: /[^\\u2401\\u0001]+/,\n      end: /[\\u2401\\u0001]/,\n      excludeEnd: true,\n      returnBegin: true,\n      returnEnd: false,\n      contains: [\n      {\n        begin: /([^\\u2401\\u0001=]+)/,\n        end: /=([^\\u2401\\u0001=]+)/,\n        returnEnd: true,\n        returnBegin: false,\n        className: 'attr'\n      },\n      {\n        begin: /=/,\n        end: /([\\u2401\\u0001])/,\n        excludeEnd: true,\n        excludeBegin: true,\n        className: 'string'\n      }]\n    }],\n    case_insensitive: true\n  };\n};","module.exports = function(hljs) {\n  var NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  var KEYWORDS =\n    'alignof as be box break const continue crate do else enum extern ' +\n    'false fn for if impl in let loop match mod mut offsetof once priv ' +\n    'proc pub pure ref return self Self sizeof static struct super trait true ' +\n    'type typeof unsafe unsized use virtual while where yield move default';\n  var BUILTINS =\n    // functions\n    'drop ' +\n    // types\n    'i8 i16 i32 i64 i128 isize ' +\n    'u8 u16 u32 u64 u128 usize ' +\n    'f32 f64 ' +\n    'str char bool ' +\n    'Box Option Result String Vec ' +\n    // traits\n    'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' +\n    'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +\n    'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' +\n    'SliceConcatExt ToString ' +\n    // macros\n    'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +\n    'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +\n    'include_bin! include_str! line! local_data_key! module_path! ' +\n    'option_env! print! println! select! stringify! try! unimplemented! ' +\n    'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';\n  return {\n    aliases: ['rs'],\n    keywords: {\n      keyword:\n        KEYWORDS,\n      literal:\n        'true false Some None Ok Err',\n      built_in:\n        BUILTINS\n    },\n    lexemes: hljs.IDENT_RE + '!?',\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', {contains: ['self']}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {begin: /b?\"/, illegal: null}),\n      {\n        className: 'string',\n        variants: [\n           { begin: /r(#*)\"(.|\\n)*?\"\\1(?!#)/ },\n           { begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/ }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      },\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b0b([01_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b0o([0-7_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\n                   NUM_SUFFIX\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'fn', end: '(\\\\(|<)', excludeEnd: true,\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        className: 'meta',\n        begin: '#\\\\!?\\\\[', end: '\\\\]',\n        contains: [\n          {\n            className: 'meta-string',\n            begin: /\"/, end: /\"/\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'type', end: ';',\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})\n        ],\n        illegal: '\\\\S'\n      },\n      {\n        className: 'class',\n        beginKeywords: 'trait enum struct union', end: '{',\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})\n        ],\n        illegal: '[\\\\w\\\\d]'\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: {built_in: BUILTINS}\n      },\n      {\n        begin: '->'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // JS keywords\n      'in if for while finally new do return else break catch instanceof throw try this ' +\n      'switch continue typeof delete debugger case default function var with ' +\n      // LiveScript keywords\n      'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' +\n      'case default function var void const let enum export import native ' +\n      '__hasProp __extends __slice __bind __indexOf',\n    literal:\n      // JS literals\n      'true false null undefined ' +\n      // LiveScript literals\n      'yes no on off it that void',\n    built_in:\n      'npm require console print module global window document'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_](?:\\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});\n  var SUBST = {\n    className: 'subst',\n    begin: /#\\{/, end: /}/,\n    keywords: KEYWORDS\n  };\n  var SUBST_SIMPLE = {\n    className: 'subst',\n    begin: /#[A-Za-z$_]/, end: /(?:\\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,\n    keywords: KEYWORDS\n  };\n  var EXPRESSIONS = [\n    hljs.BINARY_NUMBER_MODE,\n    {\n      className: 'number',\n      begin: '(\\\\b0[xX][a-fA-F0-9_]+)|(\\\\b\\\\d(\\\\d|_\\\\d)*(\\\\.(\\\\d(\\\\d|_\\\\d)*)?)?(_*[eE]([-+]\\\\d(_\\\\d|\\\\d)*)?)?[_a-z]*)',\n      relevance: 0,\n      starts: {end: '(\\\\s*/)?', relevance: 0} // a number tries to eat the following slash to prevent treating it as a regexp\n    },\n    {\n      className: 'string',\n      variants: [\n        {\n          begin: /'''/, end: /'''/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /'/, end: /'/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /\"\"\"/, end: /\"\"\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]\n        },\n        {\n          begin: /\"/, end: /\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]\n        },\n        {\n          begin: /\\\\/, end: /(\\s|$)/,\n          excludeEnd: true\n        }\n      ]\n    },\n    {\n      className: 'regexp',\n      variants: [\n        {\n          begin: '//', end: '//[gim]*',\n          contains: [SUBST, hljs.HASH_COMMENT_MODE]\n        },\n        {\n          // regex can't start with space to parse x / 2 / 3 as two divisions\n          // regex can't start with *, and it supports an \"illegal\" in the main mode\n          begin: /\\/(?![ *])(\\\\\\/|.)*?\\/[gim]*(?=\\W|$)/\n        }\n      ]\n    },\n    {\n      begin: '@' + JS_IDENT_RE\n    },\n    {\n      begin: '``', end: '``',\n      excludeBegin: true, excludeEnd: true,\n      subLanguage: 'javascript'\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', returnBegin: true,\n    /* We need another contained nameless mode to not have every nested\n    pair of parens to be called \"params\" */\n    contains: [\n      {\n        begin: /\\(/, end: /\\)/,\n        keywords: KEYWORDS,\n        contains: ['self'].concat(EXPRESSIONS)\n      }\n    ]\n  };\n\n  return {\n    aliases: ['ls'],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: EXPRESSIONS.concat([\n      hljs.COMMENT('\\\\/\\\\*', '\\\\*\\\\/'),\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'function',\n        contains: [TITLE, PARAMS],\n        returnBegin: true,\n        variants: [\n          {\n            begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?(\\\\(.*\\\\))?\\\\s*\\\\B\\\\->\\\\*?', end: '\\\\->\\\\*?'\n          },\n          {\n            begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?!?(\\\\(.*\\\\))?\\\\s*\\\\B[-~]{1,2}>\\\\*?', end: '[-~]{1,2}>\\\\*?'\n          },\n          {\n            begin: '(' + JS_IDENT_RE + '\\\\s*(?:=|:=)\\\\s*)?(\\\\(.*\\\\))?\\\\s*\\\\B!?[-~]{1,2}>\\\\*?', end: '!?[-~]{1,2}>\\\\*?'\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class',\n        end: '$',\n        illegal: /[:=\"\\[\\]]/,\n        contains: [\n          {\n            beginKeywords: 'extends',\n            endsWithParent: true,\n            illegal: /[:=\"\\[\\]]/,\n            contains: [TITLE]\n          },\n          TITLE\n        ]\n      },\n      {\n        begin: JS_IDENT_RE + ':', end: ':',\n        returnBegin: true, returnEnd: true,\n        relevance: 0\n      }\n    ])\n  };\n};","module.exports = function(hljs) {\n  var START_BRACKET = '\\\\[';\n  var END_BRACKET = '\\\\]';\n  return {\n    aliases: ['i7'],\n    case_insensitive: true,\n    keywords: {\n      // Some keywords more or less unique to I7, for relevance.\n      keyword:\n        // kind:\n        'thing room person man woman animal container ' +\n        'supporter backdrop door ' +\n        // characteristic:\n        'scenery open closed locked inside gender ' +\n        // verb:\n        'is are say understand ' +\n        // misc keyword:\n        'kind of rule'\n    },\n    contains: [\n      {\n        className: 'string',\n        begin: '\"', end: '\"',\n        relevance: 0,\n        contains: [\n          {\n            className: 'subst',\n            begin: START_BRACKET, end: END_BRACKET\n          }\n        ]\n      },\n      {\n        className: 'section',\n        begin: /^(Volume|Book|Part|Chapter|Section|Table)\\b/,\n        end: '$'\n      },\n      {\n        // Rule definition\n        // This is here for relevance.\n        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\\b/,\n        end: ':',\n        contains: [\n          {\n            //Rule name\n            begin: '\\\\(This', end: '\\\\)'\n          }\n        ]\n      },\n      {\n        className: 'comment',\n        begin: START_BRACKET, end: END_BRACKET,\n        contains: ['self']\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var LITERALS = 'true false yes no null';\n\n  var keyPrefix = '^[ \\\\-]*';\n  var keyName =  '[a-zA-Z_][\\\\w\\\\-]*';\n  var KEY = {\n    className: 'attr',\n    variants: [\n      { begin: keyPrefix + keyName + \":\"},\n      { begin: keyPrefix + '\"' + keyName + '\"' + \":\"},\n      { begin: keyPrefix + \"'\" + keyName + \"'\" + \":\"}\n    ]\n  };\n\n  var TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { begin: '\\{\\{', end: '\\}\\}' }, // jinja templates Ansible\n      { begin: '%\\{', end: '\\}' } // Ruby i18n\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      {begin: /'/, end: /'/},\n      {begin: /\"/, end: /\"/},\n      {begin: /\\S+/}\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    aliases: ['yml', 'YAML', 'yaml'],\n    contains: [\n      KEY,\n      {\n        className: 'meta',\n        begin: '^---\\s*$',\n        relevance: 10\n      },\n      { // multi line string\n        className: 'string',\n        begin: '[\\\\|>] *$',\n        returnEnd: true,\n        contains: STRING.contains,\n        // very simple termination: next hash key\n        end: KEY.variants[0].begin\n      },\n      { // Ruby/Rails erb\n        begin: '<%[%=-]?', end: '[%-]?%>',\n        subLanguage: 'ruby',\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0\n      },\n      { // local tags\n        className: 'type',\n        begin: '!' + hljs.UNDERSCORE_IDENT_RE,\n      },\n      { // data type\n        className: 'type',\n        begin: '!!' + hljs.UNDERSCORE_IDENT_RE,\n      },\n      { // fragment id &ref\n        className: 'meta',\n        begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',\n      },\n      { // fragment reference *ref\n        className: 'meta',\n        begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n      },\n      { // array listing\n        className: 'bullet',\n        begin: '^ *-',\n        relevance: 0\n      },\n      hljs.HASH_COMMENT_MODE,\n      {\n        beginKeywords: LITERALS,\n        keywords: {literal: LITERALS}\n      },\n      hljs.C_NUMBER_MODE,\n      STRING\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword: 'package import option optional required repeated group oneof',\n      built_in: 'double float int32 int64 uint32 uint64 sint32 sint64 ' +\n        'fixed32 fixed64 sfixed32 sfixed64 bool string bytes',\n      literal: 'true false'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      {\n        className: 'class',\n        beginKeywords: 'message enum service', end: /\\{/,\n        illegal: /\\n/,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title\n          })\n        ]\n      },\n      {\n        className: 'function',\n        beginKeywords: 'rpc',\n        end: /;/, excludeEnd: true,\n        keywords: 'rpc returns'\n      },\n      {\n        begin: /^\\s*[A-Z_]+/,\n        end: /\\s*=/, excludeEnd: true\n      }\n    ]\n  };\n};","module.exports = function (hljs) {\n  return {\n    contains: [\n      {\n        className: 'function',\n        begin: '#+' + '[A-Za-z_0-9]*' + '\\\\(',\n        end:' {',\n        returnBegin: true,\n        excludeEnd: true,\n        contains : [\n          {\n            className: 'keyword',\n            begin: '#+'\n          },\n          {\n            className: 'title',\n            begin: '[A-Za-z_][A-Za-z_0-9]*'\n          },\n          {\n            className: 'params',\n            begin: '\\\\(', end: '\\\\)',\n            endsParent: true,\n            contains: [\n              {\n                className: 'string',\n                begin: '\"',\n                end: '\"'\n              },\n              {\n                className: 'variable',\n                begin: '[A-Za-z_][A-Za-z_0-9]*'\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var IDENT_RE = '[A-Za-z_][0-9A-Za-z_]*';\n  var KEYWORDS = {\n    keyword:\n      'if for while var new function do return void else break',\n    literal:\n      'true false null undefined NaN Infinity PI BackSlash DoubleQuote ForwardSlash NewLine SingleQuote Tab',\n    built_in:\n      'Abs Acos Area AreaGeodetic Asin Atan Atan2 Average Boolean Buffer BufferGeodetic ' +\n      'Ceil Centroid Clip Console Constrain Contains Cos Count Crosses Cut Date DateAdd ' +\n      'DateDiff Day Decode DefaultValue Dictionary Difference Disjoint Distance Distinct ' +\n      'DomainCode DomainName Equals Exp Extent Feature FeatureSet FeatureSetById FeatureSetByTitle ' +\n      'FeatureSetByUrl Filter First Floor Geometry Guid HasKey Hour IIf IndexOf Intersection ' +\n      'Intersects IsEmpty Length LengthGeodetic Log Max Mean Millisecond Min Minute Month ' +\n      'MultiPartToSinglePart Multipoint NextSequenceValue Now Number OrderBy Overlaps Point Polygon ' +\n      'Polyline Pow Random Relate Reverse Round Second SetGeometry Sin Sort Sqrt Stdev Sum ' +\n      'SymmetricDifference Tan Text Timestamp Today ToLocal Top Touches ToUTC TypeOf Union Variance ' +\n      'Weekday When Within Year '\n  };\n  var EXPRESSIONS;\n  var SYMBOL = {\n    className: 'symbol',\n    begin: '\\\\$[feature|layer|map|value|view]+'\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0[bB][01]+)' },\n      { begin: '\\\\b(0[oO][0-7]+)' },\n      { begin: hljs.C_NUMBER_RE }\n    ],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{', end: '\\\\}',\n    keywords: KEYWORDS,\n    contains: []  // defined later\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`', end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  SUBST.contains = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    TEMPLATE_STRING,\n    NUMBER,\n    hljs.REGEXP_MODE\n  ];\n  var PARAMS_CONTAINS = SUBST.contains.concat([\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.C_LINE_COMMENT_MODE\n  ]);\n\n  return {\n    aliases: ['arcade'],\n    keywords: KEYWORDS,\n    contains: [\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      TEMPLATE_STRING,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      SYMBOL,\n      NUMBER,\n      { // object attr container\n        begin: /[{,]\\s*/, relevance: 0,\n        contains: [\n          {\n            begin: IDENT_RE + '\\\\s*:', returnBegin: true,\n            relevance: 0,\n            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]\n          }\n        ]\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(return)\\\\b)\\\\s*',\n        keywords: 'return',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            begin: '(\\\\(.*?\\\\)|' + IDENT_RE + ')\\\\s*=>', returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: IDENT_RE\n                  },\n                  {\n                    begin: /\\(\\s*\\)/,\n                  },\n                  {\n                    begin: /\\(/, end: /\\)/,\n                    excludeBegin: true, excludeEnd: true,\n                    keywords: KEYWORDS,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /\\{/, excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            contains: PARAMS_CONTAINS\n          }\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        begin: /\\$[(.]/\n      }\n    ],\n    illegal: /#(?!!)/\n  };\n};","module.exports = function(hljs) {\n  // Regular expression for VHDL numeric literals.\n\n  // Decimal literal:\n  var INTEGER_RE = '\\\\d(_|\\\\d)*';\n  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n  // Based literal:\n  var BASED_INTEGER_RE = '\\\\w+';\n  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n  var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n  return {\n    case_insensitive: true,\n    keywords: {\n      keyword:\n        'abs access after alias all and architecture array assert assume assume_guarantee attribute ' +\n        'begin block body buffer bus case component configuration constant context cover disconnect ' +\n        'downto default else elsif end entity exit fairness file for force function generate ' +\n        'generic group guarded if impure in inertial inout is label library linkage literal ' +\n        'loop map mod nand new next nor not null of on open or others out package parameter port ' +\n        'postponed procedure process property protected pure range record register reject ' +\n        'release rem report restrict restrict_guarantee return rol ror select sequence ' +\n        'severity shared signal sla sll sra srl strong subtype then to transport type ' +\n        'unaffected units until use variable view vmode vprop vunit wait when while with xnor xor',\n      built_in:\n        'boolean bit character ' +\n        'integer time delay_length natural positive ' +\n        'string bit_vector file_open_kind file_open_status ' +\n        'std_logic std_logic_vector unsigned signed boolean_vector integer_vector ' +\n        'std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed ' +\n        'real_vector time_vector',\n      literal:\n        'false true note warning error failure ' +  // severity_level\n        'line text side width'                      // textio\n    },\n    illegal: '{',\n    contains: [\n      hljs.C_BLOCK_COMMENT_MODE,      // VHDL-2008 block commenting.\n      hljs.COMMENT('--', '$'),\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'number',\n        begin: NUMBER_RE,\n        relevance: 0\n      },\n      {\n        className: 'string',\n        begin: '\\'(U|X|0|1|Z|W|L|H|-)\\'',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        className: 'symbol',\n        begin: '\\'[A-Za-z](_?[A-Za-z0-9])*',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var JAVA_IDENT_RE = '[\\u00C0-\\u02B8a-zA-Z_$][\\u00C0-\\u02B8a-zA-Z_$0-9]*';\n  var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\\\s*,\\\\s*' + JAVA_IDENT_RE + ')*>)?';\n  var KEYWORDS =\n    'false synchronized int abstract float private char boolean var static null if const ' +\n    'for true while long strictfp finally protected import native final void ' +\n    'enum else break transient catch instanceof byte super volatile case assert short ' +\n    'package default double public try this switch continue throws protected public private ' +\n    'module requires exports do';\n\n  // https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html\n  var JAVA_NUMBER_RE = '\\\\b' +\n    '(' +\n      '0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...\n      '|' +\n      '0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...\n      '|' +\n      '(' +\n        '([\\\\d]+[\\\\d_]+[\\\\d]+|[\\\\d]+)(\\\\.([\\\\d]+[\\\\d_]+[\\\\d]+|[\\\\d]+))?' +\n        '|' +\n        '\\\\.([\\\\d]+[\\\\d_]+[\\\\d]+|[\\\\d]+)' +\n      ')' +\n      '([eE][-+]?\\\\d+)?' + // octal, decimal, float\n    ')' +\n    '[lLfF]?';\n  var JAVA_NUMBER_MODE = {\n    className: 'number',\n    begin: JAVA_NUMBER_RE,\n    relevance: 0\n  };\n\n  return {\n    aliases: ['jsp'],\n    keywords: KEYWORDS,\n    illegal: /<\\/|#/,\n    contains: [\n      hljs.COMMENT(\n        '/\\\\*\\\\*',\n        '\\\\*/',\n        {\n          relevance : 0,\n          contains : [\n            {\n              // eat up @'s in emails to prevent them to be recognized as doctags\n              begin: /\\w+@/, relevance: 0\n            },\n            {\n              className : 'doctag',\n              begin : '@[A-Za-z]+'\n            }\n          ]\n        }\n      ),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: /[{;=]/, excludeEnd: true,\n        keywords: 'class interface',\n        illegal: /[:\"\\[\\]]/,\n        contains: [\n          {beginKeywords: 'extends implements'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        // Expression keywords prevent 'keyword Name(...)' from being\n        // recognized as a function definition\n        beginKeywords: 'new throw return else',\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + GENERIC_IDENT_RE + '\\\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(', returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          {\n            begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(', returnBegin: true,\n            relevance: 0,\n            contains: [hljs.UNDERSCORE_TITLE_MODE]\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.APOS_STRING_MODE,\n              hljs.QUOTE_STRING_MODE,\n              hljs.C_NUMBER_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      JAVA_NUMBER_MODE,\n      {\n        className: 'meta', begin: '@[A-Za-z]+'\n      }\n    ]\n  };\n};","module.exports = function (hljs) {\n  return {\n    aliases: ['feature'],\n    keywords: 'Feature Background Ability Business\\ Need Scenario Scenarios Scenario\\ Outline Scenario\\ Template Examples Given And Then But When',\n    contains: [\n      {\n        className: 'symbol',\n        begin: '\\\\*',\n        relevance: 0\n      },\n      {\n        className: 'meta',\n        begin: '@[^@\\\\s]+'\n      },\n      {\n        begin: '\\\\|', end: '\\\\|\\\\w*$',\n        contains: [\n          {\n            className: 'string',\n            begin: '[^|]+'\n          }\n        ]\n      },\n      {\n        className: 'variable',\n        begin: '<', end: '>'\n      },\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'string',\n        begin: '\"\"\"', end: '\"\"\"'\n      },\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var CURLY_SUBCOMMENT = hljs.COMMENT(\n    '{',\n    '}',\n    {\n      contains: ['self']\n    }\n  );\n  return {\n    subLanguage: 'xml', relevance: 0,\n    contains: [\n      hljs.COMMENT('^#', '$'),\n      hljs.COMMENT(\n        '\\\\^rem{',\n        '}',\n        {\n          relevance: 10,\n          contains: [\n            CURLY_SUBCOMMENT\n          ]\n        }\n      ),\n      {\n        className: 'meta',\n        begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',\n        relevance: 10\n      },\n      {\n        className: 'title',\n        begin: '@[\\\\w\\\\-]+\\\\[[\\\\w^;\\\\-]*\\\\](?:\\\\[[\\\\w^;\\\\-]*\\\\])?(?:.*)$'\n      },\n      {\n        className: 'variable',\n        begin: '\\\\$\\\\{?[\\\\w\\\\-\\\\.\\\\:]+\\\\}?'\n      },\n      {\n        className: 'keyword',\n        begin: '\\\\^[\\\\w\\\\-\\\\.\\\\:]+'\n      },\n      {\n        className: 'number',\n        begin: '\\\\^#[0-9a-fA-F]+'\n      },\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = 'if then else elseif for thru do while unless step in and or not';\n  var LITERALS = 'true false unknown inf minf ind und %e %i %pi %phi %gamma';\n  var BUILTIN_FUNCTIONS =\n        ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'\n      + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'\n      + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'\n      + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'\n      + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'\n      + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'\n      + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'\n      + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'\n      + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'\n      + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'\n      + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'\n      + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'\n      + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'\n      + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'\n      + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'\n      + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'\n      + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'\n      + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'\n      + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'\n      + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'\n      + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'\n      + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'\n      + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'\n      + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'\n      + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'\n      + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'\n      + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'\n      + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'\n      + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'\n      + ' collectterms columnop columnspace columnswap columnvector combination combine'\n      + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'\n      + ' complete_graph complex_number_p components compose_functions concan concat'\n      + ' conjugate conmetderiv connected_components connect_vertices cons constant'\n      + ' constantp constituent constvalue cont2part content continuous_freq contortion'\n      + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'\n      + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'\n      + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'\n      + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'\n      + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'\n      + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'\n      + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'\n      + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'\n      + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'\n      + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'\n      + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'\n      + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'\n      + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'\n      + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'\n      + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'\n      + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'\n      + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'\n      + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'\n      + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'\n      + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'\n      + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'\n      + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'\n      + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'\n      + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'\n      + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'\n      + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'\n      + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'\n      + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'\n      + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'\n      + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'\n      + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'\n      + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'\n      + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'\n      + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'\n      + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'\n      + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'\n      + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'\n      + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'\n      + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'\n      + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'\n      + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'\n      + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'\n      + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'\n      + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'\n      + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'\n      + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'\n      + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'\n      + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'\n      + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'\n      + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'\n      + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'\n      + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'\n      + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'\n      + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'\n      + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'\n      + ' induced_subgraph inferencep inference_result infix info_display init_atensor'\n      + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'\n      + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'\n      + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'\n      + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'\n      + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'\n      + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'\n      + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'\n      + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'\n      + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'\n      + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'\n      + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'\n      + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'\n      + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'\n      + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'\n      + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'\n      + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'\n      + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'\n      + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'\n      + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'\n      + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'\n      + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'\n      + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'\n      + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'\n      + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'\n      + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'\n      + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'\n      + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'\n      + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'\n      + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'\n      + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'\n      + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'\n      + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'\n      + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'\n      + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'\n      + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'\n      + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'\n      + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'\n      + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'\n      + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'\n      + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'\n      + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'\n      + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'\n      + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'\n      + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'\n      + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'\n      + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'\n      + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'\n      + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'\n      + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'\n      + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'\n      + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'\n      + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'\n      + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'\n      + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'\n      + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'\n      + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'\n      + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'\n      + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'\n      + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'\n      + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'\n      + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'\n      + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'\n      + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'\n      + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'\n      + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'\n      + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'\n      + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'\n      + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'\n      + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'\n      + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'\n      + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'\n      + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'\n      + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'\n      + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'\n      + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'\n      + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'\n      + ' powerseries powerset prefix prev_prime primep primes principal_components'\n      + ' print printf printfile print_graph printpois printprops prodrac product properties'\n      + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'\n      + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'\n      + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'\n      + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'\n      + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'\n      + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'\n      + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'\n      + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'\n      + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'\n      + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'\n      + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'\n      + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'\n      + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'\n      + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'\n      + ' random_logistic random_lognormal random_negative_binomial random_network'\n      + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'\n      + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'\n      + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'\n      + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'\n      + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'\n      + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'\n      + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'\n      + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'\n      + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'\n      + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'\n      + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'\n      + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'\n      + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'\n      + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'\n      + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'\n      + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'\n      + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'\n      + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'\n      + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'\n      + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'\n      + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'\n      + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'\n      + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'\n      + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'\n      + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'\n      + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'\n      + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'\n      + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'\n      + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'\n      + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'\n      + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'\n      + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'\n      + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'\n      + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'\n      + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'\n      + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'\n      + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'\n      + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'\n      + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'\n      + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'\n      + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'\n      + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'\n      + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'\n      + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'\n      + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'\n      + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'\n      + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'\n      + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'\n      + ' symbolp symmdifference symmetricp system take_channel take_inference tan'\n      + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'\n      + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'\n      + ' test_normality test_proportion test_proportions_difference test_rank_sum'\n      + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'\n      + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'\n      + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'\n      + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'\n      + ' translate translate_file transpose treefale tree_reduce treillis treinat'\n      + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'\n      + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'\n      + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'\n      + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'\n      + ' units unit_step unitvector unorder unsum untellrat untimer'\n      + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'\n      + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'\n      + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'\n      + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'\n      + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'\n      + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'\n      + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'\n      + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'\n      + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'\n      + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'\n      + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'\n      + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'\n      + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'\n      + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'\n      + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'\n      + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'\n      + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'\n      + ' azimuth background background_color backsubst berlefact bernstein_explicit'\n      + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'\n      + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'\n      + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'\n      + ' colorbox columns commutative complex cone context contexts contour contour_levels'\n      + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'\n      + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'\n      + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'\n      + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'\n      + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'\n      + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'\n      + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'\n      + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'\n      + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'\n      + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'\n      + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'\n      + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'\n      + ' factlim factorflag factorial_expand factors_only fb feature features'\n      + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'\n      + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'\n      + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'\n      + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'\n      + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'\n      + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'\n      + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'\n      + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'\n      + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'\n      + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'\n      + ' head_length head_type height hypergeometric_representation %iargs ibase'\n      + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'\n      + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'\n      + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'\n      + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'\n      + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'\n      + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'\n      + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'\n      + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'\n      + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'\n      + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'\n      + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'\n      + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'\n      + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'\n      + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'\n      + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'\n      + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'\n      + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'\n      + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'\n      + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'\n      + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'\n      + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'\n      + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'\n      + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'\n      + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'\n      + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'\n      + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'\n      + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'\n      + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'\n      + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'\n      + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'\n      + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'\n      + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'\n      + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'\n      + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'\n      + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'\n      + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'\n      + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'\n      + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'\n      + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'\n      + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'\n      + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'\n      + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'\n      + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'\n      + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'\n      + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'\n      + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'\n      + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'\n      + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'\n      + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'\n      + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'\n      + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'\n      + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'\n      + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'\n      + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'\n      + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'\n      + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'\n      + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'\n      + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'\n      + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'\n      + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'\n      + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'\n      + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';\n  var SYMBOLS = '_ __ %|0 %%|0';\n\n  return {\n    lexemes: '[A-Za-z_%][0-9A-Za-z_%]*',\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTIN_FUNCTIONS,\n      symbol: SYMBOLS,\n    },\n    contains: [\n      {\n        className: 'comment',\n        begin: '/\\\\*',\n        end: '\\\\*/',\n        contains: ['self']\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'number',\n        relevance: 0,\n        variants: [\n          {\n            // float number w/ exponent\n            // hmm, I wonder if we ought to include other exponent markers?\n            begin: '\\\\b(\\\\d+|\\\\d+\\\\.|\\\\.\\\\d+|\\\\d+\\\\.\\\\d+)[Ee][-+]?\\\\d+\\\\b',\n          },\n          {\n            // bigfloat number\n            begin: '\\\\b(\\\\d+|\\\\d+\\\\.|\\\\.\\\\d+|\\\\d+\\\\.\\\\d+)[Bb][-+]?\\\\d+\\\\b',\n            relevance: 10\n          },\n          {\n            // float number w/out exponent\n            // Doesn't seem to recognize floats which start with '.'\n            begin: '\\\\b(\\\\.\\\\d+|\\\\d+\\\\.\\\\d+)\\\\b',\n          },\n          {\n            // integer in base up to 36\n            // Doesn't seem to recognize integers which end with '.'\n            begin: '\\\\b(\\\\d+|0[0-9A-Za-z]+)\\\\.?\\\\b',\n          }\n        ]\n      }\n    ],\n    illegal: /@/\n  }\n};","module.exports = function(hljs) {\n  return {\n    lexemes: /[!#@\\w]+/,\n    keywords: {\n      keyword:\n        // express version except: ! & * < = > !! # @ @@\n        'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '+\n        'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '+\n        'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '+\n        'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '+\n        'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '+\n        'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '+\n        // full version\n        'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '+\n        'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '+\n        'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '+\n        'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '+\n        'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '+\n        'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '+\n        'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '+\n        'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '+\n        'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '+\n        'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious '+'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '+\n        'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',\n      built_in: //built in func\n        'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv ' +\n        'complete_check add getwinposx getqflist getwinposy screencol ' +\n        'clearmatches empty extend getcmdpos mzeval garbagecollect setreg ' +\n        'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable ' +\n        'shiftwidth max sinh isdirectory synID system inputrestore winline ' +\n        'atan visualmode inputlist tabpagewinnr round getregtype mapcheck ' +\n        'hasmapto histdel argidx findfile sha256 exists toupper getcmdline ' +\n        'taglist string getmatches bufnr strftime winwidth bufexists ' +\n        'strtrans tabpagebuflist setcmdpos remote_read printf setloclist ' +\n        'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval ' +\n        'resolve libcallnr foldclosedend reverse filter has_key bufname ' +\n        'str2float strlen setline getcharmod setbufvar index searchpos ' +\n        'shellescape undofile foldclosed setqflist buflisted strchars str2nr ' +\n        'virtcol floor remove undotree remote_expr winheight gettabwinvar ' +\n        'reltime cursor tabpagenr finddir localtime acos getloclist search ' +\n        'tanh matchend rename gettabvar strdisplaywidth type abs py3eval ' +\n        'setwinvar tolower wildmenumode log10 spellsuggest bufloaded ' +\n        'synconcealed nextnonblank server2client complete settabwinvar ' +\n        'executable input wincol setmatches getftype hlID inputsave ' +\n        'searchpair or screenrow line settabvar histadd deepcopy strpart ' +\n        'remote_peek and eval getftime submatch screenchar winsaveview ' +\n        'matchadd mkdir screenattr getfontname libcall reltimestr getfsize ' +\n        'winnr invert pow getbufline byte2line soundfold repeat fnameescape ' +\n        'tagfiles sin strwidth spellbadword trunc maparg log lispindent ' +\n        'hostname setpos globpath remote_foreground getchar synIDattr ' +\n        'fnamemodify cscope_connection stridx winbufnr indent min ' +\n        'complete_add nr2char searchpairpos inputdialog values matchlist ' +\n        'items hlexists strridx browsedir expand fmod pathshorten line2byte ' +\n        'argc count getwinvar glob foldtextresult getreg foreground cosh ' +\n        'matchdelete has char2nr simplify histget searchdecl iconv ' +\n        'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos ' +\n        'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar ' +\n        'islocked escape eventhandler remote_send serverlist winrestview ' +\n        'synstack pyeval prevnonblank readfile cindent filereadable changenr ' +\n        'exp'\n    },\n    illegal: /;/,\n    contains: [\n      hljs.NUMBER_MODE,\n      {\n        className: 'string',\n        begin: '\\'', end: '\\'',\n        illegal: '\\\\n'\n      },\n\n      /*\n      A double quote can start either a string or a line comment. Strings are\n      ended before the end of a line by another double quote and can contain\n      escaped double-quotes and post-escaped line breaks.\n\n      Also, any double quote at the beginning of a line is a comment but we\n      don't handle that properly at the moment: any double quote inside will\n      turn them into a string. Handling it properly will require a smarter\n      parser.\n      */\n      {\n        className: 'string',\n        begin: /\"(\\\\\"|\\n\\\\|[^\"\\n])*\"/\n      },\n      hljs.COMMENT('\"', '$'),\n\n      {\n        className: 'variable',\n        begin: /[bwtglsav]:[\\w\\d_]*/\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function function!', end: '$',\n        relevance: 0,\n        contains: [\n          hljs.TITLE_MODE,\n          {\n            className: 'params',\n            begin: '\\\\(', end: '\\\\)'\n          }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /<[\\w-]+>/\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var COMMENT = {\n    variants: [\n      hljs.COMMENT('--', '$'),\n      hljs.COMMENT(\n        '{-',\n        '-}',\n        {\n          contains: ['self']\n        }\n      )\n    ]\n  };\n\n  var PRAGMA = {\n    className: 'meta',\n    begin: '{-#', end: '#-}'\n  };\n\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: '^#', end: '$'\n  };\n\n  var CONSTRUCTOR = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (build-in, infix).\n    relevance: 0\n  };\n\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)',\n    illegal: '\"',\n    contains: [\n      PRAGMA,\n      PREPROCESSOR,\n      {className: 'type', begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'},\n      hljs.inherit(hljs.TITLE_MODE, {begin: '[_a-z][\\\\w\\']*'}),\n      COMMENT\n    ]\n  };\n\n  var RECORD = {\n    begin: '{', end: '}',\n    contains: LIST.contains\n  };\n\n  return {\n    aliases: ['hs'],\n    keywords:\n      'let in if then else case of where do module import hiding ' +\n      'qualified type data newtype deriving class instance as default ' +\n      'infix infixl infixr foreign export ccall stdcall cplusplus ' +\n      'jvm dotnet safe unsafe family forall mdo proc rec',\n    contains: [\n\n      // Top-level constructions.\n\n      {\n        beginKeywords: 'module', end: 'where',\n        keywords: 'module where',\n        contains: [LIST, COMMENT],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: '\\\\bimport\\\\b', end: '$',\n        keywords: 'import qualified as hiding',\n        contains: [LIST, COMMENT],\n        illegal: '\\\\W\\\\.|;'\n      },\n\n      {\n        className: 'class',\n        begin: '^(\\\\s*)?(class|instance)\\\\b', end: 'where',\n        keywords: 'class family instance where',\n        contains: [CONSTRUCTOR, LIST, COMMENT]\n      },\n      {\n        className: 'class',\n        begin: '\\\\b(data|(new)?type)\\\\b', end: '$',\n        keywords: 'data family type newtype deriving',\n        contains: [PRAGMA, CONSTRUCTOR, LIST, RECORD, COMMENT]\n      },\n      {\n        beginKeywords: 'default', end: '$',\n        contains: [CONSTRUCTOR, LIST, COMMENT]\n      },\n      {\n        beginKeywords: 'infix infixl infixr', end: '$',\n        contains: [hljs.C_NUMBER_MODE, COMMENT]\n      },\n      {\n        begin: '\\\\bforeign\\\\b', end: '$',\n        keywords: 'foreign import export ccall stdcall cplusplus jvm ' +\n                  'dotnet safe unsafe',\n        contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT]\n      },\n      {\n        className: 'meta',\n        begin: '#!\\\\/usr\\\\/bin\\\\/env\\ runhaskell', end: '$'\n      },\n\n      // \"Whitespaces\".\n\n      PRAGMA,\n      PREPROCESSOR,\n\n      // Literals and names.\n\n      // TODO: characters.\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      CONSTRUCTOR,\n      hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\\\w\\']*'}),\n\n      COMMENT,\n\n      {begin: '->|<-'} // No markup, relevance booster\n    ]\n  };\n};","module.exports = function(hljs) {\n\n    // Data step and PROC SQL statements\n    var SAS_KEYWORDS = ''+\n        'do if then else end until while '+\n        ''+\n        'abort array attrib by call cards cards4 catname continue '+\n        'datalines datalines4 delete delim delimiter display dm drop '+\n        'endsas error file filename footnote format goto in infile '+\n        'informat input keep label leave length libname link list '+\n        'lostcard merge missing modify options output out page put '+\n        'redirect remove rename replace retain return select set skip '+\n        'startsas stop title update waitsas where window x systask '+\n        ''+\n        'add and alter as cascade check create delete describe '+\n        'distinct drop foreign from group having index insert into in '+\n        'key like message modify msgtype not null on or order primary '+\n        'references reset restrict select set table unique update '+\n        'validate view where';\n\n    // Built-in SAS functions\n    var SAS_FUN = ''+\n        'abs|addr|airy|arcos|arsin|atan|attrc|attrn|band|'+\n        'betainv|blshift|bnot|bor|brshift|bxor|byte|cdf|ceil|'+\n        'cexist|cinv|close|cnonct|collate|compbl|compound|'+\n        'compress|cos|cosh|css|curobs|cv|daccdb|daccdbsl|'+\n        'daccsl|daccsyd|dacctab|dairy|date|datejul|datepart|'+\n        'datetime|day|dclose|depdb|depdbsl|depdbsl|depsl|'+\n        'depsl|depsyd|depsyd|deptab|deptab|dequote|dhms|dif|'+\n        'digamma|dim|dinfo|dnum|dopen|doptname|doptnum|dread|'+\n        'dropnote|dsname|erf|erfc|exist|exp|fappend|fclose|'+\n        'fcol|fdelete|fetch|fetchobs|fexist|fget|fileexist|'+\n        'filename|fileref|finfo|finv|fipname|fipnamel|'+\n        'fipstate|floor|fnonct|fnote|fopen|foptname|foptnum|'+\n        'fpoint|fpos|fput|fread|frewind|frlen|fsep|fuzz|'+\n        'fwrite|gaminv|gamma|getoption|getvarc|getvarn|hbound|'+\n        'hms|hosthelp|hour|ibessel|index|indexc|indexw|input|'+\n        'inputc|inputn|int|intck|intnx|intrr|irr|jbessel|'+\n        'juldate|kurtosis|lag|lbound|left|length|lgamma|'+\n        'libname|libref|log|log10|log2|logpdf|logpmf|logsdf|'+\n        'lowcase|max|mdy|mean|min|minute|mod|month|mopen|'+\n        'mort|n|netpv|nmiss|normal|note|npv|open|ordinal|'+\n        'pathname|pdf|peek|peekc|pmf|point|poisson|poke|'+\n        'probbeta|probbnml|probchi|probf|probgam|probhypr|'+\n        'probit|probnegb|probnorm|probt|put|putc|putn|qtr|'+\n        'quote|ranbin|rancau|ranexp|rangam|range|rank|rannor|'+\n        'ranpoi|rantbl|rantri|ranuni|repeat|resolve|reverse|'+\n        'rewind|right|round|saving|scan|sdf|second|sign|'+\n        'sin|sinh|skewness|soundex|spedis|sqrt|std|stderr|'+\n        'stfips|stname|stnamel|substr|sum|symget|sysget|'+\n        'sysmsg|sysprod|sysrc|system|tan|tanh|time|timepart|'+\n        'tinv|tnonct|today|translate|tranwrd|trigamma|'+\n        'trim|trimn|trunc|uniform|upcase|uss|var|varfmt|'+\n        'varinfmt|varlabel|varlen|varname|varnum|varray|'+\n        'varrayx|vartype|verify|vformat|vformatd|vformatdx|'+\n        'vformatn|vformatnx|vformatw|vformatwx|vformatx|'+\n        'vinarray|vinarrayx|vinformat|vinformatd|vinformatdx|'+\n        'vinformatn|vinformatnx|vinformatw|vinformatwx|'+\n        'vinformatx|vlabel|vlabelx|vlength|vlengthx|vname|'+\n        'vnamex|vtype|vtypex|weekday|year|yyq|zipfips|zipname|'+\n        'zipnamel|zipstate';\n\n    // Built-in macro functions\n    var SAS_MACRO_FUN = 'bquote|nrbquote|cmpres|qcmpres|compstor|'+\n        'datatyp|display|do|else|end|eval|global|goto|'+\n        'if|index|input|keydef|label|left|length|let|'+\n        'local|lowcase|macro|mend|nrbquote|nrquote|'+\n        'nrstr|put|qcmpres|qleft|qlowcase|qscan|'+\n        'qsubstr|qsysfunc|qtrim|quote|qupcase|scan|str|'+\n        'substr|superq|syscall|sysevalf|sysexec|sysfunc|'+\n        'sysget|syslput|sysprod|sysrc|sysrput|then|to|'+\n        'trim|unquote|until|upcase|verify|while|window';\n\n    return {\n        aliases: ['sas', 'SAS'],\n        case_insensitive: true, // SAS is case-insensitive\n        keywords: {\n            literal:\n                'null missing _all_ _automatic_ _character_ _infile_ '+\n                '_n_ _name_ _null_ _numeric_ _user_ _webout_',\n            meta:\n                SAS_KEYWORDS\n        },\n        contains: [\n            {\n                // Distinct highlight for proc <proc>, data, run, quit\n                className: 'keyword',\n                begin: /^\\s*(proc [\\w\\d_]+|data|run|quit)[\\s\\;]/\n            },\n            {\n                // Macro variables\n                className: 'variable',\n                begin: /\\&[a-zA-Z_\\&][a-zA-Z0-9_]*\\.?/\n            },\n            {\n                // Special emphasis for datalines|cards\n                className: 'emphasis',\n                begin: /^\\s*datalines|cards.*;/,\n                end: /^\\s*;\\s*$/\n            },\n            {   // Built-in macro variables take precedence\n                className: 'built_in',\n                begin: '%(' + SAS_MACRO_FUN + ')'\n            },\n            {\n                // User-defined macro functions highlighted after\n                className: 'name',\n                begin: /%[a-zA-Z_][a-zA-Z_0-9]*/\n            },\n            {\n                className: 'meta',\n                begin: '[^%](' + SAS_FUN + ')[\\(]'\n            },\n            {\n                className: 'string',\n                variants: [\n                    hljs.APOS_STRING_MODE,\n                    hljs.QUOTE_STRING_MODE\n                ]\n            },\n            hljs.COMMENT('\\\\*', ';'),\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n};","module.exports = function(hljs) {\n  var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  var BUILTINS = {\n    'builtin-name':\n      'case-lambda call/cc class define-class exit-handler field import ' +\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\n      'opt-lambda override protect provide public rename require ' +\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\n      'when with-syntax and begin call-with-current-continuation ' +\n      'call-with-input-file call-with-output-file case cond define ' +\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\n      'char? close-input-port close-output-port complex? cons cos ' +\n      'current-input-port current-output-port denominator display eof-object? ' +\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\n      'integer? interaction-environment lcm length list list->string ' +\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\n      'make-rectangular make-string make-vector max member memq memv min ' +\n      'modulo negative? newline not null-environment null? number->string ' +\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\n      'string->list string->number string->symbol string-append string-ci<=? ' +\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\n      'tan transcript-off transcript-on truncate values vector ' +\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\n      'with-input-from-file with-output-to-file write write-char zero?'\n  };\n\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$'\n  };\n\n  var LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },\n      { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },\n      { begin: '#b[0-1]+(/[0-1]+)?' },\n      { begin: '#o[0-7]+(/[0-7]+)?' },\n      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }\n    ]\n  };\n\n  var STRING = hljs.QUOTE_STRING_MODE;\n\n  var REGULAR_EXPRESSION = {\n    className: 'regexp',\n    begin: '#[pr]x\"',\n    end: '[^\\\\\\\\]\"'\n  };\n\n  var COMMENT_MODES = [\n    hljs.COMMENT(\n      ';',\n      '$',\n      {\n        relevance: 0\n      }\n    ),\n    hljs.COMMENT('#\\\\|', '\\\\|#')\n  ];\n\n  var IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n\n  var QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n\n  var QUOTED_LIST = {\n    variants: [\n      { begin: /'/ },\n      { begin: '`' }\n    ],\n    contains: [\n      {\n        begin: '\\\\(', end: '\\\\)',\n        contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n      }\n    ]\n  };\n\n  var NAME = {\n    className: 'name',\n    begin: SCHEME_IDENT_RE,\n    lexemes: SCHEME_IDENT_RE,\n    keywords: BUILTINS\n  };\n\n  var LAMBDA = {\n    begin: /lambda/, endsWithParent: true, returnBegin: true,\n    contains: [\n      NAME,\n      {\n        begin: /\\(/, end: /\\)/, endsParent: true,\n        contains: [IDENT],\n      }\n    ]\n  };\n\n  var LIST = {\n    variants: [\n      { begin: '\\\\(', end: '\\\\)' },\n      { begin: '\\\\[', end: '\\\\]' }\n    ],\n    contains: [LAMBDA, NAME, BODY]\n  };\n\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n\n  return {\n    illegal: /\\S/,\n    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: false,\n    lexemes: '[a-zA-Z][a-zA-Z0-9_-]*',\n    keywords: {\n      keyword: 'base-uri child-src connect-src default-src font-src form-action' +\n        ' frame-ancestors frame-src img-src media-src object-src plugin-types' +\n        ' report-uri sandbox script-src style-src', \n    },\n    contains: [\n    {\n      className: 'string',\n      begin: \"'\", end: \"'\"\n    },\n    {\n      className: 'attribute',\n      begin: '^Content', end: ':', excludeEnd: true,\n    },\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  var ATOM = {\n\n    begin: /[a-z][A-Za-z0-9_]*/,\n    relevance: 0\n  };\n\n  var VAR = {\n\n    className: 'symbol',\n    variants: [\n      {begin: /[A-Z][a-zA-Z0-9_]*/},\n      {begin: /_[A-Za-z0-9_]*/},\n    ],\n    relevance: 0\n  };\n\n  var PARENTED = {\n\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0\n  };\n\n  var LIST = {\n\n    begin: /\\[/,\n    end: /\\]/\n  };\n\n  var LINE_COMMENT = {\n\n    className: 'comment',\n    begin: /%/, end: /$/,\n    contains: [hljs.PHRASAL_WORDS_MODE]\n  };\n\n  var BACKTICK_STRING = {\n\n    className: 'string',\n    begin: /`/, end: /`/,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n\n  var CHAR_CODE = {\n\n    className: 'string', // 0'a etc.\n    begin: /0\\'(\\\\\\'|.)/\n  };\n\n  var SPACE_CODE = {\n\n    className: 'string',\n    begin: /0\\'\\\\s/ // 0'\\s\n  };\n\n  var PRED_OP = { // relevance booster\n    begin: /:-/\n  };\n\n  var inner = [\n\n    ATOM,\n    VAR,\n    PARENTED,\n    PRED_OP,\n    LIST,\n    LINE_COMMENT,\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.QUOTE_STRING_MODE,\n    hljs.APOS_STRING_MODE,\n    BACKTICK_STRING,\n    CHAR_CODE,\n    SPACE_CODE,\n    hljs.C_NUMBER_MODE\n  ];\n\n  PARENTED.contains = inner;\n  LIST.contains = inner;\n\n  return {\n    contains: inner.concat([\n      {begin: /\\.$/} // relevance booster\n    ])\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['docker'],\n    case_insensitive: true,\n    keywords: 'from maintainer expose env arg user onbuild stopsignal',\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE,\n      {\n        beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',\n        starts: {\n          end: /[^\\\\]$/,\n          subLanguage: 'bash'\n        }\n      }\n    ],\n    illegal: '</'\n  }\n};","module.exports = function(hljs) {\n    return {\n        disableAutodetect: true\n    };\n};","module.exports = function(hljs) {\n  var NIX_KEYWORDS = {\n    keyword:\n      'rec with let in inherit assert if else then',\n    literal:\n      'true false or and null',\n    built_in:\n      'import abort baseNameOf dirOf isNull builtins map removeAttrs throw ' +\n      'toString derivation'\n  };\n  var ANTIQUOTE = {\n    className: 'subst',\n    begin: /\\$\\{/,\n    end: /}/,\n    keywords: NIX_KEYWORDS\n  };\n  var ATTRS = {\n    begin: /[a-zA-Z0-9-_]+(\\s*=)/, returnBegin: true,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr',\n        begin: /\\S+/\n      }\n    ]\n  };\n  var STRING = {\n    className: 'string',\n    contains: [ANTIQUOTE],\n    variants: [\n      {begin: \"''\", end: \"''\"},\n      {begin: '\"', end: '\"'}\n    ]\n  };\n  var EXPRESSIONS = [\n    hljs.NUMBER_MODE,\n    hljs.HASH_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING,\n    ATTRS\n  ];\n  ANTIQUOTE.contains = EXPRESSIONS;\n  return {\n    aliases: [\"nixos\"],\n    keywords: NIX_KEYWORDS,\n    contains: EXPRESSIONS\n  };\n};","module.exports = function(hljs) {\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', end: '\\\\)'\n  };\n\n  var F_KEYWORDS = {\n    literal: '.False. .True.',\n    keyword: 'kind do while private call intrinsic where elsewhere ' +\n      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +\n      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +\n      'goto save else use module select case ' +\n      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +\n      'continue format pause cycle exit ' +\n      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +\n      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +\n      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +\n      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +\n      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +\n      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +\n      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +\n      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +\n      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +\n      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +\n      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +\n      'integer real character complex logical dimension allocatable|10 parameter ' +\n      'external implicit|10 none double precision assign intent optional pointer ' +\n      'target in out common equivalence data',\n    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +\n      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +\n      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +\n      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +\n      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +\n      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +\n      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +\n      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +\n      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +\n      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +\n      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +\n      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +\n      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +\n      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +\n      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +\n      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +\n      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +\n      'num_images parity popcnt poppar shifta shiftl shiftr this_image'\n  };\n  return {\n    case_insensitive: true,\n    aliases: ['f90', 'f95'],\n    keywords: F_KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: [\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),\n      {\n        className: 'function',\n        beginKeywords: 'subroutine function program',\n        illegal: '[${=\\\\n]',\n        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]\n      },\n      hljs.COMMENT('!', '$', {relevance: 0}),\n      {\n        className: 'number',\n        begin: '(?=\\\\b|\\\\+|\\\\-|\\\\.)(?=\\\\.\\\\d|\\\\d)(?:\\\\d+)?(?:\\\\.?\\\\d*)(?:[de][+-]?\\\\d+)?\\\\b\\\\.?',\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['patch'],\n    contains: [\n      {\n        className: 'meta',\n        relevance: 10,\n        variants: [\n          {begin: /^@@ +\\-\\d+,\\d+ +\\+\\d+,\\d+ +@@$/},\n          {begin: /^\\*\\*\\* +\\d+,\\d+ +\\*\\*\\*\\*$/},\n          {begin: /^\\-\\-\\- +\\d+,\\d+ +\\-\\-\\-\\-$/}\n        ]\n      },\n      {\n        className: 'comment',\n        variants: [\n          {begin: /Index: /, end: /$/},\n          {begin: /={3,}/, end: /$/},\n          {begin: /^\\-{3}/, end: /$/},\n          {begin: /^\\*{3} /, end: /$/},\n          {begin: /^\\+{3}/, end: /$/},\n          {begin: /\\*{5}/, end: /\\*{5}$/}\n        ]\n      },\n      {\n        className: 'addition',\n        begin: '^\\\\+', end: '$'\n      },\n      {\n        className: 'deletion',\n        begin: '^\\\\-', end: '$'\n      },\n      {\n        className: 'addition',\n        begin: '^\\\\!', end: '$'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['capnp'],\n    keywords: {\n      keyword:\n        'struct enum interface union group import using const annotation extends in of on as with from fixed',\n      built_in:\n        'Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 ' +\n        'Text Data AnyPointer AnyStruct Capability List',\n      literal:\n        'true false'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE,\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'meta',\n        begin: /@0x[\\w\\d]{16};/,\n        illegal: /\\n/\n      },\n      {\n        className: 'symbol',\n        begin: /@\\d+\\b/\n      },\n      {\n        className: 'class',\n        beginKeywords: 'struct enum', end: /\\{/,\n        illegal: /\\n/,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title\n          })\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'interface', end: /\\{/,\n        illegal: /\\n/,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title\n          })\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var KEYWORDS = {\n    keyword:\n      'in of if for while finally var new function do return void else break catch ' +\n      'instanceof with throw case default try this switch continue typeof delete ' +\n      'let yield const export super debugger as async await static ' +\n      // ECMAScript 6 modules import\n      'import from as'\n    ,\n    literal:\n      'true false null undefined NaN Infinity',\n    built_in:\n      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +\n      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +\n      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +\n      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +\n      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +\n      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +\n      'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +\n      'Promise'\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0[bB][01]+)' },\n      { begin: '\\\\b(0[oO][0-7]+)' },\n      { begin: hljs.C_NUMBER_RE }\n    ],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{', end: '\\\\}',\n    keywords: KEYWORDS,\n    contains: []  // defined later\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`', end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  SUBST.contains = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    TEMPLATE_STRING,\n    NUMBER,\n    hljs.REGEXP_MODE\n  ]\n  var PARAMS_CONTAINS = SUBST.contains.concat([\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.C_LINE_COMMENT_MODE\n  ]);\n\n  return {\n    aliases: ['js', 'jsx'],\n    keywords: KEYWORDS,\n    contains: [\n      {\n        className: 'meta',\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n      },\n      {\n        className: 'meta',\n        begin: /^#!/, end: /$/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      TEMPLATE_STRING,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBER,\n      { // object attr container\n        begin: /[{,]\\s*/, relevance: 0,\n        contains: [\n          {\n            begin: IDENT_RE + '\\\\s*:', returnBegin: true,\n            relevance: 0,\n            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]\n          }\n        ]\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            begin: '(\\\\(.*?\\\\)|' + IDENT_RE + ')\\\\s*=>', returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: IDENT_RE\n                  },\n                  {\n                    begin: /\\(\\s*\\)/,\n                  },\n                  {\n                    begin: /\\(/, end: /\\)/,\n                    excludeBegin: true, excludeEnd: true,\n                    keywords: KEYWORDS,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // E4X / JSX\n            begin: /</, end: /(\\/\\w+|\\w+\\/)>/,\n            subLanguage: 'xml',\n            contains: [\n              {begin: /<\\w+\\s*\\/>/, skip: true},\n              {\n                begin: /<\\w+/, end: /(\\/\\w+|\\w+\\/)>/, skip: true,\n                contains: [\n                  {begin: /<\\w+\\s*\\/>/, skip: true},\n                  'self'\n                ]\n              }\n            ]\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /\\{/, excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            contains: PARAMS_CONTAINS\n          }\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      },\n      hljs.METHOD_GUARD,\n      { // ES6 class\n        className: 'class',\n        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,\n        illegal: /[:\"\\[\\]]/,\n        contains: [\n          {beginKeywords: 'extends'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'constructor get set', end: /\\{/, excludeEnd: true\n      }\n    ],\n    illegal: /#(?!!)/\n  };\n};","module.exports = // TODO support filter tags like :javascript, support inline HTML\nfunction(hljs) {\n  return {\n    case_insensitive: true,\n    contains: [\n      {\n        className: 'meta',\n        begin: '^!!!( (5|1\\\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\\\b.*))?$',\n        relevance: 10\n      },\n      // FIXME these comments should be allowed to span indented lines\n      hljs.COMMENT(\n        '^\\\\s*(!=#|=#|-#|/).*$',\n        false,\n        {\n          relevance: 0\n        }\n      ),\n      {\n        begin: '^\\\\s*(-|=|!=)(?!#)',\n        starts: {\n          end: '\\\\n',\n          subLanguage: 'ruby'\n        }\n      },\n      {\n        className: 'tag',\n        begin: '^\\\\s*%',\n        contains: [\n          {\n            className: 'selector-tag',\n            begin: '\\\\w+'\n          },\n          {\n            className: 'selector-id',\n            begin: '#[\\\\w-]+'\n          },\n          {\n            className: 'selector-class',\n            begin: '\\\\.[\\\\w-]+'\n          },\n          {\n            begin: '{\\\\s*',\n            end: '\\\\s*}',\n            contains: [\n              {\n                begin: ':\\\\w+\\\\s*=>',\n                end: ',\\\\s+',\n                returnBegin: true,\n                endsWithParent: true,\n                contains: [\n                  {\n                    className: 'attr',\n                    begin: ':\\\\w+'\n                  },\n                  hljs.APOS_STRING_MODE,\n                  hljs.QUOTE_STRING_MODE,\n                  {\n                    begin: '\\\\w+',\n                    relevance: 0\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            begin: '\\\\(\\\\s*',\n            end: '\\\\s*\\\\)',\n            excludeEnd: true,\n            contains: [\n              {\n                begin: '\\\\w+\\\\s*=',\n                end: '\\\\s+',\n                returnBegin: true,\n                endsWithParent: true,\n                contains: [\n                  {\n                    className: 'attr',\n                    begin: '\\\\w+',\n                    relevance: 0\n                  },\n                  hljs.APOS_STRING_MODE,\n                  hljs.QUOTE_STRING_MODE,\n                  {\n                    begin: '\\\\w+',\n                    relevance: 0\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      {\n        begin: '^\\\\s*[=~]\\\\s*'\n      },\n      {\n        begin: '#{',\n        starts: {\n          end: '}',\n          subLanguage: 'ruby'\n        }\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  var PUPPET_KEYWORDS = {\n    keyword:\n    /* language keywords */\n      'and case default else elsif false if in import enherits node or true undef unless main settings $string ',\n    literal:\n    /* metaparameters */\n      'alias audit before loglevel noop require subscribe tag ' +\n    /* normal attributes */\n      'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check ' +\n      'en_address ip_address realname command environment hour monute month monthday special target weekday '+\n      'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore ' +\n      'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source ' +\n      'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '+\n      'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel ' +\n      'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options ' +\n      'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use ' +\n      'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform ' +\n      'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running ' +\n      'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age ' +\n      'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled ' +\n      'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist ' +\n      'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey ' +\n      'sslverify mounted',\n    built_in:\n    /* core facts */\n      'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers ' +\n      'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '+\n      'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion ' +\n      'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease ' +\n      'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major ' +\n      'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '+\n      'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '+\n      'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '+\n      'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '+\n      'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'\n  };\n\n  var COMMENT = hljs.COMMENT('#', '$');\n\n  var IDENT_RE = '([A-Za-z_]|::)(\\\\w|::)*';\n\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE});\n\n  var VARIABLE = {className: 'variable', begin: '\\\\$' + IDENT_RE};\n\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, VARIABLE],\n    variants: [\n      {begin: /'/, end: /'/},\n      {begin: /\"/, end: /\"/}\n    ]\n  };\n\n  return {\n    aliases: ['pp'],\n    contains: [\n      COMMENT,\n      VARIABLE,\n      STRING,\n      {\n        beginKeywords: 'class', end: '\\\\{|;',\n        illegal: /=/,\n        contains: [TITLE, COMMENT]\n      },\n      {\n        beginKeywords: 'define', end: /\\{/,\n        contains: [\n          {\n            className: 'section', begin: hljs.IDENT_RE, endsParent: true\n          }\n        ]\n      },\n      {\n        begin: hljs.IDENT_RE + '\\\\s+\\\\{', returnBegin: true,\n        end: /\\S/,\n        contains: [\n          {\n            className: 'keyword',\n            begin: hljs.IDENT_RE\n          },\n          {\n            begin: /\\{/, end: /\\}/,\n            keywords: PUPPET_KEYWORDS,\n            relevance: 0,\n            contains: [\n              STRING,\n              COMMENT,\n              {\n                begin:'[a-zA-Z_]+\\\\s*=>',\n                returnBegin: true, end: '=>',\n                contains: [\n                  {\n                    className: 'attr',\n                    begin: hljs.IDENT_RE,\n                  }\n                ]\n              },\n              {\n                className: 'number',\n                begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n                relevance: 0\n              },\n              VARIABLE\n            ]\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n  var COMMENT = {\n    variants: [\n      hljs.COMMENT('--', '$'),\n      hljs.COMMENT(\n        '{-',\n        '-}',\n        {\n          contains: ['self']\n        }\n      )\n    ]\n  };\n\n  var CONSTRUCTOR = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (built-in, infix).\n    relevance: 0\n  };\n\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)',\n    illegal: '\"',\n    contains: [\n      {className: 'type', begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'},\n      COMMENT\n    ]\n  };\n\n  var RECORD = {\n    begin: '{', end: '}',\n    contains: LIST.contains\n  };\n\n  var CHARACTER = {\n    className: 'string',\n    begin: '\\'\\\\\\\\?.', end: '\\'',\n    illegal: '.'\n  };\n\n  return {\n    keywords:\n      'let in if then else case of where module import exposing ' +\n      'type alias as infix infixl infixr port effect command subscription',\n    contains: [\n\n      // Top-level constructions.\n\n      {\n        beginKeywords: 'port effect module', end: 'exposing',\n        keywords: 'port effect module where command subscription exposing',\n        contains: [LIST, COMMENT],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: 'import', end: '$',\n        keywords: 'import as exposing',\n        contains: [LIST, COMMENT],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: 'type', end: '$',\n        keywords: 'type alias',\n        contains: [CONSTRUCTOR, LIST, RECORD, COMMENT]\n      },\n      {\n        beginKeywords: 'infix infixl infixr', end: '$',\n        contains: [hljs.C_NUMBER_MODE, COMMENT]\n      },\n      {\n        begin: 'port', end: '$',\n        keywords: 'port',\n        contains: [COMMENT]\n      },\n\n      // Literals and names.\n\n      CHARACTER,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      CONSTRUCTOR,\n      hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\\\w\\']*'}),\n      COMMENT,\n\n      {begin: '->|<-'} // No markup, relevance booster\n    ],\n    illegal: /;/\n  };\n};","module.exports = function(hljs) {\n  var BACKTICK_ESCAPE = {\n    begin: '`[\\\\s\\\\S]',\n    relevance: 0\n  };\n  var VAR = {\n    className: 'variable',\n    variants: [\n      {begin: /\\$[\\w\\d][\\w\\d_:]*/}\n    ]\n  };\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\$(null|true|false)\\b/\n  };\n  var QUOTE_STRING = {\n    className: 'string',\n    variants: [\n      { begin: /\"/, end: /\"/ },\n      { begin: /@\"/, end: /^\"@/ }\n    ],\n    contains: [\n      BACKTICK_ESCAPE,\n      VAR,\n      {\n        className: 'variable',\n        begin: /\\$[A-z]/, end: /[^A-z]/\n      }\n    ]\n  };\n  var APOS_STRING = {\n    className: 'string',\n    variants: [\n      { begin: /'/, end: /'/ },\n      { begin: /@'/, end: /^'@/ }\n    ]\n  };\n\n  var PS_HELPTAGS = {\n    className: 'doctag',\n    variants: [\n      /* no paramater help tags */ \n      { begin: /\\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },\n      /* one parameter help tags */\n      { begin: /\\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\\s+\\S+/ }\n    ]\n  };\n  var PS_COMMENT = hljs.inherit(\n    hljs.COMMENT(null, null),\n    {\n      variants: [\n        /* single-line comment */\n        { begin: /#/, end: /$/ },\n        /* multi-line comment */\n        { begin: /<#/, end: /#>/ }\n      ],\n      contains: [PS_HELPTAGS]\n    }\n  );\n\n  return {\n    aliases: ['ps'],\n    lexemes: /-?[A-z\\.\\-]+/,\n    case_insensitive: true,\n    keywords: {\n      keyword: 'if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch',\n      built_in: 'Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct',\n      nomarkup: '-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace'\n    },\n    contains: [\n      BACKTICK_ESCAPE,\n      hljs.NUMBER_MODE,\n      QUOTE_STRING,\n      APOS_STRING,\n      LITERAL,\n      VAR,\n      PS_COMMENT\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['clean','icl','dcl'],\n    keywords: {\n      keyword:\n        'if let in with where case of class instance otherwise ' +\n        'implementation definition system module from import qualified as ' +\n        'special code inline foreign export ccall stdcall generic derive ' +\n        'infix infixl infixr',\n      built_in:\n        'Int Real Char Bool',\n      literal:\n        'True False'\n    },\n    contains: [\n\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n\n      {begin: '->|<-[|:]?|#!?|>>=|\\\\{\\\\||\\\\|\\\\}|:==|=:|<>'} // relevance booster\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  // whitespaces: space, tab, formfeed\n  var WS0 = '[ \\\\t\\\\f]*';\n  var WS1 = '[ \\\\t\\\\f]+';\n  // delimiter\n  var DELIM = '(' + WS0+'[:=]'+WS0+ '|' + WS1 + ')';\n  var KEY_ALPHANUM = '([^\\\\\\\\\\\\W:= \\\\t\\\\f\\\\n]|\\\\\\\\.)+';\n  var KEY_OTHER = '([^\\\\\\\\:= \\\\t\\\\f\\\\n]|\\\\\\\\.)+';\n\n  var DELIM_AND_VALUE = {\n          // skip DELIM\n          end: DELIM,\n          relevance: 0,\n          starts: {\n            // value: everything until end of line (again, taking into account backslashes)\n            className: 'string',\n            end: /$/,\n            relevance: 0,\n            contains: [\n              { begin: '\\\\\\\\\\\\n' }\n            ]\n          }\n        };\n\n  return {\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      hljs.COMMENT('^\\\\s*[!#]', '$'),\n      // key: everything until whitespace or = or : (taking into account backslashes)\n      // case of a \"normal\" key\n      {\n        begin: KEY_ALPHANUM + DELIM,\n        returnBegin: true,\n        contains: [\n          {\n            className: 'attr',\n            begin: KEY_ALPHANUM,\n            endsParent: true,\n            relevance: 0\n          }\n        ],\n        starts: DELIM_AND_VALUE\n      },\n      // case of key containing non-alphanumeric chars => relevance = 0\n      {\n        begin: KEY_OTHER + DELIM,\n        returnBegin: true,\n        relevance: 0,\n        contains: [\n          {\n            className: 'meta',\n            begin: KEY_OTHER,\n            endsParent: true,\n            relevance: 0\n          }\n        ],\n        starts: DELIM_AND_VALUE\n      },\n      // case of an empty key\n      {\n        className: 'attr',\n        relevance: 0,\n        begin: KEY_OTHER + WS0 + '$'\n      }\n    ]\n  };\n};","module.exports = function(hljs){\n  var LITERAL = {\n    className: 'literal',\n    begin: '[\\\\+\\\\-]',\n    relevance: 0\n  };\n  return {\n    aliases: ['bf'],\n    contains: [\n      hljs.COMMENT(\n        '[^\\\\[\\\\]\\\\.,\\\\+\\\\-<> \\r\\n]',\n        '[\\\\[\\\\]\\\\.,\\\\+\\\\-<> \\r\\n]',\n        {\n          returnEnd: true,\n          relevance: 0\n        }\n      ),\n      {\n        className: 'title',\n        begin: '[\\\\[\\\\]]',\n        relevance: 0\n      },\n      {\n        className: 'string',\n        begin: '[\\\\.,]',\n        relevance: 0\n      },\n      {\n        // this mode works as the only relevance counter\n        begin: /\\+\\+|\\-\\-/, returnBegin: true,\n        contains: [LITERAL]\n      },\n      LITERAL\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['vbs'],\n    case_insensitive: true,\n    keywords: {\n      keyword:\n        'call class const dim do loop erase execute executeglobal exit for each next function ' +\n        'if then else on error option explicit new private property let get public randomize ' +\n        'redim rem select case set stop sub while wend with end to elseif is or xor and not ' +\n        'class_initialize class_terminate default preserve in me byval byref step resume goto',\n      built_in:\n        'lcase month vartype instrrev ubound setlocale getobject rgb getref string ' +\n        'weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency ' +\n        'conversions csng timevalue second year space abs clng timeserial fixs len asc ' +\n        'isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate ' +\n        'instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex ' +\n        'chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim ' +\n        'strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion ' +\n        'scriptengine split scriptengineminorversion cint sin datepart ltrim sqr ' +\n        'scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw ' +\n        'chrw regexp server response request cstr err',\n      literal:\n        'true false null nothing empty'\n    },\n    illegal: '//',\n    contains: [\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '\"\"'}]}),\n      hljs.COMMENT(\n        /'/,\n        /$/,\n        {\n          relevance: 0\n        }\n      ),\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var LITERALS = {literal: 'true false null'};\n  var TYPES = [\n    hljs.QUOTE_STRING_MODE,\n    hljs.C_NUMBER_MODE\n  ];\n  var VALUE_CONTAINER = {\n    end: ',', endsWithParent: true, excludeEnd: true,\n    contains: TYPES,\n    keywords: LITERALS\n  };\n  var OBJECT = {\n    begin: '{', end: '}',\n    contains: [\n      {\n        className: 'attr',\n        begin: /\"/, end: /\"/,\n        contains: [hljs.BACKSLASH_ESCAPE],\n        illegal: '\\\\n',\n      },\n      hljs.inherit(VALUE_CONTAINER, {begin: /:/})\n    ],\n    illegal: '\\\\S'\n  };\n  var ARRAY = {\n    begin: '\\\\[', end: '\\\\]',\n    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents\n    illegal: '\\\\S'\n  };\n  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);\n  return {\n    contains: TYPES,\n    keywords: LITERALS,\n    illegal: '\\\\S'\n  };\n};","module.exports = function(hljs) {\n  var Q_KEYWORDS = {\n  keyword:\n    'do while select delete by update from',\n  literal:\n    '0b 1b',\n  built_in:\n    'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',\n  type:\n    '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'\n  };\n  return {\n  aliases:['k', 'kdb'],\n  keywords: Q_KEYWORDS,\n  lexemes: /(`?)[A-Za-z0-9_]+\\b/,\n  contains: [\n  hljs.C_LINE_COMMENT_MODE,\n    hljs.QUOTE_STRING_MODE,\n    hljs.C_NUMBER_MODE\n     ]\n  };\n};","module.exports = function(hljs) {\n  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';\n  var VARIABLE = {\n    className: 'variable',\n    begin: '(\\\\$' + IDENT_RE + ')\\\\b'\n  };\n  var HEXCOLOR = {\n    className: 'number', begin: '#[0-9A-Fa-f]+'\n  };\n  var DEF_INTERNALS = {\n    className: 'attribute',\n    begin: '[A-Z\\\\_\\\\.\\\\-]+', end: ':',\n    excludeEnd: true,\n    illegal: '[^\\\\s]',\n    starts: {\n      endsWithParent: true, excludeEnd: true,\n      contains: [\n        HEXCOLOR,\n        hljs.CSS_NUMBER_MODE,\n        hljs.QUOTE_STRING_MODE,\n        hljs.APOS_STRING_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        {\n          className: 'meta', begin: '!important'\n        }\n      ]\n    }\n  };\n  return {\n    case_insensitive: true,\n    illegal: '[=/|\\']',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'selector-id', begin: '\\\\#[A-Za-z0-9_-]+',\n        relevance: 0\n      },\n      {\n        className: 'selector-class', begin: '\\\\.[A-Za-z0-9_-]+',\n        relevance: 0\n      },\n      {\n        className: 'selector-attr', begin: '\\\\[', end: '\\\\]',\n        illegal: '$'\n      },\n      {\n        className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\\\s]'\n        begin: '\\\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\\\b',\n        relevance: 0\n      },\n      {\n        begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'\n      },\n      {\n        begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'\n      },\n      VARIABLE,\n      {\n        className: 'attribute',\n        begin: '\\\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\\\b',\n        illegal: '[^\\\\s]'\n      },\n      {\n        begin: '\\\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\\\b'\n      },\n      {\n        begin: ':', end: ';',\n        contains: [\n          VARIABLE,\n          HEXCOLOR,\n          hljs.CSS_NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          {\n            className: 'meta', begin: '!important'\n          }\n        ]\n      },\n      {\n        begin: '@', end: '[{;]',\n        keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',\n        contains: [\n          VARIABLE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HEXCOLOR,\n          hljs.CSS_NUMBER_MODE,\n          {\n            begin: '\\\\s[A-Za-z0-9_.-]+',\n            relevance: 0\n          }\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n      keyword:\n        'in of on if for while finally var new function do return void else break catch ' +\n        'instanceof with throw case default try this switch continue typeof delete ' +\n        'let yield const export super debugger as async await import',\n      literal:\n        'true false null undefined NaN Infinity',\n      built_in:\n        'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +\n        'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +\n        'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +\n        'TypeError URIError Number Math Date String RegExp Array Float32Array ' +\n        'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +\n        'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +\n        'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +\n        'Behavior bool color coordinate date double enumeration font geocircle georectangle ' +\n        'geoshape int list matrix4x4 parent point quaternion real rect ' +\n        'size string url variant vector2d vector3d vector4d' +\n        'Promise'\n    };\n\n  var QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\\\._]*';\n\n  // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.\n  // Use property class.\n  var PROPERTY = {\n      className: 'keyword',\n      begin: '\\\\bproperty\\\\b',\n      starts: {\n        className: 'string',\n        end: '(:|=|;|,|//|/\\\\*|$)',\n        returnEnd: true\n      }\n  };\n\n  // Isolate signal statements. Ends at a ) a comment or end of line.\n  // Use property class.\n  var SIGNAL = {\n      className: 'keyword',\n      begin: '\\\\bsignal\\\\b',\n      starts: {\n        className: 'string',\n        end: '(\\\\(|:|=|;|,|//|/\\\\*|$)',\n        returnEnd: true\n      }\n  };\n\n  // id: is special in QML. When we see id: we want to mark the id: as attribute and\n  // emphasize the token following.\n  var ID_ID = {\n      className: 'attribute',\n      begin: '\\\\bid\\\\s*:',\n      starts: {\n        className: 'string',\n        end: QML_IDENT_RE,\n        returnEnd: false\n      }\n  };\n\n  // Find QML object attribute. An attribute is a QML identifier followed by :.\n  // Unfortunately it's hard to know where it ends, as it may contain scalars,\n  // objects, object definitions, or javascript. The true end is either when the parent\n  // ends or the next attribute is detected.\n  var QML_ATTRIBUTE = {\n    begin: QML_IDENT_RE + '\\\\s*:',\n    returnBegin: true,\n    contains: [\n      {\n        className: 'attribute',\n        begin: QML_IDENT_RE,\n        end: '\\\\s*:',\n        excludeEnd: true,\n        relevance: 0\n      }\n    ],\n    relevance: 0\n  };\n\n  // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.\n  // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.\n  var QML_OBJECT = {\n    begin: QML_IDENT_RE + '\\\\s*{', end: '{',\n    returnBegin: true,\n    relevance: 0,\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {begin: QML_IDENT_RE})\n    ]\n  };\n\n  return {\n    aliases: ['qt'],\n    case_insensitive: false,\n    keywords: KEYWORDS,\n    contains: [\n      {\n        className: 'meta',\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      { // template string\n        className: 'string',\n        begin: '`', end: '`',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {\n            className: 'subst',\n            begin: '\\\\$\\\\{', end: '\\\\}'\n          }\n        ]\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b(0[bB][01]+)' },\n          { begin: '\\\\b(0[oO][0-7]+)' },\n          { begin: hljs.C_NUMBER_RE }\n        ],\n        relevance: 0\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          { // E4X / JSX\n            begin: /</, end: />\\s*[);\\]]/,\n            relevance: 0,\n            subLanguage: 'xml'\n          }\n        ],\n        relevance: 0\n      },\n      SIGNAL,\n      PROPERTY,\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /\\{/, excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          }\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        begin: '\\\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots\n      },\n      ID_ID,\n      QML_ATTRIBUTE,\n      QML_OBJECT\n    ],\n    illegal: /#/\n  };\n};","module.exports = function(hljs) {\n  return {\n    subLanguage: 'xml',\n    contains: [\n      {\n        className: 'meta',\n        begin: '^__(END|DATA)__$'\n      },\n    // mojolicious line\n      {\n        begin: \"^\\\\s*%{1,2}={0,2}\", end: '$',\n        subLanguage: 'perl'\n      },\n    // mojolicious block\n      {\n        begin: \"<%{1,2}={0,2}\",\n        end: \"={0,1}%>\",\n        subLanguage: 'perl',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +\n    'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +\n    'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' +\n    'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +\n    'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' +\n    'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +\n    'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +\n    'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +\n    'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +\n    'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +\n    'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +\n    'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +\n    'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +\n    'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +\n    'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +\n    'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +\n    'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' +\n    'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +\n    'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';\n  var SUBST = {\n    className: 'subst',\n    begin: '[$@]\\\\{', end: '\\\\}',\n    keywords: PERL_KEYWORDS\n  };\n  var METHOD = {\n    begin: '->{', end: '}'\n    // contains defined later\n  };\n  var VAR = {\n    variants: [\n      {begin: /\\$\\d/},\n      {begin: /[\\$%@](\\^\\w\\b|#\\w+(::\\w+)*|{\\w+}|\\w+(::\\w*)*)/},\n      {begin: /[\\$%@][^\\s\\w{]/, relevance: 0}\n    ]\n  };\n  var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];\n  var PERL_DEFAULT_CONTAINS = [\n    VAR,\n    hljs.HASH_COMMENT_MODE,\n    hljs.COMMENT(\n      '^\\\\=\\\\w',\n      '\\\\=cut',\n      {\n        endsWithParent: true\n      }\n    ),\n    METHOD,\n    {\n      className: 'string',\n      contains: STRING_CONTAINS,\n      variants: [\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\(', end: '\\\\)',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\[', end: '\\\\]',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\{', end: '\\\\}',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\|', end: '\\\\|',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\<', end: '\\\\>',\n          relevance: 5\n        },\n        {\n          begin: 'qw\\\\s+q', end: 'q',\n          relevance: 5\n        },\n        {\n          begin: '\\'', end: '\\'',\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: '\"', end: '\"'\n        },\n        {\n          begin: '`', end: '`',\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: '{\\\\w+}',\n          contains: [],\n          relevance: 0\n        },\n        {\n          begin: '\\-?\\\\w+\\\\s*\\\\=\\\\>',\n          contains: [],\n          relevance: 0\n        }\n      ]\n    },\n    {\n      className: 'number',\n      begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n      relevance: 0\n    },\n    { // regexp container\n      begin: '(\\\\/\\\\/|' + hljs.RE_STARTERS_RE + '|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*',\n      keywords: 'split return print reverse grep',\n      relevance: 0,\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          className: 'regexp',\n          begin: '(s|tr|y)/(\\\\\\\\.|[^/])*/(\\\\\\\\.|[^/])*/[a-z]*',\n          relevance: 10\n        },\n        {\n          className: 'regexp',\n          begin: '(m|qr)?/', end: '/[a-z]*',\n          contains: [hljs.BACKSLASH_ESCAPE],\n          relevance: 0 // allows empty \"//\" which is a common comment delimiter in other languages\n        }\n      ]\n    },\n    {\n      className: 'function',\n      beginKeywords: 'sub', end: '(\\\\s*\\\\(.*?\\\\))?[;{]', excludeEnd: true,\n      relevance: 5,\n      contains: [hljs.TITLE_MODE]\n    },\n    {\n      begin: '-\\\\w\\\\b',\n      relevance: 0\n    },\n    {\n      begin: \"^__DATA__$\",\n      end: \"^__END__$\",\n      subLanguage: 'mojolicious',\n      contains: [\n        {\n            begin: \"^@@.*\",\n            end: \"$\",\n            className: \"comment\"\n        }\n      ]\n    }\n  ];\n  SUBST.contains = PERL_DEFAULT_CONTAINS;\n  METHOD.contains = PERL_DEFAULT_CONTAINS;\n\n  return {\n    aliases: ['pl', 'pm'],\n    lexemes: /[\\w\\.]+/,\n    keywords: PERL_KEYWORDS,\n    contains: PERL_DEFAULT_CONTAINS\n  };\n};","module.exports = function(hljs) {\n  var OXYGENE_KEYWORDS = 'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '+\n    'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '+\n    'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '+\n    'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '+\n    'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '+\n    'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '+\n    'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '+\n    'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained';\n  var CURLY_COMMENT =  hljs.COMMENT(\n    '{',\n    '}',\n    {\n      relevance: 0\n    }\n  );\n  var PAREN_COMMENT = hljs.COMMENT(\n    '\\\\(\\\\*',\n    '\\\\*\\\\)',\n    {\n      relevance: 10\n    }\n  );\n  var STRING = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    contains: [{begin: '\\'\\''}]\n  };\n  var CHAR_STRING = {\n    className: 'string', begin: '(#\\\\d+)+'\n  };\n  var FUNCTION = {\n    className: 'function',\n    beginKeywords: 'function constructor destructor procedure method', end: '[:;]',\n    keywords: 'function constructor|10 destructor|10 procedure|10 method|10',\n    contains: [\n      hljs.TITLE_MODE,\n      {\n        className: 'params',\n        begin: '\\\\(', end: '\\\\)',\n        keywords: OXYGENE_KEYWORDS,\n        contains: [STRING, CHAR_STRING]\n      },\n      CURLY_COMMENT, PAREN_COMMENT\n    ]\n  };\n  return {\n    case_insensitive: true,\n    lexemes: /\\.?\\w+/,\n    keywords: OXYGENE_KEYWORDS,\n    illegal: '(\"|\\\\$[G-Zg-z]|\\\\/\\\\*|</|=>|->)',\n    contains: [\n      CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,\n      STRING, CHAR_STRING,\n      hljs.NUMBER_MODE,\n      FUNCTION,\n      {\n        className: 'class',\n        begin: '=\\\\bclass\\\\b', end: 'end;',\n        keywords: OXYGENE_KEYWORDS,\n        contains: [\n          STRING, CHAR_STRING,\n          CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,\n          FUNCTION\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs){\n  return {\n    contains: [\n      // Attribute\n      {\n        className: 'attribute',\n        begin: /</, end: />/\n      },\n      // Specific\n      {\n        begin: /::=/,\n        starts: {\n          end: /$/,\n          contains: [\n            {\n              begin: /</, end: />/\n            },\n            // Common\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n          ]\n        }\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var MACRO = {\n    className: 'variable',\n    begin: /\\$[\\w\\d#@][\\w\\d_]*/\n  };\n  var TABLE = {\n    className: 'variable',\n    begin: /<(?!\\/)/, end: />/\n  };\n  var QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/\n  };\n\n  return {\n    aliases: ['pf.conf'],\n    lexemes: /[a-z0-9_<>-]+/,\n    keywords: {\n      built_in: /* block match pass are \"actions\" in pf.conf(5), the rest are\n                 * lexically similar top-level commands.\n                 */\n        'block match pass load anchor|5 antispoof|10 set table',\n      keyword:\n        'in out log quick on rdomain inet inet6 proto from port os to route' +\n        'allow-opts divert-packet divert-reply divert-to flags group icmp-type' +\n        'icmp6-type label once probability recieved-on rtable prio queue' +\n        'tos tag tagged user keep fragment for os drop' +\n        'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin' +\n        'source-hash static-port' +\n        'dup-to reply-to route-to' +\n        'parent bandwidth default min max qlimit' +\n        'block-policy debug fingerprints hostid limit loginterface optimization' +\n        'reassemble ruleset-optimization basic none profile skip state-defaults' +\n        'state-policy timeout' +\n        'const counters persist' +\n        'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy' +\n        'source-track global rule max-src-nodes max-src-states max-src-conn' +\n        'max-src-conn-rate overload flush' +\n        'scrub|5 max-mss min-ttl no-df|10 random-id',\n      literal:\n        'all any no-route self urpf-failed egress|5 unknown'\n    },\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      MACRO,\n      TABLE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(\\\\!|\\\\?)?';\n  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]\\\\@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  var ELIXIR_KEYWORDS =\n    'and false then defined module in return redo retry end for true self when ' +\n    'next until do begin unless nil break not case cond alias while ensure or ' +\n    'include use alias fn quote require import with|0';\n  var SUBST = {\n    className: 'subst',\n    begin: '#\\\\{', end: '}',\n    lexemes: ELIXIR_IDENT_RE,\n    keywords: ELIXIR_KEYWORDS\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {\n        begin: /'/, end: /'/\n      },\n      {\n        begin: /\"/, end: /\"/\n      }\n    ]\n  };\n  var FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro', end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  var CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\\bdo\\b|$|;/\n  });\n  var ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    {\n      begin: '::'\n    },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [STRING, {begin: ELIXIR_METHOD_RE}],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    {\n      className: 'number',\n      begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n      relevance: 0\n    },\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|\\\\@\\\\@?)(\\\\w+))'\n    },\n    {\n      begin: '->'\n    },\n    { // regexp container\n      begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          className: 'regexp',\n          illegal: '\\\\n',\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n          variants: [\n            {\n              begin: '/', end: '/[a-z]*'\n            },\n            {\n              begin: '%r\\\\[', end: '\\\\][a-z]*'\n            }\n          ]\n        }\n      ],\n      relevance: 0\n    }\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    lexemes: ELIXIR_IDENT_RE,\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS =\n    'div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to ' +\n    'until while with var';\n  var LITERALS = 'false true';\n  var COMMENT_MODES = [\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.COMMENT(\n      /\\{/,\n      /\\}/,\n      {\n        relevance: 0\n      }\n    ),\n    hljs.COMMENT(\n      /\\(\\*/,\n      /\\*\\)/,\n      {\n        relevance: 10\n      }\n    )\n  ];\n  var STRING = {\n    className: 'string',\n    begin: /'/, end: /'/,\n    contains: [{begin: /''/}]\n  };\n  var CHAR_STRING = {\n    className: 'string', begin: /(#\\d+)+/\n  };\n  var DATE = {\n      className: 'number',\n      begin: '\\\\b\\\\d+(\\\\.\\\\d+)?(DT|D|T)',\n      relevance: 0\n  };\n  var DBL_QUOTED_VARIABLE = {\n      className: 'string', // not a string technically but makes sense to be highlighted in the same style\n      begin: '\"',\n      end: '\"'\n  };\n\n  var PROCEDURE = {\n    className: 'function',\n    beginKeywords: 'procedure', end: /[:;]/,\n    keywords: 'procedure|10',\n    contains: [\n      hljs.TITLE_MODE,\n      {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [STRING, CHAR_STRING]\n      }\n    ].concat(COMMENT_MODES)\n  };\n\n  var OBJECT = {\n    className: 'class',\n    begin: 'OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\\\d+) ([^\\\\r\\\\n]+)',\n    returnBegin: true,\n    contains: [\n      hljs.TITLE_MODE,\n        PROCEDURE\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    keywords: { keyword: KEYWORDS, literal: LITERALS },\n    illegal: /\\/\\*/,\n    contains: [\n      STRING, CHAR_STRING,\n      DATE, DBL_QUOTED_VARIABLE,\n      hljs.NUMBER_MODE,\n      OBJECT,\n      PROCEDURE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var BUILT_INS = 'action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view';\n\n  var ATTR_ASSIGNMENT = {\n    illegal: /\\}\\}/,\n    begin: /[a-zA-Z0-9_]+=/,\n    returnBegin: true,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr', begin: /[a-zA-Z0-9_]+/\n      }\n    ]\n  };\n\n  var SUB_EXPR = {\n    illegal: /\\}\\}/,\n    begin: /\\)/, end: /\\)/,\n    contains: [\n      {\n        begin: /[a-zA-Z\\.\\-]+/,\n        keywords: {built_in: BUILT_INS},\n        starts: {\n          endsWithParent: true, relevance: 0,\n          contains: [\n            hljs.QUOTE_STRING_MODE,\n          ]\n        }\n      }\n    ]\n  };\n\n  var TAG_INNARDS = {\n    endsWithParent: true, relevance: 0,\n    keywords: {keyword: 'as', built_in: BUILT_INS},\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      ATTR_ASSIGNMENT,\n      hljs.NUMBER_MODE\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      hljs.COMMENT('{{!(--)?', '(--)?}}'),\n      {\n        className: 'template-tag',\n        begin: /\\{\\{[#\\/]/, end: /\\}\\}/,\n        contains: [\n          {\n            className: 'name',\n            begin: /[a-zA-Z\\.\\-]+/,\n            keywords: {'builtin-name': BUILT_INS},\n            starts: TAG_INNARDS\n          }\n        ]\n      },\n      {\n        className: 'template-variable',\n        begin: /\\{\\{[a-zA-Z][a-zA-Z\\-]+/, end: /\\}\\}/,\n        keywords: {keyword: 'as', built_in: BUILT_INS},\n        contains: [\n          hljs.QUOTE_STRING_MODE\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  /* Variables: simple (eg $(var)) and special (eg $@) */\n  var VARIABLE = {\n    className: 'variable',\n    variants: [\n      {\n        begin: '\\\\$\\\\(' + hljs.UNDERSCORE_IDENT_RE + '\\\\)',\n        contains: [hljs.BACKSLASH_ESCAPE],\n      },\n      {\n        begin: /\\$[@%<?\\^\\+\\*]/\n      },\n    ]\n  };\n  /* Quoted string with variables inside */\n  var QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VARIABLE,\n    ]\n  };\n  /* Function: $(func arg,...) */\n  var FUNC = {\n    className: 'variable',\n    begin: /\\$\\([\\w-]+\\s/, end: /\\)/,\n    keywords: {\n      built_in:\n        'subst patsubst strip findstring filter filter-out sort ' +\n        'word wordlist firstword lastword dir notdir suffix basename ' +\n        'addsuffix addprefix join wildcard realpath abspath error warning ' +\n        'shell origin flavor foreach if or and call eval file value',\n    },\n    contains: [\n      VARIABLE,\n    ]\n  };\n  /* Variable assignment */\n  var VAR_ASSIG = {\n    begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\\\s*[:+?]?=',\n    illegal: '\\\\n',\n    returnBegin: true,\n    contains: [\n      {\n        begin: '^' + hljs.UNDERSCORE_IDENT_RE, end: '[:+?]?=',\n        excludeEnd: true,\n      }\n    ]\n  };\n  /* Meta targets (.PHONY) */\n  var META = {\n    className: 'meta',\n    begin: /^\\.PHONY:/, end: /$/,\n    keywords: {'meta-keyword': '.PHONY'},\n    lexemes: /[\\.\\w]+/\n  };\n  /* Targets */\n  var TARGET = {\n    className: 'section',\n    begin: /^[^\\s]+:/, end: /$/,\n    contains: [VARIABLE,]\n  };\n  return {\n    aliases: ['mk', 'mak'],\n    keywords:\n      'define endef undefine ifdef ifndef ifeq ifneq else endif ' +\n      'include -include sinclude override export unexport private vpath',\n    lexemes: /[\\w-]+/,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      VARIABLE,\n      QUOTE_STRING,\n      FUNC,\n      VAR_ASSIG,\n      META,\n      TARGET,\n    ]\n  };\n};","module.exports = function(hljs) {\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: ''});\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', end: '\\\\)',\n    contains: ['self', hljs.C_NUMBER_MODE, STRING]\n  };\n  var COMMENT_MODE_1 = hljs.COMMENT('--', '$');\n  var COMMENT_MODE_2 = hljs.COMMENT(\n    '\\\\(\\\\*',\n    '\\\\*\\\\)',\n    {\n      contains: ['self', COMMENT_MODE_1] //allow nesting\n    }\n  );\n  var COMMENTS = [\n    COMMENT_MODE_1,\n    COMMENT_MODE_2,\n    hljs.HASH_COMMENT_MODE\n  ];\n\n  return {\n    aliases: ['osascript'],\n    keywords: {\n      keyword:\n        'about above after against and around as at back before beginning ' +\n        'behind below beneath beside between but by considering ' +\n        'contain contains continue copy div does eighth else end equal ' +\n        'equals error every exit fifth first for fourth from front ' +\n        'get given global if ignoring in into is it its last local me ' +\n        'middle mod my ninth not of on onto or over prop property put ref ' +\n        'reference repeat returning script second set seventh since ' +\n        'sixth some tell tenth that the|0 then third through thru ' +\n        'timeout times to transaction try until where while whose with ' +\n        'without',\n      literal:\n        'AppleScript false linefeed return pi quote result space tab true',\n      built_in:\n        'alias application boolean class constant date file integer list ' +\n        'number real record string text ' +\n        'activate beep count delay launch log offset read round ' +\n        'run say summarize write ' +\n        'character characters contents day frontmost id item length ' +\n        'month name paragraph paragraphs rest reverse running time version ' +\n        'weekday word words year'\n    },\n    contains: [\n      STRING,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'built_in',\n        begin:\n          '\\\\b(clipboard info|the clipboard|info for|list (disks|folder)|' +\n          'mount volume|path to|(close|open for) access|(get|set) eof|' +\n          'current date|do shell script|get volume settings|random number|' +\n          'set volume|system attribute|system info|time to GMT|' +\n          '(load|run|store) script|scripting components|' +\n          'ASCII (character|number)|localized string|' +\n          'choose (application|color|file|file name|' +\n          'folder|from list|remote application|URL)|' +\n          'display (alert|dialog))\\\\b|^\\\\s*return\\\\b'\n      },\n      {\n        className: 'literal',\n        begin:\n          '\\\\b(text item delimiters|current application|missing value)\\\\b'\n      },\n      {\n        className: 'keyword',\n        begin:\n          '\\\\b(apart from|aside from|instead of|out of|greater than|' +\n          \"isn't|(doesn't|does not) (equal|come before|come after|contain)|\" +\n          '(greater|less) than( or equal)?|(starts?|ends|begins?) with|' +\n          'contained by|comes (before|after)|a (ref|reference)|POSIX file|' +\n          'POSIX path|(date|time) string|quoted form)\\\\b'\n      },\n      {\n        beginKeywords: 'on',\n        illegal: '[${=;\\\\n]',\n        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]\n      }\n    ].concat(COMMENTS),\n    illegal: '//|->|=>|\\\\[\\\\['\n  };\n};","module.exports = function(hljs) {\n  var identifier = '([-a-zA-Z$._][\\\\w\\\\-$.]*)';\n  return {\n    //lexemes: '[.%]?' + hljs.IDENT_RE,\n    keywords:\n      'begin end true false declare define global ' +\n      'constant private linker_private internal ' +\n      'available_externally linkonce linkonce_odr weak ' +\n      'weak_odr appending dllimport dllexport common ' +\n      'default hidden protected extern_weak external ' +\n      'thread_local zeroinitializer undef null to tail ' +\n      'target triple datalayout volatile nuw nsw nnan ' +\n      'ninf nsz arcp fast exact inbounds align ' +\n      'addrspace section alias module asm sideeffect ' +\n      'gc dbg linker_private_weak attributes blockaddress ' +\n      'initialexec localdynamic localexec prefix unnamed_addr ' +\n      'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +\n      'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +\n      'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +\n      'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +\n      'cc c signext zeroext inreg sret nounwind ' +\n      'noreturn noalias nocapture byval nest readnone ' +\n      'readonly inlinehint noinline alwaysinline optsize ssp ' +\n      'sspreq noredzone noimplicitfloat naked builtin cold ' +\n      'nobuiltin noduplicate nonlazybind optnone returns_twice ' +\n      'sanitize_address sanitize_memory sanitize_thread sspstrong ' +\n      'uwtable returned type opaque eq ne slt sgt ' +\n      'sle sge ult ugt ule uge oeq one olt ogt ' +\n      'ole oge ord uno ueq une x acq_rel acquire ' +\n      'alignstack atomic catch cleanup filter inteldialect ' +\n      'max min monotonic nand personality release seq_cst ' +\n      'singlethread umax umin unordered xchg add fadd ' +\n      'sub fsub mul fmul udiv sdiv fdiv urem srem ' +\n      'frem shl lshr ashr and or xor icmp fcmp ' +\n      'phi call trunc zext sext fptrunc fpext uitofp ' +\n      'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +\n      'addrspacecast select va_arg ret br switch invoke ' +\n      'unwind unreachable indirectbr landingpad resume ' +\n      'malloc alloca free load store getelementptr ' +\n      'extractelement insertelement shufflevector getresult ' +\n      'extractvalue insertvalue atomicrmw cmpxchg fence ' +\n      'argmemonly double',\n    contains: [\n      {\n        className: 'keyword',\n        begin: 'i\\\\d+'\n      },\n      hljs.COMMENT(\n        ';', '\\\\n', {relevance: 0}\n      ),\n      // Double quote string\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        variants: [\n          // Double-quoted string\n          { begin: '\"', end: '[^\\\\\\\\]\"' },\n        ],\n        relevance: 0\n      },\n      {\n        className: 'title',\n        variants: [\n          { begin: '@' + identifier },\n          { begin: '@\\\\d+' },\n          { begin: '!' + identifier },\n          { begin: '!\\\\d+' + identifier }\n        ]\n      },\n      {\n        className: 'symbol',\n        variants: [\n          { begin: '%' + identifier },\n          { begin: '%\\\\d+' },\n          { begin: '#\\\\d+' },\n        ]\n      },\n      {\n        className: 'number',\n        variants: [\n            { begin: '0[xX][a-fA-F0-9]+' },\n            { begin: '-?\\\\d+(?:[.]\\\\d+)?(?:[eE][-+]?\\\\d+(?:[.]\\\\d+)?)?' }\n        ],\n        relevance: 0\n      },\n    ]\n  };\n};","module.exports = function (hljs) {\n  var SUBST = {\n    className: 'subst',\n    variants: [\n       {begin: '\\\\$[A-Za-z0-9_]+'}\n    ],\n  };\n\n  var BRACED_SUBST = {\n    className: 'subst',\n    variants: [\n       {begin: '\\\\${', end: '}'},\n    ],\n    keywords: 'true false null this is new super',\n  };\n\n  var STRING = {\n    className: 'string',\n    variants: [\n      {\n        begin: 'r\\'\\'\\'', end: '\\'\\'\\''\n      },\n      {\n        begin: 'r\"\"\"', end: '\"\"\"'\n      },\n      {\n        begin: 'r\\'', end: '\\'',\n        illegal: '\\\\n'\n      },\n      {\n        begin: 'r\"', end: '\"',\n        illegal: '\\\\n'\n      },\n      {\n        begin: '\\'\\'\\'', end: '\\'\\'\\'',\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]\n      },\n      {\n        begin: '\"\"\"', end: '\"\"\"',\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]\n      },\n      {\n        begin: '\\'', end: '\\'',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]\n      },\n      {\n        begin: '\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]\n      }\n    ]\n  };\n  BRACED_SUBST.contains = [\n    hljs.C_NUMBER_MODE, STRING\n  ];\n\n  var KEYWORDS = {\n    keyword: 'assert async await break case catch class const continue default do else enum extends false final ' +\n      'finally for if in is new null rethrow return super switch sync this throw true try var void while with yield ' +\n      'abstract as dynamic export external factory get implements import library operator part set static typedef',\n    built_in:\n      // dart:core\n      'print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set ' +\n      'Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num ' +\n      // dart:html\n      'document window querySelector querySelectorAll Element ElementList'\n  };\n\n  return {\n    keywords: KEYWORDS,\n    contains: [\n      STRING,\n      hljs.COMMENT(\n        '/\\\\*\\\\*',\n        '\\\\*/',\n        {\n          subLanguage: 'markdown'\n        }\n      ),\n      hljs.COMMENT(\n        '///',\n        '$',\n        {\n          subLanguage: 'markdown'\n        }\n      ),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: '{', excludeEnd: true,\n        contains: [\n          {\n            beginKeywords: 'extends implements'\n          },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta', begin: '@[A-Za-z]+'\n      },\n      {\n        begin: '=>' // No markup, just a relevance booster\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';\n  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';\n\n  var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';\n\n  return {\n    aliases: ['hx'],\n    keywords: {\n      keyword: 'break case cast catch continue default do dynamic else enum extern ' +\n               'for function here if import in inline never new override package private get set ' +\n               'public return static super switch this throw trace try typedef untyped using var while ' +\n               HAXE_BASIC_TYPES,\n      built_in:\n        'trace this',\n      literal:\n        'true false null _'\n    },\n    contains: [\n      { className: 'string', // interpolate-able strings\n        begin: '\\'', end: '\\'',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          { className: 'subst', // interpolation\n            begin: '\\\\$\\\\{', end: '\\\\}'\n          },\n          { className: 'subst', // interpolation\n            begin: '\\\\$', end: '\\\\W}'\n          }\n        ]\n      },\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      { className: 'meta', // compiler meta\n        begin: '@:', end: '$'\n      },\n      { className: 'meta', // compiler conditionals\n        begin: '#', end: '$',\n        keywords: {'meta-keyword': 'if else elseif end error'}\n      },\n      { className: 'type', // function types\n        begin: ':[ \\t]*', end: '[^A-Za-z0-9_ \\t\\\\->]',\n        excludeBegin: true, excludeEnd: true,\n        relevance: 0\n      },\n      { className: 'type', // types\n        begin: ':[ \\t]*', end: '\\\\W',\n        excludeBegin: true, excludeEnd: true\n      },\n      { className: 'type', // instantiation\n        begin: 'new *', end: '\\\\W',\n        excludeBegin: true, excludeEnd: true\n      },\n      { className: 'class', // enums\n        beginKeywords: 'enum', end: '\\\\{',\n        contains: [\n          hljs.TITLE_MODE\n        ]\n      },\n      { className: 'class', // abstracts\n        beginKeywords: 'abstract', end: '[\\\\{$]',\n        contains: [\n          { className: 'type',\n            begin: '\\\\(', end: '\\\\)',\n            excludeBegin: true, excludeEnd: true\n          },\n          { className: 'type',\n            begin: 'from +', end: '\\\\W',\n            excludeBegin: true, excludeEnd: true\n          },\n          { className: 'type',\n            begin: 'to +', end: '\\\\W',\n            excludeBegin: true, excludeEnd: true\n          },\n          hljs.TITLE_MODE\n        ],\n        keywords: {\n          keyword: 'abstract from to'\n        }\n      },\n      { className: 'class', // classes\n        begin: '\\\\b(class|interface) +', end: '[\\\\{$]',  excludeEnd: true,\n        keywords: 'class interface',\n        contains: [\n          { className: 'keyword',\n            begin: '\\\\b(extends|implements) +',\n            keywords: 'extends implements',\n            contains: [\n              {\n                className: 'type',\n                begin: hljs.IDENT_RE,\n                relevance: 0\n              }\n            ]\n          },\n          hljs.TITLE_MODE\n        ]\n      },\n      { className: 'function',\n        beginKeywords: 'function', end: '\\\\(', excludeEnd: true,\n        illegal: '\\\\S',\n        contains: [\n          hljs.TITLE_MODE\n        ]\n      }\n    ],\n    illegal: /<\\//\n  };\n};","module.exports = function(hljs) {\n  var COMMENT = hljs.COMMENT(\n    /^\\s*@?rem\\b/, /$/,\n    {\n      relevance: 10\n    }\n  );\n  var LABEL = {\n    className: 'symbol',\n    begin: '^\\\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\\\s+label)',\n    relevance: 0\n  };\n  return {\n    aliases: ['bat', 'cmd'],\n    case_insensitive: true,\n    illegal: /\\/\\*/,\n    keywords: {\n      keyword:\n        'if else goto for in do call exit not exist errorlevel defined ' +\n        'equ neq lss leq gtr geq',\n      built_in:\n        'prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux ' +\n        'shift cd dir echo setlocal endlocal set pause copy ' +\n        'append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color ' +\n        'comp compact convert date dir diskcomp diskcopy doskey erase fs ' +\n        'find findstr format ftype graftabl help keyb label md mkdir mode more move path ' +\n        'pause print popd pushd promt rd recover rem rename replace restore rmdir shift' +\n        'sort start subst time title tree type ver verify vol ' +\n        // winutils\n        'ping net ipconfig taskkill xcopy ren del'\n    },\n    contains: [\n      {\n        className: 'variable', begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/\n      },\n      {\n        className: 'function',\n        begin: LABEL.begin, end: 'goto:eof',\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\\\w*\\\\.)*([_a-zA-Z]\\\\w*:)?[_a-zA-Z]\\\\w*'}),\n          COMMENT\n        ]\n      },\n      {\n        className: 'number', begin: '\\\\b\\\\d+',\n        relevance: 0\n      },\n      COMMENT\n    ]\n  };\n};","module.exports = function (hljs) {\n  var KEYWORDS = {\n    'keyword':\n      'abort acronym acronyms alias all and assign binary card diag display ' +\n      'else eq file files for free ge gt if integer le loop lt maximizing ' +\n      'minimizing model models ne negative no not option options or ord ' +\n      'positive prod put putpage puttl repeat sameas semicont semiint smax ' +\n      'smin solve sos1 sos2 sum system table then until using while xor yes',\n    'literal': 'eps inf na',\n    'built-in':\n      'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' +\n      'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' +\n      'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' +\n      'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' +\n      'randBinomial randLinear randTriangle round rPower sigmoid sign ' +\n      'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' +\n      'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' +\n      'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' +\n      'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' +\n      'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' +\n      'handleCollect handleDelete handleStatus handleSubmit heapFree ' +\n      'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' +\n      'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' +\n      'timeElapsed timeExec timeStart'\n  };\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/, end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n  };\n  var SYMBOLS = {\n    className: 'symbol',\n    variants: [\n      {begin: /\\=[lgenxc]=/},\n      {begin: /\\$/},\n    ]\n  };\n  var QSTR = { // One-line quoted comment string\n    className: 'comment',\n    variants: [\n      {begin: '\\'', end: '\\''},\n      {begin: '\"', end: '\"'},\n    ],\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  var ASSIGNMENT = {\n    begin: '/',\n    end: '/',\n    keywords: KEYWORDS,\n    contains: [\n      QSTR,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n    ],\n  };\n  var DESCTEXT = { // Parameter/set/variable description text\n    begin: /[a-z][a-z0-9_]*(\\([a-z0-9_, ]*\\))?[ \\t]+/,\n    excludeBegin: true,\n    end: '$',\n    endsWithParent: true,\n    contains: [\n      QSTR,\n      ASSIGNMENT,\n      {\n        className: 'comment',\n        begin: /([ ]*[a-z0-9&#*=?@>\\\\<:\\-,()$\\[\\]_.{}!+%^]+)+/,\n        relevance: 0\n      },\n    ],\n  };\n\n  return {\n    aliases: ['gms'],\n    case_insensitive: true,\n    keywords: KEYWORDS,\n    contains: [\n      hljs.COMMENT(/^\\$ontext/, /^\\$offtext/),\n      {\n        className: 'meta',\n        begin: '^\\\\$[a-z0-9]+',\n        end: '$',\n        returnBegin: true,\n        contains: [\n          {\n            className: 'meta-keyword',\n            begin: '^\\\\$[a-z0-9]+',\n          }\n        ]\n      },\n      hljs.COMMENT('^\\\\*', '$'),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      // Declarations\n      {\n        beginKeywords:\n          'set sets parameter parameters variable variables ' +\n          'scalar scalars equation equations',\n        end: ';',\n        contains: [\n          hljs.COMMENT('^\\\\*', '$'),\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          ASSIGNMENT,\n          DESCTEXT,\n        ]\n      },\n      { // table environment\n        beginKeywords: 'table',\n        end: ';',\n        returnBegin: true,\n        contains: [\n          { // table header row\n            beginKeywords: 'table',\n            end: '$',\n            contains: [DESCTEXT],\n          },\n          hljs.COMMENT('^\\\\*', '$'),\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          hljs.C_NUMBER_MODE,\n          // Table does not contain DESCTEXT or ASSIGNMENT\n        ]\n      },\n      // Function definitions\n      {\n        className: 'function',\n        begin: /^[a-z][a-z0-9_,\\-+' ()$]+\\.{2}/,\n        returnBegin: true,\n        contains: [\n              { // Function title\n                className: 'title',\n                begin: /^[a-z0-9_]+/,\n              },\n              PARAMS,\n              SYMBOLS,\n            ],\n      },\n      hljs.C_NUMBER_MODE,\n      SYMBOLS,\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +\n        'match mod Prop return Set then Type using where with ' +\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\n        'Verbose Visibility where with',\n      built_in:\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\n        'classical_left classical_right clear clearbody cofix compare compute ' +\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\n        'cycle decide decompose dependent destruct destruction dintuition ' +\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\n        'induction injection instantiate intro intro_pattern intros intuition ' +\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\n        'record red refine reflexivity remember rename repeat replace revert ' +\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\n        'unfold unify until using vm_compute with'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'type',\n        excludeBegin: true,\n        begin: '\\\\|\\\\s*',\n        end: '\\\\w+'\n      },\n      {begin: /[-=]>/} // relevance booster\n    ]\n  };\n};","module.exports = function cos (hljs) {\n\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '\"',\n        end: '\"',\n        contains: [{ // escaped\n          begin: \"\\\"\\\"\",\n          relevance: 0\n        }]\n      }\n    ]\n  };\n\n  var NUMBERS = {\n    className: \"number\",\n    begin: \"\\\\b(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)\",\n    relevance: 0\n  };\n\n  var COS_KEYWORDS =\n    'property parameter class classmethod clientmethod extends as break ' +\n    'catch close continue do d|0 else elseif for goto halt hang h|0 if job ' +\n    'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 ' +\n    'tcommit throw trollback try tstart use view while write w|0 xecute x|0 ' +\n    'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert ' +\n    'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit ' +\n    'zsync ascii';\n\n    // registered function - no need in them due to all functions are highlighted,\n    // but I'll just leave this here.\n\n    //\"$bit\", \"$bitcount\",\n    //\"$bitfind\", \"$bitlogic\", \"$case\", \"$char\", \"$classmethod\", \"$classname\",\n    //\"$compile\", \"$data\", \"$decimal\", \"$double\", \"$extract\", \"$factor\",\n    //\"$find\", \"$fnumber\", \"$get\", \"$increment\", \"$inumber\", \"$isobject\",\n    //\"$isvaliddouble\", \"$isvalidnum\", \"$justify\", \"$length\", \"$list\",\n    //\"$listbuild\", \"$listdata\", \"$listfind\", \"$listfromstring\", \"$listget\",\n    //\"$listlength\", \"$listnext\", \"$listsame\", \"$listtostring\", \"$listvalid\",\n    //\"$locate\", \"$match\", \"$method\", \"$name\", \"$nconvert\", \"$next\",\n    //\"$normalize\", \"$now\", \"$number\", \"$order\", \"$parameter\", \"$piece\",\n    //\"$prefetchoff\", \"$prefetchon\", \"$property\", \"$qlength\", \"$qsubscript\",\n    //\"$query\", \"$random\", \"$replace\", \"$reverse\", \"$sconvert\", \"$select\",\n    //\"$sortbegin\", \"$sortend\", \"$stack\", \"$text\", \"$translate\", \"$view\",\n    //\"$wascii\", \"$wchar\", \"$wextract\", \"$wfind\", \"$wiswide\", \"$wlength\",\n    //\"$wreverse\", \"$xecute\", \"$zabs\", \"$zarccos\", \"$zarcsin\", \"$zarctan\",\n    //\"$zcos\", \"$zcot\", \"$zcsc\", \"$zdate\", \"$zdateh\", \"$zdatetime\",\n    //\"$zdatetimeh\", \"$zexp\", \"$zhex\", \"$zln\", \"$zlog\", \"$zpower\", \"$zsec\",\n    //\"$zsin\", \"$zsqr\", \"$ztan\", \"$ztime\", \"$ztimeh\", \"$zboolean\",\n    //\"$zconvert\", \"$zcrc\", \"$zcyc\", \"$zdascii\", \"$zdchar\", \"$zf\",\n    //\"$ziswide\", \"$zlascii\", \"$zlchar\", \"$zname\", \"$zposition\", \"$zqascii\",\n    //\"$zqchar\", \"$zsearch\", \"$zseek\", \"$zstrip\", \"$zwascii\", \"$zwchar\",\n    //\"$zwidth\", \"$zwpack\", \"$zwbpack\", \"$zwunpack\", \"$zwbunpack\", \"$zzenkaku\",\n    //\"$change\", \"$mv\", \"$mvat\", \"$mvfmt\", \"$mvfmts\", \"$mviconv\",\n    //\"$mviconvs\", \"$mvinmat\", \"$mvlover\", \"$mvoconv\", \"$mvoconvs\", \"$mvraise\",\n    //\"$mvtrans\", \"$mvv\", \"$mvname\", \"$zbitand\", \"$zbitcount\", \"$zbitfind\",\n    //\"$zbitget\", \"$zbitlen\", \"$zbitnot\", \"$zbitor\", \"$zbitset\", \"$zbitstr\",\n    //\"$zbitxor\", \"$zincrement\", \"$znext\", \"$zorder\", \"$zprevious\", \"$zsort\",\n    //\"device\", \"$ecode\", \"$estack\", \"$etrap\", \"$halt\", \"$horolog\",\n    //\"$io\", \"$job\", \"$key\", \"$namespace\", \"$principal\", \"$quit\", \"$roles\",\n    //\"$storage\", \"$system\", \"$test\", \"$this\", \"$tlevel\", \"$username\",\n    //\"$x\", \"$y\", \"$za\", \"$zb\", \"$zchild\", \"$zeof\", \"$zeos\", \"$zerror\",\n    //\"$zhorolog\", \"$zio\", \"$zjob\", \"$zmode\", \"$znspace\", \"$zparent\", \"$zpi\",\n    //\"$zpos\", \"$zreference\", \"$zstorage\", \"$ztimestamp\", \"$ztimezone\",\n    //\"$ztrap\", \"$zversion\"\n\n  return {\n    case_insensitive: true,\n    aliases: [\"cos\", \"cls\"],\n    keywords: COS_KEYWORDS,\n    contains: [\n      NUMBERS,\n      STRINGS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: \"comment\",\n        begin: /;/, end: \"$\",\n        relevance: 0\n      },\n      { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)\n        className: \"built_in\",\n        begin: /(?:\\$\\$?|\\.\\.)\\^?[a-zA-Z]+/\n      },\n      { // Macro command: quit $$$OK\n        className: \"built_in\",\n        begin: /\\$\\$\\$[a-zA-Z]+/\n      },\n      { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer\n        className: \"built_in\",\n        begin: /%[a-z]+(?:\\.[a-z]+)*/\n      },\n      { // Global variable: set ^globalName = 12 write ^globalName\n        className: \"symbol\",\n        begin: /\\^%?[a-zA-Z][\\w]*/\n      },\n      { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()\n        className: \"keyword\",\n        begin: /##class|##super|#define|#dim/\n      },\n\n      // sub-languages: are not fully supported by hljs by 11/15/2015\n      // left for the future implementation.\n      {\n        begin: /&sql\\(/,    end: /\\)/,\n        excludeBegin: true, excludeEnd: true,\n        subLanguage: \"sql\"\n      },\n      {\n        begin: /&(js|jscript|javascript)</, end: />/,\n        excludeBegin: true, excludeEnd: true,\n        subLanguage: \"javascript\"\n      },\n      {\n        // this brakes first and last tag, but this is the only way to embed a valid html\n        begin: /&html<\\s*</, end: />\\s*>/,\n        subLanguage: \"xml\"\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var RUBY_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]\\\\@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  var RUBY_KEYWORDS = {\n    keyword:\n      'and then defined module in return redo if BEGIN retry end for self when ' +\n      'next until do begin unless END rescue else break undef not super class case ' +\n      'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',\n    literal:\n      'true false nil'\n  };\n  var YARDOCTAG = {\n    className: 'doctag',\n    begin: '@[A-Za-z]+'\n  };\n  var IRB_OBJECT = {\n    begin: '#<', end: '>'\n  };\n  var COMMENT_MODES = [\n    hljs.COMMENT(\n      '#',\n      '$',\n      {\n        contains: [YARDOCTAG]\n      }\n    ),\n    hljs.COMMENT(\n      '^\\\\=begin',\n      '^\\\\=end',\n      {\n        contains: [YARDOCTAG],\n        relevance: 10\n      }\n    ),\n    hljs.COMMENT('^__END__', '\\\\n$')\n  ];\n  var SUBST = {\n    className: 'subst',\n    begin: '#\\\\{', end: '}',\n    keywords: RUBY_KEYWORDS\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {begin: /'/, end: /'/},\n      {begin: /\"/, end: /\"/},\n      {begin: /`/, end: /`/},\n      {begin: '%[qQwWx]?\\\\(', end: '\\\\)'},\n      {begin: '%[qQwWx]?\\\\[', end: '\\\\]'},\n      {begin: '%[qQwWx]?{', end: '}'},\n      {begin: '%[qQwWx]?<', end: '>'},\n      {begin: '%[qQwWx]?/', end: '/'},\n      {begin: '%[qQwWx]?%', end: '%'},\n      {begin: '%[qQwWx]?-', end: '-'},\n      {begin: '%[qQwWx]?\\\\|', end: '\\\\|'},\n      {\n        // \\B in the beginning suppresses recognition of ?-sequences where ?\n        // is the last character of a preceding identifier, as in: `func?4`\n        begin: /\\B\\?(\\\\\\d{1,3}|\\\\x[A-Fa-f0-9]{1,2}|\\\\u[A-Fa-f0-9]{4}|\\\\?\\S)\\b/\n      },\n      {\n        begin: /<<(-?)\\w+$/, end: /^\\s*\\w+$/,\n      }\n    ]\n  };\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', end: '\\\\)', endsParent: true,\n    keywords: RUBY_KEYWORDS\n  };\n\n  var RUBY_DEFAULT_CONTAINS = [\n    STRING,\n    IRB_OBJECT,\n    {\n      className: 'class',\n      beginKeywords: 'class module', end: '$|;',\n      illegal: /=/,\n      contains: [\n        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\\\w*(::\\\\w+)*(\\\\?|\\\\!)?'}),\n        {\n          begin: '<\\\\s*',\n          contains: [{\n            begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE\n          }]\n        }\n      ].concat(COMMENT_MODES)\n    },\n    {\n      className: 'function',\n      beginKeywords: 'def', end: '$|;',\n      contains: [\n        hljs.inherit(hljs.TITLE_MODE, {begin: RUBY_METHOD_RE}),\n        PARAMS\n      ].concat(COMMENT_MODES)\n    },\n    {\n      // swallow namespace qualifiers before symbols\n      begin: hljs.IDENT_RE + '::'\n    },\n    {\n      className: 'symbol',\n      begin: hljs.UNDERSCORE_IDENT_RE + '(\\\\!|\\\\?)?:',\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ':(?!\\\\s)',\n      contains: [STRING, {begin: RUBY_METHOD_RE}],\n      relevance: 0\n    },\n    {\n      className: 'number',\n      begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n      relevance: 0\n    },\n    {\n      begin: '(\\\\$\\\\W)|((\\\\$|\\\\@\\\\@?)(\\\\w+))' // variables\n    },\n    {\n      className: 'params',\n      begin: /\\|/, end: /\\|/,\n      keywords: RUBY_KEYWORDS\n    },\n    { // regexp container\n      begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\\\s*',\n      keywords: 'unless',\n      contains: [\n        IRB_OBJECT,\n        {\n          className: 'regexp',\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n          illegal: /\\n/,\n          variants: [\n            {begin: '/', end: '/[a-z]*'},\n            {begin: '%r{', end: '}[a-z]*'},\n            {begin: '%r\\\\(', end: '\\\\)[a-z]*'},\n            {begin: '%r!', end: '![a-z]*'},\n            {begin: '%r\\\\[', end: '\\\\][a-z]*'}\n          ]\n        }\n      ].concat(COMMENT_MODES),\n      relevance: 0\n    }\n  ].concat(COMMENT_MODES);\n\n  SUBST.contains = RUBY_DEFAULT_CONTAINS;\n  PARAMS.contains = RUBY_DEFAULT_CONTAINS;\n\n  var SIMPLE_PROMPT = \"[>?]>\";\n  var DEFAULT_PROMPT = \"[\\\\w#]+\\\\(\\\\w+\\\\):\\\\d+:\\\\d+>\";\n  var RVM_PROMPT = \"(\\\\w+-)?\\\\d+\\\\.\\\\d+\\\\.\\\\d(p\\\\d+)?[^>]+>\";\n\n  var IRB_DEFAULT = [\n    {\n      begin: /^\\s*=>/,\n      starts: {\n        end: '$', contains: RUBY_DEFAULT_CONTAINS\n      }\n    },\n    {\n      className: 'meta',\n      begin: '^('+SIMPLE_PROMPT+\"|\"+DEFAULT_PROMPT+'|'+RVM_PROMPT+')',\n      starts: {\n        end: '$', contains: RUBY_DEFAULT_CONTAINS\n      }\n    }\n  ];\n\n  return {\n    aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],\n    keywords: RUBY_KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: COMMENT_MODES.concat(IRB_DEFAULT).concat(RUBY_DEFAULT_CONTAINS)\n  };\n};","module.exports = function(hljs) {\n  var keywords = {\n    'builtin-name':\n      // keywords\n      '!= % %= & &= * ** **= *= *map ' +\n      '+ += , --build-class-- --import-- -= . / // //= ' +\n      '/= < << <<= <= = > >= >> >>= ' +\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\n      'compress cond cons cons? continue count curry cut cycle dec ' +\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\n      'identity if if* if-not if-python2 import in inc input instance? ' +\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\n   };\n\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!', end: '$'\n  };\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    aliases: ['hylang'],\n    illegal: /\\S/,\n    contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  }\n};","module.exports = function(hljs) {\n  return {\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        begin: hljs.UNDERSCORE_IDENT_RE,\n        lexemes: hljs.UNDERSCORE_IDENT_RE,\n        keywords: {\n          // Stan's keywords\n          name:\n            'for in while repeat until if then else',\n          // Stan's probablity distributions (less beta and gamma, as commonly\n          // used for parameter names). So far, _log and _rng variants are not\n          // included\n          symbol:\n            'bernoulli bernoulli_logit binomial binomial_logit '               +\n            'beta_binomial hypergeometric categorical categorical_logit '      +\n            'ordered_logistic neg_binomial neg_binomial_2 '                    +\n            'neg_binomial_2_log poisson poisson_log multinomial normal '       +\n            'exp_mod_normal skew_normal student_t cauchy double_exponential '  +\n            'logistic gumbel lognormal chi_square inv_chi_square '             +\n            'scaled_inv_chi_square exponential inv_gamma weibull frechet '     +\n            'rayleigh wiener pareto pareto_type_2 von_mises uniform '          +\n            'multi_normal multi_normal_prec multi_normal_cholesky multi_gp '   +\n            'multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet '    +\n            'lkj_corr lkj_corr_cholesky wishart inv_wishart',\n          // Stan's data types\n          'selector-tag':\n            'int real vector simplex unit_vector ordered positive_ordered '    +\n            'row_vector matrix cholesky_factor_corr cholesky_factor_cov '      +\n            'corr_matrix cov_matrix',\n          // Stan's model blocks\n          title:\n            'functions model data parameters quantities transformed '          +\n            'generated',\n          literal:\n            'true false'\n        },\n        relevance: 0\n      },\n      // The below is all taken from the R language definition\n      {\n        // hex value\n        className: 'number',\n        begin: \"0[xX][0-9a-fA-F]+[Li]?\\\\b\",\n        relevance: 0\n      },\n      {\n        // hex value\n        className: 'number',\n        begin: \"0[xX][0-9a-fA-F]+[Li]?\\\\b\",\n        relevance: 0\n      },\n      {\n        // explicit integer\n        className: 'number',\n        begin: \"\\\\d+(?:[eE][+\\\\-]?\\\\d*)?L\\\\b\",\n        relevance: 0\n      },\n      {\n        // number with trailing decimal\n        className: 'number',\n        begin: \"\\\\d+\\\\.(?!\\\\d)(?:i\\\\b)?\",\n        relevance: 0\n      },\n      {\n        // number\n        className: 'number',\n        begin: \"\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\",\n        relevance: 0\n      },\n      {\n        // number with leading decimal\n        className: 'number',\n        begin: \"\\\\.\\\\d+(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\",\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['vb'],\n    case_insensitive: true,\n    keywords: {\n      keyword:\n        'addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval ' + /* a-b */\n        'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */\n        'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */\n        'get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue ' + /* g-i */\n        'join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass ' + /* j-m */\n        'namespace narrowing new next not notinheritable notoverridable ' + /* n */\n        'of off on operator option optional or order orelse overloads overridable overrides ' + /* o */\n        'paramarray partial preserve private property protected public ' + /* p */\n        'raiseevent readonly redim rem removehandler resume return ' + /* r */\n        'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */\n        'take text then throw to try unicode until using when where while widening with withevents writeonly xor', /* t-x */\n      built_in:\n        'boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype ' +  /* b-c */\n        'date decimal directcast double gettype getxmlnamespace iif integer long object ' + /* d-o */\n        'sbyte short single string trycast typeof uinteger ulong ushort', /* s-u */\n      literal:\n        'true false nothing'\n    },\n    illegal: '//|{|}|endif|gosub|variant|wend|^\\\\$ ', /* reserved deprecated keywords */\n    contains: [\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '\"\"'}]}),\n      hljs.COMMENT(\n        '\\'',\n        '$',\n        {\n          returnBegin: true,\n          contains: [\n            {\n              className: 'doctag',\n              begin: '\\'\\'\\'|<!--|-->',\n              contains: [hljs.PHRASAL_WORDS_MODE]\n            },\n            {\n              className: 'doctag',\n              begin: '</?', end: '>',\n              contains: [hljs.PHRASAL_WORDS_MODE]\n            }\n          ]\n        }\n      ),\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta',\n        begin: '#', end: '$',\n        keywords: {'meta-keyword': 'if else elseif end region externalsource'}\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['bind', 'zone'],\n    keywords: {\n      keyword:\n        'IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX ' +\n        'LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT'\n    },\n    contains: [\n      hljs.COMMENT(';', '$', {relevance: 0}),\n      {\n        className: 'meta',\n        begin: /^\\$(TTL|GENERATE|INCLUDE|ORIGIN)\\b/\n      },\n      // IPv6\n      {\n        className: 'number',\n        begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))\\\\b'\n      },\n      // IPv4\n      {\n        className: 'number',\n        begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\b'\n      },\n      hljs.inherit(hljs.NUMBER_MODE, {begin: /\\b\\d+[dhwm]?/})\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n       keyword: 'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE ' +\n         'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 ' +\n         'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 ' +\n         'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 ' +\n         'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 ' +\n         'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 ' +\n         'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 ' +\n         'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 ' +\n         'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 ' +\n         'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 ' +\n         'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 ' +\n         'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 ' +\n         'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 ' +\n         'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 ' +\n         'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 ' +\n         'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER ' +\n         'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE ' +\n         'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH ' +\n         'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND ' +\n         'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ' +\n         'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE ' +\n         'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE ' +\n         'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING ' +\n         'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF ' +\n         'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY ' +\n         'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE ' +\n         'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR ' +\n         'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ' +\n         'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE ' +\n         'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE ' +\n         'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL ' +\n         'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN ' +\n         'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING ' +\n         'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM ' +\n         'NUMDAYS READ_DATE STAGING',\n       built_in: 'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML ' +\n         'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT ' +\n         'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE ' +\n         'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT ' +\n         'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'literal',\n        variants: [\n          {begin: '#\\\\s+[a-zA-Z\\\\ \\\\.]*', relevance: 0}, // looks like #-comment\n          {begin: '#[a-zA-Z\\\\ \\\\.]+'}\n        ]\n      }\n    ]\n  };\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__8bbf__;","module.exports = /*\n  Formal syntax is not published, helpful link:\n  https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf\n*/\nfunction(hljs) {\n\n  var TRANSPOSE_RE = '(\\'|\\\\.\\')+';\n  var TRANSPOSE = {\n    relevance: 0,\n    contains: [\n      { begin: TRANSPOSE_RE }\n    ]\n  };\n\n  return {\n    keywords: {\n      keyword:\n        'break case catch classdef continue else elseif end enumerated events for function ' +\n        'global if methods otherwise parfor persistent properties return spmd switch try while',\n      built_in:\n        'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan ' +\n        'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot ' +\n        'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog ' +\n        'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal ' +\n        'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli ' +\n        'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma ' +\n        'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms ' +\n        'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones ' +\n        'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ' +\n        'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril ' +\n        'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute ' +\n        'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan ' +\n        'isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal ' +\n        'rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table ' +\n        'readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun ' +\n        'legend intersect ismember procrustes hold num2cell '\n    },\n    illegal: '(//|\"|#|/\\\\*|\\\\s+/\\\\w+)',\n    contains: [\n      {\n        className: 'function',\n        beginKeywords: 'function', end: '$',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            className: 'params',\n            variants: [\n              {begin: '\\\\(', end: '\\\\)'},\n              {begin: '\\\\[', end: '\\\\]'}\n            ]\n          }\n        ]\n      },\n      {\n        className: 'built_in',\n        begin: /true|false/,\n        relevance: 0,\n        starts: TRANSPOSE\n      },\n      {\n        begin: '[a-zA-Z][a-zA-Z_0-9]*' + TRANSPOSE_RE,\n        relevance: 0\n      },\n      {\n        className: 'number',\n        begin: hljs.C_NUMBER_RE,\n        relevance: 0,\n        starts: TRANSPOSE\n      },\n      {\n        className: 'string',\n        begin: '\\'', end: '\\'',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {begin: '\\'\\''}]\n      },\n      {\n        begin: /\\]|}|\\)/,\n        relevance: 0,\n        starts: TRANSPOSE\n      },\n      {\n        className: 'string',\n        begin: '\"', end: '\"',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {begin: '\"\"'}\n        ],\n        starts: TRANSPOSE\n      },\n      hljs.COMMENT('^\\\\s*\\\\%\\\\{\\\\s*$', '^\\\\s*\\\\%\\\\}\\\\s*$'),\n      hljs.COMMENT('\\\\%', '$')\n    ]\n  };\n};","module.exports = function(hljs) {\n  var VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';\n  var CHAR = {\n    className: 'string',\n    begin: '\\\\$.{1}'\n  };\n  var SYMBOL = {\n    className: 'symbol',\n    begin: '#' + hljs.UNDERSCORE_IDENT_RE\n  };\n  return {\n    aliases: ['st'],\n    keywords: 'self super nil true false thisContext', // only 6\n    contains: [\n      hljs.COMMENT('\"', '\"'),\n      hljs.APOS_STRING_MODE,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][A-Za-z0-9_]*',\n        relevance: 0\n      },\n      {\n        begin: VAR_IDENT_RE + ':',\n        relevance: 0\n      },\n      hljs.C_NUMBER_MODE,\n      SYMBOL,\n      CHAR,\n      {\n        // This looks more complicated than needed to avoid combinatorial\n        // explosion under V8. It effectively means `| var1 var2 ... |` with\n        // whitespace adjacent to `|` being optional.\n        begin: '\\\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\\\|',\n        returnBegin: true, end: /\\|/,\n        illegal: /\\S/,\n        contains: [{begin: '(\\\\|[ ]*)?' + VAR_IDENT_RE}]\n      },\n      {\n        begin: '\\\\#\\\\(', end: '\\\\)',\n        contains: [\n          hljs.APOS_STRING_MODE,\n          CHAR,\n          hljs.C_NUMBER_MODE,\n          SYMBOL\n        ]\n      }\n    ]\n  };\n};","module.exports = /**\n * Known issues:\n *\n * - invalid hex string literals will be recognized as a double quoted strings\n *   but 'x' at the beginning of string will not be matched\n *\n * - delimited string literals are not checked for matching end delimiter\n *   (not possible to do with js regexp)\n *\n * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)\n *   also, content of token string is not validated to contain only valid D tokens\n *\n * - special token sequence rule is not strictly following D grammar (anything following #line\n *   up to the end of line is matched as special token sequence)\n */\n\nfunction(hljs) {\n  /**\n   * Language keywords\n   *\n   * @type {Object}\n   */\n  var D_KEYWORDS = {\n    keyword:\n      'abstract alias align asm assert auto body break byte case cast catch class ' +\n      'const continue debug default delete deprecated do else enum export extern final ' +\n      'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +\n      'interface invariant is lazy macro mixin module new nothrow out override package ' +\n      'pragma private protected public pure ref return scope shared static struct ' +\n      'super switch synchronized template this throw try typedef typeid typeof union ' +\n      'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +\n      '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',\n    built_in:\n      'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +\n      'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +\n      'wstring',\n    literal:\n      'false null true'\n  };\n\n  /**\n   * Number literal regexps\n   *\n   * @type {String}\n   */\n  var decimal_integer_re = '(0|[1-9][\\\\d_]*)',\n    decimal_integer_nosus_re = '(0|[1-9][\\\\d_]*|\\\\d[\\\\d_]*|[\\\\d_]+?\\\\d)',\n    binary_integer_re = '0[bB][01_]+',\n    hexadecimal_digits_re = '([\\\\da-fA-F][\\\\da-fA-F_]*|_[\\\\da-fA-F][\\\\da-fA-F_]*)',\n    hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re,\n\n    decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')',\n    decimal_float_re = '(' + decimal_integer_nosus_re + '(\\\\.\\\\d*|' + decimal_exponent_re + ')|' +\n                '\\\\d+\\\\.' + decimal_integer_nosus_re + decimal_integer_nosus_re + '|' +\n                '\\\\.' + decimal_integer_re + decimal_exponent_re + '?' +\n              ')',\n    hexadecimal_float_re = '(0[xX](' +\n                  hexadecimal_digits_re + '\\\\.' + hexadecimal_digits_re + '|'+\n                  '\\\\.?' + hexadecimal_digits_re +\n                 ')[pP][+-]?' + decimal_integer_nosus_re + ')',\n\n    integer_re = '(' +\n      decimal_integer_re + '|' +\n      binary_integer_re  + '|' +\n       hexadecimal_integer_re   +\n    ')',\n\n    float_re = '(' +\n      hexadecimal_float_re + '|' +\n      decimal_float_re  +\n    ')';\n\n  /**\n   * Escape sequence supported in D string and character literals\n   *\n   * @type {String}\n   */\n  var escape_sequence_re = '\\\\\\\\(' +\n              '[\\'\"\\\\?\\\\\\\\abfnrtv]|' +  // common escapes\n              'u[\\\\dA-Fa-f]{4}|' +     // four hex digit unicode codepoint\n              '[0-7]{1,3}|' +       // one to three octal digit ascii char code\n              'x[\\\\dA-Fa-f]{2}|' +    // two hex digit ascii char code\n              'U[\\\\dA-Fa-f]{8}' +      // eight hex digit unicode codepoint\n              ')|' +\n              '&[a-zA-Z\\\\d]{2,};';      // named character entity\n\n  /**\n   * D integer number literals\n   *\n   * @type {Object}\n   */\n  var D_INTEGER_MODE = {\n    className: 'number',\n      begin: '\\\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',\n      relevance: 0\n  };\n\n  /**\n   * [D_FLOAT_MODE description]\n   * @type {Object}\n   */\n  var D_FLOAT_MODE = {\n    className: 'number',\n    begin: '\\\\b(' +\n        float_re + '([fF]|L|i|[fF]i|Li)?|' +\n        integer_re + '(i|[fF]i|Li)' +\n      ')',\n    relevance: 0\n  };\n\n  /**\n   * D character literal\n   *\n   * @type {Object}\n   */\n  var D_CHARACTER_MODE = {\n    className: 'string',\n    begin: '\\'(' + escape_sequence_re + '|.)', end: '\\'',\n    illegal: '.'\n  };\n\n  /**\n   * D string escape sequence\n   *\n   * @type {Object}\n   */\n  var D_ESCAPE_SEQUENCE = {\n    begin: escape_sequence_re,\n    relevance: 0\n  };\n\n  /**\n   * D double quoted string literal\n   *\n   * @type {Object}\n   */\n  var D_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    contains: [D_ESCAPE_SEQUENCE],\n    end: '\"[cwd]?'\n  };\n\n  /**\n   * D wysiwyg and delimited string literals\n   *\n   * @type {Object}\n   */\n  var D_WYSIWYG_DELIMITED_STRING_MODE = {\n    className: 'string',\n    begin: '[rq]\"',\n    end: '\"[cwd]?',\n    relevance: 5\n  };\n\n  /**\n   * D alternate wysiwyg string literal\n   *\n   * @type {Object}\n   */\n  var D_ALTERNATE_WYSIWYG_STRING_MODE = {\n    className: 'string',\n    begin: '`',\n    end: '`[cwd]?'\n  };\n\n  /**\n   * D hexadecimal string literal\n   *\n   * @type {Object}\n   */\n  var D_HEX_STRING_MODE = {\n    className: 'string',\n    begin: 'x\"[\\\\da-fA-F\\\\s\\\\n\\\\r]*\"[cwd]?',\n    relevance: 10\n  };\n\n  /**\n   * D delimited string literal\n   *\n   * @type {Object}\n   */\n  var D_TOKEN_STRING_MODE = {\n    className: 'string',\n    begin: 'q\"\\\\{',\n    end: '\\\\}\"'\n  };\n\n  /**\n   * Hashbang support\n   *\n   * @type {Object}\n   */\n  var D_HASHBANG_MODE = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$',\n    relevance: 5\n  };\n\n  /**\n   * D special token sequence\n   *\n   * @type {Object}\n   */\n  var D_SPECIAL_TOKEN_SEQUENCE_MODE = {\n    className: 'meta',\n    begin: '#(line)',\n    end: '$',\n    relevance: 5\n  };\n\n  /**\n   * D attributes\n   *\n   * @type {Object}\n   */\n  var D_ATTRIBUTE_MODE = {\n    className: 'keyword',\n    begin: '@[a-zA-Z_][a-zA-Z_\\\\d]*'\n  };\n\n  /**\n   * D nesting comment\n   *\n   * @type {Object}\n   */\n  var D_NESTING_COMMENT_MODE = hljs.COMMENT(\n    '\\\\/\\\\+',\n    '\\\\+\\\\/',\n    {\n      contains: ['self'],\n      relevance: 10\n    }\n  );\n\n  return {\n    lexemes: hljs.UNDERSCORE_IDENT_RE,\n    keywords: D_KEYWORDS,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        D_NESTING_COMMENT_MODE,\n        D_HEX_STRING_MODE,\n        D_STRING_MODE,\n        D_WYSIWYG_DELIMITED_STRING_MODE,\n        D_ALTERNATE_WYSIWYG_STRING_MODE,\n        D_TOKEN_STRING_MODE,\n        D_FLOAT_MODE,\n        D_INTEGER_MODE,\n        D_CHARACTER_MODE,\n        D_HASHBANG_MODE,\n        D_SPECIAL_TOKEN_SEQUENCE_MODE,\n        D_ATTRIBUTE_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var XML_IDENT_RE = '[A-Za-z0-9\\\\._:-]+';\n  var TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr',\n        begin: XML_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: /=\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: 'string',\n            endsParent: true,\n            variants: [\n              {begin: /\"/, end: /\"/},\n              {begin: /'/, end: /'/},\n              {begin: /[^\\s\"'=<>`]+/}\n            ]\n          }\n        ]\n      }\n    ]\n  };\n  return {\n    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],\n    case_insensitive: true,\n    contains: [\n      {\n        className: 'meta',\n        begin: '<!DOCTYPE', end: '>',\n        relevance: 10,\n        contains: [{begin: '\\\\[', end: '\\\\]'}]\n      },\n      hljs.COMMENT(\n        '<!--',\n        '-->',\n        {\n          relevance: 10\n        }\n      ),\n      {\n        begin: '<\\\\!\\\\[CDATA\\\\[', end: '\\\\]\\\\]>',\n        relevance: 10\n      },\n      {\n        className: 'meta',\n        begin: /<\\?xml/, end: /\\?>/, relevance: 10\n      },\n      {\n        begin: /<\\?(php)?/, end: /\\?>/,\n        subLanguage: 'php',\n        contains: [\n          // We don't want the php closing tag ?> to close the PHP block when\n          // inside any of the following blocks:\n          {begin: '/\\\\*', end: '\\\\*/', skip: true},\n          {begin: 'b\"', end: '\"', skip: true},\n          {begin: 'b\\'', end: '\\'', skip: true},\n          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null, className: null, contains: null, skip: true}),\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null, className: null, contains: null, skip: true})\n        ]\n      },\n      {\n        className: 'tag',\n        /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending braket. The '$' is needed for the lexeme to be recognized\n        by hljs.subMode() that tests lexemes outside the stream.\n        */\n        begin: '<style(?=\\\\s|>|$)', end: '>',\n        keywords: {name: 'style'},\n        contains: [TAG_INTERNALS],\n        starts: {\n          end: '</style>', returnEnd: true,\n          subLanguage: ['css', 'xml']\n        }\n      },\n      {\n        className: 'tag',\n        // See the comment in the <style tag about the lookahead pattern\n        begin: '<script(?=\\\\s|>|$)', end: '>',\n        keywords: {name: 'script'},\n        contains: [TAG_INTERNALS],\n        starts: {\n          end: '\\<\\/script\\>', returnEnd: true,\n          subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']\n        }\n      },\n      {\n        className: 'tag',\n        begin: '</?', end: '/?>',\n        contains: [\n          {\n            className: 'name', begin: /[^\\/><\\s]+/, relevance: 0\n          },\n          TAG_INTERNALS\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n    return {\n      keywords: {\n        keyword:\n          'println readln print import module function local return let var ' +\n          'while for foreach times in case when match with break continue ' +\n          'augment augmentation each find filter reduce ' +\n          'if then else otherwise try catch finally raise throw orIfNull ' +\n          'DynamicObject|10 DynamicVariable struct Observable map set vector list array',\n        literal:\n          'true false null'\n      },\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        hljs.QUOTE_STRING_MODE,\n        hljs.C_NUMBER_MODE,\n        {\n          className: 'meta', begin: '@[A-Za-z]+'\n        }\n      ]\n    }\n};","module.exports = function(hljs) {\n  var CPP = hljs.getLanguage('cpp').exports;\n\treturn {\n    keywords: {\n      keyword:\n        'boolean byte word string String array ' + CPP.keywords.keyword,\n      built_in:\n        'setup loop while catch for if do goto try switch case else ' +\n        'default break continue return ' +\n        'KeyboardController MouseController SoftwareSerial ' +\n        'EthernetServer EthernetClient LiquidCrystal ' +\n        'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' +\n        'HttpClient RobotMotor WiFiClient GSMScanner ' +\n        'FileSystem Scheduler GSMServer YunClient YunServer ' +\n        'IPAddress GSMClient GSMModem Keyboard Ethernet ' +\n        'Console GSMBand Esplora Stepper Process ' +\n        'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' +\n        'Client Server GSMPIN FileIO Bridge Serial ' +\n        'EEPROM Stream Mouse Audio Servo File Task ' +\n        'GPRS WiFi Wire TFT GSM SPI SD ' +\n        'runShellCommandAsynchronously analogWriteResolution ' +\n        'retrieveCallingNumber printFirmwareVersion ' +\n        'analogReadResolution sendDigitalPortPair ' +\n        'noListenOnLocalhost readJoystickButton setFirmwareVersion ' +\n        'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' +\n        'scrollDisplayLeft writeMicroseconds delayMicroseconds ' +\n        'beginTransmission getSignalStrength runAsynchronously ' +\n        'getAsynchronously listenOnLocalhost getCurrentCarrier ' +\n        'readAccelerometer messageAvailable sendDigitalPorts ' +\n        'lineFollowConfig countryNameWrite runShellCommand ' +\n        'readStringUntil rewindDirectory readTemperature ' +\n        'setClockDivider readLightSensor endTransmission ' +\n        'analogReference detachInterrupt countryNameRead ' +\n        'attachInterrupt encryptionType readBytesUntil ' +\n        'robotNameWrite readMicrophone robotNameRead cityNameWrite ' +\n        'userNameWrite readJoystickY readJoystickX mouseReleased ' +\n        'openNextFile scanNetworks noInterrupts digitalWrite ' +\n        'beginSpeaker mousePressed isActionDone mouseDragged ' +\n        'displayLogos noAutoscroll addParameter remoteNumber ' +\n        'getModifiers keyboardRead userNameRead waitContinue ' +\n        'processInput parseCommand printVersion readNetworks ' +\n        'writeMessage blinkVersion cityNameRead readMessage ' +\n        'setDataMode parsePacket isListening setBitOrder ' +\n        'beginPacket isDirectory motorsWrite drawCompass ' +\n        'digitalRead clearScreen serialEvent rightToLeft ' +\n        'setTextSize leftToRight requestFrom keyReleased ' +\n        'compassRead analogWrite interrupts WiFiServer ' +\n        'disconnect playMelody parseFloat autoscroll ' +\n        'getPINUsed setPINUsed setTimeout sendAnalog ' +\n        'readSlider analogRead beginWrite createChar ' +\n        'motorsStop keyPressed tempoWrite readButton ' +\n        'subnetMask debugPrint macAddress writeGreen ' +\n        'randomSeed attachGPRS readString sendString ' +\n        'remotePort releaseAll mouseMoved background ' +\n        'getXChange getYChange answerCall getResult ' +\n        'voiceCall endPacket constrain getSocket writeJSON ' +\n        'getButton available connected findUntil readBytes ' +\n        'exitValue readGreen writeBlue startLoop IPAddress ' +\n        'isPressed sendSysex pauseMode gatewayIP setCursor ' +\n        'getOemKey tuneWrite noDisplay loadImage switchPIN ' +\n        'onRequest onReceive changePIN playFile noBuffer ' +\n        'parseInt overflow checkPIN knobRead beginTFT ' +\n        'bitClear updateIR bitWrite position writeRGB ' +\n        'highByte writeRed setSpeed readBlue noStroke ' +\n        'remoteIP transfer shutdown hangCall beginSMS ' +\n        'endWrite attached maintain noCursor checkReg ' +\n        'checkPUK shiftOut isValid shiftIn pulseIn ' +\n        'connect println localIP pinMode getIMEI ' +\n        'display noBlink process getBand running beginSD ' +\n        'drawBMP lowByte setBand release bitRead prepare ' +\n        'pointTo readRed setMode noFill remove listen ' +\n        'stroke detach attach noTone exists buffer ' +\n        'height bitSet circle config cursor random ' +\n        'IRread setDNS endSMS getKey micros ' +\n        'millis begin print write ready flush width ' +\n        'isPIN blink clear press mkdir rmdir close ' +\n        'point yield image BSSID click delay ' +\n        'read text move peek beep rect line open ' +\n        'seek fill size turn stop home find ' +\n        'step tone sqrt RSSI SSID ' +\n        'end bit tan cos sin pow map abs max ' +\n        'min get run put',\n      literal:\n        'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' +\n        'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' +\n        'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' +\n        'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' +\n        'DEFAULT OUTPUT INPUT HIGH LOW'\n    },\n    contains: [\n      CPP.preprocessor,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n    var GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';\n    var GCODE_CLOSE_RE = '\\\\%';\n    var GCODE_KEYWORDS =\n      'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' +\n      'EQ LT GT NE GE LE OR XOR';\n    var GCODE_START = {\n        className: 'meta',\n        begin: '([O])([0-9]+)'\n    };\n    var GCODE_CODE = [\n        hljs.C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        hljs.COMMENT(/\\(/, /\\)/),\n        hljs.inherit(hljs.C_NUMBER_MODE, {begin: '([-+]?([0-9]*\\\\.?[0-9]+\\\\.?))|' + hljs.C_NUMBER_RE}),\n        hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),\n        hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n        {\n            className: 'name',\n            begin: '([G])([0-9]+\\\\.?[0-9]?)'\n        },\n        {\n            className: 'name',\n            begin: '([M])([0-9]+\\\\.?[0-9]?)'\n        },\n        {\n            className: 'attr',\n            begin: '(VC|VS|#)',\n            end: '(\\\\d+)'\n        },\n        {\n            className: 'attr',\n            begin: '(VZOFX|VZOFY|VZOFZ)'\n        },\n        {\n            className: 'built_in',\n            begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\\\[)',\n            end: '([-+]?([0-9]*\\\\.?[0-9]+\\\\.?))(\\\\])'\n        },\n        {\n            className: 'symbol',\n            variants: [\n                {\n                    begin: 'N', end: '\\\\d+',\n                    illegal: '\\\\W'\n                }\n            ]\n        }\n    ];\n\n    return {\n        aliases: ['nc'],\n        // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.\n        // However, most prefer all uppercase and uppercase is customary.\n        case_insensitive: true,\n        lexemes: GCODE_IDENT_RE,\n        keywords: GCODE_KEYWORDS,\n        contains: [\n            {\n                className: 'meta',\n                begin: GCODE_CLOSE_RE\n            },\n            GCODE_START\n        ].concat(GCODE_CODE)\n    };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      'and elif is global as in if from raise for except finally print import pass return ' +\n      'exec else break not with class assert yield try while continue del or def lambda ' +\n      'async await nonlocal|10',\n    built_in:\n      'Ellipsis NotImplemented',\n    literal: 'False None True'\n  };\n  var PROMPT = {\n    className: 'meta',  begin: /^(>>>|\\.\\.\\.) /\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: /\\{/, end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: /(u|b)?r?'''/, end: /'''/,\n        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n        relevance: 10\n      },\n      {\n        begin: /(u|b)?r?\"\"\"/, end: /\"\"\"/,\n        contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n        relevance: 10\n      },\n      {\n        begin: /(fr|rf|f)'''/, end: /'''/,\n        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, SUBST]\n      },\n      {\n        begin: /(fr|rf|f)\"\"\"/, end: /\"\"\"/,\n        contains: [hljs.BACKSLASH_ESCAPE, PROMPT, SUBST]\n      },\n      {\n        begin: /(u|r|ur)'/, end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)\"/, end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /(b|br)'/, end: /'/\n      },\n      {\n        begin: /(b|br)\"/, end: /\"/\n      },\n      {\n        begin: /(fr|rf|f)'/, end: /'/,\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n      },\n      {\n        begin: /(fr|rf|f)\"/, end: /\"/,\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n  var NUMBER = {\n    className: 'number', relevance: 0,\n    variants: [\n      {begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?'},\n      {begin: '\\\\b(0o[0-7]+)[lLjJ]?'},\n      {begin: hljs.C_NUMBER_RE + '[lLjJ]?'}\n    ]\n  };\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/, end: /\\)/,\n    contains: ['self', PROMPT, NUMBER, STRING]\n  };\n  SUBST.contains = [STRING, NUMBER, PROMPT];\n  return {\n    aliases: ['py', 'gyp', 'ipython'],\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      STRING,\n      hljs.HASH_COMMENT_MODE,\n      {\n        variants: [\n          {className: 'function', beginKeywords: 'def'},\n          {className: 'class', beginKeywords: 'class'}\n        ],\n        end: /:/,\n        illegal: /[${=;\\n,]/,\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          PARAMS,\n          {\n            begin: /->/, endsWithParent: true,\n            keywords: 'None'\n          }\n        ]\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/, end: /$/\n      },\n      {\n        begin: /\\b(print|exec)\\(/ // don’t highlight keywords-turned-functions in Python 3\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    keywords: {\n      keyword:\n        'task project allprojects subprojects artifacts buildscript configurations ' +\n        'dependencies repositories sourceSets description delete from into include ' +\n        'exclude source classpath destinationDir includes options sourceCompatibility ' +\n        'targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant ' +\n        'def abstract break case catch continue default do else extends final finally ' +\n        'for if implements instanceof native new private protected public return static ' +\n        'switch synchronized throw throws transient try volatile while strictfp package ' +\n        'import false null super this true antlrtask checkstyle codenarc copy boolean ' +\n        'byte char class double float int interface long short void compile runTime ' +\n        'file fileTree abs any append asList asWritable call collect compareTo count ' +\n        'div dump each eachByte eachFile eachLine every find findAll flatten getAt ' +\n        'getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods ' +\n        'isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter ' +\n        'newReader newWriter next plus pop power previous print println push putAt read ' +\n        'readBytes readLines reverse reverseEach round size sort splitEachLine step subMap ' +\n        'times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader ' +\n        'withStream withWriter withWriterAppend write writeLine'\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE,\n      hljs.REGEXP_MODE\n\n    ]\n  }\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      'actor addressof and as be break class compile_error compile_intrinsic ' +\n      'consume continue delegate digestof do else elseif embed end error ' +\n      'for fun if ifdef in interface is isnt lambda let match new not object ' +\n      'or primitive recover repeat return struct then trait try type until ' +\n      'use var where while with xor',\n    meta:\n      'iso val tag trn box ref',\n    literal:\n      'this false true'\n  };\n\n  var TRIPLE_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"\"\"', end: '\"\"\"',\n    relevance: 10\n  };\n\n  var QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n\n  var SINGLE_QUOTE_CHAR_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n\n  var TYPE_NAME = {\n    className: 'type',\n    begin: '\\\\b_?[A-Z][\\\\w]*',\n    relevance: 0\n  };\n\n  var PRIMED_NAME = {\n    begin: hljs.IDENT_RE + '\\'', relevance: 0\n  };\n\n  /**\n   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify\n   * highlighting and fix cases like\n   * ```\n   * interface Iterator[A: A]\n   *   fun has_next(): Bool\n   *   fun next(): A?\n   * ```\n   * where it is valid to have a function head without a body\n   */\n\n  return {\n    keywords: KEYWORDS,\n    contains: [\n      TYPE_NAME,\n      TRIPLE_QUOTE_STRING_MODE,\n      QUOTE_STRING_MODE,\n      SINGLE_QUOTE_CHAR_MODE,\n      PRIMED_NAME,\n      hljs.C_NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n};","module.exports = function (hljs) {\n  var KEYWORDS =\n    'false synchronized int abstract float private char boolean static null if const ' +\n    'for true while long throw strictfp finally protected import native final return void ' +\n    'enum else extends implements break transient new catch instanceof byte super volatile case ' +\n    'assert short package default double public try this switch continue throws privileged ' +\n    'aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization ' +\n    'staticinitialization withincode target within execution getWithinTypeName handler ' +\n    'thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents '+\n    'warning error soft precedence thisAspectInstance';\n  var SHORTKEYS = 'get set args call';\n  return {\n    keywords : KEYWORDS,\n    illegal : /<\\/|#/,\n    contains : [\n      hljs.COMMENT(\n        '/\\\\*\\\\*',\n        '\\\\*/',\n        {\n          relevance : 0,\n          contains : [\n            {\n              // eat up @'s in emails to prevent them to be recognized as doctags\n              begin: /\\w+@/, relevance: 0\n            },\n            {\n              className : 'doctag',\n              begin : '@[A-Za-z]+'\n            }\n          ]\n        }\n      ),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className : 'class',\n        beginKeywords : 'aspect',\n        end : /[{;=]/,\n        excludeEnd : true,\n        illegal : /[:;\"\\[\\]]/,\n        contains : [\n          {\n            beginKeywords : 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton'\n          },\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            begin : /\\([^\\)]*/,\n            end : /[)]+/,\n            keywords : KEYWORDS + ' ' + SHORTKEYS,\n            excludeEnd : false\n          }\n        ]\n      },\n      {\n        className : 'class',\n        beginKeywords : 'class interface',\n        end : /[{;=]/,\n        excludeEnd : true,\n        relevance: 0,\n        keywords : 'class interface',\n        illegal : /[:\"\\[\\]]/,\n        contains : [\n          {beginKeywords : 'extends implements'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        // AspectJ Constructs\n        beginKeywords : 'pointcut after before around throwing returning',\n        end : /[)]/,\n        excludeEnd : false,\n        illegal : /[\"\\[\\]]/,\n        contains : [\n          {\n            begin : hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(',\n            returnBegin : true,\n            contains : [hljs.UNDERSCORE_TITLE_MODE]\n          }\n        ]\n      },\n      {\n        begin : /[:]/,\n        returnBegin : true,\n        end : /[{;]/,\n        relevance: 0,\n        excludeEnd : false,\n        keywords : KEYWORDS,\n        illegal : /[\"\\[\\]]/,\n        contains : [\n          {\n            begin : hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(',\n            keywords : KEYWORDS + ' ' + SHORTKEYS,\n            relevance: 0\n          },\n          hljs.QUOTE_STRING_MODE\n        ]\n      },\n      {\n        // this prevents 'new Name(...), or throw ...' from being recognized as a function definition\n        beginKeywords : 'new throw',\n        relevance : 0\n      },\n      {\n        // the function class is a bit different for AspectJ compared to the Java language\n        className : 'function',\n        begin : /\\w+ +\\w+(\\.)?\\w+\\s*\\([^\\)]*\\)\\s*((throws)[\\w\\s,]+)?[\\{;]/,\n        returnBegin : true,\n        end : /[{;=]/,\n        keywords : KEYWORDS,\n        excludeEnd : true,\n        contains : [\n          {\n            begin : hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(',\n            returnBegin : true,\n            relevance: 0,\n            contains : [hljs.UNDERSCORE_TITLE_MODE]\n          },\n          {\n            className : 'params',\n            begin : /\\(/, end : /\\)/,\n            relevance: 0,\n            keywords : KEYWORDS,\n            contains : [\n              hljs.APOS_STRING_MODE,\n              hljs.QUOTE_STRING_MODE,\n              hljs.C_NUMBER_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      hljs.C_NUMBER_MODE,\n      {\n        // annotation is also used in this language\n        className : 'meta',\n        begin : '@[A-Za-z]+'\n      }\n    ]\n  };\n};","'use strict';\n\nvar hljs = require('highlight.js');\n\nvar vueHighlightJS = {};\nvueHighlightJS.install = function install(Vue) {\n  Vue.directive('highlightjs', {\n    deep: true,\n    bind: function bind(el, binding) {\n      // on first bind, highlight all targets\n      var targets = el.querySelectorAll('code');\n      var target;\n      var i;\n\n      for (i = 0; i < targets.length; i += 1) {\n        target = targets[i];\n\n        if (typeof binding.value === 'string') {\n          // if a value is directly assigned to the directive, use this\n          // instead of the element content.\n          target.textContent = binding.value;\n        }\n\n        hljs.highlightBlock(target);\n      }\n    },\n    componentUpdated: function componentUpdated(el, binding) {\n      // after an update, re-fill the content and then highlight\n      var targets = el.querySelectorAll('code');\n      var target;\n      var i;\n\n      for (i = 0; i < targets.length; i += 1) {\n        target = targets[i];\n        if (typeof binding.value === 'string') {\n          target.textContent = binding.value;\n          hljs.highlightBlock(target);\n        }\n      }\n    },\n  });\n};\n\nmodule.exports = vueHighlightJS;\n","module.exports = function(hljs) {\n  return {\n    contains: [\n      // IP\n      {\n        className: 'number',\n        begin: '\\\\b\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}(:\\\\d{1,5})?\\\\b'\n      },\n      // Other numbers\n      {\n        className: 'number',\n        begin: '\\\\b\\\\d+\\\\b',\n        relevance: 0\n      },\n      // Requests\n      {\n        className: 'string',\n        begin: '\"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)', end: '\"',\n        keywords: 'GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE',\n        illegal: '\\\\n',\n        relevance: 10\n      },\n      // Dates\n      {\n        className: 'string',\n        begin: /\\[/, end: /\\]/,\n        illegal: '\\\\n'\n      },\n      // Strings\n      {\n        className: 'string',\n        begin: '\"', end: '\"',\n        illegal: '\\\\n'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var LISP_IDENT_RE = '[a-zA-Z_\\\\-\\\\+\\\\*\\\\/\\\\<\\\\=\\\\>\\\\&\\\\#][a-zA-Z0-9_\\\\-\\\\+\\\\*\\\\/\\\\<\\\\=\\\\>\\\\&\\\\#!]*';\n  var MEC_RE = '\\\\|[^]*?\\\\|';\n  var LISP_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|\\\\-)?\\\\d+)?';\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!', end: '$'\n  };\n  var LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      {begin: LISP_SIMPLE_NUMBER_RE, relevance: 0},\n      {begin: '#(b|B)[0-1]+(/[0-1]+)?'},\n      {begin: '#(o|O)[0-7]+(/[0-7]+)?'},\n      {begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'},\n      {begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE, end: '\\\\)'}\n    ]\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';', '$',\n    {\n      relevance: 0\n    }\n  );\n  var VARIABLE = {\n    begin: '\\\\*', end: '\\\\*'\n  };\n  var KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  var IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  var MEC = {\n    begin: MEC_RE\n  };\n  var QUOTED_LIST = {\n    begin: '\\\\(', end: '\\\\)',\n    contains: ['self', LITERAL, STRING, NUMBER, IDENT]\n  };\n  var QUOTED = {\n    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],\n    variants: [\n      {\n        begin: '[\\'`]\\\\(', end: '\\\\)'\n      },\n      {\n        begin: '\\\\(quote ', end: '\\\\)',\n        keywords: {name: 'quote'}\n      },\n      {\n        begin: '\\'' + MEC_RE\n      }\n    ]\n  };\n  var QUOTED_ATOM = {\n    variants: [\n      {begin: '\\'' + LISP_IDENT_RE},\n      {begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'}\n    ]\n  };\n  var LIST = {\n    begin: '\\\\(\\\\s*', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [\n    {\n      className: 'name',\n      variants: [\n        {begin: LISP_IDENT_RE},\n        {begin: MEC_RE}\n      ]\n    },\n    BODY\n  ];\n  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];\n\n  return {\n    illegal: /\\S/,\n    contains: [\n      NUMBER,\n      SHEBANG,\n      LITERAL,\n      STRING,\n      COMMENT,\n      QUOTED,\n      QUOTED_ATOM,\n      LIST,\n      IDENT\n    ]\n  };\n};","module.exports = function(hljs) {\n  var API_CLASS = {\n    className: 'built_in',\n    begin: '\\\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\\\w+',\n  };\n  var OBJC_KEYWORDS = {\n    keyword:\n      'int float while char export sizeof typedef const struct for union ' +\n      'unsigned long volatile static bool mutable if do return goto void ' +\n      'enum else break extern asm case short default double register explicit ' +\n      'signed typename this switch continue wchar_t inline readonly assign ' +\n      'readwrite self @synchronized id typeof ' +\n      'nonatomic super unichar IBOutlet IBAction strong weak copy ' +\n      'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' +\n      '@private @protected @public @try @property @end @throw @catch @finally ' +\n      '@autoreleasepool @synthesize @dynamic @selector @optional @required ' +\n      '@encode @package @import @defs @compatibility_alias ' +\n      '__bridge __bridge_transfer __bridge_retained __bridge_retain ' +\n      '__covariant __contravariant __kindof ' +\n      '_Nonnull _Nullable _Null_unspecified ' +\n      '__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' +\n      'getter setter retain unsafe_unretained ' +\n      'nonnull nullable null_unspecified null_resettable class instancetype ' +\n      'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' +\n      'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' +\n      'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' +\n      'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' +\n      'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' +\n      'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',\n    literal:\n      'false true FALSE TRUE nil YES NO NULL',\n    built_in:\n      'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'\n  };\n  var LEXEMES = /[a-zA-Z@][a-zA-Z0-9_]*/;\n  var CLASS_KEYWORDS = '@interface @class @protocol @implementation';\n  return {\n    aliases: ['mm', 'objc', 'obj-c'],\n    keywords: OBJC_KEYWORDS,\n    lexemes: LEXEMES,\n    illegal: '</',\n    contains: [\n      API_CLASS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        variants: [\n          {\n            begin: '@\"', end: '\"',\n            illegal: '\\\\n',\n            contains: [hljs.BACKSLASH_ESCAPE]\n          },\n          {\n            begin: '\\'', end: '[^\\\\\\\\]\\'',\n            illegal: '[^\\\\\\\\][^\\']'\n          }\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '#',\n        end: '$',\n        contains: [\n          {\n            className: 'meta-string',\n            variants: [\n              { begin: '\\\"', end: '\\\"' },\n              { begin: '<', end: '>' }\n            ]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        begin: '(' + CLASS_KEYWORDS.split(' ').join('|') + ')\\\\b', end: '({|$)', excludeEnd: true,\n        keywords: CLASS_KEYWORDS, lexemes: LEXEMES,\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        begin: '\\\\.'+hljs.UNDERSCORE_IDENT_RE,\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: 'b\"', end: '\"'\n      },\n      {\n        begin: 'b\\'', end: '\\''\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})\n    ]\n  };\n  var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};\n  return {\n    aliases: ['zep'],\n    case_insensitive: true,\n    keywords:\n      'and include_once list abstract global private echo interface as static endswitch ' +\n      'array null if endwhile or const for endforeach self var let while isset public ' +\n      'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +\n      'return parent clone use __CLASS__ __LINE__ else break print eval new ' +\n      'catch __METHOD__ case exception default die require __FUNCTION__ ' +\n      'enddeclare final try switch continue endfor endif declare unset true false ' +\n      'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +\n      'yield finally int uint long ulong char uchar double float bool boolean string' +\n      'likely unlikely',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.HASH_COMMENT_MODE,\n      hljs.COMMENT(\n        '/\\\\*',\n        '\\\\*/',\n        {\n          contains: [\n            {\n              className: 'doctag',\n              begin: '@[A-Za-z]+'\n            }\n          ]\n        }\n      ),\n      hljs.COMMENT(\n        '__halt_compiler.+?;',\n        false,\n        {\n          endsWithParent: true,\n          keywords: '__halt_compiler',\n          lexemes: hljs.UNDERSCORE_IDENT_RE\n        }\n      ),\n      {\n        className: 'string',\n        begin: '<<<[\\'\"]?\\\\w+[\\'\"]?$', end: '^\\\\w+;',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        // swallow composed identifiers to avoid parsing them as keywords\n        begin: /(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /[;{]/, excludeEnd: true,\n        illegal: '\\\\$|\\\\[|%',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            className: 'params',\n            begin: '\\\\(', end: '\\\\)',\n            contains: [\n              'self',\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRING,\n              NUMBER\n            ]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: '{', excludeEnd: true,\n        illegal: /[:\\(\\$\"]/,\n        contains: [\n          {beginKeywords: 'extends implements'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'namespace', end: ';',\n        illegal: /[\\.']/,\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        beginKeywords: 'use', end: ';',\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        begin: '=>' // No markup, just a relevance booster\n      },\n      STRING,\n      NUMBER\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  var ANNOTATION = { className: 'meta', begin: '@[A-Za-z]+' };\n\n  // used in strings for escaping/interpolation/substitution\n  var SUBST = {\n    className: 'subst',\n    variants: [\n      {begin: '\\\\$[A-Za-z0-9_]+'},\n      {begin: '\\\\${', end: '}'}\n    ]\n  };\n\n  var STRING = {\n    className: 'string',\n    variants: [\n      {\n        begin: '\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '\"\"\"', end: '\"\"\"',\n        relevance: 10\n      },\n      {\n        begin: '[a-z]+\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n      },\n      {\n        className: 'string',\n        begin: '[a-z]+\"\"\"', end: '\"\"\"',\n        contains: [SUBST],\n        relevance: 10\n      }\n    ]\n\n  };\n\n  var SYMBOL = {\n    className: 'symbol',\n    begin: '\\'\\\\w[\\\\w\\\\d_]*(?!\\')'\n  };\n\n  var TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][A-Za-z0-9_]*',\n    relevance: 0\n  };\n\n  var NAME = {\n    className: 'title',\n    begin: /[^0-9\\n\\t \"'(),.`{}\\[\\]:;][^\\n\\t \"'(),.`{}\\[\\]:;]+|[^0-9\\n\\t \"'(),.`{}\\[\\]:;=]/,\n    relevance: 0\n  };\n\n  var CLASS = {\n    className: 'class',\n    beginKeywords: 'class object trait type',\n    end: /[:={\\[\\n;]/,\n    excludeEnd: true,\n    contains: [\n      {\n        beginKeywords: 'extends with',\n        relevance: 10\n      },\n      {\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0,\n        contains: [TYPE]\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0,\n        contains: [TYPE]\n      },\n      NAME\n    ]\n  };\n\n  var METHOD = {\n    className: 'function',\n    beginKeywords: 'def',\n    end: /[:={\\[(\\n;]/,\n    excludeEnd: true,\n    contains: [NAME]\n  };\n\n  return {\n    keywords: {\n      literal: 'true false null',\n      keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      STRING,\n      SYMBOL,\n      TYPE,\n      METHOD,\n      CLASS,\n      hljs.C_NUMBER_MODE,\n      ANNOTATION\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        'float color point normal vector matrix while for if do return else break extern continue',\n      built_in:\n        'abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise ' +\n        'clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp ' +\n        'faceforward filterstep floor format fresnel incident length lightsource log match ' +\n        'max min mod noise normalize ntransform opposite option phong pnoise pow printf ' +\n        'ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp ' +\n        'setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan ' +\n        'texture textureinfo trace transform vtransform xcomp ycomp zcomp'\n    },\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta',\n        begin: '#', end: '$'\n      },\n      {\n        className: 'class',\n        beginKeywords: 'surface displacement light volume imager', end: '\\\\('\n      },\n      {\n        beginKeywords: 'illuminate illuminance gather', end: '\\\\('\n      }\n    ]\n  };\n};","module.exports = function (hljs) {\n\n    var CHAR = {\n        className: 'string',\n        begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n    };\n\n    var STRING = {\n        className: 'string',\n        variants: [\n            {\n                begin: '\"', end: '\"'\n            }\n        ]\n    };\n\n    var NAME = {\n        className: 'title',\n        begin: /[^0-9\\n\\t \"'(),.`{}\\[\\]:;][^\\n\\t \"'(),.`{}\\[\\]:;]+|[^0-9\\n\\t \"'(),.`{}\\[\\]:;=]/\n    };\n\n    var METHOD = {\n        className: 'function',\n        beginKeywords: 'def',\n        end: /[:={\\[(\\n;]/,\n        excludeEnd: true,\n        contains: [NAME]\n    };\n\n    return {\n        keywords: {\n            literal: 'true false',\n            keyword: 'case class def else enum if impl import in lat rel index let match namespace switch type yield with'\n        },\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            CHAR,\n            STRING,\n            METHOD,\n            hljs.C_NUMBER_MODE\n        ]\n    };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    lexemes: '[.%]?' + hljs.IDENT_RE,\n    keywords: {\n      keyword:\n        'lock rep repe repz repne repnz xaquire xrelease bnd nobnd ' +\n        'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',\n      built_in:\n        // Instruction pointer\n        'ip eip rip ' +\n        // 8-bit registers\n        'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ' +\n        // 16-bit registers\n        'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w ' +\n        // 32-bit registers\n        'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d ' +\n        // 64-bit registers\n        'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 ' +\n        // Segment registers\n        'cs ds es fs gs ss ' +\n        // Floating point stack registers\n        'st st0 st1 st2 st3 st4 st5 st6 st7 ' +\n        // MMX Registers\n        'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 ' +\n        // SSE registers\n        'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 ' +\n        'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ' +\n        // AVX registers\n        'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ' +\n        'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 ' +\n        // AVX-512F registers\n        'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 ' +\n        'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 ' +\n        // AVX-512F mask registers\n        'k0 k1 k2 k3 k4 k5 k6 k7 ' +\n        // Bound (MPX) register\n        'bnd0 bnd1 bnd2 bnd3 ' +\n        // Special register\n        'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 ' +\n        // NASM altreg package\n        'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b ' +\n        'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d ' +\n        'r0h r1h r2h r3h ' +\n        'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l ' +\n\n        'db dw dd dq dt ddq do dy dz ' +\n        'resb resw resd resq rest resdq reso resy resz ' +\n        'incbin equ times ' +\n        'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',\n\n      meta:\n        '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif ' +\n        '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep ' +\n        '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment ' +\n        '.nolist ' +\n        '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ ' +\n        '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend ' +\n        'align alignb sectalign daz nodaz up down zero default option assume public ' +\n\n        'bits use16 use32 use64 default section segment absolute extern global common cpu float ' +\n        '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ ' +\n        '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ ' +\n        '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e ' +\n        'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'\n    },\n    contains: [\n      hljs.COMMENT(\n        ';',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      {\n        className: 'number',\n        variants: [\n          // Float number and x87 BCD\n          {\n            begin: '\\\\b(?:([0-9][0-9_]*)?\\\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|' +\n                   '(0[Xx])?[0-9][0-9_]*\\\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\\\b',\n            relevance: 0\n          },\n\n          // Hex number in $\n          { begin: '\\\\$[0-9][0-9A-Fa-f]*', relevance: 0 },\n\n          // Number in H,D,T,Q,O,B,Y suffix\n          { begin: '\\\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\\\b' },\n\n          // Number in X,D,T,Q,O,B,Y prefix\n          { begin: '\\\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\\\b'}\n        ]\n      },\n      // Double quote string\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        variants: [\n          // Single-quoted string\n          { begin: '\\'', end: '[^\\\\\\\\]\\'' },\n          // Backquoted string\n          { begin: '`', end: '[^\\\\\\\\]`' }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'symbol',\n        variants: [\n          // Global label and local label\n          { begin: '^\\\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\\\s+label)' },\n          // Macro-local label\n          { begin: '^\\\\s*%%[A-Za-z0-9_$#@~.?]*:' }\n        ],\n        relevance: 0\n      },\n      // Macro parameter\n      {\n        className: 'subst',\n        begin: '%[0-9]+',\n        relevance: 0\n      },\n      // Macro parameter\n      {\n        className: 'subst',\n        begin: '%!\\S+',\n        relevance: 0\n      },\n      {\n        className: 'meta',\n        begin: /^\\s*\\.[\\w_-]+/\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    illegal: '^\\.',\n    // Support explicitely typed variables that end with $%! or #.\n    lexemes: '[a-zA-Z][a-zA-Z0-9_\\$\\%\\!\\#]*',\n    keywords: {\n        keyword:\n          'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' +\n          'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' +\n          'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' +\n          'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' +\n          'HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' +\n          'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' +\n          'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' +\n          'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' +\n          'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' +\n          'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' +\n          'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' +\n          'WEND WIDTH WINDOW WRITE XOR'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('REM', '$', {relevance: 10}),\n      hljs.COMMENT('\\'', '$', {relevance: 0}),\n      {\n        // Match line numbers\n        className: 'symbol',\n        begin: '^[0-9]+\\ ',\n        relevance: 10\n      },\n      {\n        // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)\n        className: 'number',\n        begin: '\\\\b([0-9]+[0-9edED\\.]*[#\\!]?)',\n        relevance: 0\n      },\n      {\n        // Match hexadecimal numbers (&Hxxxx)\n        className: 'number',\n        begin: '(\\&[hH][0-9a-fA-F]{1,4})'\n      },\n      {\n        // Match octal numbers (&Oxxxxxx)\n        className: 'number',\n        begin: '(\\&[oO][0-7]{1,6})'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['tk'],\n    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +\n      'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +\n      'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +\n      'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +\n      'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +\n      'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+\n      'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+\n      'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+\n      'return safe scan seek set socket source split string subst switch tcl_endOfWord '+\n      'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+\n      'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+\n      'uplevel upvar variable vwait while',\n    contains: [\n      hljs.COMMENT(';[ \\\\t]*#', '$'),\n      hljs.COMMENT('^[ \\\\t]*#', '$'),\n      {\n        beginKeywords: 'proc',\n        end: '[\\\\{]',\n        excludeEnd: true,\n        contains: [\n          {\n            className: 'title',\n            begin: '[ \\\\t\\\\n\\\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n            end: '[ \\\\t\\\\n\\\\r]',\n            endsWithParent: true,\n            excludeEnd: true\n          }\n        ]\n      },\n      {\n        excludeEnd: true,\n        variants: [\n          {\n            begin: '\\\\$(\\\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\\\(([a-zA-Z0-9_])*\\\\)',\n            end: '[^a-zA-Z0-9_\\\\}\\\\$]'\n          },\n          {\n            begin: '\\\\$(\\\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n            end: '(\\\\))?[^a-zA-Z0-9_\\\\}\\\\$]'\n          }\n        ]\n      },\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})\n        ]\n      },\n      {\n        className: 'number',\n        variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n    //local labels: %?[FB]?[AT]?\\d{1,2}\\w+\n  return {\n    case_insensitive: true,\n    aliases: ['arm'],\n    lexemes: '\\\\.?' + hljs.IDENT_RE,\n    keywords: {\n      meta:\n        //GNU preprocs\n        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '+\n        //ARM directives\n        'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',\n      built_in:\n        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 '+ //standard registers\n        'pc lr sp ip sl sb fp '+ //typical regs plus backward compatibility\n        'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 '+ //more regs and fp\n        'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 '+ //coprocessor regs\n        'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 '+ //more coproc\n        'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 '+ //advanced SIMD NEON regs\n\n        //program status registers\n        'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '+\n        'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '+\n\n        //NEON and VFP registers\n        's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '+\n        's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '+\n        'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '+\n        'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' +\n\n        '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'\n    },\n    contains: [\n      {\n        className: 'keyword',\n        begin: '\\\\b('+     //mnemonics\n            'adc|'+\n            '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'+\n            'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'+\n            'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'+\n            'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'+\n            'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'+\n            'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'+\n            'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'+\n            'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'+\n            'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'+\n            'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'+\n            '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'+\n            'wfe|wfi|yield'+\n        ')'+\n        '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?'+ //condition codes\n        '[sptrx]?' ,                                             //legal postfixes\n        end: '\\\\s'\n      },\n      hljs.COMMENT('[;@]', '$', {relevance: 0}),\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\'',\n        end: '[^\\\\\\\\]\\'',\n        relevance: 0\n      },\n      {\n        className: 'title',\n        begin: '\\\\|', end: '\\\\|',\n        illegal: '\\\\n',\n        relevance: 0\n      },\n      {\n        className: 'number',\n        variants: [\n            {begin: '[#$=]?0x[0-9a-f]+'}, //hex\n            {begin: '[#$=]?0b[01]+'},     //bin\n            {begin: '[#$=]\\\\d+'},        //literal\n            {begin: '\\\\b\\\\d+'}           //bare number\n        ],\n        relevance: 0\n      },\n      {\n        className: 'symbol',\n        variants: [\n            {begin: '^[a-z_\\\\.\\\\$][a-z0-9_\\\\.\\\\$]+'}, //ARM syntax\n            {begin: '^\\\\s*[a-z_\\\\.\\\\$][a-z0-9_\\\\.\\\\$]+:'}, //GNU ARM syntax\n            {begin: '[=#]\\\\w+' }  //label reference\n        ],\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n    //local labels: %?[FB]?[AT]?\\d{1,2}\\w+\n  return {\n    case_insensitive: true,\n    aliases: ['mips'],\n    lexemes: '\\\\.?' + hljs.IDENT_RE,\n    keywords: {\n      meta:\n        //GNU preprocs\n        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',\n      built_in:\n        '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' + // integer registers\n        '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' + // integer registers\n        'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' + // integer register aliases\n        't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' + // integer register aliases\n        'k0 k1 gp sp fp ra ' + // integer register aliases\n        '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' + // floating-point registers\n        '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' + // floating-point registers\n        'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' + // Coprocessor 0 registers\n        'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' + // Coprocessor 0 registers\n        'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' + // Coprocessor 0 registers\n        'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers\n    },\n    contains: [\n      {\n        className: 'keyword',\n        begin: '\\\\b('+     //mnemonics\n            // 32-bit integer instructions\n            'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|' +\n            'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|' +\n            'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|' +\n            'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|' +\n            'srlv?|subu?|sw[lr]?|xori?|wsbh|' +\n            // floating-point instructions\n            'abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|' +\n            'c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|' +\n            '(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|' +\n            'cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|' +\n            'div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|' +\n            'msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|' +\n            'p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|' +\n            'swx?c1|' +\n            // system control instructions\n            'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|' +\n            'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|' +\n            'tlti?u?|tnei?|wait|wrpgpr'+\n        ')',\n        end: '\\\\s'\n      },\n      hljs.COMMENT('[;#]', '$'),\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\'',\n        end: '[^\\\\\\\\]\\'',\n        relevance: 0\n      },\n      {\n        className: 'title',\n        begin: '\\\\|', end: '\\\\|',\n        illegal: '\\\\n',\n        relevance: 0\n      },\n      {\n        className: 'number',\n        variants: [\n            {begin: '0x[0-9a-f]+'}, //hex\n            {begin: '\\\\b-?\\\\d+'}           //bare number\n        ],\n        relevance: 0\n      },\n      {\n        className: 'symbol',\n        variants: [\n            {begin: '^\\\\s*[a-z_\\\\.\\\\$][a-z0-9_\\\\.\\\\$]+:'}, //GNU MIPS syntax\n            {begin: '^\\\\s*[0-9]+:'}, // numbered local labels\n            {begin: '[0-9]+[bf]' }  // number local label reference (backwards, forwards)\n        ],\n        relevance: 0\n      }\n    ],\n    illegal: '\\/'\n  };\n};","module.exports = function(hljs) {\n  var TPID = {\n    className: 'number',\n    begin: '[1-9][0-9]*', /* no leading zeros */\n    relevance: 0\n  };\n  var TPLABEL = {\n    className: 'symbol',\n    begin: ':[^\\\\]]+'\n  };\n  var TPDATA = {\n    className: 'built_in',\n    begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|' +\n    'TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\\\[', end: '\\\\]',\n    contains: [\n      'self',\n      TPID,\n      TPLABEL\n    ]\n  };\n  var TPIO = {\n    className: 'built_in',\n    begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\\\[', end: '\\\\]',\n    contains: [\n      'self',\n      TPID,\n      hljs.QUOTE_STRING_MODE, /* for pos section at bottom */\n      TPLABEL\n    ]\n  };\n\n  return {\n    keywords: {\n      keyword:\n        'ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB ' +\n        'DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC ' +\n        'IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE ' +\n        'PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET ' +\n        'Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN ' +\n        'SUBSTR FINDSTR VOFFSET PROG ATTR MN POS',\n      literal:\n        'ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET'\n    },\n    contains: [\n      TPDATA,\n      TPIO,\n      {\n        className: 'keyword',\n        begin: '/(PROG|ATTR|MN|POS|END)\\\\b'\n      },\n      {\n        /* this is for cases like ,CALL */\n        className: 'keyword',\n        begin: '(CALL|RUN|POINT_LOGIC|LBL)\\\\b'\n      },\n      {\n        /* this is for cases like CNT100 where the default lexemes do not\n         * separate the keyword and the number */\n        className: 'keyword',\n        begin: '\\\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'\n      },\n      {\n        /* to catch numbers that do not have a word boundary on the left */\n        className: 'number',\n        begin: '\\\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\\\b',\n        relevance: 0\n      },\n      hljs.COMMENT('//', '[;$]'),\n      hljs.COMMENT('!', '[;$]'),\n      hljs.COMMENT('--eg:', '$'),\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\'', end: '\\''\n      },\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'variable',\n        begin: '\\\\$[A-Za-z0-9_]+'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    lexemes: '\\\\.?' + hljs.IDENT_RE,\n    keywords: {\n      keyword:\n        /* mnemonic */\n        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' +\n        'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' +\n        'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' +\n        'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' +\n        'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' +\n        'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' +\n        'subi swap tst wdr',\n      built_in:\n        /* general purpose registers */\n        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' +\n        'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +\n        /* IO Registers (ATMega128) */\n        'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' +\n        'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' +\n        'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' +\n        'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' +\n        'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' +\n        'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' +\n        'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' +\n        'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',\n      meta:\n        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' +\n        '.listmac .macro .nolist .org .set'\n    },\n    contains: [\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.COMMENT(\n        ';',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      hljs.C_NUMBER_MODE, // 0x..., decimal, float\n      hljs.BINARY_NUMBER_MODE, // 0b...\n      {\n        className: 'number',\n        begin: '\\\\b(\\\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\'', end: '[^\\\\\\\\]\\'',\n        illegal: '[^\\\\\\\\][^\\']'\n      },\n      {className: 'symbol',  begin: '^[A-Za-z0-9_.$]+:'},\n      {className: 'meta', begin: '#', end: '$'},\n      {  // подстановка в «.macro»\n        className: 'subst',\n        begin: '@[0-9]+'\n      }\n    ]\n  };\n};","/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\n(function(factory) {\n\n  // Find the global object for export to both the browser and web workers.\n  var globalObject = typeof window === 'object' && window ||\n                     typeof self === 'object' && self;\n\n  // Setup highlight.js for different environments. First is Node.js or\n  // CommonJS.\n  if(typeof exports !== 'undefined') {\n    factory(exports);\n  } else if(globalObject) {\n    // Export hljs globally even when using AMD for cases when this script\n    // is loaded with others that may still expect a global hljs.\n    globalObject.hljs = factory({});\n\n    // Finally register the global hljs with AMD.\n    if(typeof define === 'function' && define.amd) {\n      define([], function() {\n        return globalObject.hljs;\n      });\n    }\n  }\n\n}(function(hljs) {\n  // Convenience variables for build-in objects\n  var ArrayProto = [],\n      objectKeys = Object.keys;\n\n  // Global internal variables used within the highlight.js library.\n  var languages = {},\n      aliases   = {};\n\n  // Regular expressions used throughout the highlight.js library.\n  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,\n      languagePrefixRe = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n      fixMarkupRe      = /((^(<[^>]+>|\\t|)+|(?:\\n)))/gm;\n\n  // The object will be assigned by the build tool. It used to synchronize API \n  // of external language files with minified version of the highlight.js library.\n  var API_REPLACES;\n\n  var spanEndTag = '</span>';\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  var options = {\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: undefined\n  };\n\n\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n  function tag(node) {\n    return node.nodeName.toLowerCase();\n  }\n\n  function testRe(re, lexeme) {\n    var match = re && re.exec(lexeme);\n    return match && match.index === 0;\n  }\n\n  function isNotHighlighted(language) {\n    return noHighlightRe.test(language);\n  }\n\n  function blockLanguage(block) {\n    var i, match, length, _class;\n    var classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    match = languagePrefixRe.exec(classes);\n    if (match) {\n      return getLanguage(match[1]) ? match[1] : 'no-highlight';\n    }\n\n    classes = classes.split(/\\s+/);\n\n    for (i = 0, length = classes.length; i < length; i++) {\n      _class = classes[i];\n\n      if (isNotHighlighted(_class) || getLanguage(_class)) {\n        return _class;\n      }\n    }\n  }\n\n  function inherit(parent) {  // inherit(parent, override_obj, override_obj, ...)\n    var key;\n    var result = {};\n    var objects = Array.prototype.slice.call(arguments, 1);\n\n    for (key in parent)\n      result[key] = parent[key];\n    objects.forEach(function(obj) {\n      for (key in obj)\n        result[key] = obj[key];\n    });\n    return result;\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function _nodeStream(node, offset) {\n      for (var child = node.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType === 3)\n          offset += child.nodeValue.length;\n        else if (child.nodeType === 1) {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: child\n          });\n          offset = _nodeStream(child, offset);\n          // Prevent void elements from having an end tag that would actually\n          // double them in the output. There are more void elements in HTML\n          // but we list only those realistically expected in code display.\n          if (!tag(child).match(/br|hr|img|input/)) {\n            result.push({\n              event: 'stop',\n              offset: offset,\n              node: child\n            });\n          }\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n\n  function mergeStreams(original, highlighted, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (!original.length || !highlighted.length) {\n        return original.length ? original : highlighted;\n      }\n      if (original[0].offset !== highlighted[0].offset) {\n        return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n      }\n\n      /*\n      To avoid starting the stream just before it should stop the order is\n      ensured that original always starts first and closes last:\n\n      if (event1 == 'start' && event2 == 'start')\n        return original;\n      if (event1 == 'start' && event2 == 'stop')\n        return highlighted;\n      if (event1 == 'stop' && event2 == 'start')\n        return original;\n      if (event1 == 'stop' && event2 == 'stop')\n        return highlighted;\n\n      ... which is collapsed to:\n      */\n      return highlighted[0].event === 'start' ? original : highlighted;\n    }\n\n    function open(node) {\n      function attr_str(a) {return ' ' + a.nodeName + '=\"' + escape(a.value).replace('\"', '&quot;') + '\"';}\n      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';\n    }\n\n    function close(node) {\n      result += '</' + tag(node) + '>';\n    }\n\n    function render(event) {\n      (event.event === 'start' ? open : close)(event.node);\n    }\n\n    while (original.length || highlighted.length) {\n      var stream = selectStream();\n      result += escape(value.substring(processed, stream[0].offset));\n      processed = stream[0].offset;\n      if (stream === original) {\n        /*\n        On any opening or closing tag of the original markup we first close\n        the entire highlighted node stack, then render the original tag along\n        with all the following original tags at the same offset and then\n        reopen all the tags on the highlighted stack.\n        */\n        nodeStack.reverse().forEach(close);\n        do {\n          render(stream.splice(0, 1)[0]);\n          stream = selectStream();\n        } while (stream === original && stream.length && stream[0].offset === processed);\n        nodeStack.reverse().forEach(open);\n      } else {\n        if (stream[0].event === 'start') {\n          nodeStack.push(stream[0].node);\n        } else {\n          nodeStack.pop();\n        }\n        render(stream.splice(0, 1)[0]);\n      }\n    }\n    return result + escape(value.substr(processed));\n  }\n\n  /* Initialization */\n\n  function expand_mode(mode) {\n    if (mode.variants && !mode.cached_variants) {\n      mode.cached_variants = mode.variants.map(function(variant) {\n        return inherit(mode, {variants: null}, variant);\n      });\n    }\n    return mode.cached_variants || (mode.endsWithParent && [inherit(mode)]) || [mode];\n  }\n\n  function restoreLanguageApi(obj) {\n    if(API_REPLACES && !obj.langApiRestored) {\n      obj.langApiRestored = true;\n      for(var key in API_REPLACES)\n        obj[key] && (obj[API_REPLACES[key]] = obj[key]);\n      (obj.contains || []).concat(obj.variants || []).forEach(restoreLanguageApi);\n    }\n  }\n\n  function compileLanguage(language) {\n\n    function reStr(re) {\n        return (re && re.source) || re;\n    }\n\n    function langRe(value, global) {\n      return new RegExp(\n        reStr(value),\n        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n      );\n    }\n\n    // joinRe logically computes regexps.join(separator), but fixes the\n    // backreferences so they continue to match.\n    function joinRe(regexps, separator) {\n      // backreferenceRe matches an open parenthesis or backreference. To avoid\n      // an incorrect parse, it additionally matches the following:\n      // - [...] elements, where the meaning of parentheses and escapes change\n      // - other escape sequences, so we do not misparse escape sequences as\n      //   interesting elements\n      // - non-matching or lookahead parentheses, which do not capture. These\n      //   follow the '(' with a '?'.\n      var backreferenceRe = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n      var numCaptures = 0;\n      var ret = '';\n      for (var i = 0; i < regexps.length; i++) {\n        var offset = numCaptures;\n        var re = reStr(regexps[i]);\n        if (i > 0) {\n          ret += separator;\n        }\n        while (re.length > 0) {\n          var match = backreferenceRe.exec(re);\n          if (match == null) {\n            ret += re;\n            break;\n          }\n          ret += re.substring(0, match.index);\n          re = re.substring(match.index + match[0].length);\n          if (match[0][0] == '\\\\' && match[1]) {\n            // Adjust the backreference.\n            ret += '\\\\' + String(Number(match[1]) + offset);\n          } else {\n            ret += match[0];\n            if (match[0] == '(') {\n              numCaptures++;\n            }\n          }\n        }\n      }\n      return ret;\n    }\n\n    function compileMode(mode, parent) {\n      if (mode.compiled)\n        return;\n      mode.compiled = true;\n\n      mode.keywords = mode.keywords || mode.beginKeywords;\n      if (mode.keywords) {\n        var compiled_keywords = {};\n\n        var flatten = function(className, str) {\n          if (language.case_insensitive) {\n            str = str.toLowerCase();\n          }\n          str.split(' ').forEach(function(kw) {\n            var pair = kw.split('|');\n            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n          });\n        };\n\n        if (typeof mode.keywords === 'string') { // string\n          flatten('keyword', mode.keywords);\n        } else {\n          objectKeys(mode.keywords).forEach(function (className) {\n            flatten(className, mode.keywords[className]);\n          });\n        }\n        mode.keywords = compiled_keywords;\n      }\n      mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\n      if (parent) {\n        if (mode.beginKeywords) {\n          mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\\\b';\n        }\n        if (!mode.begin)\n          mode.begin = /\\B|\\b/;\n        mode.beginRe = langRe(mode.begin);\n        if (mode.endSameAsBegin)\n          mode.end = mode.begin;\n        if (!mode.end && !mode.endsWithParent)\n          mode.end = /\\B|\\b/;\n        if (mode.end)\n          mode.endRe = langRe(mode.end);\n        mode.terminator_end = reStr(mode.end) || '';\n        if (mode.endsWithParent && parent.terminator_end)\n          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n      }\n      if (mode.illegal)\n        mode.illegalRe = langRe(mode.illegal);\n      if (mode.relevance == null)\n        mode.relevance = 1;\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function(c) {\n        return expand_mode(c === 'self' ? mode : c);\n      }));\n      mode.contains.forEach(function(c) {compileMode(c, mode);});\n\n      if (mode.starts) {\n        compileMode(mode.starts, parent);\n      }\n\n      var terminators =\n        mode.contains.map(function(c) {\n          return c.beginKeywords ? '\\\\.?(?:' + c.begin + ')\\\\.?' : c.begin;\n        })\n        .concat([mode.terminator_end, mode.illegal])\n        .map(reStr)\n        .filter(Boolean);\n      mode.terminators = terminators.length ? langRe(joinRe(terminators, '|'), true) : {exec: function(/*s*/) {return null;}};\n    }\n    \n    compileMode(language);\n  }\n\n  /*\n  Core highlighting function. Accepts a language name, or an alias, and a\n  string with the code to highlight. Returns an object with the following\n  properties:\n\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n\n  */\n  function highlight(name, value, ignore_illegals, continuation) {\n\n    function escapeRe(value) {\n      return new RegExp(value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'm');\n    }\n\n    function subMode(lexeme, mode) {\n      var i, length;\n\n      for (i = 0, length = mode.contains.length; i < length; i++) {\n        if (testRe(mode.contains[i].beginRe, lexeme)) {\n          if (mode.contains[i].endSameAsBegin) {\n            mode.contains[i].endRe = escapeRe( mode.contains[i].beginRe.exec(lexeme)[0] );\n          }\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode, lexeme) {\n      if (testRe(mode.endRe, lexeme)) {\n        while (mode.endsParent && mode.parent) {\n          mode = mode.parent;\n        }\n        return mode;\n      }\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, lexeme);\n      }\n    }\n\n    function isIllegal(lexeme, mode) {\n      return !ignore_illegals && testRe(mode.illegalRe, lexeme);\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n    }\n\n    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {\n      var classPrefix = noPrefix ? '' : options.classPrefix,\n          openSpan    = '<span class=\"' + classPrefix,\n          closeSpan   = leaveOpen ? '' : spanEndTag;\n\n      openSpan += classname + '\">';\n\n      return openSpan + insideSpan + closeSpan;\n    }\n\n    function processKeywords() {\n      var keyword_match, last_index, match, result;\n\n      if (!top.keywords)\n        return escape(mode_buffer);\n\n      result = '';\n      last_index = 0;\n      top.lexemesRe.lastIndex = 0;\n      match = top.lexemesRe.exec(mode_buffer);\n\n      while (match) {\n        result += escape(mode_buffer.substring(last_index, match.index));\n        keyword_match = keywordMatch(top, match);\n        if (keyword_match) {\n          relevance += keyword_match[1];\n          result += buildSpan(keyword_match[0], escape(match[0]));\n        } else {\n          result += escape(match[0]);\n        }\n        last_index = top.lexemesRe.lastIndex;\n        match = top.lexemesRe.exec(mode_buffer);\n      }\n      return result + escape(mode_buffer.substr(last_index));\n    }\n\n    function processSubLanguage() {\n      var explicit = typeof top.subLanguage === 'string';\n      if (explicit && !languages[top.subLanguage]) {\n        return escape(mode_buffer);\n      }\n\n      var result = explicit ?\n                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :\n                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      if (explicit) {\n        continuations[top.subLanguage] = result.top;\n      }\n      return buildSpan(result.language, result.value, false, true);\n    }\n\n    function processBuffer() {\n      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());\n      mode_buffer = '';\n    }\n\n    function startNewMode(mode) {\n      result += mode.className? buildSpan(mode.className, '', true): '';\n      top = Object.create(mode, {parent: {value: top}});\n    }\n\n    function processLexeme(buffer, lexeme) {\n\n      mode_buffer += buffer;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      var new_mode = subMode(lexeme, top);\n      if (new_mode) {\n        if (new_mode.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (new_mode.excludeBegin) {\n            mode_buffer += lexeme;\n          }\n          processBuffer();\n          if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n            mode_buffer = lexeme;\n          }\n        }\n        startNewMode(new_mode, lexeme);\n        return new_mode.returnBegin ? 0 : lexeme.length;\n      }\n\n      var end_mode = endOfMode(top, lexeme);\n      if (end_mode) {\n        var origin = top;\n        if (origin.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (!(origin.returnEnd || origin.excludeEnd)) {\n            mode_buffer += lexeme;\n          }\n          processBuffer();\n          if (origin.excludeEnd) {\n            mode_buffer = lexeme;\n          }\n        }\n        do {\n          if (top.className) {\n            result += spanEndTag;\n          }\n          if (!top.skip && !top.subLanguage) {\n            relevance += top.relevance;\n          }\n          top = top.parent;\n        } while (top !== end_mode.parent);\n        if (end_mode.starts) {\n          if (end_mode.endSameAsBegin) {\n            end_mode.starts.endRe = end_mode.endRe;\n          }\n          startNewMode(end_mode.starts, '');\n        }\n        return origin.returnEnd ? 0 : lexeme.length;\n      }\n\n      if (isIllegal(lexeme, top))\n        throw new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n\n      /*\n      Parser should not reach this point as all types of lexemes should be caught\n      earlier, but if it does due to some bug make sure it advances at least one\n      character forward to prevent infinite looping.\n      */\n      mode_buffer += lexeme;\n      return lexeme.length || 1;\n    }\n\n    var language = getLanguage(name);\n    if (!language) {\n      throw new Error('Unknown language: \"' + name + '\"');\n    }\n\n    compileLanguage(language);\n    var top = continuation || language;\n    var continuations = {}; // keep continuations for sub-languages\n    var result = '', current;\n    for(current = top; current !== language; current = current.parent) {\n      if (current.className) {\n        result = buildSpan(current.className, '', true) + result;\n      }\n    }\n    var mode_buffer = '';\n    var relevance = 0;\n    try {\n      var match, count, index = 0;\n      while (true) {\n        top.terminators.lastIndex = index;\n        match = top.terminators.exec(value);\n        if (!match)\n          break;\n        count = processLexeme(value.substring(index, match.index), match[0]);\n        index = match.index + count;\n      }\n      processLexeme(value.substr(index));\n      for(current = top; current.parent; current = current.parent) { // close dangling modes\n        if (current.className) {\n          result += spanEndTag;\n        }\n      }\n      return {\n        relevance: relevance,\n        value: result,\n        language: name,\n        top: top\n      };\n    } catch (e) {\n      if (e.message && e.message.indexOf('Illegal') !== -1) {\n        return {\n          relevance: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /*\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n  */\n  function highlightAuto(text, languageSubset) {\n    languageSubset = languageSubset || options.languages || objectKeys(languages);\n    var result = {\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    languageSubset.filter(getLanguage).filter(autoDetection).forEach(function(name) {\n      var current = highlight(name, text, false);\n      current.language = name;\n      if (current.relevance > second_best.relevance) {\n        second_best = current;\n      }\n      if (current.relevance > result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    });\n    if (second_best.language) {\n      result.second_best = second_best;\n    }\n    return result;\n  }\n\n  /*\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n  */\n  function fixMarkup(value) {\n    return !(options.tabReplace || options.useBR)\n      ? value\n      : value.replace(fixMarkupRe, function(match, p1) {\n          if (options.useBR && match === '\\n') {\n            return '<br>';\n          } else if (options.tabReplace) {\n            return p1.replace(/\\t/g, options.tabReplace);\n          }\n          return '';\n      });\n  }\n\n  function buildClassName(prevClassName, currentLang, resultLang) {\n    var language = currentLang ? aliases[currentLang] : resultLang,\n        result   = [prevClassName.trim()];\n\n    if (!prevClassName.match(/\\bhljs\\b/)) {\n      result.push('hljs');\n    }\n\n    if (prevClassName.indexOf(language) === -1) {\n      result.push(language);\n    }\n\n    return result.join(' ').trim();\n  }\n\n  /*\n  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n  two optional parameters for fixMarkup.\n  */\n  function highlightBlock(block) {\n    var node, originalStream, result, resultNode, text;\n    var language = blockLanguage(block);\n\n    if (isNotHighlighted(language))\n        return;\n\n    if (options.useBR) {\n      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      node.innerHTML = block.innerHTML.replace(/\\n/g, '').replace(/<br[ \\/]*>/g, '\\n');\n    } else {\n      node = block;\n    }\n    text = node.textContent;\n    result = language ? highlight(language, text, true) : highlightAuto(text);\n\n    originalStream = nodeStream(node);\n    if (originalStream.length) {\n      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      resultNode.innerHTML = result.value;\n      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n    result.value = fixMarkup(result.value);\n\n    block.innerHTML = result.value;\n    block.className = buildClassName(block.className, language, result.language);\n    block.result = {\n      language: result.language,\n      re: result.relevance\n    };\n    if (result.second_best) {\n      block.second_best = {\n        language: result.second_best.language,\n        re: result.second_best.relevance\n      };\n    }\n  }\n\n  /*\n  Updates highlight.js global options with values passed in the form of an object.\n  */\n  function configure(user_options) {\n    options = inherit(options, user_options);\n  }\n\n  /*\n  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n  */\n  function initHighlighting() {\n    if (initHighlighting.called)\n      return;\n    initHighlighting.called = true;\n\n    var blocks = document.querySelectorAll('pre code');\n    ArrayProto.forEach.call(blocks, highlightBlock);\n  }\n\n  /*\n  Attaches highlighting to the page load event.\n  */\n  function initHighlightingOnLoad() {\n    addEventListener('DOMContentLoaded', initHighlighting, false);\n    addEventListener('load', initHighlighting, false);\n  }\n\n  function registerLanguage(name, language) {\n    var lang = languages[name] = language(hljs);\n    restoreLanguageApi(lang);\n    if (lang.aliases) {\n      lang.aliases.forEach(function(alias) {aliases[alias] = name;});\n    }\n  }\n\n  function listLanguages() {\n    return objectKeys(languages);\n  }\n\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  function autoDetection(name) {\n    var lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /* Interface definition */\n\n  hljs.highlight = highlight;\n  hljs.highlightAuto = highlightAuto;\n  hljs.fixMarkup = fixMarkup;\n  hljs.highlightBlock = highlightBlock;\n  hljs.configure = configure;\n  hljs.initHighlighting = initHighlighting;\n  hljs.initHighlightingOnLoad = initHighlightingOnLoad;\n  hljs.registerLanguage = registerLanguage;\n  hljs.listLanguages = listLanguages;\n  hljs.getLanguage = getLanguage;\n  hljs.autoDetection = autoDetection;\n  hljs.inherit = inherit;\n\n  // Common regexps\n  hljs.IDENT_RE = '[a-zA-Z]\\\\w*';\n  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\n  hljs.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  hljs.C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n  hljs.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  hljs.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n  };\n  hljs.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n  };\n  hljs.COMMENT = function (begin, end, inherits) {\n    var mode = hljs.inherit(\n      {\n        className: 'comment',\n        begin: begin, end: end,\n        contains: []\n      },\n      inherits || {}\n    );\n    mode.contains.push(hljs.PHRASAL_WORDS_MODE);\n    mode.contains.push({\n      className: 'doctag',\n      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',\n      relevance: 0\n    });\n    return mode;\n  };\n  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');\n  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\\\*', '\\\\*/');\n  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');\n  hljs.NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE,\n    relevance: 0\n  };\n  hljs.C_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.BINARY_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.BINARY_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.CSS_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE + '(' +\n      '%|em|ex|ch|rem'  +\n      '|vw|vh|vmin|vmax' +\n      '|cm|mm|in|pt|pc|px' +\n      '|deg|grad|rad|turn' +\n      '|s|ms' +\n      '|Hz|kHz' +\n      '|dpi|dpcm|dppx' +\n      ')?',\n    relevance: 0\n  };\n  hljs.REGEXP_MODE = {\n    className: 'regexp',\n    begin: /\\//, end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/, end: /\\]/,\n        relevance: 0,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n  hljs.TITLE_MODE = {\n    className: 'title',\n    begin: hljs.IDENT_RE,\n    relevance: 0\n  };\n  hljs.UNDERSCORE_TITLE_MODE = {\n    className: 'title',\n    begin: hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n  hljs.METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: '\\\\.\\\\s*' + hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n\n  return hljs;\n}));\n","module.exports = function(hljs) {\n  var NUMBER = {\n    className: 'number', relevance: 0,\n    variants: [\n      {\n        begin: '[$][a-fA-F0-9]+'\n      },\n      hljs.NUMBER_MODE\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    keywords: {\n      keyword: 'public private property continue exit extern new try catch ' +\n        'eachin not abstract final select case default const local global field ' +\n        'end if then else elseif endif while wend repeat until forever for ' +\n        'to step next return module inline throw import',\n\n      built_in: 'DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil ' +\n        'Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI',\n\n      literal: 'true false null and or shl shr mod'\n    },\n    illegal: /\\/\\*/,\n    contains: [\n      hljs.COMMENT('#rem', '#end'),\n      hljs.COMMENT(\n        \"'\",\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      {\n        className: 'function',\n        beginKeywords: 'function method', end: '[(=:]|$',\n        illegal: /\\n/,\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: '$',\n        contains: [\n          {\n            beginKeywords: 'extends implements'\n          },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        className: 'built_in',\n        begin: '\\\\b(self|super)\\\\b'\n      },\n      {\n        className: 'meta',\n        begin: '\\\\s*#', end: '$',\n        keywords: {'meta-keyword': 'if else elseif endif end then'}\n      },\n      {\n        className: 'meta',\n        begin: '^\\\\s*strict\\\\b'\n      },\n      {\n        beginKeywords: 'alias', end: '=',\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      hljs.QUOTE_STRING_MODE,\n      NUMBER\n    ]\n  }\n};","module.exports = function(hljs) {\n  return {\n    keywords: 'false int abstract private char boolean static null if for true ' +\n      'while long throw finally protected final return void enum else ' +\n      'break new catch byte super case short default double public try this switch ' +\n      'continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count ' +\n      'order group by asc desc index hint like dispaly edit client server ttsbegin ' +\n      'ttscommit str real date container anytype common div mod',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta',\n        begin: '#', end: '$'\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: '{', excludeEnd: true,\n        illegal: ':',\n        contains: [\n          {beginKeywords: 'extends implements'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      'abstract as val var vararg get set class object open private protected public noinline ' +\n      'crossinline dynamic final enum if else do while for when throw try catch finally ' +\n      'import package is in fun override companion reified inline lateinit init ' +\n      'interface annotation data sealed internal infix operator out by constructor super ' +\n      'tailrec where const inner suspend typealias external expect actual ' +\n      // to be deleted soon\n      'trait volatile transient native default',\n    built_in:\n      'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',\n    literal:\n      'true false null'\n  };\n  var KEYWORDS_WITH_LABEL = {\n    className: 'keyword',\n    begin: /\\b(break|continue|return|this)\\b/,\n    starts: {\n      contains: [\n        {\n          className: 'symbol',\n          begin: /@\\w+/\n        }\n      ]\n    }\n  };\n  var LABEL = {\n    className: 'symbol', begin: hljs.UNDERSCORE_IDENT_RE + '@'\n  };\n\n  // for string templates\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\${', end: '}', contains: [hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]\n  };\n  var VARIABLE = {\n    className: 'variable', begin: '\\\\$' + hljs.UNDERSCORE_IDENT_RE\n  };\n  var STRING = {\n    className: 'string',\n    variants: [\n      {\n        begin: '\"\"\"', end: '\"\"\"',\n        contains: [VARIABLE, SUBST]\n      },\n      // Can't use built-in modes easily, as we want to use STRING in the meta\n      // context as 'meta-string' and there's no syntax to remove explicitly set\n      // classNames in built-in modes.\n      {\n        begin: '\\'', end: '\\'',\n        illegal: /\\n/,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '\"', end: '\"',\n        illegal: /\\n/,\n        contains: [hljs.BACKSLASH_ESCAPE, VARIABLE, SUBST]\n      }\n    ]\n  };\n\n  var ANNOTATION_USE_SITE = {\n    className: 'meta', begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\\\s*:(?:\\\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'\n  };\n  var ANNOTATION = {\n    className: 'meta', begin: '@' + hljs.UNDERSCORE_IDENT_RE,\n    contains: [\n      {\n        begin: /\\(/, end: /\\)/,\n        contains: [\n          hljs.inherit(STRING, {className: 'meta-string'})\n        ]\n      }\n    ]\n  };\n\n  // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals\n  // According to the doc above, the number mode of kotlin is the same as java 8,\n  // so the code below is copied from java.js\n  var KOTLIN_NUMBER_RE = '\\\\b' +\n    '(' +\n      '0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...\n      '|' +\n      '0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...\n      '|' +\n      '(' +\n        '([\\\\d]+[\\\\d_]+[\\\\d]+|[\\\\d]+)(\\\\.([\\\\d]+[\\\\d_]+[\\\\d]+|[\\\\d]+))?' +\n        '|' +\n        '\\\\.([\\\\d]+[\\\\d_]+[\\\\d]+|[\\\\d]+)' +\n      ')' +\n      '([eE][-+]?\\\\d+)?' + // octal, decimal, float\n    ')' +\n    '[lLfF]?';\n  var KOTLIN_NUMBER_MODE = {\n    className: 'number',\n    begin: KOTLIN_NUMBER_RE,\n    relevance: 0\n  };\n\n  return {\n    aliases: ['kt'],\n    keywords: KEYWORDS,\n    contains : [\n      hljs.COMMENT(\n        '/\\\\*\\\\*',\n        '\\\\*/',\n        {\n          relevance : 0,\n          contains : [{\n            className : 'doctag',\n            begin : '@[A-Za-z]+'\n          }]\n        }\n      ),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      KEYWORDS_WITH_LABEL,\n      LABEL,\n      ANNOTATION_USE_SITE,\n      ANNOTATION,\n      {\n        className: 'function',\n        beginKeywords: 'fun', end: '[(]|$',\n        returnBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        illegal: /fun\\s+(<.*>)?[^\\s\\(]+(\\s+[^\\s\\(]+)\\s*=/,\n        relevance: 5,\n        contains: [\n          {\n            begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(', returnBegin: true,\n            relevance: 0,\n            contains: [hljs.UNDERSCORE_TITLE_MODE]\n          },\n          {\n            className: 'type',\n            begin: /</, end: />/, keywords: 'reified',\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            endsParent: true,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              {\n                begin: /:/, end: /[=,\\/]/, endsWithParent: true,\n                contains: [\n                  {className: 'type', begin: hljs.UNDERSCORE_IDENT_RE},\n                  hljs.C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE\n                ],\n                relevance: 0\n              },\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              ANNOTATION_USE_SITE,\n              ANNOTATION,\n              STRING,\n              hljs.C_NUMBER_MODE\n            ]\n          },\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface trait', end: /[:\\{(]|$/, // remove 'trait' when removed from KEYWORDS\n        excludeEnd: true,\n        illegal: 'extends implements',\n        contains: [\n          {beginKeywords: 'public protected internal private constructor'},\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            className: 'type',\n            begin: /</, end: />/, excludeBegin: true, excludeEnd: true,\n            relevance: 0\n          },\n          {\n            className: 'type',\n            begin: /[,:]\\s*/, end: /[<\\(,]|$/, excludeBegin: true, returnEnd: true\n          },\n          ANNOTATION_USE_SITE,\n          ANNOTATION\n        ]\n      },\n      STRING,\n      {\n        className: 'meta',\n        begin: \"^#!/usr/bin/env\", end: '$',\n        illegal: '\\n'\n      },\n      KOTLIN_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // JS keywords\n      'in if for while finally new do return else break catch instanceof throw try this ' +\n      'switch continue typeof delete debugger super yield import export from as default await ' +\n      // Coffee keywords\n      'then unless until loop of by when and or is isnt not',\n    literal:\n      // JS literals\n      'true false null undefined ' +\n      // Coffee literals\n      'yes no on off',\n    built_in:\n      'npm require console print module global window document'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var SUBST = {\n    className: 'subst',\n    begin: /#\\{/, end: /}/,\n    keywords: KEYWORDS\n  };\n  var EXPRESSIONS = [\n    hljs.BINARY_NUMBER_MODE,\n    hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp\n    {\n      className: 'string',\n      variants: [\n        {\n          begin: /'''/, end: /'''/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /'/, end: /'/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /\"\"\"/, end: /\"\"\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n        },\n        {\n          begin: /\"/, end: /\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n        }\n      ]\n    },\n    {\n      className: 'regexp',\n      variants: [\n        {\n          begin: '///', end: '///',\n          contains: [SUBST, hljs.HASH_COMMENT_MODE]\n        },\n        {\n          begin: '//[gim]*',\n          relevance: 0\n        },\n        {\n          // regex can't start with space to parse x / 2 / 3 as two divisions\n          // regex can't start with *, and it supports an \"illegal\" in the main mode\n          begin: /\\/(?![ *])(\\\\\\/|.)*?\\/[gim]*(?=\\W|$)/\n        }\n      ]\n    },\n    {\n      begin: '@' + JS_IDENT_RE // relevance booster\n    },\n    {\n      subLanguage: 'javascript',\n      excludeBegin: true, excludeEnd: true,\n      variants: [\n        {\n          begin: '```', end: '```',\n        },\n        {\n          begin: '`', end: '`',\n        }\n      ]\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});\n  var PARAMS_RE = '(\\\\(.*\\\\))?\\\\s*\\\\B[-=]>';\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\([^\\\\(]', returnBegin: true,\n    /* We need another contained nameless mode to not have every nested\n    pair of parens to be called \"params\" */\n    contains: [{\n      begin: /\\(/, end: /\\)/,\n      keywords: KEYWORDS,\n      contains: ['self'].concat(EXPRESSIONS)\n    }]\n  };\n\n  return {\n    aliases: ['coffee', 'cson', 'iced'],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: EXPRESSIONS.concat([\n      hljs.COMMENT('###', '###'),\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'function',\n        begin: '^\\\\s*' + JS_IDENT_RE + '\\\\s*=\\\\s*' + PARAMS_RE, end: '[-=]>',\n        returnBegin: true,\n        contains: [TITLE, PARAMS]\n      },\n      {\n        // anonymous function start\n        begin: /[:\\(,=]\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: 'function',\n            begin: PARAMS_RE, end: '[-=]>',\n            returnBegin: true,\n            contains: [PARAMS]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class',\n        end: '$',\n        illegal: /[:=\"\\[\\]]/,\n        contains: [\n          {\n            beginKeywords: 'extends',\n            endsWithParent: true,\n            illegal: /[:=\"\\[\\]]/,\n            contains: [TITLE]\n          },\n          TITLE\n        ]\n      },\n      {\n        begin: JS_IDENT_RE + ':', end: ':',\n        returnBegin: true, returnEnd: true,\n        relevance: 0\n      }\n    ])\n  };\n};","module.exports = function(hljs) {\n  var BUILT_IN_TYPES = 'bool byte i16 i32 i64 double string binary';\n  return {\n    keywords: {\n      keyword:\n        'namespace const typedef struct enum service exception void oneway set list map required optional',\n      built_in:\n        BUILT_IN_TYPES,\n      literal:\n        'true false'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'class',\n        beginKeywords: 'struct enum service exception', end: /\\{/,\n        illegal: /\\n/,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title\n          })\n        ]\n      },\n      {\n        begin: '\\\\b(set|list|map)\\\\s*<', end: '>',\n        keywords: BUILT_IN_TYPES,\n        contains: ['self']\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:  'bool break call callexe checkinterrupt clear clearg closeall cls comlog compile ' +\n              'continue create debug declare delete disable dlibrary dllcall do dos ed edit else ' +\n              'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn ' +\n              'for format goto gosub graph if keyword let lib library line load loadarray loadexe ' +\n              'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow ' +\n              'matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print ' +\n              'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen ' +\n              'scroll setarray show sparse stop string struct system trace trap threadfor ' +\n              'threadendfor threadbegin threadjoin threadstat threadend until use while winprint ' +\n              'ne ge le gt lt and xor or not eq eqv',\n    built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol ' +\n              'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks ' +\n              'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults ' +\n              'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness ' +\n              'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd ' +\n              'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar ' +\n              'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 ' +\n              'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv ' +\n              'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn ' +\n              'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi ' +\n              'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ' +\n              'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated ' +\n              'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs ' +\n              'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos ' +\n              'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd ' +\n              'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName ' +\n              'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy ' +\n              'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen ' +\n              'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA ' +\n              'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField ' +\n              'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition ' +\n              'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows ' +\n              'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly ' +\n              'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy ' +\n              'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl ' +\n              'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt ' +\n              'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday ' +\n              'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays ' +\n              'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error ' +\n              'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut ' +\n              'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol ' +\n              'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq ' +\n              'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt ' +\n              'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC ' +\n              'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders ' +\n              'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse ' +\n              'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray ' +\n              'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders ' +\n              'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT ' +\n              'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm ' +\n              'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 ' +\n              'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 ' +\n              'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf ' +\n              'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv ' +\n              'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn ' +\n              'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind ' +\n              'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars ' +\n              'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli ' +\n              'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave ' +\n              'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate ' +\n              'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto ' +\n              'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox ' +\n              'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea ' +\n              'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout ' +\n              'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill ' +\n              'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol ' +\n              'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange ' +\n              'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel ' +\n              'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot ' +\n              'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames ' +\n              'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector ' +\n              'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate ' +\n              'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr ' +\n              'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn ' +\n              'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel ' +\n              'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn ' +\n              'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh ' +\n              'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind ' +\n              'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa ' +\n              'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind ' +\n              'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL ' +\n              'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense ' +\n              'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet ' +\n              'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt ' +\n              'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr ' +\n              'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname ' +\n              'time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk ' +\n              'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt ' +\n              'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs ' +\n              'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window ' +\n              'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM ' +\n              'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute ' +\n              'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels ' +\n              'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester ' +\n              'strtrim',\n    literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS ' +\n             'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 ' +\n             'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS ' +\n             'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES ' +\n             'DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR'\n  };\n\n\n  var AT_COMMENT_MODE = hljs.COMMENT('@', '@');\n\n  var PREPROCESSOR =\n  {\n    className: 'meta',\n    begin: '#', end: '$',\n    keywords: {'meta-keyword': 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline'},\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      {\n        beginKeywords: 'include', end: '$',\n        keywords: {'meta-keyword': 'include'},\n        contains: [\n          {\n            className: 'meta-string',\n            begin: '\"', end: '\"',\n            illegal: '\\\\n'\n          }\n        ]\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      AT_COMMENT_MODE,\n    ]\n  };\n\n  var STRUCT_TYPE =\n  {\n    begin: /\\bstruct\\s+/,\n    end: /\\s/,\n    keywords: \"struct\",\n    contains: [\n      {\n        className: \"type\",\n        begin: hljs.UNDERSCORE_IDENT_RE,\n        relevance: 0,\n      },\n    ],\n  };\n\n  // only for definitions\n  var PARSE_PARAMS = [\n    {\n      className: 'params',\n      begin: /\\(/, end: /\\)/,\n      excludeBegin: true,\n      excludeEnd: true,\n      endsWithParent: true,\n      relevance: 0,\n      contains: [\n        { // dots\n          className: 'literal',\n          begin: /\\.\\.\\./,\n        },\n        hljs.C_NUMBER_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        AT_COMMENT_MODE,\n        STRUCT_TYPE,\n      ]\n    }\n  ];\n\n  var FUNCTION_DEF =\n  {\n    className: \"title\",\n    begin: hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0,\n  };\n\n  var DEFINITION = function (beginKeywords, end, inherits) {\n    var mode = hljs.inherit(\n      {\n        className: \"function\",\n        beginKeywords: beginKeywords,\n        end: end,\n        excludeEnd: true,\n        contains: [].concat(PARSE_PARAMS),\n      },\n      inherits || {}\n    );\n    mode.contains.push(FUNCTION_DEF);\n    mode.contains.push(hljs.C_NUMBER_MODE);\n    mode.contains.push(hljs.C_BLOCK_COMMENT_MODE);\n    mode.contains.push(AT_COMMENT_MODE);\n    return mode;\n  };\n\n  var BUILT_IN_REF =\n  { // these are explicitly named internal function calls\n    className: 'built_in',\n    begin: '\\\\b(' + KEYWORDS.built_in.split(' ').join('|') + ')\\\\b',\n  };\n\n  var STRING_REF =\n  {\n    className: 'string',\n    begin: '\"', end: '\"',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    relevance: 0,\n  };\n\n  var FUNCTION_REF =\n  {\n    //className: \"fn_ref\",\n    begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(',\n    returnBegin: true,\n    keywords: KEYWORDS,\n    relevance: 0,\n    contains: [\n      {\n        beginKeywords: KEYWORDS.keyword,\n      },\n      BUILT_IN_REF,\n      { // ambiguously named function calls get a relevance of 0\n        className: 'built_in',\n        begin: hljs.UNDERSCORE_IDENT_RE,\n        relevance: 0,\n      },\n    ],\n  };\n\n  var FUNCTION_REF_PARAMS =\n  {\n    //className: \"fn_ref_params\",\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: { built_in: KEYWORDS.built_in, literal: KEYWORDS.literal },\n    contains: [\n      hljs.C_NUMBER_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      AT_COMMENT_MODE,\n      BUILT_IN_REF,\n      FUNCTION_REF,\n      STRING_REF,\n      'self',\n    ],\n  };\n\n  FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);\n\n  return {\n    aliases: ['gss'],\n    case_insensitive: true, // language is case-insensitive\n    keywords: KEYWORDS,\n    illegal: /(\\{[%#]|[%#]\\}| <- )/,\n    contains: [\n      hljs.C_NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      AT_COMMENT_MODE,\n      STRING_REF,\n      PREPROCESSOR,\n      {\n        className: 'keyword',\n        begin: /\\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/,\n      },\n      DEFINITION('proc keyword', ';'),\n      DEFINITION('fn', '='),\n      {\n        beginKeywords: 'for threadfor',\n        end: /;/,\n        //end: /\\(/,\n        relevance: 0,\n        contains: [\n          hljs.C_BLOCK_COMMENT_MODE,\n          AT_COMMENT_MODE,\n          FUNCTION_REF_PARAMS,\n        ],\n      },\n      { // custom method guard\n        // excludes method names from keyword processing\n        variants: [\n          { begin: hljs.UNDERSCORE_IDENT_RE + '\\\\.' + hljs.UNDERSCORE_IDENT_RE, },\n          { begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s*=', },\n        ],\n        relevance: 0,\n      },\n      FUNCTION_REF,\n      STRUCT_TYPE,\n    ]\n  };\n};","module.exports = function(hljs) {\n  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var KEYWORDS = {\n    keyword:\n      'in if for while finally var new function do return void else break catch ' +\n      'instanceof with throw case default try this switch continue typeof delete ' +\n      'let yield const class public private protected get set super ' +\n      'static implements enum export import declare type namespace abstract ' +\n      'as from extends async await',\n    literal:\n      'true false null undefined NaN Infinity',\n    built_in:\n      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +\n      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +\n      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +\n      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +\n      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +\n      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +\n      'module console window document any number boolean string void Promise'\n  };\n\n  var DECORATOR = {\n    className: 'meta',\n    begin: '@' + JS_IDENT_RE,\n  };\n\n  var ARGS =\n  {\n    begin: '\\\\(',\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      'self',\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.NUMBER_MODE\n    ]\n  };\n\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/, end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      DECORATOR,\n      ARGS\n    ]\n  };\n\n  return {\n    aliases: ['ts'],\n    keywords: KEYWORDS,\n    contains: [\n      {\n        className: 'meta',\n        begin: /^\\s*['\"]use strict['\"]/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      { // template string\n        className: 'string',\n        begin: '`', end: '`',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {\n            className: 'subst',\n            begin: '\\\\$\\\\{', end: '\\\\}'\n          }\n        ]\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b(0[bB][01]+)' },\n          { begin: '\\\\b(0[oO][0-7]+)' },\n          { begin: hljs.C_NUMBER_RE }\n        ],\n        relevance: 0\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            begin: '(\\\\(.*?\\\\)|' + hljs.IDENT_RE + ')\\\\s*=>', returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: hljs.IDENT_RE\n                  },\n                  {\n                    begin: /\\(\\s*\\)/,\n                  },\n                  {\n                    begin: /\\(/, end: /\\)/,\n                    excludeBegin: true, excludeEnd: true,\n                    keywords: KEYWORDS,\n                    contains: [\n                      'self',\n                      hljs.C_LINE_COMMENT_MODE,\n                      hljs.C_BLOCK_COMMENT_MODE\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: 'function', end: /[\\{;]/, excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          'self',\n          hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE }),\n          PARAMS\n        ],\n        illegal: /%/,\n        relevance: 0 // () => {} is more typical in TypeScript\n      },\n      {\n        beginKeywords: 'constructor', end: /\\{/, excludeEnd: true,\n        contains: [\n          'self',\n          PARAMS\n        ]\n      },\n      { // prevent references like module.id from being higlighted as module definitions\n        begin: /module\\./,\n        keywords: { built_in: 'module' },\n        relevance: 0\n      },\n      {\n        beginKeywords: 'module', end: /\\{/, excludeEnd: true\n      },\n      {\n        beginKeywords: 'interface', end: /\\{/, excludeEnd: true,\n        keywords: 'interface extends'\n      },\n      {\n        begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      },\n      {\n        begin: '\\\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots\n      },\n      DECORATOR,\n      ARGS\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword: 'BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color ' +\n        'double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject ' +\n        'Object StringDict StringList Table TableRow XML ' +\n        // Java keywords\n        'false synchronized int abstract float private char boolean static null if const ' +\n        'for true while long throw strictfp finally protected import native final return void ' +\n        'enum else break transient new catch instanceof byte super volatile case assert short ' +\n        'package default double public try this switch continue throws protected public private',\n      literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI',\n      title: 'setup draw',\n      built_in: 'displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key ' +\n        'keyCode pixels focused frameCount frameRate height width ' +\n        'size createGraphics beginDraw createShape loadShape PShape arc ellipse line point ' +\n        'quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint ' +\n        'curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex ' +\n        'endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap ' +\n        'strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased ' +\n        'mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour ' +\n        'millis minute month second year background clear colorMode fill noFill noStroke stroke alpha ' +\n        'blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY ' +\n        'screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ' +\n        'ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle ' +\n        'pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf ' +\n        'nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset ' +\n        'box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings ' +\n        'loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput ' +\n        'createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings ' +\n        'saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale ' +\n        'shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal ' +\n        'pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap ' +\n        'blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont ' +\n        'loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil ' +\n        'constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees ' +\n        'radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed'\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?\"' }),\n      {\n        begin: '(u8?|U)?R\"', end: '\"',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '\\'\\\\\\\\?.', end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(u|U|l|L|ul|UL|f|F)' },\n      { begin: hljs.C_NUMBER_RE }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: '#', end: '$',\n    keywords: {'meta-keyword': 'if else elif endif define undef ifdef ifndef'},\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      {\n        beginKeywords: 'include', end: '$',\n        keywords: {'meta-keyword': 'include'},\n        contains: [\n          hljs.inherit(STRINGS, {className: 'meta-string'}),\n          {\n            className: 'meta-string',\n            begin: '<', end: '>',\n            illegal: '\\\\n'\n          }\n        ]\n      },\n      STRINGS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var DTS_REFERENCE = {\n    className: 'variable',\n    begin: '\\\\&[a-z\\\\d_]*\\\\b'\n  };\n\n  var DTS_KEYWORD = {\n    className: 'meta-keyword',\n    begin: '/[a-z][a-z\\\\d-]*/'\n  };\n\n  var DTS_LABEL = {\n    className: 'symbol',\n    begin: '^\\\\s*[a-zA-Z_][a-zA-Z\\\\d_]*:'\n  };\n\n  var DTS_CELL_PROPERTY = {\n    className: 'params',\n    begin: '<',\n    end: '>',\n    contains: [\n      NUMBERS,\n      DTS_REFERENCE\n    ]\n  };\n\n  var DTS_NODE = {\n    className: 'class',\n    begin: /[a-zA-Z_][a-zA-Z\\d_@]*\\s{/,\n    end: /[{;=]/,\n    returnBegin: true,\n    excludeEnd: true\n  };\n\n  var DTS_ROOT_NODE = {\n    className: 'class',\n    begin: '/\\\\s*{',\n    end: '};',\n    relevance: 10,\n    contains: [\n      DTS_REFERENCE,\n      DTS_KEYWORD,\n      DTS_LABEL,\n      DTS_NODE,\n      DTS_CELL_PROPERTY,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBERS,\n      STRINGS\n    ]\n  };\n\n  return {\n    keywords: \"\",\n    contains: [\n      DTS_ROOT_NODE,\n      DTS_REFERENCE,\n      DTS_KEYWORD,\n      DTS_LABEL,\n      DTS_NODE,\n      DTS_CELL_PROPERTY,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBERS,\n      STRINGS,\n      PREPROCESSOR,\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: \"\"\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // Moonscript keywords\n      'if then not for in while do return else elseif break continue switch and or ' +\n      'unless when class extends super local import export from using',\n    literal:\n      'true false nil',\n    built_in:\n      '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load ' +\n      'loadfile loadstring module next pairs pcall print rawequal rawget rawset require ' +\n      'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug ' +\n      'io math os package string table'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var SUBST = {\n    className: 'subst',\n    begin: /#\\{/, end: /}/,\n    keywords: KEYWORDS\n  };\n  var EXPRESSIONS = [\n    hljs.inherit(hljs.C_NUMBER_MODE,\n      {starts: {end: '(\\\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp\n    {\n      className: 'string',\n      variants: [\n        {\n          begin: /'/, end: /'/,\n          contains: [hljs.BACKSLASH_ESCAPE]\n        },\n        {\n          begin: /\"/, end: /\"/,\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n        }\n      ]\n    },\n    {\n      className: 'built_in',\n      begin: '@__' + hljs.IDENT_RE\n    },\n    {\n      begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript\n    },\n    {\n      begin: hljs.IDENT_RE + '\\\\\\\\' + hljs.IDENT_RE // inst\\method\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});\n  var PARAMS_RE = '(\\\\(.*\\\\))?\\\\s*\\\\B[-=]>';\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\([^\\\\(]', returnBegin: true,\n    /* We need another contained nameless mode to not have every nested\n    pair of parens to be called \"params\" */\n    contains: [{\n      begin: /\\(/, end: /\\)/,\n      keywords: KEYWORDS,\n      contains: ['self'].concat(EXPRESSIONS)\n    }]\n  };\n\n  return {\n    aliases: ['moon'],\n    keywords: KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: EXPRESSIONS.concat([\n      hljs.COMMENT('--', '$'),\n      {\n        className: 'function',  // function: -> =>\n        begin: '^\\\\s*' + JS_IDENT_RE + '\\\\s*=\\\\s*' + PARAMS_RE, end: '[-=]>',\n        returnBegin: true,\n        contains: [TITLE, PARAMS]\n      },\n      {\n        begin: /[\\(,:=]\\s*/, // anonymous function start\n        relevance: 0,\n        contains: [\n          {\n            className: 'function',\n            begin: PARAMS_RE, end: '[-=]>',\n            returnBegin: true,\n            contains: [PARAMS]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class',\n        end: '$',\n        illegal: /[:=\"\\[\\]]/,\n        contains: [\n          {\n            beginKeywords: 'extends',\n            endsWithParent: true,\n            illegal: /[:=\"\\[\\]]/,\n            contains: [TITLE]\n          },\n          TITLE\n        ]\n      },\n      {\n        className: 'name',    // table\n        begin: JS_IDENT_RE + ':', end: ':',\n        returnBegin: true, returnEnd: true,\n        relevance: 0\n      }\n    ])\n  };\n};","module.exports = function(hljs) {\n  var CONSTANTS = {\n    className: 'variable',\n    begin: /\\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/\n  };\n\n  var DEFINES = {\n    // ${defines}\n    className: 'variable',\n    begin: /\\$+{[\\w\\.:-]+}/\n  };\n\n  var VARIABLES = {\n    // $variables\n    className: 'variable',\n    begin: /\\$+\\w+/,\n    illegal: /\\(\\){}/\n  };\n\n  var LANGUAGES = {\n    // $(language_strings)\n    className: 'variable',\n    begin: /\\$+\\([\\w\\^\\.:-]+\\)/\n  };\n\n  var PARAMETERS = {\n    // command parameters\n    className: 'params',\n    begin: '(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)'\n  };\n\n  var COMPILER = {\n    // !compiler_flags\n    className: 'keyword',\n    begin: /\\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|searchparse|searchreplace|system|tempfile|undef|verbose|warning)/\n  };\n\n  var METACHARS = {\n    // $\\n, $\\r, $\\t, $$\n    className: 'meta',\n    begin: /\\$(\\\\[nrt]|\\$)/\n  };\n\n  var PLUGINS = {\n    // plug::ins\n    className: 'class',\n    begin: /\\w+\\:\\:\\w+/\n  };\n\n    var STRING = {\n      className: 'string',\n      variants: [\n        {\n          begin: '\"', end: '\"'\n        },\n        {\n          begin: '\\'', end: '\\''\n        },\n        {\n          begin: '`', end: '`'\n        }\n      ],\n      illegal: /\\n/,\n      contains: [\n        METACHARS,\n        CONSTANTS,\n        DEFINES,\n        VARIABLES,\n        LANGUAGES\n      ]\n  };\n\n  return {\n    case_insensitive: false,\n    keywords: {\n      keyword:\n      'Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecShellWait ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText Int64Cmp Int64CmpU Int64Fmt IntCmp IntCmpU IntFmt IntOp IntPtrCmp IntPtrCmpU IntPtrOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegMultiStr WriteRegNone WriteRegStr WriteUninstaller XPStyle',\n      literal:\n      'admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib'\n    },\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.COMMENT(\n        ';',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      {\n        className: 'function',\n        beginKeywords: 'Function PageEx Section SectionGroup', end: '$'\n      },\n      STRING,\n      COMPILER,\n      DEFINES,\n      VARIABLES,\n      LANGUAGES,\n      PARAMETERS,\n      PLUGINS,\n      hljs.NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var BASIC_ATOM_RE = '[a-z\\'][a-zA-Z0-9_\\']*';\n  var FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';\n  var ERLANG_RESERVED = {\n    keyword:\n      'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if ' +\n      'let not of orelse|10 query receive rem try when xor',\n    literal:\n      'false true'\n  };\n\n  var COMMENT = hljs.COMMENT('%', '$');\n  var NUMBER = {\n    className: 'number',\n    begin: '\\\\b(\\\\d+#[a-fA-F0-9]+|\\\\d+(\\\\.\\\\d+)?([eE][-+]?\\\\d+)?)',\n    relevance: 0\n  };\n  var NAMED_FUN = {\n    begin: 'fun\\\\s+' + BASIC_ATOM_RE + '/\\\\d+'\n  };\n  var FUNCTION_CALL = {\n    begin: FUNCTION_NAME_RE + '\\\\(', end: '\\\\)',\n    returnBegin: true,\n    relevance: 0,\n    contains: [\n      {\n        begin: FUNCTION_NAME_RE, relevance: 0\n      },\n      {\n        begin: '\\\\(', end: '\\\\)', endsWithParent: true,\n        returnEnd: true,\n        relevance: 0\n        // \"contains\" defined later\n      }\n    ]\n  };\n  var TUPLE = {\n    begin: '{', end: '}',\n    relevance: 0\n    // \"contains\" defined later\n  };\n  var VAR1 = {\n    begin: '\\\\b_([A-Z][A-Za-z0-9_]*)?',\n    relevance: 0\n  };\n  var VAR2 = {\n    begin: '[A-Z][a-zA-Z0-9_]*',\n    relevance: 0\n  };\n  var RECORD_ACCESS = {\n    begin: '#' + hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0,\n    returnBegin: true,\n    contains: [\n      {\n        begin: '#' + hljs.UNDERSCORE_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: '{', end: '}',\n        relevance: 0\n        // \"contains\" defined later\n      }\n    ]\n  };\n\n  var BLOCK_STATEMENTS = {\n    beginKeywords: 'fun receive if try case', end: 'end',\n    keywords: ERLANG_RESERVED\n  };\n  BLOCK_STATEMENTS.contains = [\n    COMMENT,\n    NAMED_FUN,\n    hljs.inherit(hljs.APOS_STRING_MODE, {className: ''}),\n    BLOCK_STATEMENTS,\n    FUNCTION_CALL,\n    hljs.QUOTE_STRING_MODE,\n    NUMBER,\n    TUPLE,\n    VAR1, VAR2,\n    RECORD_ACCESS\n  ];\n\n  var BASIC_MODES = [\n    COMMENT,\n    NAMED_FUN,\n    BLOCK_STATEMENTS,\n    FUNCTION_CALL,\n    hljs.QUOTE_STRING_MODE,\n    NUMBER,\n    TUPLE,\n    VAR1, VAR2,\n    RECORD_ACCESS\n  ];\n  FUNCTION_CALL.contains[1].contains = BASIC_MODES;\n  TUPLE.contains = BASIC_MODES;\n  RECORD_ACCESS.contains[1].contains = BASIC_MODES;\n\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', end: '\\\\)',\n    contains: BASIC_MODES\n  };\n  return {\n    aliases: ['erl'],\n    keywords: ERLANG_RESERVED,\n    illegal: '(</|\\\\*=|\\\\+=|-=|/\\\\*|\\\\*/|\\\\(\\\\*|\\\\*\\\\))',\n    contains: [\n      {\n        className: 'function',\n        begin: '^' + BASIC_ATOM_RE + '\\\\s*\\\\(', end: '->',\n        returnBegin: true,\n        illegal: '\\\\(|#|//|/\\\\*|\\\\\\\\|:|;',\n        contains: [\n          PARAMS,\n          hljs.inherit(hljs.TITLE_MODE, {begin: BASIC_ATOM_RE})\n        ],\n        starts: {\n          end: ';|\\\\.',\n          keywords: ERLANG_RESERVED,\n          contains: BASIC_MODES\n        }\n      },\n      COMMENT,\n      {\n        begin: '^-', end: '\\\\.',\n        relevance: 0,\n        excludeEnd: true,\n        returnBegin: true,\n        lexemes: '-' + hljs.IDENT_RE,\n        keywords:\n          '-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn ' +\n          '-import -include -include_lib -compile -define -else -endif -file -behaviour ' +\n          '-behavior -spec',\n        contains: [PARAMS]\n      },\n      NUMBER,\n      hljs.QUOTE_STRING_MODE,\n      RECORD_ACCESS,\n      VAR1, VAR2,\n      TUPLE,\n      {begin: /\\.$/} // relevance booster\n    ]\n  };\n};","module.exports = function(hljs) {\n    var regexes = {\n        ruleDeclaration: \"^[a-zA-Z][a-zA-Z0-9-]*\",\n        unexpectedChars: \"[!@#$^&',?+~`|:]\"\n    };\n\n    var keywords = [\n        \"ALPHA\",\n        \"BIT\",\n        \"CHAR\",\n        \"CR\",\n        \"CRLF\",\n        \"CTL\",\n        \"DIGIT\",\n        \"DQUOTE\",\n        \"HEXDIG\",\n        \"HTAB\",\n        \"LF\",\n        \"LWSP\",\n        \"OCTET\",\n        \"SP\",\n        \"VCHAR\",\n        \"WSP\"\n    ];\n\n    var commentMode = hljs.COMMENT(\";\", \"$\");\n\n    var terminalBinaryMode = {\n        className: \"symbol\",\n        begin: /%b[0-1]+(-[0-1]+|(\\.[0-1]+)+){0,1}/\n    };\n\n    var terminalDecimalMode = {\n        className: \"symbol\",\n        begin: /%d[0-9]+(-[0-9]+|(\\.[0-9]+)+){0,1}/\n    };\n\n    var terminalHexadecimalMode = {\n        className: \"symbol\",\n        begin: /%x[0-9A-F]+(-[0-9A-F]+|(\\.[0-9A-F]+)+){0,1}/,\n    };\n\n    var caseSensitivityIndicatorMode = {\n        className: \"symbol\",\n        begin: /%[si]/\n    };\n\n    var ruleDeclarationMode = {\n        begin: regexes.ruleDeclaration + '\\\\s*=',\n        returnBegin: true,\n        end: /=/,\n        relevance: 0,\n        contains: [{className: \"attribute\", begin: regexes.ruleDeclaration}]\n    };\n\n    return {\n      illegal: regexes.unexpectedChars,\n      keywords: keywords.join(\" \"),\n      contains: [\n          ruleDeclarationMode,\n          commentMode,\n          terminalBinaryMode,\n          terminalDecimalMode,\n          terminalHexadecimalMode,\n          caseSensitivityIndicatorMode,\n          hljs.QUOTE_STRING_MODE,\n          hljs.NUMBER_MODE\n      ]\n    };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['console'],\n    contains: [\n      {\n        className: 'meta',\n        begin: '^\\\\s{0,3}[\\\\w\\\\d\\\\[\\\\]()@-]*[>%$#]',\n        starts: {\n          end: '$', subLanguage: 'bash'\n        }\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n  return {\n    contains: [\n      {\n        className: 'meta',\n        begin: /^julia>/,\n        relevance: 10,\n        starts: {\n          // end the highlighting if we are on a new line and the line does not have at\n          // least six spaces in the beginning\n          end: /^(?![ ]{6})/,\n          subLanguage: 'julia'\n      },\n      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate\n      // code snippets that should be verified when the documentation is built. They can be\n      // either REPL-like or script-like, but are usually REPL-like and therefore we apply\n      // julia-repl highlighting to them. More information can be found in Documenter's\n      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html\n      aliases: ['jldoctest']\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n  var keywords = {\n    'builtin-name':\n      // Clojure keywords\n      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+\n      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+\n      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+\n      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n   };\n\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n\n  return {\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  }\n};","module.exports = function(hljs) {\n  return {\n    contains: [\n      hljs.C_NUMBER_MODE,\n      {\n        begin: '[a-zA-Z_][\\\\da-zA-Z_]+\\\\.[\\\\da-zA-Z_]{1,3}', end: ':',\n        excludeEnd: true\n      },\n      {\n        begin: '(ncalls|tottime|cumtime)', end: '$',\n        keywords: 'ncalls tottime|10 cumtime|10 filename',\n        relevance: 10\n      },\n      {\n        begin: 'function calls', end: '$',\n        contains: [hljs.C_NUMBER_MODE],\n        relevance: 10\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\\\(', end: '\\\\)$',\n        excludeBegin: true, excludeEnd: true,\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var QUOTED_PROPERTY = {\n    className: 'string',\n    begin: /\"/, end: /\"/\n  };\n  var APOS_PROPERTY = {\n    className: 'string',\n    begin: /'/, end: /'/\n  };\n  var UNQUOTED_PROPERTY = {\n    className: 'string',\n    begin: '[\\\\w-?]+:\\\\w+', end: '\\\\W',\n    relevance: 0\n  };\n  var VALUELESS_PROPERTY = {\n    className: 'string',\n    begin: '\\\\w+-?\\\\w+', end: '\\\\W',\n    relevance: 0\n  };\n\n  return {\n    keywords: 'dsconfig',\n    contains: [\n      {\n        className: 'keyword',\n        begin: '^dsconfig', end: '\\\\s', excludeEnd: true,\n        relevance: 10\n      },\n      {\n        className: 'built_in',\n        begin: '(list|create|get|set|delete)-(\\\\w+)', end: '\\\\s', excludeEnd: true,\n        illegal: '!@#$%^&*()',\n        relevance: 10\n      },\n      {\n        className: 'built_in',\n        begin: '--(\\\\w+)', end: '\\\\s', excludeEnd: true\n      },\n      QUOTED_PROPERTY,\n      APOS_PROPERTY,\n      UNQUOTED_PROPERTY,\n      VALUELESS_PROPERTY,\n      hljs.HASH_COMMENT_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  // 2.3. Identifiers and keywords\n  var KEYWORDS =\n    'assembly module package import alias class interface object given value ' +\n    'assign void function new of extends satisfies abstracts in out return ' +\n    'break continue throw assert dynamic if else switch case for while try ' +\n    'catch finally then let this outer super is exists nonempty';\n  // 7.4.1 Declaration Modifiers\n  var DECLARATION_MODIFIERS =\n    'shared abstract formal default actual variable late native deprecated' +\n    'final sealed annotation suppressWarnings small';\n  // 7.4.2 Documentation\n  var DOCUMENTATION =\n    'doc by license see throws tagged';\n  var SUBST = {\n    className: 'subst', excludeBegin: true, excludeEnd: true,\n    begin: /``/, end: /``/,\n    keywords: KEYWORDS,\n    relevance: 10\n  };\n  var EXPRESSIONS = [\n    {\n      // verbatim string\n      className: 'string',\n      begin: '\"\"\"',\n      end: '\"\"\"',\n      relevance: 10\n    },\n    {\n      // string literal or template\n      className: 'string',\n      begin: '\"', end: '\"',\n      contains: [SUBST]\n    },\n    {\n      // character literal\n      className: 'string',\n      begin: \"'\",\n      end: \"'\"\n    },\n    {\n      // numeric literal\n      className: 'number',\n      begin: '#[0-9a-fA-F_]+|\\\\$[01_]+|[0-9_]+(?:\\\\.[0-9_](?:[eE][+-]?\\\\d+)?)?[kMGTPmunpf]?',\n      relevance: 0\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  return {\n    keywords: {\n      keyword: KEYWORDS + ' ' + DECLARATION_MODIFIERS,\n      meta: DOCUMENTATION\n    },\n    illegal: '\\\\$[^01]|#[^0-9a-fA-F]',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', {contains: ['self']}),\n      {\n        // compiler annotation\n        className: 'meta',\n        begin: '@[a-z]\\\\w*(?:\\\\:\\\"[^\\\"]*\\\")?'\n      }\n    ].concat(EXPRESSIONS)\n  };\n};","module.exports = function(hljs) {\n  // Определение идентификаторов\n  var UNDERSCORE_IDENT_RE = \"[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*\";\n\n  // Определение имен функций\n  var FUNCTION_NAME_IDENT_RE = \"[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*\";\n\n  // keyword : ключевые слова\n  var KEYWORD =\n    \"and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока \" +\n    \"except exitfor finally foreach все if если in в not не or или try while пока \";\n\n  // SYSRES Constants\n  var sysres_constants =\n    \"SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT \" +\n    \"SYSRES_CONST_ACCES_RIGHT_TYPE_FULL \" +\n    \"SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW \" +\n    \"SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_NO_ACCESS_VIEW \" +\n    \"SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_VIEW \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE \" +\n    \"SYSRES_CONST_ACCESS_TYPE_CHANGE \" +\n    \"SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE \" +\n    \"SYSRES_CONST_ACCESS_TYPE_EXISTS \" +\n    \"SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE \" +\n    \"SYSRES_CONST_ACCESS_TYPE_FULL \" +\n    \"SYSRES_CONST_ACCESS_TYPE_FULL_CODE \" +\n    \"SYSRES_CONST_ACCESS_TYPE_VIEW \" +\n    \"SYSRES_CONST_ACCESS_TYPE_VIEW_CODE \" +\n    \"SYSRES_CONST_ACTION_TYPE_ABORT \" +\n    \"SYSRES_CONST_ACTION_TYPE_ACCEPT \" +\n    \"SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS \" +\n    \"SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT \" +\n    \"SYSRES_CONST_ACTION_TYPE_CHANGE_CARD \" +\n    \"SYSRES_CONST_ACTION_TYPE_CHANGE_KIND \" +\n    \"SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE \" +\n    \"SYSRES_CONST_ACTION_TYPE_CONTINUE \" +\n    \"SYSRES_CONST_ACTION_TYPE_COPY \" +\n    \"SYSRES_CONST_ACTION_TYPE_CREATE \" +\n    \"SYSRES_CONST_ACTION_TYPE_CREATE_VERSION \" +\n    \"SYSRES_CONST_ACTION_TYPE_DELETE \" +\n    \"SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT \" +\n    \"SYSRES_CONST_ACTION_TYPE_DELETE_VERSION \" +\n    \"SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS \" +\n    \"SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS \" +\n    \"SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE \" +\n    \"SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD \" +\n    \"SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD \" +\n    \"SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK \" +\n    \"SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK \" +\n    \"SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK \" +\n    \"SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK \" +\n    \"SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE \" +\n    \"SYSRES_CONST_ACTION_TYPE_LOCK \" +\n    \"SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER \" +\n    \"SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY \" +\n    \"SYSRES_CONST_ACTION_TYPE_MARK_AS_READED \" +\n    \"SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED \" +\n    \"SYSRES_CONST_ACTION_TYPE_MODIFY \" +\n    \"SYSRES_CONST_ACTION_TYPE_MODIFY_CARD \" +\n    \"SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE \" +\n    \"SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION \" +\n    \"SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE \" +\n    \"SYSRES_CONST_ACTION_TYPE_PERFORM \" +\n    \"SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY \" +\n    \"SYSRES_CONST_ACTION_TYPE_RESTART \" +\n    \"SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE \" +\n    \"SYSRES_CONST_ACTION_TYPE_REVISION \" +\n    \"SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL \" +\n    \"SYSRES_CONST_ACTION_TYPE_SIGN \" +\n    \"SYSRES_CONST_ACTION_TYPE_START \" +\n    \"SYSRES_CONST_ACTION_TYPE_UNLOCK \" +\n    \"SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER \" +\n    \"SYSRES_CONST_ACTION_TYPE_VERSION_STATE \" +\n    \"SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY \" +\n    \"SYSRES_CONST_ACTION_TYPE_VIEW \" +\n    \"SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY \" +\n    \"SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY \" +\n    \"SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY \" +\n    \"SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE \" +\n    \"SYSRES_CONST_ADD_REFERENCE_MODE_NAME \" +\n    \"SYSRES_CONST_ADDITION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME \" +\n    \"SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE \" +\n    \"SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION \" +\n    \"SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS \" +\n    \"SYSRES_CONST_ALL_USERS_GROUP \" +\n    \"SYSRES_CONST_ALL_USERS_GROUP_NAME \" +\n    \"SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME \" +\n    \"SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE \" +\n    \"SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME \" +\n    \"SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_APPROVING_SIGNATURE_NAME \" +\n    \"SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE \" +\n    \"SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE \" +\n    \"SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN \" +\n    \"SYSRES_CONST_ATTACH_TYPE_DOC \" +\n    \"SYSRES_CONST_ATTACH_TYPE_EDOC \" +\n    \"SYSRES_CONST_ATTACH_TYPE_FOLDER \" +\n    \"SYSRES_CONST_ATTACH_TYPE_JOB \" +\n    \"SYSRES_CONST_ATTACH_TYPE_REFERENCE \" +\n    \"SYSRES_CONST_ATTACH_TYPE_TASK \" +\n    \"SYSRES_CONST_AUTH_ENCODED_PASSWORD \" +\n    \"SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE \" +\n    \"SYSRES_CONST_AUTH_NOVELL \" +\n    \"SYSRES_CONST_AUTH_PASSWORD \" +\n    \"SYSRES_CONST_AUTH_PASSWORD_CODE \" +\n    \"SYSRES_CONST_AUTH_WINDOWS \" +\n    \"SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME \" +\n    \"SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_AUTO_ENUM_METHOD_FLAG \" +\n    \"SYSRES_CONST_AUTO_NUMERATION_CODE \" +\n    \"SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG \" +\n    \"SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_USAGE_ALL \" +\n    \"SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_USAGE_SIGN \" +\n    \"SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_USAGE_WORK \" +\n    \"SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE \" +\n    \"SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE \" +\n    \"SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_BTN_PART \" +\n    \"SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE \" +\n    \"SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE \" +\n    \"SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE \" +\n    \"SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT \" +\n    \"SYSRES_CONST_CARD_PART \" +\n    \"SYSRES_CONST_CARD_REFERENCE_MODE_NAME \" +\n    \"SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE \" +\n    \"SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE \" +\n    \"SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE \" +\n    \"SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE \" +\n    \"SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE \" +\n    \"SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE \" +\n    \"SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE \" +\n    \"SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE \" +\n    \"SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE \" +\n    \"SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT \" +\n    \"SYSRES_CONST_CODE_COMPONENT_TYPE_URL \" +\n    \"SYSRES_CONST_CODE_REQUISITE_ACCESS \" +\n    \"SYSRES_CONST_CODE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_CODE_REQUISITE_COMPONENT \" +\n    \"SYSRES_CONST_CODE_REQUISITE_DESCRIPTION \" +\n    \"SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT \" +\n    \"SYSRES_CONST_CODE_REQUISITE_RECORD \" +\n    \"SYSRES_CONST_COMMENT_REQ_CODE \" +\n    \"SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_COMP_CODE_GRD \" +\n    \"SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_DOCS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_EDOCS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_OTHER \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_REFERENCES \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_REPORTS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_SCRIPTS \" +\n    \"SYSRES_CONST_COMPONENT_TYPE_URL \" +\n    \"SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE \" +\n    \"SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_CONST_FIRM_STATUS_COMMON \" +\n    \"SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL \" +\n    \"SYSRES_CONST_CONST_NEGATIVE_VALUE \" +\n    \"SYSRES_CONST_CONST_POSITIVE_VALUE \" +\n    \"SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE \" +\n    \"SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE \" +\n    \"SYSRES_CONST_CONTENTS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_DATA_TYPE_BOOLEAN \" +\n    \"SYSRES_CONST_DATA_TYPE_DATE \" +\n    \"SYSRES_CONST_DATA_TYPE_FLOAT \" +\n    \"SYSRES_CONST_DATA_TYPE_INTEGER \" +\n    \"SYSRES_CONST_DATA_TYPE_PICK \" +\n    \"SYSRES_CONST_DATA_TYPE_REFERENCE \" +\n    \"SYSRES_CONST_DATA_TYPE_STRING \" +\n    \"SYSRES_CONST_DATA_TYPE_TEXT \" +\n    \"SYSRES_CONST_DATA_TYPE_VARIANT \" +\n    \"SYSRES_CONST_DATE_CLOSE_REQ_CODE \" +\n    \"SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR \" +\n    \"SYSRES_CONST_DATE_OPEN_REQ_CODE \" +\n    \"SYSRES_CONST_DATE_REQUISITE \" +\n    \"SYSRES_CONST_DATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_DATE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_DATE_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_DATE_TYPE_CHAR \" +\n    \"SYSRES_CONST_DATETIME_FORMAT_VALUE \" +\n    \"SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE \" +\n    \"SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE \" +\n    \"SYSRES_CONST_DESCRIPTION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_DET1_PART \" +\n    \"SYSRES_CONST_DET2_PART \" +\n    \"SYSRES_CONST_DET3_PART \" +\n    \"SYSRES_CONST_DET4_PART \" +\n    \"SYSRES_CONST_DET5_PART \" +\n    \"SYSRES_CONST_DET6_PART \" +\n    \"SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE \" +\n    \"SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE \" +\n    \"SYSRES_CONST_DETAIL_REQ_CODE \" +\n    \"SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE \" +\n    \"SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME \" +\n    \"SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE \" +\n    \"SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME \" +\n    \"SYSRES_CONST_DOCUMENT_STORAGES_CODE \" +\n    \"SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME \" +\n    \"SYSRES_CONST_DOUBLE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE \" +\n    \"SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE \" +\n    \"SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE \" +\n    \"SYSRES_CONST_EDITORS_REFERENCE_CODE \" +\n    \"SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE \" +\n    \"SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE \" +\n    \"SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE \" +\n    \"SYSRES_CONST_EDOC_DATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_KIND_REFERENCE_CODE \" +\n    \"SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE \" +\n    \"SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE \" +\n    \"SYSRES_CONST_EDOC_NONE_ENCODE_CODE \" +\n    \"SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE \" +\n    \"SYSRES_CONST_EDOC_READONLY_ACCESS_CODE \" +\n    \"SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE \" +\n    \"SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE \" +\n    \"SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE \" +\n    \"SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE \" +\n    \"SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE \" +\n    \"SYSRES_CONST_EDOC_WRITE_ACCES_CODE \" +\n    \"SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE \" +\n    \"SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE \" +\n    \"SYSRES_CONST_END_DATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE \" +\n    \"SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE \" +\n    \"SYSRES_CONST_EXIST_CONST \" +\n    \"SYSRES_CONST_EXIST_VALUE \" +\n    \"SYSRES_CONST_EXPORT_LOCK_TYPE_ASK \" +\n    \"SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK \" +\n    \"SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK \" +\n    \"SYSRES_CONST_EXPORT_VERSION_TYPE_ASK \" +\n    \"SYSRES_CONST_EXPORT_VERSION_TYPE_LAST \" +\n    \"SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE \" +\n    \"SYSRES_CONST_EXTENSION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_FILTER_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_FILTER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_FILTER_TYPE_COMMON_CODE \" +\n    \"SYSRES_CONST_FILTER_TYPE_COMMON_NAME \" +\n    \"SYSRES_CONST_FILTER_TYPE_USER_CODE \" +\n    \"SYSRES_CONST_FILTER_TYPE_USER_NAME \" +\n    \"SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR \" +\n    \"SYSRES_CONST_FLOAT_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_FOLDER_AUTHOR_VALUE \" +\n    \"SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS \" +\n    \"SYSRES_CONST_FOLDER_KIND_COMPONENTS \" +\n    \"SYSRES_CONST_FOLDER_KIND_EDOCS \" +\n    \"SYSRES_CONST_FOLDER_KIND_JOBS \" +\n    \"SYSRES_CONST_FOLDER_KIND_TASKS \" +\n    \"SYSRES_CONST_FOLDER_TYPE_COMMON \" +\n    \"SYSRES_CONST_FOLDER_TYPE_COMPONENT \" +\n    \"SYSRES_CONST_FOLDER_TYPE_FAVORITES \" +\n    \"SYSRES_CONST_FOLDER_TYPE_INBOX \" +\n    \"SYSRES_CONST_FOLDER_TYPE_OUTBOX \" +\n    \"SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH \" +\n    \"SYSRES_CONST_FOLDER_TYPE_SEARCH \" +\n    \"SYSRES_CONST_FOLDER_TYPE_SHORTCUTS \" +\n    \"SYSRES_CONST_FOLDER_TYPE_USER \" +\n    \"SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG \" +\n    \"SYSRES_CONST_FULL_SUBSTITUTE_TYPE \" +\n    \"SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE \" +\n    \"SYSRES_CONST_FUNCTION_CANCEL_RESULT \" +\n    \"SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM \" +\n    \"SYSRES_CONST_FUNCTION_CATEGORY_USER \" +\n    \"SYSRES_CONST_FUNCTION_FAILURE_RESULT \" +\n    \"SYSRES_CONST_FUNCTION_SAVE_RESULT \" +\n    \"SYSRES_CONST_GENERATED_REQUISITE \" +\n    \"SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE \" +\n    \"SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE \" +\n    \"SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME \" +\n    \"SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE \" +\n    \"SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME \" +\n    \"SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE \" +\n    \"SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_GROUP_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE \" +\n    \"SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE \" +\n    \"SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE \" +\n    \"SYSRES_CONST_GROUP_USER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_GROUPS_REFERENCE_CODE \" +\n    \"SYSRES_CONST_GROUPS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_HIDDEN_MODE_NAME \" +\n    \"SYSRES_CONST_HIGH_LVL_REQUISITE_CODE \" +\n    \"SYSRES_CONST_HISTORY_ACTION_CREATE_CODE \" +\n    \"SYSRES_CONST_HISTORY_ACTION_DELETE_CODE \" +\n    \"SYSRES_CONST_HISTORY_ACTION_EDIT_CODE \" +\n    \"SYSRES_CONST_HOUR_CHAR \" +\n    \"SYSRES_CONST_ID_REQUISITE_CODE \" +\n    \"SYSRES_CONST_IDSPS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_IMAGE_MODE_COLOR \" +\n    \"SYSRES_CONST_IMAGE_MODE_GREYSCALE \" +\n    \"SYSRES_CONST_IMAGE_MODE_MONOCHROME \" +\n    \"SYSRES_CONST_IMPORTANCE_HIGH \" +\n    \"SYSRES_CONST_IMPORTANCE_LOW \" +\n    \"SYSRES_CONST_IMPORTANCE_NORMAL \" +\n    \"SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE \" +\n    \"SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE \" +\n    \"SYSRES_CONST_INT_REQUISITE \" +\n    \"SYSRES_CONST_INT_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR \" +\n    \"SYSRES_CONST_INTEGER_TYPE_CHAR \" +\n    \"SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE \" +\n    \"SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE \" +\n    \"SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE \" +\n    \"SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE \" +\n    \"SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE \" +\n    \"SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE \" +\n    \"SYSRES_CONST_JOB_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_JOB_KIND_CONTROL_JOB \" +\n    \"SYSRES_CONST_JOB_KIND_JOB \" +\n    \"SYSRES_CONST_JOB_KIND_NOTICE \" +\n    \"SYSRES_CONST_JOB_STATE_ABORTED \" +\n    \"SYSRES_CONST_JOB_STATE_COMPLETE \" +\n    \"SYSRES_CONST_JOB_STATE_WORKING \" +\n    \"SYSRES_CONST_KIND_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KIND_REQUISITE_NAME \" +\n    \"SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE \" +\n    \"SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE \" +\n    \"SYSRES_CONST_KOD_INPUT_TYPE \" +\n    \"SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_EDOC \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_FOLDER \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_JOB \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE \" +\n    \"SYSRES_CONST_LINK_OBJECT_KIND_TASK \" +\n    \"SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_LIST_REFERENCE_MODE_NAME \" +\n    \"SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE \" +\n    \"SYSRES_CONST_MAIN_VIEW_CODE \" +\n    \"SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG \" +\n    \"SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE \" +\n    \"SYSRES_CONST_MAXIMIZED_MODE_NAME \" +\n    \"SYSRES_CONST_ME_VALUE \" +\n    \"SYSRES_CONST_MESSAGE_ATTENTION_CAPTION \" +\n    \"SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION \" +\n    \"SYSRES_CONST_MESSAGE_ERROR_CAPTION \" +\n    \"SYSRES_CONST_MESSAGE_INFORMATION_CAPTION \" +\n    \"SYSRES_CONST_MINIMIZED_MODE_NAME \" +\n    \"SYSRES_CONST_MINUTE_CHAR \" +\n    \"SYSRES_CONST_MODULE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_MONTH_FORMAT_VALUE \" +\n    \"SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE \" +\n    \"SYSRES_CONST_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE \" +\n    \"SYSRES_CONST_NAMEAN_INPUT_TYPE \" +\n    \"SYSRES_CONST_NEGATIVE_PICK_VALUE \" +\n    \"SYSRES_CONST_NEGATIVE_VALUE \" +\n    \"SYSRES_CONST_NO \" +\n    \"SYSRES_CONST_NO_PICK_VALUE \" +\n    \"SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_NO_VALUE \" +\n    \"SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE \" +\n    \"SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE \" +\n    \"SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE \" +\n    \"SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE \" +\n    \"SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE \" +\n    \"SYSRES_CONST_NORMAL_MODE_NAME \" +\n    \"SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE \" +\n    \"SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME \" +\n    \"SYSRES_CONST_NOTE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_NUM_REQUISITE \" +\n    \"SYSRES_CONST_NUM_STR_REQUISITE_CODE \" +\n    \"SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG \" +\n    \"SYSRES_CONST_NUMERATION_AUTO_STRONG \" +\n    \"SYSRES_CONST_NUMERATION_FROM_DICTONARY \" +\n    \"SYSRES_CONST_NUMERATION_MANUAL \" +\n    \"SYSRES_CONST_NUMERIC_TYPE_CHAR \" +\n    \"SYSRES_CONST_NUMREQ_REQUISITE_CODE \" +\n    \"SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE \" +\n    \"SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE \" +\n    \"SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE \" +\n    \"SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE \" +\n    \"SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE \" +\n    \"SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX \" +\n    \"SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_ORIGINALREF_REQUISITE_CODE \" +\n    \"SYSRES_CONST_OURFIRM_REF_CODE \" +\n    \"SYSRES_CONST_OURFIRM_REQUISITE_CODE \" +\n    \"SYSRES_CONST_OURFIRM_VAR \" +\n    \"SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE \" +\n    \"SYSRES_CONST_PICK_NEGATIVE_RESULT \" +\n    \"SYSRES_CONST_PICK_POSITIVE_RESULT \" +\n    \"SYSRES_CONST_PICK_REQUISITE \" +\n    \"SYSRES_CONST_PICK_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_PICK_TYPE_CHAR \" +\n    \"SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_PLATFORM_VERSION_COMMENT \" +\n    \"SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_POSITIVE_PICK_VALUE \" +\n    \"SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE \" +\n    \"SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE \" +\n    \"SYSRES_CONST_PRIORITY_REQUISITE_CODE \" +\n    \"SYSRES_CONST_QUALIFIED_TASK_TYPE \" +\n    \"SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE \" +\n    \"SYSRES_CONST_RECSTAT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REF_REQUISITE \" +\n    \"SYSRES_CONST_REF_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE \" +\n    \"SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE \" +\n    \"SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE \" +\n    \"SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE \" +\n    \"SYSRES_CONST_REFERENCE_TYPE_CHAR \" +\n    \"SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING \" +\n    \"SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN \" +\n    \"SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY \" +\n    \"SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE \" +\n    \"SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL \" +\n    \"SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE \" +\n    \"SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE \" +\n    \"SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE \" +\n    \"SYSRES_CONST_REQ_MODE_AVAILABLE_CODE \" +\n    \"SYSRES_CONST_REQ_MODE_EDIT_CODE \" +\n    \"SYSRES_CONST_REQ_MODE_HIDDEN_CODE \" +\n    \"SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE \" +\n    \"SYSRES_CONST_REQ_MODE_VIEW_CODE \" +\n    \"SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REQ_SECTION_VALUE \" +\n    \"SYSRES_CONST_REQ_TYPE_VALUE \" +\n    \"SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT \" +\n    \"SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL \" +\n    \"SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME \" +\n    \"SYSRES_CONST_REQUISITE_FORMAT_LEFT \" +\n    \"SYSRES_CONST_REQUISITE_FORMAT_RIGHT \" +\n    \"SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT \" +\n    \"SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_ACTIONS \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_BUTTON \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_BUTTONS \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_CARD \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE10 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE11 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE12 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE13 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE14 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE15 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE16 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE17 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE18 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE19 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE2 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE20 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE21 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE22 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE23 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE24 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE3 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE4 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE5 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE6 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE7 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE8 \" +\n    \"SYSRES_CONST_REQUISITE_SECTION_TABLE9 \" +\n    \"SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_RIGHT_ALIGNMENT_CODE \" +\n    \"SYSRES_CONST_ROLES_REFERENCE_CODE \" +\n    \"SYSRES_CONST_ROUTE_STEP_AFTER_RUS \" +\n    \"SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS \" +\n    \"SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS \" +\n    \"SYSRES_CONST_ROUTE_TYPE_COMPLEX \" +\n    \"SYSRES_CONST_ROUTE_TYPE_PARALLEL \" +\n    \"SYSRES_CONST_ROUTE_TYPE_SERIAL \" +\n    \"SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE \" +\n    \"SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE \" +\n    \"SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE \" +\n    \"SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_SEARCHES_COMPONENT_CONTENT \" +\n    \"SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME \" +\n    \"SYSRES_CONST_SEARCHES_EDOC_CONTENT \" +\n    \"SYSRES_CONST_SEARCHES_FOLDER_CONTENT \" +\n    \"SYSRES_CONST_SEARCHES_JOB_CONTENT \" +\n    \"SYSRES_CONST_SEARCHES_REFERENCE_CODE \" +\n    \"SYSRES_CONST_SEARCHES_TASK_CONTENT \" +\n    \"SYSRES_CONST_SECOND_CHAR \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE \" +\n    \"SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE \" +\n    \"SYSRES_CONST_SELECT_REFERENCE_MODE_NAME \" +\n    \"SYSRES_CONST_SELECT_TYPE_SELECTABLE \" +\n    \"SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD \" +\n    \"SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD \" +\n    \"SYSRES_CONST_SELECT_TYPE_UNSLECTABLE \" +\n    \"SYSRES_CONST_SERVER_TYPE_MAIN \" +\n    \"SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE \" +\n    \"SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE \" +\n    \"SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE \" +\n    \"SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE \" +\n    \"SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE \" +\n    \"SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE \" +\n    \"SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE \" +\n    \"SYSRES_CONST_STATE_REQ_NAME \" +\n    \"SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE \" +\n    \"SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE \" +\n    \"SYSRES_CONST_STATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_STATIC_ROLE_TYPE_CODE \" +\n    \"SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE \" +\n    \"SYSRES_CONST_STATUS_VALUE_AUTOCLEANING \" +\n    \"SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE \" +\n    \"SYSRES_CONST_STATUS_VALUE_COMPLETE \" +\n    \"SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE \" +\n    \"SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE \" +\n    \"SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE \" +\n    \"SYSRES_CONST_STATUS_VALUE_RED_SQUARE \" +\n    \"SYSRES_CONST_STATUS_VALUE_SUSPEND \" +\n    \"SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE \" +\n    \"SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_STORAGE_TYPE_FILE \" +\n    \"SYSRES_CONST_STORAGE_TYPE_SQL_SERVER \" +\n    \"SYSRES_CONST_STR_REQUISITE \" +\n    \"SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE \" +\n    \"SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR \" +\n    \"SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR \" +\n    \"SYSRES_CONST_STRING_REQUISITE_CODE \" +\n    \"SYSRES_CONST_STRING_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_STRING_TYPE_CHAR \" +\n    \"SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE \" +\n    \"SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE \" +\n    \"SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE \" +\n    \"SYSRES_CONST_SYSTEM_VERSION_COMMENT \" +\n    \"SYSRES_CONST_TASK_ACCESS_TYPE_ALL \" +\n    \"SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS \" +\n    \"SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL \" +\n    \"SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION \" +\n    \"SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD \" +\n    \"SYSRES_CONST_TASK_ENCODE_TYPE_NONE \" +\n    \"SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD \" +\n    \"SYSRES_CONST_TASK_ROUTE_ALL_CONDITION \" +\n    \"SYSRES_CONST_TASK_ROUTE_AND_CONDITION \" +\n    \"SYSRES_CONST_TASK_ROUTE_OR_CONDITION \" +\n    \"SYSRES_CONST_TASK_STATE_ABORTED \" +\n    \"SYSRES_CONST_TASK_STATE_COMPLETE \" +\n    \"SYSRES_CONST_TASK_STATE_CONTINUED \" +\n    \"SYSRES_CONST_TASK_STATE_CONTROL \" +\n    \"SYSRES_CONST_TASK_STATE_INIT \" +\n    \"SYSRES_CONST_TASK_STATE_WORKING \" +\n    \"SYSRES_CONST_TASK_TITLE \" +\n    \"SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE \" +\n    \"SYSRES_CONST_TASK_TYPES_REFERENCE_CODE \" +\n    \"SYSRES_CONST_TEMPLATES_REFERENCE_CODE \" +\n    \"SYSRES_CONST_TEST_DATE_REQUISITE_NAME \" +\n    \"SYSRES_CONST_TEST_DEV_DATABASE_NAME \" +\n    \"SYSRES_CONST_TEST_DEV_SYSTEM_CODE \" +\n    \"SYSRES_CONST_TEST_EDMS_DATABASE_NAME \" +\n    \"SYSRES_CONST_TEST_EDMS_MAIN_CODE \" +\n    \"SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME \" +\n    \"SYSRES_CONST_TEST_EDMS_SECOND_CODE \" +\n    \"SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME \" +\n    \"SYSRES_CONST_TEST_EDMS_SYSTEM_CODE \" +\n    \"SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME \" +\n    \"SYSRES_CONST_TEXT_REQUISITE \" +\n    \"SYSRES_CONST_TEXT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_TEXT_REQUISITE_TYPE \" +\n    \"SYSRES_CONST_TEXT_TYPE_CHAR \" +\n    \"SYSRES_CONST_TYPE_CODE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR \" +\n    \"SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE \" +\n    \"SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE \" +\n    \"SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE \" +\n    \"SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME \" +\n    \"SYSRES_CONST_USE_ACCESS_TYPE_CODE \" +\n    \"SYSRES_CONST_USE_ACCESS_TYPE_NAME \" +\n    \"SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE \" +\n    \"SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_CATEGORY_NORMAL \" +\n    \"SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_COMMON_CATEGORY \" +\n    \"SYSRES_CONST_USER_COMMON_CATEGORY_CODE \" +\n    \"SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_LOGIN_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USER_SERVICE_CATEGORY \" +\n    \"SYSRES_CONST_USER_SERVICE_CATEGORY_CODE \" +\n    \"SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE \" +\n    \"SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME \" +\n    \"SYSRES_CONST_USER_STATUS_DEVELOPER_CODE \" +\n    \"SYSRES_CONST_USER_STATUS_DEVELOPER_NAME \" +\n    \"SYSRES_CONST_USER_STATUS_DISABLED_CODE \" +\n    \"SYSRES_CONST_USER_STATUS_DISABLED_NAME \" +\n    \"SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE \" +\n    \"SYSRES_CONST_USER_STATUS_USER_CODE \" +\n    \"SYSRES_CONST_USER_STATUS_USER_NAME \" +\n    \"SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED \" +\n    \"SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER \" +\n    \"SYSRES_CONST_USER_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_REFERENCE_CODE \" +\n    \"SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME \" +\n    \"SYSRES_CONST_USERS_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE \" +\n    \"SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME \" +\n    \"SYSRES_CONST_VIEW_DEFAULT_CODE \" +\n    \"SYSRES_CONST_VIEW_DEFAULT_NAME \" +\n    \"SYSRES_CONST_VIEWER_REQUISITE_CODE \" +\n    \"SYSRES_CONST_WAITING_BLOCK_DESCRIPTION \" +\n    \"SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  \" +\n    \"SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING \" +\n    \"SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE \" +\n    \"SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE \" +\n    \"SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE \" +\n    \"SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE \" +\n    \"SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS \" +\n    \"SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS \" +\n    \"SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD \" +\n    \"SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT \" +\n    \"SYSRES_CONST_XML_ENCODING \" +\n    \"SYSRES_CONST_XREC_STAT_REQUISITE_CODE \" +\n    \"SYSRES_CONST_XRECID_FIELD_NAME \" +\n    \"SYSRES_CONST_YES \" +\n    \"SYSRES_CONST_YES_NO_2_REQUISITE_CODE \" +\n    \"SYSRES_CONST_YES_NO_REQUISITE_CODE \" +\n    \"SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE \" +\n    \"SYSRES_CONST_YES_PICK_VALUE \" +\n    \"SYSRES_CONST_YES_VALUE \";\n\n  // Base constant\n  var base_constants = \"CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE \";\n\n  // Base group name\n  var base_group_name_constants =\n    \"ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME \";\n\n  // Decision block properties\n  var decision_block_properties_constants =\n    \"DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY \" +\n    \"DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY \";\n\n  // File extension\n  var file_extension_constants =\n    \"ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION \" +\n    \"SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION \";\n\n  // Job block properties\n  var job_block_properties_constants =\n    \"JOB_BLOCK_ABORT_DEADLINE_PROPERTY \" +\n    \"JOB_BLOCK_AFTER_FINISH_EVENT \" +\n    \"JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT \" +\n    \"JOB_BLOCK_ATTACHMENT_PROPERTY \" +\n    \"JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY \" +\n    \"JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY \" +\n    \"JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT \" +\n    \"JOB_BLOCK_BEFORE_START_EVENT \" +\n    \"JOB_BLOCK_CREATED_JOBS_PROPERTY \" +\n    \"JOB_BLOCK_DEADLINE_PROPERTY \" +\n    \"JOB_BLOCK_EXECUTION_RESULTS_PROPERTY \" +\n    \"JOB_BLOCK_IS_PARALLEL_PROPERTY \" +\n    \"JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY \" +\n    \"JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY \" +\n    \"JOB_BLOCK_JOB_TEXT_PROPERTY \" +\n    \"JOB_BLOCK_NAME_PROPERTY \" +\n    \"JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY \" +\n    \"JOB_BLOCK_PERFORMER_PROPERTY \" +\n    \"JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY \" +\n    \"JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY \" +\n    \"JOB_BLOCK_SUBJECT_PROPERTY \";\n\n  // Language code\n  var language_code_constants = \"ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE \";\n\n  // Launching external applications\n  var launching_external_applications_constants =\n    \"smHidden smMaximized smMinimized smNormal wmNo wmYes \";\n\n  // Link kind\n  var link_kind_constants =\n    \"COMPONENT_TOKEN_LINK_KIND \" +\n    \"DOCUMENT_LINK_KIND \" +\n    \"EDOCUMENT_LINK_KIND \" +\n    \"FOLDER_LINK_KIND \" +\n    \"JOB_LINK_KIND \" +\n    \"REFERENCE_LINK_KIND \" +\n    \"TASK_LINK_KIND \";\n\n  // Lock type\n  var lock_type_constants =\n    \"COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE \";\n\n  // Monitor block properties\n  var monitor_block_properties_constants =\n    \"MONITOR_BLOCK_AFTER_FINISH_EVENT \" +\n    \"MONITOR_BLOCK_BEFORE_START_EVENT \" +\n    \"MONITOR_BLOCK_DEADLINE_PROPERTY \" +\n    \"MONITOR_BLOCK_INTERVAL_PROPERTY \" +\n    \"MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY \" +\n    \"MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY \" +\n    \"MONITOR_BLOCK_NAME_PROPERTY \" +\n    \"MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY \" +\n    \"MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY \";\n\n  // Notice block properties\n  var notice_block_properties_constants =\n    \"NOTICE_BLOCK_AFTER_FINISH_EVENT \" +\n    \"NOTICE_BLOCK_ATTACHMENT_PROPERTY \" +\n    \"NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY \" +\n    \"NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY \" +\n    \"NOTICE_BLOCK_BEFORE_START_EVENT \" +\n    \"NOTICE_BLOCK_CREATED_NOTICES_PROPERTY \" +\n    \"NOTICE_BLOCK_DEADLINE_PROPERTY \" +\n    \"NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY \" +\n    \"NOTICE_BLOCK_NAME_PROPERTY \" +\n    \"NOTICE_BLOCK_NOTICE_TEXT_PROPERTY \" +\n    \"NOTICE_BLOCK_PERFORMER_PROPERTY \" +\n    \"NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY \" +\n    \"NOTICE_BLOCK_SUBJECT_PROPERTY \";\n\n  // Object events\n  var object_events_constants =\n    \"dseAfterCancel \" +\n    \"dseAfterClose \" +\n    \"dseAfterDelete \" +\n    \"dseAfterDeleteOutOfTransaction \" +\n    \"dseAfterInsert \" +\n    \"dseAfterOpen \" +\n    \"dseAfterScroll \" +\n    \"dseAfterUpdate \" +\n    \"dseAfterUpdateOutOfTransaction \" +\n    \"dseBeforeCancel \" +\n    \"dseBeforeClose \" +\n    \"dseBeforeDelete \" +\n    \"dseBeforeDetailUpdate \" +\n    \"dseBeforeInsert \" +\n    \"dseBeforeOpen \" +\n    \"dseBeforeUpdate \" +\n    \"dseOnAnyRequisiteChange \" +\n    \"dseOnCloseRecord \" +\n    \"dseOnDeleteError \" +\n    \"dseOnOpenRecord \" +\n    \"dseOnPrepareUpdate \" +\n    \"dseOnUpdateError \" +\n    \"dseOnUpdateRatifiedRecord \" +\n    \"dseOnValidDelete \" +\n    \"dseOnValidUpdate \" +\n    \"reOnChange \" +\n    \"reOnChangeValues \" +\n    \"SELECTION_BEGIN_ROUTE_EVENT \" +\n    \"SELECTION_END_ROUTE_EVENT \";\n\n  // Object params\n  var object_params_constants =\n    \"CURRENT_PERIOD_IS_REQUIRED \" +\n    \"PREVIOUS_CARD_TYPE_NAME \" +\n    \"SHOW_RECORD_PROPERTIES_FORM \";\n\n  // Other\n  var other_constants =\n    \"ACCESS_RIGHTS_SETTING_DIALOG_CODE \" +\n    \"ADMINISTRATOR_USER_CODE \" +\n    \"ANALYTIC_REPORT_TYPE \" +\n    \"asrtHideLocal \" +\n    \"asrtHideRemote \" +\n    \"CALCULATED_ROLE_TYPE_CODE \" +\n    \"COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE \" +\n    \"DCTS_TEST_PROTOCOLS_FOLDER_PATH \" +\n    \"E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED \" +\n    \"E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER \" +\n    \"E_EDOC_VERSION_ALREDY_SIGNED \" +\n    \"E_EDOC_VERSION_ALREDY_SIGNED_BY_USER \" +\n    \"EDOC_TYPES_CODE_REQUISITE_FIELD_NAME \" +\n    \"EDOCUMENTS_ALIAS_NAME \" +\n    \"FILES_FOLDER_PATH \" +\n    \"FILTER_OPERANDS_DELIMITER \" +\n    \"FILTER_OPERATIONS_DELIMITER \" +\n    \"FORMCARD_NAME \" +\n    \"FORMLIST_NAME \" +\n    \"GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE \" +\n    \"GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE \" +\n    \"INTEGRATED_REPORT_TYPE \" +\n    \"IS_BUILDER_APPLICATION_ROLE \" +\n    \"IS_BUILDER_APPLICATION_ROLE2 \" +\n    \"IS_BUILDER_USERS \" +\n    \"ISBSYSDEV \" +\n    \"LOG_FOLDER_PATH \" +\n    \"mbCancel \" +\n    \"mbNo \" +\n    \"mbNoToAll \" +\n    \"mbOK \" +\n    \"mbYes \" +\n    \"mbYesToAll \" +\n    \"MEMORY_DATASET_DESRIPTIONS_FILENAME \" +\n    \"mrNo \" +\n    \"mrNoToAll \" +\n    \"mrYes \" +\n    \"mrYesToAll \" +\n    \"MULTIPLE_SELECT_DIALOG_CODE \" +\n    \"NONOPERATING_RECORD_FLAG_FEMININE \" +\n    \"NONOPERATING_RECORD_FLAG_MASCULINE \" +\n    \"OPERATING_RECORD_FLAG_FEMININE \" +\n    \"OPERATING_RECORD_FLAG_MASCULINE \" +\n    \"PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE \" +\n    \"PROGRAM_INITIATED_LOOKUP_ACTION \" +\n    \"ratDelete \" +\n    \"ratEdit \" +\n    \"ratInsert \" +\n    \"REPORT_TYPE \" +\n    \"REQUIRED_PICK_VALUES_VARIABLE \" +\n    \"rmCard \" +\n    \"rmList \" +\n    \"SBRTE_PROGID_DEV \" +\n    \"SBRTE_PROGID_RELEASE \" +\n    \"STATIC_ROLE_TYPE_CODE \" +\n    \"SUPPRESS_EMPTY_TEMPLATE_CREATION \" +\n    \"SYSTEM_USER_CODE \" +\n    \"UPDATE_DIALOG_DATASET \" +\n    \"USED_IN_OBJECT_HINT_PARAM \" +\n    \"USER_INITIATED_LOOKUP_ACTION \" +\n    \"USER_NAME_FORMAT \" +\n    \"USER_SELECTION_RESTRICTIONS \" +\n    \"WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH \" +\n    \"ELS_SUBTYPE_CONTROL_NAME \" +\n    \"ELS_FOLDER_KIND_CONTROL_NAME \" +\n    \"REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME \";\n\n  // Privileges\n  var privileges_constants =\n    \"PRIVILEGE_COMPONENT_FULL_ACCESS \" +\n    \"PRIVILEGE_DEVELOPMENT_EXPORT \" +\n    \"PRIVILEGE_DEVELOPMENT_IMPORT \" +\n    \"PRIVILEGE_DOCUMENT_DELETE \" +\n    \"PRIVILEGE_ESD \" +\n    \"PRIVILEGE_FOLDER_DELETE \" +\n    \"PRIVILEGE_MANAGE_ACCESS_RIGHTS \" +\n    \"PRIVILEGE_MANAGE_REPLICATION \" +\n    \"PRIVILEGE_MANAGE_SESSION_SERVER \" +\n    \"PRIVILEGE_OBJECT_FULL_ACCESS \" +\n    \"PRIVILEGE_OBJECT_VIEW \" +\n    \"PRIVILEGE_RESERVE_LICENSE \" +\n    \"PRIVILEGE_SYSTEM_CUSTOMIZE \" +\n    \"PRIVILEGE_SYSTEM_DEVELOP \" +\n    \"PRIVILEGE_SYSTEM_INSTALL \" +\n    \"PRIVILEGE_TASK_DELETE \" +\n    \"PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE \" +\n    \"PRIVILEGES_PSEUDOREFERENCE_CODE \";\n\n  // Pseudoreference code\n  var pseudoreference_code_constants =\n    \"ACCESS_TYPES_PSEUDOREFERENCE_CODE \" +\n    \"ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE \" +\n    \"ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE \" +\n    \"ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE \" +\n    \"AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE \" +\n    \"COMPONENTS_PSEUDOREFERENCE_CODE \" +\n    \"FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE \" +\n    \"GROUPS_PSEUDOREFERENCE_CODE \" +\n    \"RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE \" +\n    \"REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE \" +\n    \"REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE \" +\n    \"REFTYPES_PSEUDOREFERENCE_CODE \" +\n    \"REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE \" +\n    \"SEND_PROTOCOL_PSEUDOREFERENCE_CODE \" +\n    \"SUBSTITUTES_PSEUDOREFERENCE_CODE \" +\n    \"SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE \" +\n    \"UNITS_PSEUDOREFERENCE_CODE \" +\n    \"USERS_PSEUDOREFERENCE_CODE \" +\n    \"VIEWERS_PSEUDOREFERENCE_CODE \";\n\n  // Requisite ISBCertificateType values\n  var requisite_ISBCertificateType_values_constants =\n    \"CERTIFICATE_TYPE_ENCRYPT \" +\n    \"CERTIFICATE_TYPE_SIGN \" +\n    \"CERTIFICATE_TYPE_SIGN_AND_ENCRYPT \";\n\n  // Requisite ISBEDocStorageType values\n  var requisite_ISBEDocStorageType_values_constants =\n    \"STORAGE_TYPE_FILE \" +\n    \"STORAGE_TYPE_NAS_CIFS \" +\n    \"STORAGE_TYPE_SAPERION \" +\n    \"STORAGE_TYPE_SQL_SERVER \";\n\n  // Requisite CompType2 values\n  var requisite_compType2_values_constants =\n    \"COMPTYPE2_REQUISITE_DOCUMENTS_VALUE \" +\n    \"COMPTYPE2_REQUISITE_TASKS_VALUE \" +\n    \"COMPTYPE2_REQUISITE_FOLDERS_VALUE \" +\n    \"COMPTYPE2_REQUISITE_REFERENCES_VALUE \";\n\n  // Requisite name\n  var requisite_name_constants =\n    \"SYSREQ_CODE \" +\n    \"SYSREQ_COMPTYPE2 \" +\n    \"SYSREQ_CONST_AVAILABLE_FOR_WEB \" +\n    \"SYSREQ_CONST_COMMON_CODE \" +\n    \"SYSREQ_CONST_COMMON_VALUE \" +\n    \"SYSREQ_CONST_FIRM_CODE \" +\n    \"SYSREQ_CONST_FIRM_STATUS \" +\n    \"SYSREQ_CONST_FIRM_VALUE \" +\n    \"SYSREQ_CONST_SERVER_STATUS \" +\n    \"SYSREQ_CONTENTS \" +\n    \"SYSREQ_DATE_OPEN \" +\n    \"SYSREQ_DATE_CLOSE \" +\n    \"SYSREQ_DESCRIPTION \" +\n    \"SYSREQ_DESCRIPTION_LOCALIZE_ID \" +\n    \"SYSREQ_DOUBLE \" +\n    \"SYSREQ_EDOC_ACCESS_TYPE \" +\n    \"SYSREQ_EDOC_AUTHOR \" +\n    \"SYSREQ_EDOC_CREATED \" +\n    \"SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE \" +\n    \"SYSREQ_EDOC_EDITOR \" +\n    \"SYSREQ_EDOC_ENCODE_TYPE \" +\n    \"SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME \" +\n    \"SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION \" +\n    \"SYSREQ_EDOC_EXPORT_DATE \" +\n    \"SYSREQ_EDOC_EXPORTER \" +\n    \"SYSREQ_EDOC_KIND \" +\n    \"SYSREQ_EDOC_LIFE_STAGE_NAME \" +\n    \"SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE \" +\n    \"SYSREQ_EDOC_MODIFIED \" +\n    \"SYSREQ_EDOC_NAME \" +\n    \"SYSREQ_EDOC_NOTE \" +\n    \"SYSREQ_EDOC_QUALIFIED_ID \" +\n    \"SYSREQ_EDOC_SESSION_KEY \" +\n    \"SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME \" +\n    \"SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION \" +\n    \"SYSREQ_EDOC_SIGNATURE_TYPE \" +\n    \"SYSREQ_EDOC_SIGNED \" +\n    \"SYSREQ_EDOC_STORAGE \" +\n    \"SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE \" +\n    \"SYSREQ_EDOC_STORAGES_CHECK_RIGHTS \" +\n    \"SYSREQ_EDOC_STORAGES_COMPUTER_NAME \" +\n    \"SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE \" +\n    \"SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE \" +\n    \"SYSREQ_EDOC_STORAGES_FUNCTION \" +\n    \"SYSREQ_EDOC_STORAGES_INITIALIZED \" +\n    \"SYSREQ_EDOC_STORAGES_LOCAL_PATH \" +\n    \"SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME \" +\n    \"SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT \" +\n    \"SYSREQ_EDOC_STORAGES_SERVER_NAME \" +\n    \"SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME \" +\n    \"SYSREQ_EDOC_STORAGES_TYPE \" +\n    \"SYSREQ_EDOC_TEXT_MODIFIED \" +\n    \"SYSREQ_EDOC_TYPE_ACT_CODE \" +\n    \"SYSREQ_EDOC_TYPE_ACT_DESCRIPTION \" +\n    \"SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID \" +\n    \"SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE \" +\n    \"SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS \" +\n    \"SYSREQ_EDOC_TYPE_ACT_SECTION \" +\n    \"SYSREQ_EDOC_TYPE_ADD_PARAMS \" +\n    \"SYSREQ_EDOC_TYPE_COMMENT \" +\n    \"SYSREQ_EDOC_TYPE_EVENT_TEXT \" +\n    \"SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR \" +\n    \"SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID \" +\n    \"SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID \" +\n    \"SYSREQ_EDOC_TYPE_NUMERATION_METHOD \" +\n    \"SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE \" +\n    \"SYSREQ_EDOC_TYPE_REQ_CODE \" +\n    \"SYSREQ_EDOC_TYPE_REQ_DESCRIPTION \" +\n    \"SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID \" +\n    \"SYSREQ_EDOC_TYPE_REQ_IS_LEADING \" +\n    \"SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED \" +\n    \"SYSREQ_EDOC_TYPE_REQ_NUMBER \" +\n    \"SYSREQ_EDOC_TYPE_REQ_ON_CHANGE \" +\n    \"SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS \" +\n    \"SYSREQ_EDOC_TYPE_REQ_ON_SELECT \" +\n    \"SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND \" +\n    \"SYSREQ_EDOC_TYPE_REQ_SECTION \" +\n    \"SYSREQ_EDOC_TYPE_VIEW_CARD \" +\n    \"SYSREQ_EDOC_TYPE_VIEW_CODE \" +\n    \"SYSREQ_EDOC_TYPE_VIEW_COMMENT \" +\n    \"SYSREQ_EDOC_TYPE_VIEW_IS_MAIN \" +\n    \"SYSREQ_EDOC_TYPE_VIEW_NAME \" +\n    \"SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID \" +\n    \"SYSREQ_EDOC_VERSION_AUTHOR \" +\n    \"SYSREQ_EDOC_VERSION_CRC \" +\n    \"SYSREQ_EDOC_VERSION_DATA \" +\n    \"SYSREQ_EDOC_VERSION_EDITOR \" +\n    \"SYSREQ_EDOC_VERSION_EXPORT_DATE \" +\n    \"SYSREQ_EDOC_VERSION_EXPORTER \" +\n    \"SYSREQ_EDOC_VERSION_HIDDEN \" +\n    \"SYSREQ_EDOC_VERSION_LIFE_STAGE \" +\n    \"SYSREQ_EDOC_VERSION_MODIFIED \" +\n    \"SYSREQ_EDOC_VERSION_NOTE \" +\n    \"SYSREQ_EDOC_VERSION_SIGNATURE_TYPE \" +\n    \"SYSREQ_EDOC_VERSION_SIGNED \" +\n    \"SYSREQ_EDOC_VERSION_SIZE \" +\n    \"SYSREQ_EDOC_VERSION_SOURCE \" +\n    \"SYSREQ_EDOC_VERSION_TEXT_MODIFIED \" +\n    \"SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE \" +\n    \"SYSREQ_FOLDER_KIND \" +\n    \"SYSREQ_FUNC_CATEGORY \" +\n    \"SYSREQ_FUNC_COMMENT \" +\n    \"SYSREQ_FUNC_GROUP \" +\n    \"SYSREQ_FUNC_GROUP_COMMENT \" +\n    \"SYSREQ_FUNC_GROUP_NUMBER \" +\n    \"SYSREQ_FUNC_HELP \" +\n    \"SYSREQ_FUNC_PARAM_DEF_VALUE \" +\n    \"SYSREQ_FUNC_PARAM_IDENT \" +\n    \"SYSREQ_FUNC_PARAM_NUMBER \" +\n    \"SYSREQ_FUNC_PARAM_TYPE \" +\n    \"SYSREQ_FUNC_TEXT \" +\n    \"SYSREQ_GROUP_CATEGORY \" +\n    \"SYSREQ_ID \" +\n    \"SYSREQ_LAST_UPDATE \" +\n    \"SYSREQ_LEADER_REFERENCE \" +\n    \"SYSREQ_LINE_NUMBER \" +\n    \"SYSREQ_MAIN_RECORD_ID \" +\n    \"SYSREQ_NAME \" +\n    \"SYSREQ_NAME_LOCALIZE_ID \" +\n    \"SYSREQ_NOTE \" +\n    \"SYSREQ_ORIGINAL_RECORD \" +\n    \"SYSREQ_OUR_FIRM \" +\n    \"SYSREQ_PROFILING_SETTINGS_BATCH_LOGING \" +\n    \"SYSREQ_PROFILING_SETTINGS_BATCH_SIZE \" +\n    \"SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED \" +\n    \"SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED \" +\n    \"SYSREQ_PROFILING_SETTINGS_START_LOGGED \" +\n    \"SYSREQ_RECORD_STATUS \" +\n    \"SYSREQ_REF_REQ_FIELD_NAME \" +\n    \"SYSREQ_REF_REQ_FORMAT \" +\n    \"SYSREQ_REF_REQ_GENERATED \" +\n    \"SYSREQ_REF_REQ_LENGTH \" +\n    \"SYSREQ_REF_REQ_PRECISION \" +\n    \"SYSREQ_REF_REQ_REFERENCE \" +\n    \"SYSREQ_REF_REQ_SECTION \" +\n    \"SYSREQ_REF_REQ_STORED \" +\n    \"SYSREQ_REF_REQ_TOKENS \" +\n    \"SYSREQ_REF_REQ_TYPE \" +\n    \"SYSREQ_REF_REQ_VIEW \" +\n    \"SYSREQ_REF_TYPE_ACT_CODE \" +\n    \"SYSREQ_REF_TYPE_ACT_DESCRIPTION \" +\n    \"SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID \" +\n    \"SYSREQ_REF_TYPE_ACT_ON_EXECUTE \" +\n    \"SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS \" +\n    \"SYSREQ_REF_TYPE_ACT_SECTION \" +\n    \"SYSREQ_REF_TYPE_ADD_PARAMS \" +\n    \"SYSREQ_REF_TYPE_COMMENT \" +\n    \"SYSREQ_REF_TYPE_COMMON_SETTINGS \" +\n    \"SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME \" +\n    \"SYSREQ_REF_TYPE_EVENT_TEXT \" +\n    \"SYSREQ_REF_TYPE_MAIN_LEADING_REF \" +\n    \"SYSREQ_REF_TYPE_NAME_IN_SINGULAR \" +\n    \"SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID \" +\n    \"SYSREQ_REF_TYPE_NAME_LOCALIZE_ID \" +\n    \"SYSREQ_REF_TYPE_NUMERATION_METHOD \" +\n    \"SYSREQ_REF_TYPE_REQ_CODE \" +\n    \"SYSREQ_REF_TYPE_REQ_DESCRIPTION \" +\n    \"SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID \" +\n    \"SYSREQ_REF_TYPE_REQ_IS_CONTROL \" +\n    \"SYSREQ_REF_TYPE_REQ_IS_FILTER \" +\n    \"SYSREQ_REF_TYPE_REQ_IS_LEADING \" +\n    \"SYSREQ_REF_TYPE_REQ_IS_REQUIRED \" +\n    \"SYSREQ_REF_TYPE_REQ_NUMBER \" +\n    \"SYSREQ_REF_TYPE_REQ_ON_CHANGE \" +\n    \"SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS \" +\n    \"SYSREQ_REF_TYPE_REQ_ON_SELECT \" +\n    \"SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND \" +\n    \"SYSREQ_REF_TYPE_REQ_SECTION \" +\n    \"SYSREQ_REF_TYPE_VIEW_CARD \" +\n    \"SYSREQ_REF_TYPE_VIEW_CODE \" +\n    \"SYSREQ_REF_TYPE_VIEW_COMMENT \" +\n    \"SYSREQ_REF_TYPE_VIEW_IS_MAIN \" +\n    \"SYSREQ_REF_TYPE_VIEW_NAME \" +\n    \"SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID \" +\n    \"SYSREQ_REFERENCE_TYPE_ID \" +\n    \"SYSREQ_STATE \" +\n    \"SYSREQ_STATЕ \" +\n    \"SYSREQ_SYSTEM_SETTINGS_VALUE \" +\n    \"SYSREQ_TYPE \" +\n    \"SYSREQ_UNIT \" +\n    \"SYSREQ_UNIT_ID \" +\n    \"SYSREQ_USER_GROUPS_GROUP_FULL_NAME \" +\n    \"SYSREQ_USER_GROUPS_GROUP_NAME \" +\n    \"SYSREQ_USER_GROUPS_GROUP_SERVER_NAME \" +\n    \"SYSREQ_USERS_ACCESS_RIGHTS \" +\n    \"SYSREQ_USERS_AUTHENTICATION \" +\n    \"SYSREQ_USERS_CATEGORY \" +\n    \"SYSREQ_USERS_COMPONENT \" +\n    \"SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC \" +\n    \"SYSREQ_USERS_DOMAIN \" +\n    \"SYSREQ_USERS_FULL_USER_NAME \" +\n    \"SYSREQ_USERS_GROUP \" +\n    \"SYSREQ_USERS_IS_MAIN_SERVER \" +\n    \"SYSREQ_USERS_LOGIN \" +\n    \"SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC \" +\n    \"SYSREQ_USERS_STATUS \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE_INFO \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE_STATE \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME \" +\n    \"SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT \" +\n    \"SYSREQ_USERS_USER_DEFAULT_CERTIFICATE \" +\n    \"SYSREQ_USERS_USER_DESCRIPTION \" +\n    \"SYSREQ_USERS_USER_GLOBAL_NAME \" +\n    \"SYSREQ_USERS_USER_LOGIN \" +\n    \"SYSREQ_USERS_USER_MAIN_SERVER \" +\n    \"SYSREQ_USERS_USER_TYPE \" +\n    \"SYSREQ_WORK_RULES_FOLDER_ID \";\n\n  // Result\n  var result_constants = \"RESULT_VAR_NAME RESULT_VAR_NAME_ENG \";\n\n  // Rule identification\n  var rule_identification_constants =\n    \"AUTO_NUMERATION_RULE_ID \" +\n    \"CANT_CHANGE_ID_REQUISITE_RULE_ID \" +\n    \"CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID \" +\n    \"CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID \" +\n    \"CHECK_CODE_REQUISITE_RULE_ID \" +\n    \"CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID \" +\n    \"CHECK_FILTRATER_CHANGES_RULE_ID \" +\n    \"CHECK_RECORD_INTERVAL_RULE_ID \" +\n    \"CHECK_REFERENCE_INTERVAL_RULE_ID \" +\n    \"CHECK_REQUIRED_DATA_FULLNESS_RULE_ID \" +\n    \"CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID \" +\n    \"MAKE_RECORD_UNRATIFIED_RULE_ID \" +\n    \"RESTORE_AUTO_NUMERATION_RULE_ID \" +\n    \"SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID \" +\n    \"SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID \" +\n    \"SET_IDSPS_VALUE_RULE_ID \" +\n    \"SET_NEXT_CODE_VALUE_RULE_ID \" +\n    \"SET_OURFIRM_BOUNDS_RULE_ID \" +\n    \"SET_OURFIRM_REQUISITE_RULE_ID \";\n\n  // Script block properties\n  var script_block_properties_constants =\n    \"SCRIPT_BLOCK_AFTER_FINISH_EVENT \" +\n    \"SCRIPT_BLOCK_BEFORE_START_EVENT \" +\n    \"SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY \" +\n    \"SCRIPT_BLOCK_NAME_PROPERTY \" +\n    \"SCRIPT_BLOCK_SCRIPT_PROPERTY \";\n\n  // Subtask block properties\n  var subtask_block_properties_constants =\n    \"SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY \" +\n    \"SUBTASK_BLOCK_AFTER_FINISH_EVENT \" +\n    \"SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT \" +\n    \"SUBTASK_BLOCK_ATTACHMENTS_PROPERTY \" +\n    \"SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY \" +\n    \"SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY \" +\n    \"SUBTASK_BLOCK_BEFORE_START_EVENT \" +\n    \"SUBTASK_BLOCK_CREATED_TASK_PROPERTY \" +\n    \"SUBTASK_BLOCK_CREATION_EVENT \" +\n    \"SUBTASK_BLOCK_DEADLINE_PROPERTY \" +\n    \"SUBTASK_BLOCK_IMPORTANCE_PROPERTY \" +\n    \"SUBTASK_BLOCK_INITIATOR_PROPERTY \" +\n    \"SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY \" +\n    \"SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY \" +\n    \"SUBTASK_BLOCK_JOBS_TYPE_PROPERTY \" +\n    \"SUBTASK_BLOCK_NAME_PROPERTY \" +\n    \"SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY \" +\n    \"SUBTASK_BLOCK_PERFORMERS_PROPERTY \" +\n    \"SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY \" +\n    \"SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY \" +\n    \"SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY \" +\n    \"SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY \" +\n    \"SUBTASK_BLOCK_START_EVENT \" +\n    \"SUBTASK_BLOCK_STEP_CONTROL_PROPERTY \" +\n    \"SUBTASK_BLOCK_SUBJECT_PROPERTY \" +\n    \"SUBTASK_BLOCK_TASK_CONTROL_PROPERTY \" +\n    \"SUBTASK_BLOCK_TEXT_PROPERTY \" +\n    \"SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY \" +\n    \"SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY \" +\n    \"SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY \";\n\n  // System component\n  var system_component_constants =\n    \"SYSCOMP_CONTROL_JOBS \" +\n    \"SYSCOMP_FOLDERS \" +\n    \"SYSCOMP_JOBS \" +\n    \"SYSCOMP_NOTICES \" +\n    \"SYSCOMP_TASKS \";\n\n  // System dialogs\n  var system_dialogs_constants =\n    \"SYSDLG_CREATE_EDOCUMENT \" +\n    \"SYSDLG_CREATE_EDOCUMENT_VERSION \" +\n    \"SYSDLG_CURRENT_PERIOD \" +\n    \"SYSDLG_EDIT_FUNCTION_HELP \" +\n    \"SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE \" +\n    \"SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS \" +\n    \"SYSDLG_EXPORT_SINGLE_EDOCUMENT \" +\n    \"SYSDLG_IMPORT_EDOCUMENT \" +\n    \"SYSDLG_MULTIPLE_SELECT \" +\n    \"SYSDLG_SETUP_ACCESS_RIGHTS \" +\n    \"SYSDLG_SETUP_DEFAULT_RIGHTS \" +\n    \"SYSDLG_SETUP_FILTER_CONDITION \" +\n    \"SYSDLG_SETUP_SIGN_RIGHTS \" +\n    \"SYSDLG_SETUP_TASK_OBSERVERS \" +\n    \"SYSDLG_SETUP_TASK_ROUTE \" +\n    \"SYSDLG_SETUP_USERS_LIST \" +\n    \"SYSDLG_SIGN_EDOCUMENT \" +\n    \"SYSDLG_SIGN_MULTIPLE_EDOCUMENTS \";\n\n  // System reference names\n  var system_reference_names_constants =\n    \"SYSREF_ACCESS_RIGHTS_TYPES \" +\n    \"SYSREF_ADMINISTRATION_HISTORY \" +\n    \"SYSREF_ALL_AVAILABLE_COMPONENTS \" +\n    \"SYSREF_ALL_AVAILABLE_PRIVILEGES \" +\n    \"SYSREF_ALL_REPLICATING_COMPONENTS \" +\n    \"SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS \" +\n    \"SYSREF_CALENDAR_EVENTS \" +\n    \"SYSREF_COMPONENT_TOKEN_HISTORY \" +\n    \"SYSREF_COMPONENT_TOKENS \" +\n    \"SYSREF_COMPONENTS \" +\n    \"SYSREF_CONSTANTS \" +\n    \"SYSREF_DATA_RECEIVE_PROTOCOL \" +\n    \"SYSREF_DATA_SEND_PROTOCOL \" +\n    \"SYSREF_DIALOGS \" +\n    \"SYSREF_DIALOGS_REQUISITES \" +\n    \"SYSREF_EDITORS \" +\n    \"SYSREF_EDOC_CARDS \" +\n    \"SYSREF_EDOC_TYPES \" +\n    \"SYSREF_EDOCUMENT_CARD_REQUISITES \" +\n    \"SYSREF_EDOCUMENT_CARD_TYPES \" +\n    \"SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE \" +\n    \"SYSREF_EDOCUMENT_CARDS \" +\n    \"SYSREF_EDOCUMENT_HISTORY \" +\n    \"SYSREF_EDOCUMENT_KINDS \" +\n    \"SYSREF_EDOCUMENT_REQUISITES \" +\n    \"SYSREF_EDOCUMENT_SIGNATURES \" +\n    \"SYSREF_EDOCUMENT_TEMPLATES \" +\n    \"SYSREF_EDOCUMENT_TEXT_STORAGES \" +\n    \"SYSREF_EDOCUMENT_VIEWS \" +\n    \"SYSREF_FILTERER_SETUP_CONFLICTS \" +\n    \"SYSREF_FILTRATER_SETTING_CONFLICTS \" +\n    \"SYSREF_FOLDER_HISTORY \" +\n    \"SYSREF_FOLDERS \" +\n    \"SYSREF_FUNCTION_GROUPS \" +\n    \"SYSREF_FUNCTION_PARAMS \" +\n    \"SYSREF_FUNCTIONS \" +\n    \"SYSREF_JOB_HISTORY \" +\n    \"SYSREF_LINKS \" +\n    \"SYSREF_LOCALIZATION_DICTIONARY \" +\n    \"SYSREF_LOCALIZATION_LANGUAGES \" +\n    \"SYSREF_MODULES \" +\n    \"SYSREF_PRIVILEGES \" +\n    \"SYSREF_RECORD_HISTORY \" +\n    \"SYSREF_REFERENCE_REQUISITES \" +\n    \"SYSREF_REFERENCE_TYPE_VIEWS \" +\n    \"SYSREF_REFERENCE_TYPES \" +\n    \"SYSREF_REFERENCES \" +\n    \"SYSREF_REFERENCES_REQUISITES \" +\n    \"SYSREF_REMOTE_SERVERS \" +\n    \"SYSREF_REPLICATION_SESSIONS_LOG \" +\n    \"SYSREF_REPLICATION_SESSIONS_PROTOCOL \" +\n    \"SYSREF_REPORTS \" +\n    \"SYSREF_ROLES \" +\n    \"SYSREF_ROUTE_BLOCK_GROUPS \" +\n    \"SYSREF_ROUTE_BLOCKS \" +\n    \"SYSREF_SCRIPTS \" +\n    \"SYSREF_SEARCHES \" +\n    \"SYSREF_SERVER_EVENTS \" +\n    \"SYSREF_SERVER_EVENTS_HISTORY \" +\n    \"SYSREF_STANDARD_ROUTE_GROUPS \" +\n    \"SYSREF_STANDARD_ROUTES \" +\n    \"SYSREF_STATUSES \" +\n    \"SYSREF_SYSTEM_SETTINGS \" +\n    \"SYSREF_TASK_HISTORY \" +\n    \"SYSREF_TASK_KIND_GROUPS \" +\n    \"SYSREF_TASK_KINDS \" +\n    \"SYSREF_TASK_RIGHTS \" +\n    \"SYSREF_TASK_SIGNATURES \" +\n    \"SYSREF_TASKS \" +\n    \"SYSREF_UNITS \" +\n    \"SYSREF_USER_GROUPS \" +\n    \"SYSREF_USER_GROUPS_REFERENCE \" +\n    \"SYSREF_USER_SUBSTITUTION \" +\n    \"SYSREF_USERS \" +\n    \"SYSREF_USERS_REFERENCE \" +\n    \"SYSREF_VIEWERS \" +\n    \"SYSREF_WORKING_TIME_CALENDARS \";\n\n  // Table name\n  var table_name_constants =\n    \"ACCESS_RIGHTS_TABLE_NAME \" +\n    \"EDMS_ACCESS_TABLE_NAME \" +\n    \"EDOC_TYPES_TABLE_NAME \";\n\n  // Test\n  var test_constants =\n    \"TEST_DEV_DB_NAME \" +\n    \"TEST_DEV_SYSTEM_CODE \" +\n    \"TEST_EDMS_DB_NAME \" +\n    \"TEST_EDMS_MAIN_CODE \" +\n    \"TEST_EDMS_MAIN_DB_NAME \" +\n    \"TEST_EDMS_SECOND_CODE \" +\n    \"TEST_EDMS_SECOND_DB_NAME \" +\n    \"TEST_EDMS_SYSTEM_CODE \" +\n    \"TEST_ISB5_MAIN_CODE \" +\n    \"TEST_ISB5_SECOND_CODE \" +\n    \"TEST_SQL_SERVER_2005_NAME \" +\n    \"TEST_SQL_SERVER_NAME \";\n\n  // Using the dialog windows\n  var using_the_dialog_windows_constants =\n    \"ATTENTION_CAPTION \" +\n    \"cbsCommandLinks \" +\n    \"cbsDefault \" +\n    \"CONFIRMATION_CAPTION \" +\n    \"ERROR_CAPTION \" +\n    \"INFORMATION_CAPTION \" +\n    \"mrCancel \" +\n    \"mrOk \";\n\n  // Using the document\n  var using_the_document_constants =\n    \"EDOC_VERSION_ACTIVE_STAGE_CODE \" +\n    \"EDOC_VERSION_DESIGN_STAGE_CODE \" +\n    \"EDOC_VERSION_OBSOLETE_STAGE_CODE \";\n\n  // Using the EA and encryption\n  var using_the_EA_and_encryption_constants =\n    \"cpDataEnciphermentEnabled \" +\n    \"cpDigitalSignatureEnabled \" +\n    \"cpID \" +\n    \"cpIssuer \" +\n    \"cpPluginVersion \" +\n    \"cpSerial \" +\n    \"cpSubjectName \" +\n    \"cpSubjSimpleName \" +\n    \"cpValidFromDate \" +\n    \"cpValidToDate \";\n\n  // Using the ISBL-editor\n  var using_the_ISBL_editor_constants =\n    \"ISBL_SYNTAX \" + \"NO_SYNTAX \" + \"XML_SYNTAX \";\n\n  // Wait block properties\n  var wait_block_properties_constants =\n    \"WAIT_BLOCK_AFTER_FINISH_EVENT \" +\n    \"WAIT_BLOCK_BEFORE_START_EVENT \" +\n    \"WAIT_BLOCK_DEADLINE_PROPERTY \" +\n    \"WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY \" +\n    \"WAIT_BLOCK_NAME_PROPERTY \" +\n    \"WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY \";\n\n  // SYSRES Common\n  var sysres_common_constants =\n    \"SYSRES_COMMON \" +\n    \"SYSRES_CONST \" +\n    \"SYSRES_MBFUNC \" +\n    \"SYSRES_SBDATA \" +\n    \"SYSRES_SBGUI \" +\n    \"SYSRES_SBINTF \" +\n    \"SYSRES_SBREFDSC \" +\n    \"SYSRES_SQLERRORS \" +\n    \"SYSRES_SYSCOMP \";\n\n  // Константы ==> built_in\n  var CONSTANTS =\n    sysres_constants +\n    base_constants +\n    base_group_name_constants +\n    decision_block_properties_constants +\n    file_extension_constants +\n    job_block_properties_constants +\n    language_code_constants +\n    launching_external_applications_constants +\n    link_kind_constants +\n    lock_type_constants +\n    monitor_block_properties_constants +\n    notice_block_properties_constants +\n    object_events_constants +\n    object_params_constants +\n    other_constants +\n    privileges_constants +\n    pseudoreference_code_constants +\n    requisite_ISBCertificateType_values_constants +\n    requisite_ISBEDocStorageType_values_constants +\n    requisite_compType2_values_constants +\n    requisite_name_constants +\n    result_constants +\n    rule_identification_constants +\n    script_block_properties_constants +\n    subtask_block_properties_constants +\n    system_component_constants +\n    system_dialogs_constants +\n    system_reference_names_constants +\n    table_name_constants +\n    test_constants +\n    using_the_dialog_windows_constants +\n    using_the_document_constants +\n    using_the_EA_and_encryption_constants +\n    using_the_ISBL_editor_constants +\n    wait_block_properties_constants +\n    sysres_common_constants;\n\n  // enum TAccountType\n  var TAccountType = \"atUser atGroup atRole \";\n\n  // enum TActionEnabledMode\n  var TActionEnabledMode =\n    \"aemEnabledAlways \" +\n    \"aemDisabledAlways \" +\n    \"aemEnabledOnBrowse \" +\n    \"aemEnabledOnEdit \" +\n    \"aemDisabledOnBrowseEmpty \";\n\n  // enum TAddPosition\n  var TAddPosition = \"apBegin apEnd \";\n\n  // enum TAlignment\n  var TAlignment = \"alLeft alRight \";\n\n  // enum TAreaShowMode\n  var TAreaShowMode =\n    \"asmNever \" +\n    \"asmNoButCustomize \" +\n    \"asmAsLastTime \" +\n    \"asmYesButCustomize \" +\n    \"asmAlways \";\n\n  // enum TCertificateInvalidationReason\n  var TCertificateInvalidationReason = \"cirCommon cirRevoked \";\n\n  // enum TCertificateType\n  var TCertificateType = \"ctSignature ctEncode ctSignatureEncode \";\n\n  // enum TCheckListBoxItemState\n  var TCheckListBoxItemState = \"clbUnchecked clbChecked clbGrayed \";\n\n  // enum TCloseOnEsc\n  var TCloseOnEsc = \"ceISB ceAlways ceNever \";\n\n  // enum TCompType\n  var TCompType =\n    \"ctDocument \" +\n    \"ctReference \" +\n    \"ctScript \" +\n    \"ctUnknown \" +\n    \"ctReport \" +\n    \"ctDialog \" +\n    \"ctFunction \" +\n    \"ctFolder \" +\n    \"ctEDocument \" +\n    \"ctTask \" +\n    \"ctJob \" +\n    \"ctNotice \" +\n    \"ctControlJob \";\n\n  // enum TConditionFormat\n  var TConditionFormat = \"cfInternal cfDisplay \";\n\n  // enum TConnectionIntent\n  var TConnectionIntent = \"ciUnspecified ciWrite ciRead \";\n\n  // enum TContentKind\n  var TContentKind =\n    \"ckFolder \" +\n    \"ckEDocument \" +\n    \"ckTask \" +\n    \"ckJob \" +\n    \"ckComponentToken \" +\n    \"ckAny \" +\n    \"ckReference \" +\n    \"ckScript \" +\n    \"ckReport \" +\n    \"ckDialog \";\n\n  // enum TControlType\n  var TControlType =\n    \"ctISBLEditor \" +\n    \"ctBevel \" +\n    \"ctButton \" +\n    \"ctCheckListBox \" +\n    \"ctComboBox \" +\n    \"ctComboEdit \" +\n    \"ctGrid \" +\n    \"ctDBCheckBox \" +\n    \"ctDBComboBox \" +\n    \"ctDBEdit \" +\n    \"ctDBEllipsis \" +\n    \"ctDBMemo \" +\n    \"ctDBNavigator \" +\n    \"ctDBRadioGroup \" +\n    \"ctDBStatusLabel \" +\n    \"ctEdit \" +\n    \"ctGroupBox \" +\n    \"ctInplaceHint \" +\n    \"ctMemo \" +\n    \"ctPanel \" +\n    \"ctListBox \" +\n    \"ctRadioButton \" +\n    \"ctRichEdit \" +\n    \"ctTabSheet \" +\n    \"ctWebBrowser \" +\n    \"ctImage \" +\n    \"ctHyperLink \" +\n    \"ctLabel \" +\n    \"ctDBMultiEllipsis \" +\n    \"ctRibbon \" +\n    \"ctRichView \" +\n    \"ctInnerPanel \" +\n    \"ctPanelGroup \" +\n    \"ctBitButton \";\n\n  // enum TCriterionContentType\n  var TCriterionContentType =\n    \"cctDate \" +\n    \"cctInteger \" +\n    \"cctNumeric \" +\n    \"cctPick \" +\n    \"cctReference \" +\n    \"cctString \" +\n    \"cctText \";\n\n  // enum TCultureType\n  var TCultureType = \"cltInternal cltPrimary cltGUI \";\n\n  // enum TDataSetEventType\n  var TDataSetEventType =\n    \"dseBeforeOpen \" +\n    \"dseAfterOpen \" +\n    \"dseBeforeClose \" +\n    \"dseAfterClose \" +\n    \"dseOnValidDelete \" +\n    \"dseBeforeDelete \" +\n    \"dseAfterDelete \" +\n    \"dseAfterDeleteOutOfTransaction \" +\n    \"dseOnDeleteError \" +\n    \"dseBeforeInsert \" +\n    \"dseAfterInsert \" +\n    \"dseOnValidUpdate \" +\n    \"dseBeforeUpdate \" +\n    \"dseOnUpdateRatifiedRecord \" +\n    \"dseAfterUpdate \" +\n    \"dseAfterUpdateOutOfTransaction \" +\n    \"dseOnUpdateError \" +\n    \"dseAfterScroll \" +\n    \"dseOnOpenRecord \" +\n    \"dseOnCloseRecord \" +\n    \"dseBeforeCancel \" +\n    \"dseAfterCancel \" +\n    \"dseOnUpdateDeadlockError \" +\n    \"dseBeforeDetailUpdate \" +\n    \"dseOnPrepareUpdate \" +\n    \"dseOnAnyRequisiteChange \";\n\n  // enum TDataSetState\n  var TDataSetState = \"dssEdit dssInsert dssBrowse dssInActive \";\n\n  // enum TDateFormatType\n  var TDateFormatType = \"dftDate dftShortDate dftDateTime dftTimeStamp \";\n\n  // enum TDateOffsetType\n  var TDateOffsetType = \"dotDays dotHours dotMinutes dotSeconds \";\n\n  // enum TDateTimeKind\n  var TDateTimeKind = \"dtkndLocal dtkndUTC \";\n\n  // enum TDeaAccessRights\n  var TDeaAccessRights = \"arNone arView arEdit arFull \";\n\n  // enum TDocumentDefaultAction\n  var TDocumentDefaultAction = \"ddaView ddaEdit \";\n\n  // enum TEditMode\n  var TEditMode =\n    \"emLock \" +\n    \"emEdit \" +\n    \"emSign \" +\n    \"emExportWithLock \" +\n    \"emImportWithUnlock \" +\n    \"emChangeVersionNote \" +\n    \"emOpenForModify \" +\n    \"emChangeLifeStage \" +\n    \"emDelete \" +\n    \"emCreateVersion \" +\n    \"emImport \" +\n    \"emUnlockExportedWithLock \" +\n    \"emStart \" +\n    \"emAbort \" +\n    \"emReInit \" +\n    \"emMarkAsReaded \" +\n    \"emMarkAsUnreaded \" +\n    \"emPerform \" +\n    \"emAccept \" +\n    \"emResume \" +\n    \"emChangeRights \" +\n    \"emEditRoute \" +\n    \"emEditObserver \" +\n    \"emRecoveryFromLocalCopy \" +\n    \"emChangeWorkAccessType \" +\n    \"emChangeEncodeTypeToCertificate \" +\n    \"emChangeEncodeTypeToPassword \" +\n    \"emChangeEncodeTypeToNone \" +\n    \"emChangeEncodeTypeToCertificatePassword \" +\n    \"emChangeStandardRoute \" +\n    \"emGetText \" +\n    \"emOpenForView \" +\n    \"emMoveToStorage \" +\n    \"emCreateObject \" +\n    \"emChangeVersionHidden \" +\n    \"emDeleteVersion \" +\n    \"emChangeLifeCycleStage \" +\n    \"emApprovingSign \" +\n    \"emExport \" +\n    \"emContinue \" +\n    \"emLockFromEdit \" +\n    \"emUnLockForEdit \" +\n    \"emLockForServer \" +\n    \"emUnlockFromServer \" +\n    \"emDelegateAccessRights \" +\n    \"emReEncode \";\n\n  // enum TEditorCloseObservType\n  var TEditorCloseObservType = \"ecotFile ecotProcess \";\n\n  // enum TEdmsApplicationAction\n  var TEdmsApplicationAction = \"eaGet eaCopy eaCreate eaCreateStandardRoute \";\n\n  // enum TEDocumentLockType\n  var TEDocumentLockType = \"edltAll edltNothing edltQuery \";\n\n  // enum TEDocumentStepShowMode\n  var TEDocumentStepShowMode = \"essmText essmCard \";\n\n  // enum TEDocumentStepVersionType\n  var TEDocumentStepVersionType = \"esvtLast esvtLastActive esvtSpecified \";\n\n  // enum TEDocumentStorageFunction\n  var TEDocumentStorageFunction = \"edsfExecutive edsfArchive \";\n\n  // enum TEDocumentStorageType\n  var TEDocumentStorageType = \"edstSQLServer edstFile \";\n\n  // enum TEDocumentVersionSourceType\n  var TEDocumentVersionSourceType =\n    \"edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile \";\n\n  // enum TEDocumentVersionState\n  var TEDocumentVersionState = \"vsDefault vsDesign vsActive vsObsolete \";\n\n  // enum TEncodeType\n  var TEncodeType = \"etNone etCertificate etPassword etCertificatePassword \";\n\n  // enum TExceptionCategory\n  var TExceptionCategory = \"ecException ecWarning ecInformation \";\n\n  // enum TExportedSignaturesType\n  var TExportedSignaturesType = \"estAll estApprovingOnly \";\n\n  // enum TExportedVersionType\n  var TExportedVersionType = \"evtLast evtLastActive evtQuery \";\n\n  // enum TFieldDataType\n  var TFieldDataType =\n    \"fdtString \" +\n    \"fdtNumeric \" +\n    \"fdtInteger \" +\n    \"fdtDate \" +\n    \"fdtText \" +\n    \"fdtUnknown \" +\n    \"fdtWideString \" +\n    \"fdtLargeInteger \";\n\n  // enum TFolderType\n  var TFolderType =\n    \"ftInbox \" +\n    \"ftOutbox \" +\n    \"ftFavorites \" +\n    \"ftCommonFolder \" +\n    \"ftUserFolder \" +\n    \"ftComponents \" +\n    \"ftQuickLaunch \" +\n    \"ftShortcuts \" +\n    \"ftSearch \";\n\n  // enum TGridRowHeight\n  var TGridRowHeight = \"grhAuto \" + \"grhX1 \" + \"grhX2 \" + \"grhX3 \";\n\n  // enum THyperlinkType\n  var THyperlinkType = \"hltText \" + \"hltRTF \" + \"hltHTML \";\n\n  // enum TImageFileFormat\n  var TImageFileFormat =\n    \"iffBMP \" +\n    \"iffJPEG \" +\n    \"iffMultiPageTIFF \" +\n    \"iffSinglePageTIFF \" +\n    \"iffTIFF \" +\n    \"iffPNG \";\n\n  // enum TImageMode\n  var TImageMode = \"im8bGrayscale \" + \"im24bRGB \" + \"im1bMonochrome \";\n\n  // enum TImageType\n  var TImageType = \"itBMP \" + \"itJPEG \" + \"itWMF \" + \"itPNG \";\n\n  // enum TInplaceHintKind\n  var TInplaceHintKind =\n    \"ikhInformation \" + \"ikhWarning \" + \"ikhError \" + \"ikhNoIcon \";\n\n  // enum TISBLContext\n  var TISBLContext =\n    \"icUnknown \" +\n    \"icScript \" +\n    \"icFunction \" +\n    \"icIntegratedReport \" +\n    \"icAnalyticReport \" +\n    \"icDataSetEventHandler \" +\n    \"icActionHandler \" +\n    \"icFormEventHandler \" +\n    \"icLookUpEventHandler \" +\n    \"icRequisiteChangeEventHandler \" +\n    \"icBeforeSearchEventHandler \" +\n    \"icRoleCalculation \" +\n    \"icSelectRouteEventHandler \" +\n    \"icBlockPropertyCalculation \" +\n    \"icBlockQueryParamsEventHandler \" +\n    \"icChangeSearchResultEventHandler \" +\n    \"icBlockEventHandler \" +\n    \"icSubTaskInitEventHandler \" +\n    \"icEDocDataSetEventHandler \" +\n    \"icEDocLookUpEventHandler \" +\n    \"icEDocActionHandler \" +\n    \"icEDocFormEventHandler \" +\n    \"icEDocRequisiteChangeEventHandler \" +\n    \"icStructuredConversionRule \" +\n    \"icStructuredConversionEventBefore \" +\n    \"icStructuredConversionEventAfter \" +\n    \"icWizardEventHandler \" +\n    \"icWizardFinishEventHandler \" +\n    \"icWizardStepEventHandler \" +\n    \"icWizardStepFinishEventHandler \" +\n    \"icWizardActionEnableEventHandler \" +\n    \"icWizardActionExecuteEventHandler \" +\n    \"icCreateJobsHandler \" +\n    \"icCreateNoticesHandler \" +\n    \"icBeforeLookUpEventHandler \" +\n    \"icAfterLookUpEventHandler \" +\n    \"icTaskAbortEventHandler \" +\n    \"icWorkflowBlockActionHandler \" +\n    \"icDialogDataSetEventHandler \" +\n    \"icDialogActionHandler \" +\n    \"icDialogLookUpEventHandler \" +\n    \"icDialogRequisiteChangeEventHandler \" +\n    \"icDialogFormEventHandler \" +\n    \"icDialogValidCloseEventHandler \" +\n    \"icBlockFormEventHandler \" +\n    \"icTaskFormEventHandler \" +\n    \"icReferenceMethod \" +\n    \"icEDocMethod \" +\n    \"icDialogMethod \" +\n    \"icProcessMessageHandler \";\n\n  // enum TItemShow\n  var TItemShow = \"isShow \" + \"isHide \" + \"isByUserSettings \";\n\n  // enum TJobKind\n  var TJobKind = \"jkJob \" + \"jkNotice \" + \"jkControlJob \";\n\n  // enum TJoinType\n  var TJoinType = \"jtInner \" + \"jtLeft \" + \"jtRight \" + \"jtFull \" + \"jtCross \";\n\n  // enum TLabelPos\n  var TLabelPos = \"lbpAbove \" + \"lbpBelow \" + \"lbpLeft \" + \"lbpRight \";\n\n  // enum TLicensingType\n  var TLicensingType = \"eltPerConnection \" + \"eltPerUser \";\n\n  // enum TLifeCycleStageFontColor\n  var TLifeCycleStageFontColor =\n    \"sfcUndefined \" +\n    \"sfcBlack \" +\n    \"sfcGreen \" +\n    \"sfcRed \" +\n    \"sfcBlue \" +\n    \"sfcOrange \" +\n    \"sfcLilac \";\n\n  // enum TLifeCycleStageFontStyle\n  var TLifeCycleStageFontStyle = \"sfsItalic \" + \"sfsStrikeout \" + \"sfsNormal \";\n\n  // enum TLockableDevelopmentComponentType\n  var TLockableDevelopmentComponentType =\n    \"ldctStandardRoute \" +\n    \"ldctWizard \" +\n    \"ldctScript \" +\n    \"ldctFunction \" +\n    \"ldctRouteBlock \" +\n    \"ldctIntegratedReport \" +\n    \"ldctAnalyticReport \" +\n    \"ldctReferenceType \" +\n    \"ldctEDocumentType \" +\n    \"ldctDialog \" +\n    \"ldctServerEvents \";\n\n  // enum TMaxRecordCountRestrictionType\n  var TMaxRecordCountRestrictionType =\n    \"mrcrtNone \" + \"mrcrtUser \" + \"mrcrtMaximal \" + \"mrcrtCustom \";\n\n  // enum TRangeValueType\n  var TRangeValueType =\n    \"vtEqual \" + \"vtGreaterOrEqual \" + \"vtLessOrEqual \" + \"vtRange \";\n\n  // enum TRelativeDate\n  var TRelativeDate =\n    \"rdYesterday \" +\n    \"rdToday \" +\n    \"rdTomorrow \" +\n    \"rdThisWeek \" +\n    \"rdThisMonth \" +\n    \"rdThisYear \" +\n    \"rdNextMonth \" +\n    \"rdNextWeek \" +\n    \"rdLastWeek \" +\n    \"rdLastMonth \";\n\n  // enum TReportDestination\n  var TReportDestination = \"rdWindow \" + \"rdFile \" + \"rdPrinter \";\n\n  // enum TReqDataType\n  var TReqDataType =\n    \"rdtString \" +\n    \"rdtNumeric \" +\n    \"rdtInteger \" +\n    \"rdtDate \" +\n    \"rdtReference \" +\n    \"rdtAccount \" +\n    \"rdtText \" +\n    \"rdtPick \" +\n    \"rdtUnknown \" +\n    \"rdtLargeInteger \" +\n    \"rdtDocument \";\n\n  // enum TRequisiteEventType\n  var TRequisiteEventType = \"reOnChange \" + \"reOnChangeValues \";\n\n  // enum TSBTimeType\n  var TSBTimeType = \"ttGlobal \" + \"ttLocal \" + \"ttUser \" + \"ttSystem \";\n\n  // enum TSearchShowMode\n  var TSearchShowMode =\n    \"ssmBrowse \" + \"ssmSelect \" + \"ssmMultiSelect \" + \"ssmBrowseModal \";\n\n  // enum TSelectMode\n  var TSelectMode = \"smSelect \" + \"smLike \" + \"smCard \";\n\n  // enum TSignatureType\n  var TSignatureType = \"stNone \" + \"stAuthenticating \" + \"stApproving \";\n\n  // enum TSignerContentType\n  var TSignerContentType = \"sctString \" + \"sctStream \";\n\n  // enum TStringsSortType\n  var TStringsSortType = \"sstAnsiSort \" + \"sstNaturalSort \";\n\n  // enum TStringValueType\n  var TStringValueType = \"svtEqual \" + \"svtContain \";\n\n  // enum TStructuredObjectAttributeType\n  var TStructuredObjectAttributeType =\n    \"soatString \" +\n    \"soatNumeric \" +\n    \"soatInteger \" +\n    \"soatDatetime \" +\n    \"soatReferenceRecord \" +\n    \"soatText \" +\n    \"soatPick \" +\n    \"soatBoolean \" +\n    \"soatEDocument \" +\n    \"soatAccount \" +\n    \"soatIntegerCollection \" +\n    \"soatNumericCollection \" +\n    \"soatStringCollection \" +\n    \"soatPickCollection \" +\n    \"soatDatetimeCollection \" +\n    \"soatBooleanCollection \" +\n    \"soatReferenceRecordCollection \" +\n    \"soatEDocumentCollection \" +\n    \"soatAccountCollection \" +\n    \"soatContents \" +\n    \"soatUnknown \";\n\n  // enum TTaskAbortReason\n  var TTaskAbortReason = \"tarAbortByUser \" + \"tarAbortByWorkflowException \";\n\n  // enum TTextValueType\n  var TTextValueType = \"tvtAllWords \" + \"tvtExactPhrase \" + \"tvtAnyWord \";\n\n  // enum TUserObjectStatus\n  var TUserObjectStatus =\n    \"usNone \" +\n    \"usCompleted \" +\n    \"usRedSquare \" +\n    \"usBlueSquare \" +\n    \"usYellowSquare \" +\n    \"usGreenSquare \" +\n    \"usOrangeSquare \" +\n    \"usPurpleSquare \" +\n    \"usFollowUp \";\n\n  // enum TUserType\n  var TUserType =\n    \"utUnknown \" +\n    \"utUser \" +\n    \"utDeveloper \" +\n    \"utAdministrator \" +\n    \"utSystemDeveloper \" +\n    \"utDisconnected \";\n\n  // enum TValuesBuildType\n  var TValuesBuildType =\n    \"btAnd \" + \"btDetailAnd \" + \"btOr \" + \"btNotOr \" + \"btOnly \";\n\n  // enum TViewMode\n  var TViewMode = \"vmView \" + \"vmSelect \" + \"vmNavigation \";\n\n  // enum TViewSelectionMode\n  var TViewSelectionMode =\n    \"vsmSingle \" + \"vsmMultiple \" + \"vsmMultipleCheck \" + \"vsmNoSelection \";\n\n  // enum TWizardActionType\n  var TWizardActionType =\n    \"wfatPrevious \" + \"wfatNext \" + \"wfatCancel \" + \"wfatFinish \";\n\n  // enum TWizardFormElementProperty\n  var TWizardFormElementProperty =\n    \"wfepUndefined \" +\n    \"wfepText3 \" +\n    \"wfepText6 \" +\n    \"wfepText9 \" +\n    \"wfepSpinEdit \" +\n    \"wfepDropDown \" +\n    \"wfepRadioGroup \" +\n    \"wfepFlag \" +\n    \"wfepText12 \" +\n    \"wfepText15 \" +\n    \"wfepText18 \" +\n    \"wfepText21 \" +\n    \"wfepText24 \" +\n    \"wfepText27 \" +\n    \"wfepText30 \" +\n    \"wfepRadioGroupColumn1 \" +\n    \"wfepRadioGroupColumn2 \" +\n    \"wfepRadioGroupColumn3 \";\n\n  // enum TWizardFormElementType\n  var TWizardFormElementType =\n    \"wfetQueryParameter \" + \"wfetText \" + \"wfetDelimiter \" + \"wfetLabel \";\n\n  // enum TWizardParamType\n  var TWizardParamType =\n    \"wptString \" +\n    \"wptInteger \" +\n    \"wptNumeric \" +\n    \"wptBoolean \" +\n    \"wptDateTime \" +\n    \"wptPick \" +\n    \"wptText \" +\n    \"wptUser \" +\n    \"wptUserList \" +\n    \"wptEDocumentInfo \" +\n    \"wptEDocumentInfoList \" +\n    \"wptReferenceRecordInfo \" +\n    \"wptReferenceRecordInfoList \" +\n    \"wptFolderInfo \" +\n    \"wptTaskInfo \" +\n    \"wptContents \" +\n    \"wptFileName \" +\n    \"wptDate \";\n\n  // enum TWizardStepResult\n  var TWizardStepResult =\n    \"wsrComplete \" +\n    \"wsrGoNext \" +\n    \"wsrGoPrevious \" +\n    \"wsrCustom \" +\n    \"wsrCancel \" +\n    \"wsrGoFinal \";\n\n  // enum TWizardStepType\n  var TWizardStepType =\n    \"wstForm \" +\n    \"wstEDocument \" +\n    \"wstTaskCard \" +\n    \"wstReferenceRecordCard \" +\n    \"wstFinal \";\n\n  // enum TWorkAccessType\n  var TWorkAccessType = \"waAll \" + \"waPerformers \" + \"waManual \";\n\n  // enum TWorkflowBlockType\n  var TWorkflowBlockType =\n    \"wsbStart \" +\n    \"wsbFinish \" +\n    \"wsbNotice \" +\n    \"wsbStep \" +\n    \"wsbDecision \" +\n    \"wsbWait \" +\n    \"wsbMonitor \" +\n    \"wsbScript \" +\n    \"wsbConnector \" +\n    \"wsbSubTask \" +\n    \"wsbLifeCycleStage \" +\n    \"wsbPause \";\n\n  // enum TWorkflowDataType\n  var TWorkflowDataType =\n    \"wdtInteger \" +\n    \"wdtFloat \" +\n    \"wdtString \" +\n    \"wdtPick \" +\n    \"wdtDateTime \" +\n    \"wdtBoolean \" +\n    \"wdtTask \" +\n    \"wdtJob \" +\n    \"wdtFolder \" +\n    \"wdtEDocument \" +\n    \"wdtReferenceRecord \" +\n    \"wdtUser \" +\n    \"wdtGroup \" +\n    \"wdtRole \" +\n    \"wdtIntegerCollection \" +\n    \"wdtFloatCollection \" +\n    \"wdtStringCollection \" +\n    \"wdtPickCollection \" +\n    \"wdtDateTimeCollection \" +\n    \"wdtBooleanCollection \" +\n    \"wdtTaskCollection \" +\n    \"wdtJobCollection \" +\n    \"wdtFolderCollection \" +\n    \"wdtEDocumentCollection \" +\n    \"wdtReferenceRecordCollection \" +\n    \"wdtUserCollection \" +\n    \"wdtGroupCollection \" +\n    \"wdtRoleCollection \" +\n    \"wdtContents \" +\n    \"wdtUserList \" +\n    \"wdtSearchDescription \" +\n    \"wdtDeadLine \" +\n    \"wdtPickSet \" +\n    \"wdtAccountCollection \";\n\n  // enum TWorkImportance\n  var TWorkImportance = \"wiLow \" + \"wiNormal \" + \"wiHigh \";\n\n  // enum TWorkRouteType\n  var TWorkRouteType = \"wrtSoft \" + \"wrtHard \";\n\n  // enum TWorkState\n  var TWorkState =\n    \"wsInit \" +\n    \"wsRunning \" +\n    \"wsDone \" +\n    \"wsControlled \" +\n    \"wsAborted \" +\n    \"wsContinued \";\n\n  // enum TWorkTextBuildingMode\n  var TWorkTextBuildingMode =\n    \"wtmFull \" + \"wtmFromCurrent \" + \"wtmOnlyCurrent \";\n\n  // Перечисления\n  var ENUMS =\n    TAccountType +\n    TActionEnabledMode +\n    TAddPosition +\n    TAlignment +\n    TAreaShowMode +\n    TCertificateInvalidationReason +\n    TCertificateType +\n    TCheckListBoxItemState +\n    TCloseOnEsc +\n    TCompType +\n    TConditionFormat +\n    TConnectionIntent +\n    TContentKind +\n    TControlType +\n    TCriterionContentType +\n    TCultureType +\n    TDataSetEventType +\n    TDataSetState +\n    TDateFormatType +\n    TDateOffsetType +\n    TDateTimeKind +\n    TDeaAccessRights +\n    TDocumentDefaultAction +\n    TEditMode +\n    TEditorCloseObservType +\n    TEdmsApplicationAction +\n    TEDocumentLockType +\n    TEDocumentStepShowMode +\n    TEDocumentStepVersionType +\n    TEDocumentStorageFunction +\n    TEDocumentStorageType +\n    TEDocumentVersionSourceType +\n    TEDocumentVersionState +\n    TEncodeType +\n    TExceptionCategory +\n    TExportedSignaturesType +\n    TExportedVersionType +\n    TFieldDataType +\n    TFolderType +\n    TGridRowHeight +\n    THyperlinkType +\n    TImageFileFormat +\n    TImageMode +\n    TImageType +\n    TInplaceHintKind +\n    TISBLContext +\n    TItemShow +\n    TJobKind +\n    TJoinType +\n    TLabelPos +\n    TLicensingType +\n    TLifeCycleStageFontColor +\n    TLifeCycleStageFontStyle +\n    TLockableDevelopmentComponentType +\n    TMaxRecordCountRestrictionType +\n    TRangeValueType +\n    TRelativeDate +\n    TReportDestination +\n    TReqDataType +\n    TRequisiteEventType +\n    TSBTimeType +\n    TSearchShowMode +\n    TSelectMode +\n    TSignatureType +\n    TSignerContentType +\n    TStringsSortType +\n    TStringValueType +\n    TStructuredObjectAttributeType +\n    TTaskAbortReason +\n    TTextValueType +\n    TUserObjectStatus +\n    TUserType +\n    TValuesBuildType +\n    TViewMode +\n    TViewSelectionMode +\n    TWizardActionType +\n    TWizardFormElementProperty +\n    TWizardFormElementType +\n    TWizardParamType +\n    TWizardStepResult +\n    TWizardStepType +\n    TWorkAccessType +\n    TWorkflowBlockType +\n    TWorkflowDataType +\n    TWorkImportance +\n    TWorkRouteType +\n    TWorkState +\n    TWorkTextBuildingMode;\n\n  // Системные функции ==> SYSFUNCTIONS\n  var system_functions =\n    \"AddSubString \" +\n    \"AdjustLineBreaks \" +\n    \"AmountInWords \" +\n    \"Analysis \" +\n    \"ArrayDimCount \" +\n    \"ArrayHighBound \" +\n    \"ArrayLowBound \" +\n    \"ArrayOf \" +\n    \"ArrayReDim \" +\n    \"Assert \" +\n    \"Assigned \" +\n    \"BeginOfMonth \" +\n    \"BeginOfPeriod \" +\n    \"BuildProfilingOperationAnalysis \" +\n    \"CallProcedure \" +\n    \"CanReadFile \" +\n    \"CArrayElement \" +\n    \"CDataSetRequisite \" +\n    \"ChangeDate \" +\n    \"ChangeReferenceDataset \" +\n    \"Char \" +\n    \"CharPos \" +\n    \"CheckParam \" +\n    \"CheckParamValue \" +\n    \"CompareStrings \" +\n    \"ConstantExists \" +\n    \"ControlState \" +\n    \"ConvertDateStr \" +\n    \"Copy \" +\n    \"CopyFile \" +\n    \"CreateArray \" +\n    \"CreateCachedReference \" +\n    \"CreateConnection \" +\n    \"CreateDialog \" +\n    \"CreateDualListDialog \" +\n    \"CreateEditor \" +\n    \"CreateException \" +\n    \"CreateFile \" +\n    \"CreateFolderDialog \" +\n    \"CreateInputDialog \" +\n    \"CreateLinkFile \" +\n    \"CreateList \" +\n    \"CreateLock \" +\n    \"CreateMemoryDataSet \" +\n    \"CreateObject \" +\n    \"CreateOpenDialog \" +\n    \"CreateProgress \" +\n    \"CreateQuery \" +\n    \"CreateReference \" +\n    \"CreateReport \" +\n    \"CreateSaveDialog \" +\n    \"CreateScript \" +\n    \"CreateSQLPivotFunction \" +\n    \"CreateStringList \" +\n    \"CreateTreeListSelectDialog \" +\n    \"CSelectSQL \" +\n    \"CSQL \" +\n    \"CSubString \" +\n    \"CurrentUserID \" +\n    \"CurrentUserName \" +\n    \"CurrentVersion \" +\n    \"DataSetLocateEx \" +\n    \"DateDiff \" +\n    \"DateTimeDiff \" +\n    \"DateToStr \" +\n    \"DayOfWeek \" +\n    \"DeleteFile \" +\n    \"DirectoryExists \" +\n    \"DisableCheckAccessRights \" +\n    \"DisableCheckFullShowingRestriction \" +\n    \"DisableMassTaskSendingRestrictions \" +\n    \"DropTable \" +\n    \"DupeString \" +\n    \"EditText \" +\n    \"EnableCheckAccessRights \" +\n    \"EnableCheckFullShowingRestriction \" +\n    \"EnableMassTaskSendingRestrictions \" +\n    \"EndOfMonth \" +\n    \"EndOfPeriod \" +\n    \"ExceptionExists \" +\n    \"ExceptionsOff \" +\n    \"ExceptionsOn \" +\n    \"Execute \" +\n    \"ExecuteProcess \" +\n    \"Exit \" +\n    \"ExpandEnvironmentVariables \" +\n    \"ExtractFileDrive \" +\n    \"ExtractFileExt \" +\n    \"ExtractFileName \" +\n    \"ExtractFilePath \" +\n    \"ExtractParams \" +\n    \"FileExists \" +\n    \"FileSize \" +\n    \"FindFile \" +\n    \"FindSubString \" +\n    \"FirmContext \" +\n    \"ForceDirectories \" +\n    \"Format \" +\n    \"FormatDate \" +\n    \"FormatNumeric \" +\n    \"FormatSQLDate \" +\n    \"FormatString \" +\n    \"FreeException \" +\n    \"GetComponent \" +\n    \"GetComponentLaunchParam \" +\n    \"GetConstant \" +\n    \"GetLastException \" +\n    \"GetReferenceRecord \" +\n    \"GetRefTypeByRefID \" +\n    \"GetTableID \" +\n    \"GetTempFolder \" +\n    \"IfThen \" +\n    \"In \" +\n    \"IndexOf \" +\n    \"InputDialog \" +\n    \"InputDialogEx \" +\n    \"InteractiveMode \" +\n    \"IsFileLocked \" +\n    \"IsGraphicFile \" +\n    \"IsNumeric \" +\n    \"Length \" +\n    \"LoadString \" +\n    \"LoadStringFmt \" +\n    \"LocalTimeToUTC \" +\n    \"LowerCase \" +\n    \"Max \" +\n    \"MessageBox \" +\n    \"MessageBoxEx \" +\n    \"MimeDecodeBinary \" +\n    \"MimeDecodeString \" +\n    \"MimeEncodeBinary \" +\n    \"MimeEncodeString \" +\n    \"Min \" +\n    \"MoneyInWords \" +\n    \"MoveFile \" +\n    \"NewID \" +\n    \"Now \" +\n    \"OpenFile \" +\n    \"Ord \" +\n    \"Precision \" +\n    \"Raise \" +\n    \"ReadCertificateFromFile \" +\n    \"ReadFile \" +\n    \"ReferenceCodeByID \" +\n    \"ReferenceNumber \" +\n    \"ReferenceRequisiteMode \" +\n    \"ReferenceRequisiteValue \" +\n    \"RegionDateSettings \" +\n    \"RegionNumberSettings \" +\n    \"RegionTimeSettings \" +\n    \"RegRead \" +\n    \"RegWrite \" +\n    \"RenameFile \" +\n    \"Replace \" +\n    \"Round \" +\n    \"SelectServerCode \" +\n    \"SelectSQL \" +\n    \"ServerDateTime \" +\n    \"SetConstant \" +\n    \"SetManagedFolderFieldsState \" +\n    \"ShowConstantsInputDialog \" +\n    \"ShowMessage \" +\n    \"Sleep \" +\n    \"Split \" +\n    \"SQL \" +\n    \"SQL2XLSTAB \" +\n    \"SQLProfilingSendReport \" +\n    \"StrToDate \" +\n    \"SubString \" +\n    \"SubStringCount \" +\n    \"SystemSetting \" +\n    \"Time \" +\n    \"TimeDiff \" +\n    \"Today \" +\n    \"Transliterate \" +\n    \"Trim \" +\n    \"UpperCase \" +\n    \"UserStatus \" +\n    \"UTCToLocalTime \" +\n    \"ValidateXML \" +\n    \"VarIsClear \" +\n    \"VarIsEmpty \" +\n    \"VarIsNull \" +\n    \"WorkTimeDiff \" +\n    \"WriteFile \" +\n    \"WriteFileEx \" +\n    \"WriteObjectHistory \" +\n    \"Анализ \" +\n    \"БазаДанных \" +\n    \"БлокЕсть \" +\n    \"БлокЕстьРасш \" +\n    \"БлокИнфо \" +\n    \"БлокСнять \" +\n    \"БлокСнятьРасш \" +\n    \"БлокУстановить \" +\n    \"Ввод \" +\n    \"ВводМеню \" +\n    \"ВедС \" +\n    \"ВедСпр \" +\n    \"ВерхняяГраницаМассива \" +\n    \"ВнешПрогр \" +\n    \"Восст \" +\n    \"ВременнаяПапка \" +\n    \"Время \" +\n    \"ВыборSQL \" +\n    \"ВыбратьЗапись \" +\n    \"ВыделитьСтр \" +\n    \"Вызвать \" +\n    \"Выполнить \" +\n    \"ВыпПрогр \" +\n    \"ГрафическийФайл \" +\n    \"ГруппаДополнительно \" +\n    \"ДатаВремяСерв \" +\n    \"ДеньНедели \" +\n    \"ДиалогДаНет \" +\n    \"ДлинаСтр \" +\n    \"ДобПодстр \" +\n    \"ЕПусто \" +\n    \"ЕслиТо \" +\n    \"ЕЧисло \" +\n    \"ЗамПодстр \" +\n    \"ЗаписьСправочника \" +\n    \"ЗначПоляСпр \" +\n    \"ИДТипСпр \" +\n    \"ИзвлечьДиск \" +\n    \"ИзвлечьИмяФайла \" +\n    \"ИзвлечьПуть \" +\n    \"ИзвлечьРасширение \" +\n    \"ИзмДат \" +\n    \"ИзменитьРазмерМассива \" +\n    \"ИзмеренийМассива \" +\n    \"ИмяОрг \" +\n    \"ИмяПоляСпр \" +\n    \"Индекс \" +\n    \"ИндикаторЗакрыть \" +\n    \"ИндикаторОткрыть \" +\n    \"ИндикаторШаг \" +\n    \"ИнтерактивныйРежим \" +\n    \"ИтогТблСпр \" +\n    \"КодВидВедСпр \" +\n    \"КодВидСпрПоИД \" +\n    \"КодПоAnalit \" +\n    \"КодСимвола \" +\n    \"КодСпр \" +\n    \"КолПодстр \" +\n    \"КолПроп \" +\n    \"КонМес \" +\n    \"Конст \" +\n    \"КонстЕсть \" +\n    \"КонстЗнач \" +\n    \"КонТран \" +\n    \"КопироватьФайл \" +\n    \"КопияСтр \" +\n    \"КПериод \" +\n    \"КСтрТблСпр \" +\n    \"Макс \" +\n    \"МаксСтрТблСпр \" +\n    \"Массив \" +\n    \"Меню \" +\n    \"МенюРасш \" +\n    \"Мин \" +\n    \"НаборДанныхНайтиРасш \" +\n    \"НаимВидСпр \" +\n    \"НаимПоAnalit \" +\n    \"НаимСпр \" +\n    \"НастроитьПереводыСтрок \" +\n    \"НачМес \" +\n    \"НачТран \" +\n    \"НижняяГраницаМассива \" +\n    \"НомерСпр \" +\n    \"НПериод \" +\n    \"Окно \" +\n    \"Окр \" +\n    \"Окружение \" +\n    \"ОтлИнфДобавить \" +\n    \"ОтлИнфУдалить \" +\n    \"Отчет \" +\n    \"ОтчетАнал \" +\n    \"ОтчетИнт \" +\n    \"ПапкаСуществует \" +\n    \"Пауза \" +\n    \"ПВыборSQL \" +\n    \"ПереименоватьФайл \" +\n    \"Переменные \" +\n    \"ПереместитьФайл \" +\n    \"Подстр \" +\n    \"ПоискПодстр \" +\n    \"ПоискСтр \" +\n    \"ПолучитьИДТаблицы \" +\n    \"ПользовательДополнительно \" +\n    \"ПользовательИД \" +\n    \"ПользовательИмя \" +\n    \"ПользовательСтатус \" +\n    \"Прервать \" +\n    \"ПроверитьПараметр \" +\n    \"ПроверитьПараметрЗнач \" +\n    \"ПроверитьУсловие \" +\n    \"РазбСтр \" +\n    \"РазнВремя \" +\n    \"РазнДат \" +\n    \"РазнДатаВремя \" +\n    \"РазнРабВремя \" +\n    \"РегУстВрем \" +\n    \"РегУстДат \" +\n    \"РегУстЧсл \" +\n    \"РедТекст \" +\n    \"РеестрЗапись \" +\n    \"РеестрСписокИменПарам \" +\n    \"РеестрЧтение \" +\n    \"РеквСпр \" +\n    \"РеквСпрПр \" +\n    \"Сегодня \" +\n    \"Сейчас \" +\n    \"Сервер \" +\n    \"СерверПроцессИД \" +\n    \"СертификатФайлСчитать \" +\n    \"СжПроб \" +\n    \"Символ \" +\n    \"СистемаДиректумКод \" +\n    \"СистемаИнформация \" +\n    \"СистемаКод \" +\n    \"Содержит \" +\n    \"СоединениеЗакрыть \" +\n    \"СоединениеОткрыть \" +\n    \"СоздатьДиалог \" +\n    \"СоздатьДиалогВыбораИзДвухСписков \" +\n    \"СоздатьДиалогВыбораПапки \" +\n    \"СоздатьДиалогОткрытияФайла \" +\n    \"СоздатьДиалогСохраненияФайла \" +\n    \"СоздатьЗапрос \" +\n    \"СоздатьИндикатор \" +\n    \"СоздатьИсключение \" +\n    \"СоздатьКэшированныйСправочник \" +\n    \"СоздатьМассив \" +\n    \"СоздатьНаборДанных \" +\n    \"СоздатьОбъект \" +\n    \"СоздатьОтчет \" +\n    \"СоздатьПапку \" +\n    \"СоздатьРедактор \" +\n    \"СоздатьСоединение \" +\n    \"СоздатьСписок \" +\n    \"СоздатьСписокСтрок \" +\n    \"СоздатьСправочник \" +\n    \"СоздатьСценарий \" +\n    \"СоздСпр \" +\n    \"СостСпр \" +\n    \"Сохр \" +\n    \"СохрСпр \" +\n    \"СписокСистем \" +\n    \"Спр \" +\n    \"Справочник \" +\n    \"СпрБлокЕсть \" +\n    \"СпрБлокСнять \" +\n    \"СпрБлокСнятьРасш \" +\n    \"СпрБлокУстановить \" +\n    \"СпрИзмНабДан \" +\n    \"СпрКод \" +\n    \"СпрНомер \" +\n    \"СпрОбновить \" +\n    \"СпрОткрыть \" +\n    \"СпрОтменить \" +\n    \"СпрПарам \" +\n    \"СпрПолеЗнач \" +\n    \"СпрПолеИмя \" +\n    \"СпрРекв \" +\n    \"СпрРеквВведЗн \" +\n    \"СпрРеквНовые \" +\n    \"СпрРеквПр \" +\n    \"СпрРеквПредЗн \" +\n    \"СпрРеквРежим \" +\n    \"СпрРеквТипТекст \" +\n    \"СпрСоздать \" +\n    \"СпрСост \" +\n    \"СпрСохранить \" +\n    \"СпрТблИтог \" +\n    \"СпрТблСтр \" +\n    \"СпрТблСтрКол \" +\n    \"СпрТблСтрМакс \" +\n    \"СпрТблСтрМин \" +\n    \"СпрТблСтрПред \" +\n    \"СпрТблСтрСлед \" +\n    \"СпрТблСтрСозд \" +\n    \"СпрТблСтрУд \" +\n    \"СпрТекПредст \" +\n    \"СпрУдалить \" +\n    \"СравнитьСтр \" +\n    \"СтрВерхРегистр \" +\n    \"СтрНижнРегистр \" +\n    \"СтрТблСпр \" +\n    \"СумПроп \" +\n    \"Сценарий \" +\n    \"СценарийПарам \" +\n    \"ТекВерсия \" +\n    \"ТекОрг \" +\n    \"Точн \" +\n    \"Тран \" +\n    \"Транслитерация \" +\n    \"УдалитьТаблицу \" +\n    \"УдалитьФайл \" +\n    \"УдСпр \" +\n    \"УдСтрТблСпр \" +\n    \"Уст \" +\n    \"УстановкиКонстант \" +\n    \"ФайлАтрибутСчитать \" +\n    \"ФайлАтрибутУстановить \" +\n    \"ФайлВремя \" +\n    \"ФайлВремяУстановить \" +\n    \"ФайлВыбрать \" +\n    \"ФайлЗанят \" +\n    \"ФайлЗаписать \" +\n    \"ФайлИскать \" +\n    \"ФайлКопировать \" +\n    \"ФайлМожноЧитать \" +\n    \"ФайлОткрыть \" +\n    \"ФайлПереименовать \" +\n    \"ФайлПерекодировать \" +\n    \"ФайлПереместить \" +\n    \"ФайлПросмотреть \" +\n    \"ФайлРазмер \" +\n    \"ФайлСоздать \" +\n    \"ФайлСсылкаСоздать \" +\n    \"ФайлСуществует \" +\n    \"ФайлСчитать \" +\n    \"ФайлУдалить \" +\n    \"ФмтSQLДат \" +\n    \"ФмтДат \" +\n    \"ФмтСтр \" +\n    \"ФмтЧсл \" +\n    \"Формат \" +\n    \"ЦМассивЭлемент \" +\n    \"ЦНаборДанныхРеквизит \" +\n    \"ЦПодстр \";\n\n  // Предопределенные переменные ==> built_in\n  var predefined_variables =\n    \"AltState \" +\n    \"Application \" +\n    \"CallType \" +\n    \"ComponentTokens \" +\n    \"CreatedJobs \" +\n    \"CreatedNotices \" +\n    \"ControlState \" +\n    \"DialogResult \" +\n    \"Dialogs \" +\n    \"EDocuments \" +\n    \"EDocumentVersionSource \" +\n    \"Folders \" +\n    \"GlobalIDs \" +\n    \"Job \" +\n    \"Jobs \" +\n    \"InputValue \" +\n    \"LookUpReference \" +\n    \"LookUpRequisiteNames \" +\n    \"LookUpSearch \" +\n    \"Object \" +\n    \"ParentComponent \" +\n    \"Processes \" +\n    \"References \" +\n    \"Requisite \" +\n    \"ReportName \" +\n    \"Reports \" +\n    \"Result \" +\n    \"Scripts \" +\n    \"Searches \" +\n    \"SelectedAttachments \" +\n    \"SelectedItems \" +\n    \"SelectMode \" +\n    \"Sender \" +\n    \"ServerEvents \" +\n    \"ServiceFactory \" +\n    \"ShiftState \" +\n    \"SubTask \" +\n    \"SystemDialogs \" +\n    \"Tasks \" +\n    \"Wizard \" +\n    \"Wizards \" +\n    \"Work \" +\n    \"ВызовСпособ \" +\n    \"ИмяОтчета \" +\n    \"РеквЗнач \";\n\n  // Интерфейсы ==> type\n  var interfaces =\n    \"IApplication \" +\n    \"IAccessRights \" +\n    \"IAccountRepository \" +\n    \"IAccountSelectionRestrictions \" +\n    \"IAction \" +\n    \"IActionList \" +\n    \"IAdministrationHistoryDescription \" +\n    \"IAnchors \" +\n    \"IApplication \" +\n    \"IArchiveInfo \" +\n    \"IAttachment \" +\n    \"IAttachmentList \" +\n    \"ICheckListBox \" +\n    \"ICheckPointedList \" +\n    \"IColumn \" +\n    \"IComponent \" +\n    \"IComponentDescription \" +\n    \"IComponentToken \" +\n    \"IComponentTokenFactory \" +\n    \"IComponentTokenInfo \" +\n    \"ICompRecordInfo \" +\n    \"IConnection \" +\n    \"IContents \" +\n    \"IControl \" +\n    \"IControlJob \" +\n    \"IControlJobInfo \" +\n    \"IControlList \" +\n    \"ICrypto \" +\n    \"ICrypto2 \" +\n    \"ICustomJob \" +\n    \"ICustomJobInfo \" +\n    \"ICustomListBox \" +\n    \"ICustomObjectWizardStep \" +\n    \"ICustomWork \" +\n    \"ICustomWorkInfo \" +\n    \"IDataSet \" +\n    \"IDataSetAccessInfo \" +\n    \"IDataSigner \" +\n    \"IDateCriterion \" +\n    \"IDateRequisite \" +\n    \"IDateRequisiteDescription \" +\n    \"IDateValue \" +\n    \"IDeaAccessRights \" +\n    \"IDeaObjectInfo \" +\n    \"IDevelopmentComponentLock \" +\n    \"IDialog \" +\n    \"IDialogFactory \" +\n    \"IDialogPickRequisiteItems \" +\n    \"IDialogsFactory \" +\n    \"IDICSFactory \" +\n    \"IDocRequisite \" +\n    \"IDocumentInfo \" +\n    \"IDualListDialog \" +\n    \"IECertificate \" +\n    \"IECertificateInfo \" +\n    \"IECertificates \" +\n    \"IEditControl \" +\n    \"IEditorForm \" +\n    \"IEdmsExplorer \" +\n    \"IEdmsObject \" +\n    \"IEdmsObjectDescription \" +\n    \"IEdmsObjectFactory \" +\n    \"IEdmsObjectInfo \" +\n    \"IEDocument \" +\n    \"IEDocumentAccessRights \" +\n    \"IEDocumentDescription \" +\n    \"IEDocumentEditor \" +\n    \"IEDocumentFactory \" +\n    \"IEDocumentInfo \" +\n    \"IEDocumentStorage \" +\n    \"IEDocumentVersion \" +\n    \"IEDocumentVersionListDialog \" +\n    \"IEDocumentVersionSource \" +\n    \"IEDocumentWizardStep \" +\n    \"IEDocVerSignature \" +\n    \"IEDocVersionState \" +\n    \"IEnabledMode \" +\n    \"IEncodeProvider \" +\n    \"IEncrypter \" +\n    \"IEvent \" +\n    \"IEventList \" +\n    \"IException \" +\n    \"IExternalEvents \" +\n    \"IExternalHandler \" +\n    \"IFactory \" +\n    \"IField \" +\n    \"IFileDialog \" +\n    \"IFolder \" +\n    \"IFolderDescription \" +\n    \"IFolderDialog \" +\n    \"IFolderFactory \" +\n    \"IFolderInfo \" +\n    \"IForEach \" +\n    \"IForm \" +\n    \"IFormTitle \" +\n    \"IFormWizardStep \" +\n    \"IGlobalIDFactory \" +\n    \"IGlobalIDInfo \" +\n    \"IGrid \" +\n    \"IHasher \" +\n    \"IHistoryDescription \" +\n    \"IHyperLinkControl \" +\n    \"IImageButton \" +\n    \"IImageControl \" +\n    \"IInnerPanel \" +\n    \"IInplaceHint \" +\n    \"IIntegerCriterion \" +\n    \"IIntegerList \" +\n    \"IIntegerRequisite \" +\n    \"IIntegerValue \" +\n    \"IISBLEditorForm \" +\n    \"IJob \" +\n    \"IJobDescription \" +\n    \"IJobFactory \" +\n    \"IJobForm \" +\n    \"IJobInfo \" +\n    \"ILabelControl \" +\n    \"ILargeIntegerCriterion \" +\n    \"ILargeIntegerRequisite \" +\n    \"ILargeIntegerValue \" +\n    \"ILicenseInfo \" +\n    \"ILifeCycleStage \" +\n    \"IList \" +\n    \"IListBox \" +\n    \"ILocalIDInfo \" +\n    \"ILocalization \" +\n    \"ILock \" +\n    \"IMemoryDataSet \" +\n    \"IMessagingFactory \" +\n    \"IMetadataRepository \" +\n    \"INotice \" +\n    \"INoticeInfo \" +\n    \"INumericCriterion \" +\n    \"INumericRequisite \" +\n    \"INumericValue \" +\n    \"IObject \" +\n    \"IObjectDescription \" +\n    \"IObjectImporter \" +\n    \"IObjectInfo \" +\n    \"IObserver \" +\n    \"IPanelGroup \" +\n    \"IPickCriterion \" +\n    \"IPickProperty \" +\n    \"IPickRequisite \" +\n    \"IPickRequisiteDescription \" +\n    \"IPickRequisiteItem \" +\n    \"IPickRequisiteItems \" +\n    \"IPickValue \" +\n    \"IPrivilege \" +\n    \"IPrivilegeList \" +\n    \"IProcess \" +\n    \"IProcessFactory \" +\n    \"IProcessMessage \" +\n    \"IProgress \" +\n    \"IProperty \" +\n    \"IPropertyChangeEvent \" +\n    \"IQuery \" +\n    \"IReference \" +\n    \"IReferenceCriterion \" +\n    \"IReferenceEnabledMode \" +\n    \"IReferenceFactory \" +\n    \"IReferenceHistoryDescription \" +\n    \"IReferenceInfo \" +\n    \"IReferenceRecordCardWizardStep \" +\n    \"IReferenceRequisiteDescription \" +\n    \"IReferencesFactory \" +\n    \"IReferenceValue \" +\n    \"IRefRequisite \" +\n    \"IReport \" +\n    \"IReportFactory \" +\n    \"IRequisite \" +\n    \"IRequisiteDescription \" +\n    \"IRequisiteDescriptionList \" +\n    \"IRequisiteFactory \" +\n    \"IRichEdit \" +\n    \"IRouteStep \" +\n    \"IRule \" +\n    \"IRuleList \" +\n    \"ISchemeBlock \" +\n    \"IScript \" +\n    \"IScriptFactory \" +\n    \"ISearchCriteria \" +\n    \"ISearchCriterion \" +\n    \"ISearchDescription \" +\n    \"ISearchFactory \" +\n    \"ISearchFolderInfo \" +\n    \"ISearchForObjectDescription \" +\n    \"ISearchResultRestrictions \" +\n    \"ISecuredContext \" +\n    \"ISelectDialog \" +\n    \"IServerEvent \" +\n    \"IServerEventFactory \" +\n    \"IServiceDialog \" +\n    \"IServiceFactory \" +\n    \"ISignature \" +\n    \"ISignProvider \" +\n    \"ISignProvider2 \" +\n    \"ISignProvider3 \" +\n    \"ISimpleCriterion \" +\n    \"IStringCriterion \" +\n    \"IStringList \" +\n    \"IStringRequisite \" +\n    \"IStringRequisiteDescription \" +\n    \"IStringValue \" +\n    \"ISystemDialogsFactory \" +\n    \"ISystemInfo \" +\n    \"ITabSheet \" +\n    \"ITask \" +\n    \"ITaskAbortReasonInfo \" +\n    \"ITaskCardWizardStep \" +\n    \"ITaskDescription \" +\n    \"ITaskFactory \" +\n    \"ITaskInfo \" +\n    \"ITaskRoute \" +\n    \"ITextCriterion \" +\n    \"ITextRequisite \" +\n    \"ITextValue \" +\n    \"ITreeListSelectDialog \" +\n    \"IUser \" +\n    \"IUserList \" +\n    \"IValue \" +\n    \"IView \" +\n    \"IWebBrowserControl \" +\n    \"IWizard \" +\n    \"IWizardAction \" +\n    \"IWizardFactory \" +\n    \"IWizardFormElement \" +\n    \"IWizardParam \" +\n    \"IWizardPickParam \" +\n    \"IWizardReferenceParam \" +\n    \"IWizardStep \" +\n    \"IWorkAccessRights \" +\n    \"IWorkDescription \" +\n    \"IWorkflowAskableParam \" +\n    \"IWorkflowAskableParams \" +\n    \"IWorkflowBlock \" +\n    \"IWorkflowBlockResult \" +\n    \"IWorkflowEnabledMode \" +\n    \"IWorkflowParam \" +\n    \"IWorkflowPickParam \" +\n    \"IWorkflowReferenceParam \" +\n    \"IWorkState \" +\n    \"IWorkTreeCustomNode \" +\n    \"IWorkTreeJobNode \" +\n    \"IWorkTreeTaskNode \" +\n    \"IXMLEditorForm \" +\n    \"SBCrypto \";\n\n  // built_in : встроенные или библиотечные объекты (константы, перечисления)\n  var BUILTIN = CONSTANTS + ENUMS;\n\n  // class: встроенные наборы значений, системные объекты, фабрики\n  var CLASS = predefined_variables;\n\n  // literal : примитивные типы\n  var LITERAL = \"null true false nil \";\n\n  // number : числа\n  var NUMBERS = {\n    className: \"number\",\n    begin: hljs.NUMBER_RE,\n    relevance: 0,\n  };\n\n  // string : строки\n  var STRINGS = {\n    className: \"string\",\n    variants: [{ begin: '\"', end: '\"' }, { begin: \"'\", end: \"'\" }],\n  };\n\n  // Токены\n  var DOCTAGS = {\n    className: \"doctag\",\n    begin: \"\\\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\\\b\",\n    relevance: 0,\n  };\n\n  // Однострочный комментарий\n  var ISBL_LINE_COMMENT_MODE = {\n    className: \"comment\",\n    begin: \"//\",\n    end: \"$\",\n    relevance: 0,\n    contains: [hljs.PHRASAL_WORDS_MODE, DOCTAGS],\n  };\n\n  // Многострочный комментарий\n  var ISBL_BLOCK_COMMENT_MODE = {\n    className: \"comment\",\n    begin: \"/\\\\*\",\n    end: \"\\\\*/\",\n    relevance: 0,\n    contains: [hljs.PHRASAL_WORDS_MODE, DOCTAGS],\n  };\n\n  // comment : комментарии\n  var COMMENTS = {\n    variants: [ISBL_LINE_COMMENT_MODE, ISBL_BLOCK_COMMENT_MODE],\n  };\n\n  // keywords : ключевые слова\n  var KEYWORDS = {\n    keyword: KEYWORD,\n    built_in: BUILTIN,\n    class: CLASS,\n    literal: LITERAL,\n  };\n\n  // methods : методы\n  var METHODS = {\n    begin: \"\\\\.\\\\s*\" + hljs.UNDERSCORE_IDENT_RE,\n    keywords: KEYWORDS,\n    relevance: 0,\n  };\n\n  // type : встроенные типы\n  var TYPES = {\n    className: \"type\",\n    begin: \":[ \\\\t]*(\" + interfaces.trim().replace(/\\s/g, \"|\") + \")\",\n    end: \"[ \\\\t]*=\",\n    excludeEnd: true,\n  };\n\n  // variables : переменные\n  var VARIABLES = {\n    className: \"variable\",\n    lexemes: UNDERSCORE_IDENT_RE,\n    keywords: KEYWORDS,\n    begin: UNDERSCORE_IDENT_RE,\n    relevance: 0,\n    containts: [TYPES, METHODS],\n  };\n\n  // Имена функций\n  var FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + \"\\\\(\";\n\n  var TITLE_MODE = {\n    className: \"title\",\n    lexemes: UNDERSCORE_IDENT_RE,\n    keywords: {\n      built_in: system_functions,\n    },\n    begin: FUNCTION_TITLE,\n    end: \"\\\\(\",\n    returnBegin: true,\n    excludeEnd: true,\n  };\n\n  // function : функции\n  var FUNCTIONS = {\n    className: \"function\",\n    begin: FUNCTION_TITLE,\n    end: \"\\\\)$\",\n    returnBegin: true,\n    lexemes: UNDERSCORE_IDENT_RE,\n    keywords: KEYWORDS,\n    illegal: \"[\\\\[\\\\]\\\\|\\\\$\\\\?%,~#@]\",\n    contains: [TITLE_MODE, METHODS, VARIABLES, STRINGS, NUMBERS, COMMENTS],\n  };\n\n  return {\n    aliases: [\"isbl\"],\n    case_insensitive: true,\n    lexemes: UNDERSCORE_IDENT_RE,\n    keywords: KEYWORDS,\n    illegal: \"\\\\$|\\\\?|%|,|;$|~|#|@|</\",\n    contains: [\n      FUNCTIONS,\n      TYPES,\n      METHODS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      COMMENTS,\n    ],\n  };\n};","module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // Normal keywords.\n      'abstract as base bool break byte case catch char checked const continue decimal ' +\n      'default delegate do double enum event explicit extern finally fixed float ' +\n      'for foreach goto if implicit in int interface internal is lock long nameof ' +\n      'object operator out override params private protected public readonly ref sbyte ' +\n      'sealed short sizeof stackalloc static string struct switch this try typeof ' +\n      'uint ulong unchecked unsafe ushort using virtual void volatile while ' +\n      // Contextual keywords.\n      'add alias ascending async await by descending dynamic equals from get global group into join ' +\n      'let on orderby partial remove select set value var where yield',\n    literal:\n      'null false true'\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n  var VERBATIM_STRING = {\n    className: 'string',\n    begin: '@\"', end: '\"',\n    contains: [{begin: '\"\"'}]\n  };\n  var VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {illegal: /\\n/});\n  var SUBST = {\n    className: 'subst',\n    begin: '{', end: '}',\n    keywords: KEYWORDS\n  };\n  var SUBST_NO_LF = hljs.inherit(SUBST, {illegal: /\\n/});\n  var INTERPOLATED_STRING = {\n    className: 'string',\n    begin: /\\$\"/, end: '\"',\n    illegal: /\\n/,\n    contains: [{begin: '{{'}, {begin: '}}'}, hljs.BACKSLASH_ESCAPE, SUBST_NO_LF]\n  };\n  var INTERPOLATED_VERBATIM_STRING = {\n    className: 'string',\n    begin: /\\$@\"/, end: '\"',\n    contains: [{begin: '{{'}, {begin: '}}'}, {begin: '\"\"'}, SUBST]\n  };\n  var INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {\n    illegal: /\\n/,\n    contains: [{begin: '{{'}, {begin: '}}'}, {begin: '\"\"'}, SUBST_NO_LF]\n  });\n  SUBST.contains = [\n    INTERPOLATED_VERBATIM_STRING,\n    INTERPOLATED_STRING,\n    VERBATIM_STRING,\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    NUMBERS,\n    hljs.C_BLOCK_COMMENT_MODE\n  ];\n  SUBST_NO_LF.contains = [\n    INTERPOLATED_VERBATIM_STRING_NO_LF,\n    INTERPOLATED_STRING,\n    VERBATIM_STRING_NO_LF,\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    NUMBERS,\n    hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {illegal: /\\n/})\n  ];\n  var STRING = {\n    variants: [\n      INTERPOLATED_VERBATIM_STRING,\n      INTERPOLATED_STRING,\n      VERBATIM_STRING,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  var TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\\\s*,\\\\s*' + hljs.IDENT_RE + ')*>)?(\\\\[\\\\])?';\n\n  return {\n    aliases: ['csharp', 'c#'],\n    keywords: KEYWORDS,\n    illegal: /::/,\n    contains: [\n      hljs.COMMENT(\n        '///',\n        '$',\n        {\n          returnBegin: true,\n          contains: [\n            {\n              className: 'doctag',\n              variants: [\n                {\n                  begin: '///', relevance: 0\n                },\n                {\n                  begin: '<!--|-->'\n                },\n                {\n                  begin: '</?', end: '>'\n                }\n              ]\n            }\n          ]\n        }\n      ),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'meta',\n        begin: '#', end: '$',\n        keywords: {\n          'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'\n        }\n      },\n      STRING,\n      NUMBERS,\n      {\n        beginKeywords: 'class interface', end: /[{;=]/,\n        illegal: /[^\\s:,]/,\n        contains: [\n          hljs.TITLE_MODE,\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      {\n        beginKeywords: 'namespace', end: /[{;=]/,\n        illegal: /[^\\s:]/,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: '[a-zA-Z](\\\\.?\\\\w)*'}),\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      {\n        // [Attributes(\"\")]\n        className: 'meta',\n        begin: '^\\\\s*\\\\[', excludeBegin: true, end: '\\\\]', excludeEnd: true,\n        contains: [\n          {className: 'meta-string', begin: /\"/, end: /\"/}\n        ]\n      },\n      {\n        // Expression keywords prevent 'keyword Name(...)' from being\n        // recognized as a function definition\n        beginKeywords: 'new return throw await else',\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + TYPE_IDENT_RE + '\\\\s+)+' + hljs.IDENT_RE + '\\\\s*\\\\(', returnBegin: true,\n        end: /\\s*[{;=]/, excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          {\n            begin: hljs.IDENT_RE + '\\\\s*\\\\(', returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              STRING,\n              NUMBERS,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords:\n      'int float string vector matrix if else switch case default while do for in break ' +\n      'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic ' +\n      'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey ' +\n      'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve ' +\n      'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor ' +\n      'animDisplay animView annotate appendStringArray applicationName applyAttrPreset ' +\n      'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx ' +\n      'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu ' +\n      'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand ' +\n      'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface ' +\n      'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu ' +\n      'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp ' +\n      'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery ' +\n      'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults ' +\n      'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership ' +\n      'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType ' +\n      'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu ' +\n      'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge ' +\n      'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch ' +\n      'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox ' +\n      'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp ' +\n      'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip ' +\n      'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore ' +\n      'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter ' +\n      'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color ' +\n      'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp ' +\n      'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem ' +\n      'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog ' +\n      'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain ' +\n      'constrainValue constructionHistory container containsMultibyte contextInfo control ' +\n      'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation ' +\n      'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache ' +\n      'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel ' +\n      'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver ' +\n      'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor ' +\n      'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer ' +\n      'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse ' +\n      'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx ' +\n      'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface ' +\n      'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox ' +\n      'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete ' +\n      'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes ' +\n      'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo ' +\n      'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable ' +\n      'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected ' +\n      'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor ' +\n      'displaySmoothness displayStats displayString displaySurface distanceDimContext ' +\n      'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct ' +\n      'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator ' +\n      'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression ' +\n      'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor ' +\n      'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers ' +\n      'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor ' +\n      'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env ' +\n      'equivalent equivalentTol erf error eval evalDeferred evalEcho event ' +\n      'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp ' +\n      'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof ' +\n      'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo ' +\n      'filetest filletCurve filter filterCurve filterExpand filterStudioImport ' +\n      'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster ' +\n      'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar ' +\n      'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo ' +\n      'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint ' +\n      'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss ' +\n      'geometryConstraint getApplicationVersionAsFloat getAttr getClassification ' +\n      'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes ' +\n      'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender ' +\n      'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl ' +\n      'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid ' +\n      'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap ' +\n      'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor ' +\n      'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached ' +\n      'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel ' +\n      'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey ' +\n      'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender ' +\n      'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox ' +\n      'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ' +\n      'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ' +\n      'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform ' +\n      'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance ' +\n      'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp ' +\n      'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf ' +\n      'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect ' +\n      'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx ' +\n      'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner ' +\n      'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx ' +\n      'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx ' +\n      'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx ' +\n      'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor ' +\n      'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList ' +\n      'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep ' +\n      'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory ' +\n      'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation ' +\n      'listNodeTypes listPanelCategories listRelatives listSets listTransforms ' +\n      'listUnselected listerEditor loadFluid loadNewShelf loadPlugin ' +\n      'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log ' +\n      'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive ' +\n      'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext ' +\n      'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx ' +\n      'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout ' +\n      'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp ' +\n      'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move ' +\n      'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute ' +\n      'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast ' +\n      'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint ' +\n      'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect ' +\n      'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref ' +\n      'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType ' +\n      'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface ' +\n      'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit ' +\n      'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier ' +\n      'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration ' +\n      'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint ' +\n      'particle particleExists particleInstancer particleRenderInfo partition pasteKey ' +\n      'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture ' +\n      'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo ' +\n      'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult ' +\n      'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend ' +\n      'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal ' +\n      'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge ' +\n      'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge ' +\n      'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet ' +\n      'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet ' +\n      'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection ' +\n      'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge ' +\n      'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet ' +\n      'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix ' +\n      'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut ' +\n      'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet ' +\n      'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge ' +\n      'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex ' +\n      'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection ' +\n      'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection ' +\n      'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint ' +\n      'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate ' +\n      'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge ' +\n      'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing ' +\n      'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet ' +\n      'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace ' +\n      'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer ' +\n      'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx ' +\n      'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd ' +\n      'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection ' +\n      'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl ' +\n      'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference ' +\n      'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE ' +\n      'registerPluginResource rehash reloadImage removeJoint removeMultiInstance ' +\n      'removePanelCategory rename renameAttr renameSelectionList renameUI render ' +\n      'renderGlobalsNode renderInfo renderLayerButton renderLayerParent ' +\n      'renderLayerPostProcess renderLayerUnparent renderManip renderPartition ' +\n      'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor ' +\n      'renderWindowSelectContext renderer reorder reorderDeformers requires reroot ' +\n      'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget ' +\n      'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx ' +\n      'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout ' +\n      'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage ' +\n      'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale ' +\n      'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor ' +\n      'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable ' +\n      'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt ' +\n      'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey ' +\n      'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType ' +\n      'selectedNodes selectionConnection separator setAttr setAttrEnumResource ' +\n      'setAttrMapping setAttrNiceNameResource setConstraintRestPosition ' +\n      'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr ' +\n      'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe ' +\n      'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag ' +\n      'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject ' +\n      'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets ' +\n      'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare ' +\n      'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField ' +\n      'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle ' +\n      'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface ' +\n      'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep ' +\n      'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound ' +\n      'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort ' +\n      'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString ' +\n      'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp ' +\n      'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex ' +\n      'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex ' +\n      'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString ' +\n      'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection ' +\n      'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV ' +\n      'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror ' +\n      'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease ' +\n      'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring ' +\n      'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton ' +\n      'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext ' +\n      'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext ' +\n      'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text ' +\n      'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList ' +\n      'textToShelf textureDisplacePlane textureHairColor texturePlacementContext ' +\n      'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath ' +\n      'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower ' +\n      'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper ' +\n      'trace track trackCtx transferAttributes transformCompare transformLimits translator ' +\n      'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence ' +\n      'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit ' +\n      'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink ' +\n      'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane ' +\n      'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex ' +\n      'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire ' +\n      'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',\n    illegal: '</',\n    contains: [\n      hljs.C_NUMBER_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '`', end: '`',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      { // eats variables\n        begin: '[\\\\$\\\\%\\\\@](\\\\^\\\\w\\\\b|#\\\\w+|[^\\\\s\\\\w{]|{\\\\w+}|\\\\w+)'\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  var VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + hljs.IDENT_RE\n  };\n\n  var HEX_COLOR = {\n    className: 'number',\n    begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'\n  };\n\n  var AT_KEYWORDS = [\n    'charset',\n    'css',\n    'debug',\n    'extend',\n    'font-face',\n    'for',\n    'import',\n    'include',\n    'media',\n    'mixin',\n    'page',\n    'warn',\n    'while'\n  ];\n\n  var PSEUDO_SELECTORS = [\n    'after',\n    'before',\n    'first-letter',\n    'first-line',\n    'active',\n    'first-child',\n    'focus',\n    'hover',\n    'lang',\n    'link',\n    'visited'\n  ];\n\n  var TAGS = [\n    'a',\n    'abbr',\n    'address',\n    'article',\n    'aside',\n    'audio',\n    'b',\n    'blockquote',\n    'body',\n    'button',\n    'canvas',\n    'caption',\n    'cite',\n    'code',\n    'dd',\n    'del',\n    'details',\n    'dfn',\n    'div',\n    'dl',\n    'dt',\n    'em',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'footer',\n    'form',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'header',\n    'hgroup',\n    'html',\n    'i',\n    'iframe',\n    'img',\n    'input',\n    'ins',\n    'kbd',\n    'label',\n    'legend',\n    'li',\n    'mark',\n    'menu',\n    'nav',\n    'object',\n    'ol',\n    'p',\n    'q',\n    'quote',\n    'samp',\n    'section',\n    'span',\n    'strong',\n    'summary',\n    'sup',\n    'table',\n    'tbody',\n    'td',\n    'textarea',\n    'tfoot',\n    'th',\n    'thead',\n    'time',\n    'tr',\n    'ul',\n    'var',\n    'video'\n  ];\n\n  var TAG_END = '[\\\\.\\\\s\\\\n\\\\[\\\\:,]';\n\n  var ATTRIBUTES = [\n    'align-content',\n    'align-items',\n    'align-self',\n    'animation',\n    'animation-delay',\n    'animation-direction',\n    'animation-duration',\n    'animation-fill-mode',\n    'animation-iteration-count',\n    'animation-name',\n    'animation-play-state',\n    'animation-timing-function',\n    'auto',\n    'backface-visibility',\n    'background',\n    'background-attachment',\n    'background-clip',\n    'background-color',\n    'background-image',\n    'background-origin',\n    'background-position',\n    'background-repeat',\n    'background-size',\n    'border',\n    'border-bottom',\n    'border-bottom-color',\n    'border-bottom-left-radius',\n    'border-bottom-right-radius',\n    'border-bottom-style',\n    'border-bottom-width',\n    'border-collapse',\n    'border-color',\n    'border-image',\n    'border-image-outset',\n    'border-image-repeat',\n    'border-image-slice',\n    'border-image-source',\n    'border-image-width',\n    'border-left',\n    'border-left-color',\n    'border-left-style',\n    'border-left-width',\n    'border-radius',\n    'border-right',\n    'border-right-color',\n    'border-right-style',\n    'border-right-width',\n    'border-spacing',\n    'border-style',\n    'border-top',\n    'border-top-color',\n    'border-top-left-radius',\n    'border-top-right-radius',\n    'border-top-style',\n    'border-top-width',\n    'border-width',\n    'bottom',\n    'box-decoration-break',\n    'box-shadow',\n    'box-sizing',\n    'break-after',\n    'break-before',\n    'break-inside',\n    'caption-side',\n    'clear',\n    'clip',\n    'clip-path',\n    'color',\n    'column-count',\n    'column-fill',\n    'column-gap',\n    'column-rule',\n    'column-rule-color',\n    'column-rule-style',\n    'column-rule-width',\n    'column-span',\n    'column-width',\n    'columns',\n    'content',\n    'counter-increment',\n    'counter-reset',\n    'cursor',\n    'direction',\n    'display',\n    'empty-cells',\n    'filter',\n    'flex',\n    'flex-basis',\n    'flex-direction',\n    'flex-flow',\n    'flex-grow',\n    'flex-shrink',\n    'flex-wrap',\n    'float',\n    'font',\n    'font-family',\n    'font-feature-settings',\n    'font-kerning',\n    'font-language-override',\n    'font-size',\n    'font-size-adjust',\n    'font-stretch',\n    'font-style',\n    'font-variant',\n    'font-variant-ligatures',\n    'font-weight',\n    'height',\n    'hyphens',\n    'icon',\n    'image-orientation',\n    'image-rendering',\n    'image-resolution',\n    'ime-mode',\n    'inherit',\n    'initial',\n    'justify-content',\n    'left',\n    'letter-spacing',\n    'line-height',\n    'list-style',\n    'list-style-image',\n    'list-style-position',\n    'list-style-type',\n    'margin',\n    'margin-bottom',\n    'margin-left',\n    'margin-right',\n    'margin-top',\n    'marks',\n    'mask',\n    'max-height',\n    'max-width',\n    'min-height',\n    'min-width',\n    'nav-down',\n    'nav-index',\n    'nav-left',\n    'nav-right',\n    'nav-up',\n    'none',\n    'normal',\n    'object-fit',\n    'object-position',\n    'opacity',\n    'order',\n    'orphans',\n    'outline',\n    'outline-color',\n    'outline-offset',\n    'outline-style',\n    'outline-width',\n    'overflow',\n    'overflow-wrap',\n    'overflow-x',\n    'overflow-y',\n    'padding',\n    'padding-bottom',\n    'padding-left',\n    'padding-right',\n    'padding-top',\n    'page-break-after',\n    'page-break-before',\n    'page-break-inside',\n    'perspective',\n    'perspective-origin',\n    'pointer-events',\n    'position',\n    'quotes',\n    'resize',\n    'right',\n    'tab-size',\n    'table-layout',\n    'text-align',\n    'text-align-last',\n    'text-decoration',\n    'text-decoration-color',\n    'text-decoration-line',\n    'text-decoration-style',\n    'text-indent',\n    'text-overflow',\n    'text-rendering',\n    'text-shadow',\n    'text-transform',\n    'text-underline-position',\n    'top',\n    'transform',\n    'transform-origin',\n    'transform-style',\n    'transition',\n    'transition-delay',\n    'transition-duration',\n    'transition-property',\n    'transition-timing-function',\n    'unicode-bidi',\n    'vertical-align',\n    'visibility',\n    'white-space',\n    'widows',\n    'width',\n    'word-break',\n    'word-spacing',\n    'word-wrap',\n    'z-index'\n  ];\n\n  // illegals\n  var ILLEGAL = [\n    '\\\\?',\n    '(\\\\bReturn\\\\b)', // monkey\n    '(\\\\bEnd\\\\b)', // monkey\n    '(\\\\bend\\\\b)', // vbscript\n    '(\\\\bdef\\\\b)', // gradle\n    ';', // a whole lot of languages\n    '#\\\\s', // markdown\n    '\\\\*\\\\s', // markdown\n    '===\\\\s', // markdown\n    '\\\\|',\n    '%', // prolog\n  ];\n\n  return {\n    aliases: ['styl'],\n    case_insensitive: false,\n    keywords: 'if else for in',\n    illegal: '(' + ILLEGAL.join('|') + ')',\n    contains: [\n\n      // strings\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n\n      // comments\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n\n      // hex colors\n      HEX_COLOR,\n\n      // class tag\n      {\n        begin: '\\\\.[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,\n        returnBegin: true,\n        contains: [\n          {className: 'selector-class', begin: '\\\\.[a-zA-Z][a-zA-Z0-9_-]*'}\n        ]\n      },\n\n      // id tag\n      {\n        begin: '\\\\#[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,\n        returnBegin: true,\n        contains: [\n          {className: 'selector-id', begin: '\\\\#[a-zA-Z][a-zA-Z0-9_-]*'}\n        ]\n      },\n\n      // tags\n      {\n        begin: '\\\\b(' + TAGS.join('|') + ')' + TAG_END,\n        returnBegin: true,\n        contains: [\n          {className: 'selector-tag', begin: '\\\\b[a-zA-Z][a-zA-Z0-9_-]*'}\n        ]\n      },\n\n      // psuedo selectors\n      {\n        begin: '&?:?:\\\\b(' + PSEUDO_SELECTORS.join('|') + ')' + TAG_END\n      },\n\n      // @ keywords\n      {\n        begin: '\\@(' + AT_KEYWORDS.join('|') + ')\\\\b'\n      },\n\n      // variables\n      VARIABLE,\n\n      // dimension\n      hljs.CSS_NUMBER_MODE,\n\n      // number\n      hljs.NUMBER_MODE,\n\n      // functions\n      //  - only from beginning of line + whitespace\n      {\n        className: 'function',\n        begin: '^[a-zA-Z][a-zA-Z0-9_\\-]*\\\\(.*\\\\)',\n        illegal: '[\\\\n]',\n        returnBegin: true,\n        contains: [\n          {className: 'title', begin: '\\\\b[a-zA-Z][a-zA-Z0-9_\\-]*'},\n          {\n            className: 'params',\n            begin: /\\(/,\n            end: /\\)/,\n            contains: [\n              HEX_COLOR,\n              VARIABLE,\n              hljs.APOS_STRING_MODE,\n              hljs.CSS_NUMBER_MODE,\n              hljs.NUMBER_MODE,\n              hljs.QUOTE_STRING_MODE\n            ]\n          }\n        ]\n      },\n\n      // attributes\n      //  - only from beginning of line + whitespace\n      //  - must have whitespace after it\n      {\n        className: 'attribute',\n        begin: '\\\\b(' + ATTRIBUTES.reverse().join('|') + ')\\\\b',\n        starts: {\n          // value container\n          end: /;|$/,\n          contains: [\n            HEX_COLOR,\n            VARIABLE,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            hljs.CSS_NUMBER_MODE,\n            hljs.NUMBER_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n          ],\n          illegal: /\\./,\n          relevance: 0\n        }\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var VERSION = 'HTTP/[0-9\\\\.]+';\n  return {\n    aliases: ['https'],\n    illegal: '\\\\S',\n    contains: [\n      {\n        begin: '^' + VERSION, end: '$',\n        contains: [{className: 'number', begin: '\\\\b\\\\d{3}\\\\b'}]\n      },\n      {\n        begin: '^[A-Z]+ (.*?) ' + VERSION + '$', returnBegin: true, end: '$',\n        contains: [\n          {\n            className: 'string',\n            begin: ' ', end: ' ',\n            excludeBegin: true, excludeEnd: true\n          },\n          {\n            begin: VERSION\n          },\n          {\n            className: 'keyword',\n            begin: '[A-Z]+'\n          }\n        ]\n      },\n      {\n        className: 'attribute',\n        begin: '^\\\\w', end: ': ', excludeEnd: true,\n        illegal: '\\\\n|\\\\s|=',\n        starts: {end: '$', relevance: 0}\n      },\n      {\n        begin: '\\\\n\\\\n',\n        starts: {subLanguage: [], endsWithParent: true}\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    lexemes: /[\\w\\._]+/,\n    keywords: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n\n      {\n        // multi-line string\n        className: 'string',\n        begin: '{\"', end: '\"}',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n\n      hljs.COMMENT(';', '$', {relevance: 0}),\n\n      {\n        // pre-processor\n        className: 'meta',\n        begin: '#', end: '$',\n        keywords: {'meta-keyword': 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib'},\n        contains: [\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'}),\n          hljs.NUMBER_MODE,\n          hljs.C_NUMBER_MODE,\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n\n      {\n        // label\n        className: 'symbol',\n        begin: '^\\\\*(\\\\w+|@)'\n      },\n\n      hljs.NUMBER_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var RESOURCES = 'primitive rsc_template';\n\n  var COMMANDS = 'group clone ms master location colocation order fencing_topology ' +\n      'rsc_ticket acl_target acl_group user role ' +\n      'tag xml';\n\n  var PROPERTY_SETS = 'property rsc_defaults op_defaults';\n\n  var KEYWORDS = 'params meta operations op rule attributes utilization';\n\n  var OPERATORS = 'read write deny defined not_defined in_range date spec in ' +\n      'ref reference attribute type xpath version and or lt gt tag ' +\n      'lte gte eq ne \\\\';\n\n  var TYPES = 'number string';\n\n  var LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';\n\n  return {\n    aliases: ['crm', 'pcmk'],\n    case_insensitive: true,\n    keywords: {\n      keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,\n      literal: LITERALS\n    },\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      {\n        beginKeywords: 'node',\n        starts: {\n          end: '\\\\s*([\\\\w_-]+:)?',\n          starts: {\n            className: 'title',\n            end: '\\\\s*[\\\\$\\\\w_][\\\\w_-]*'\n          }\n        }\n      },\n      {\n        beginKeywords: RESOURCES,\n        starts: {\n          className: 'title',\n          end: '\\\\s*[\\\\$\\\\w_][\\\\w_-]*',\n          starts: {\n            end: '\\\\s*@?[\\\\w_][\\\\w_\\\\.:-]*'\n          }\n        }\n      },\n      {\n        begin: '\\\\b(' + COMMANDS.split(' ').join('|') + ')\\\\s+',\n        keywords: COMMANDS,\n        starts: {\n          className: 'title',\n          end: '[\\\\$\\\\w_][\\\\w_-]*'\n        }\n      },\n      {\n        beginKeywords: PROPERTY_SETS,\n        starts: {\n          className: 'title',\n          end: '\\\\s*([\\\\w_-]+:)?'\n        }\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'meta',\n        begin: '(ocf|systemd|service|lsb):[\\\\w_:-]+',\n        relevance: 0\n      },\n      {\n        className: 'number',\n        begin: '\\\\b\\\\d+(\\\\.\\\\d+)?(ms|s|h|m)?',\n        relevance: 0\n      },\n      {\n        className: 'literal',\n        begin: '[-]?(infinity|inf)',\n        relevance: 0\n      },\n      {\n        className: 'attr',\n        begin: /([A-Za-z\\$_\\#][\\w_-]+)=/,\n        relevance: 0\n      },\n      {\n        className: 'tag',\n        begin: '</?',\n        end: '/?>',\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var FILTER = {\n    begin: /\\|[A-Za-z]+:?/,\n    keywords: {\n      name:\n        'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' +\n        'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' +\n        'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' +\n        'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' +\n        'dictsortreversed default_if_none pluralize lower join center default ' +\n        'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' +\n        'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' +\n        'localtime utc timezone'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE\n    ]\n  };\n\n  return {\n    aliases: ['jinja'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      hljs.COMMENT(/\\{%\\s*comment\\s*%}/, /\\{%\\s*endcomment\\s*%}/),\n      hljs.COMMENT(/\\{#/, /#}/),\n      {\n        className: 'template-tag',\n        begin: /\\{%/, end: /%}/,\n        contains: [\n          {\n            className: 'name',\n            begin: /\\w+/,\n            keywords: {\n              name:\n                'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' +\n                'endfor ifnotequal endifnotequal widthratio extends include spaceless ' +\n                'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' +\n                'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' +\n                'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' +\n                'plural get_current_language language get_available_languages ' +\n                'get_current_language_bidi get_language_info get_language_info_list localize ' +\n                'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' +\n                'verbatim'\n            },\n            starts: {\n              endsWithParent: true,\n              keywords: 'in by as',\n              contains: [FILTER],\n              relevance: 0\n            }\n          }\n        ]\n      },\n      {\n        className: 'template-variable',\n        begin: /\\{\\{/, end: /}}/,\n        contains: [FILTER]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['do', 'ado'],\n    case_insensitive: true,\n    keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',\n        contains: [\n      {\n        className: 'symbol',\n        begin: /`[a-zA-Z0-9_]+'/\n      },\n      {\n        className: 'variable',\n        begin: /\\$\\{?[a-zA-Z0-9_]+\\}?/\n      },\n      {\n        className: 'string',\n        variants: [\n          {begin: '`\"[^\\r\\n]*?\"\\''},\n          {begin: '\"[^\\r\\n\"]*\"'}\n        ]\n      },\n\n      {\n        className: 'built_in',\n        variants: [\n          {\n            begin: '\\\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\\\(|$)'\n          }\n        ]\n      },\n\n      hljs.COMMENT('^[ \\t]*\\\\*.*$', false),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n};","module.exports = // Colors from RouterOS terminal:\n//   green        - #0E9A00\n//   teal         - #0C9A9A\n//   purple       - #99069A\n//   light-brown  - #9A9900\n\nfunction(hljs) {\n\n  var STATEMENTS = 'foreach do while for if from to step else on-error and or not in';\n\n  // Global commands: Every global command should start with \":\" token, otherwise it will be treated as variable.\n  var GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';\n\n  // Common commands: Following commands available from most sub-menus:\n  var COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';\n\n  var LITERALS = 'true false yes no nothing nil null';\n\n  var OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firewall firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';\n\n  // print parameters\n  // Several parameters are available for print command:\n  // ToDo: var PARAMETERS_PRINT = 'append as-value brief detail count-only file follow follow-only from interval terse value-list without-paging where info';\n  // ToDo: var OPERATORS = '&& and ! not || or in ~ ^ & << >> + - * /';\n  // ToDo: var TYPES = 'num number bool boolean str string ip ip6-prefix id time array';\n  // ToDo: The following tokens serve as delimiters in the grammar: ()  []  {}  :   ;   $   / \n\n  var VAR_PREFIX = 'global local set for foreach';\n\n  var VAR = {\n    className: 'variable',\n    variants: [\n      {begin: /\\$[\\w\\d#@][\\w\\d_]*/},\n      {begin: /\\$\\{(.*?)}/}\n    ]\n  };\n  \n  var QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      {\n        className: 'variable',\n        begin: /\\$\\(/, end: /\\)/,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n  \n  var APOS_STRING = {\n    className: 'string',\n    begin: /'/, end: /'/\n  };\n  \n  var IPADDR = '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\b';\n  var IPADDR_wBITMASK =  IPADDR+'/(3[0-2]|[1-2][0-9]|\\\\d)';\n  //////////////////////////////////////////////////////////////////////\n  return {\n    aliases: ['routeros', 'mikrotik'],\n    case_insensitive: true,\n    lexemes: /:?[\\w-]+/,\n    keywords: {\n      literal: LITERALS,\n      keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :'),\n    },\n    contains: [\n      { // недопустимые конструкции\n        variants: [\n          { begin: /^@/, end: /$/, },               // dns\n          { begin: /\\/\\*/, end: /\\*\\//, },          // -- comment\n          { begin: /%%/, end: /$/, },               // -- comment\n          { begin: /^'/, end: /$/, },               // Monkey one line comment\n          { begin: /^\\s*\\/[\\w-]+=/, end: /$/, },    // jboss-cli\n          { begin: /\\/\\//, end: /$/, },             // Stan comment\n          { begin: /^\\[\\</, end: /\\>\\]$/, },        // F# class declaration?\n          { begin: /<\\//, end: />/, },              // HTML tags\n          { begin: /^facet /, end: /\\}/, },         // roboconf - лютый костыль )))\n          { begin: '^1\\\\.\\\\.(\\\\d+)$', end: /$/, },  // tap  \n        ],\n        illegal: /./,\n      },\n      hljs.COMMENT('^#', '$'),\n      QUOTE_STRING,\n      APOS_STRING,\n      VAR,\n      { // attribute=value\n        begin: /[\\w-]+\\=([^\\s\\{\\}\\[\\]\\(\\)]+)/, \n        relevance: 0,\n        returnBegin: true,\n        contains: [\n          {\n            className: 'attribute',\n            begin: /[^=]+/\n          },\n          {\n            begin: /=/, \n            endsWithParent:  true,\n            relevance: 0,\n            contains: [\n              QUOTE_STRING,\n              APOS_STRING,\n              VAR,\n              {\n                className: 'literal',\n                begin: '\\\\b(' + LITERALS.split(' ').join('|') + ')\\\\b',\n              },\n              /*{\n                // IPv4 addresses and subnets\n                className: 'number',\n                variants: [\n                  {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24\n                  {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3\n                  {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1\n                ]\n              }, // */\n              /*{\n                // MAC addresses and DHCP Client IDs\n                className: 'number',\n                begin: /\\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\\b/,\n              }, //*/\n              {\n                // Не форматировать не классифицированные значения. Необходимо для исключения подсветки значений как built_in.\n                // className: 'number',  \n                begin: /(\"[^\"]*\"|[^\\s\\{\\}\\[\\]]+)/,\n              }, //*/\n            ]\n          } //*/\n        ]\n      },//*/\n      {\n        // HEX values\n        className: 'number',\n        begin: /\\*[0-9a-fA-F]+/,\n      }, //*/\n\n      { \n        begin: '\\\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\\\s\\[\\(]|\\])',\n        returnBegin: true,\n        contains: [\n          {\n            className: 'builtin-name', //'function',\n            begin: /\\w+/,\n          },\n        ],  \n      },\n      \n      { \n        className: 'built_in',\n        variants: [\n          {begin: '(\\\\.\\\\./|/|\\\\s)((' + OBJECTS.split(' ').join('|') + ');?\\\\s)+',relevance: 10,},\n          {begin: /\\.\\./,},\n        ],\n      },//*/\n    ]\n  };\n};","module.exports = function(hljs) {\n  var builtInTypeMode = {\n    className: 'built_in',\n    begin: '\\\\b(void|bool|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|string|ref|array|double|float|auto|dictionary)'\n  };\n\n  var objectHandleMode = {\n    className: 'symbol',\n    begin: '[a-zA-Z0-9_]+@'\n  };\n\n  var genericMode = {\n    className: 'keyword',\n    begin: '<', end: '>',\n    contains: [ builtInTypeMode, objectHandleMode ]\n  };\n\n  builtInTypeMode.contains = [ genericMode ];\n  objectHandleMode.contains = [ genericMode ];\n\n  return {\n    aliases: [ 'asc' ],\n\n    keywords:\n      'for in|0 break continue while do|0 return if else case switch namespace is cast ' +\n      'or and xor not get|0 in inout|10 out override set|0 private public const default|0 ' +\n      'final shared external mixin|10 enum typedef funcdef this super import from interface ' +\n      'abstract|0 try catch protected explicit',\n\n    // avoid close detection with C# and JS\n    illegal: '(^using\\\\s+[A-Za-z0-9_\\\\.]+;$|\\\\bfunction\\s*[^\\\\(])',\n\n    contains: [\n      { // 'strings'\n        className: 'string',\n        begin: '\\'', end: '\\'',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ],\n        relevance: 0\n      },\n\n      { // \"strings\"\n        className: 'string',\n        begin: '\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ],\n        relevance: 0\n      },\n\n      // \"\"\"heredoc strings\"\"\"\n      {\n        className: 'string',\n        begin: '\"\"\"', end: '\"\"\"'\n      },\n\n      hljs.C_LINE_COMMENT_MODE, // single-line comments\n      hljs.C_BLOCK_COMMENT_MODE, // comment blocks\n\n      { // interface or namespace declaration\n        beginKeywords: 'interface namespace', end: '{',\n        illegal: '[;.\\\\-]',\n        contains: [\n          { // interface or namespace name\n            className: 'symbol',\n            begin: '[a-zA-Z0-9_]+'\n          }\n        ]\n      },\n\n      { // class declaration\n        beginKeywords: 'class', end: '{',\n        illegal: '[;.\\\\-]',\n        contains: [\n          { // class name\n            className: 'symbol',\n            begin: '[a-zA-Z0-9_]+',\n            contains: [\n              {\n                begin: '[:,]\\\\s*',\n                contains: [\n                  {\n                    className: 'symbol',\n                    begin: '[a-zA-Z0-9_]+'\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n\n      builtInTypeMode, // built-in types\n      objectHandleMode, // object handles\n\n      { // literals\n        className: 'literal',\n        begin: '\\\\b(null|true|false)'\n      },\n\n      { // numbers\n        className: 'number',\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?f?|\\\\.\\\\d+f?)([eE][-+]?\\\\d+f?)?)'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['ml'],\n    keywords: {\n      keyword:\n        /* according to Definition of Standard ML 97  */\n        'abstype and andalso as case datatype do else end eqtype ' +\n        'exception fn fun functor handle if in include infix infixr ' +\n        'let local nonfix of op open orelse raise rec sharing sig ' +\n        'signature struct structure then type val with withtype where while',\n      built_in:\n        /* built-in types according to basis library */\n        'array bool char exn int list option order real ref string substring vector unit word',\n      literal:\n        'true false NONE SOME LESS EQUAL GREATER nil'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [\n      {\n        className: 'literal',\n        begin: /\\[(\\|\\|)?\\]|\\(\\)/,\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*'\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /[-=]>/ // relevance booster\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var COMMENT_MODE = hljs.COMMENT('--', '$');\n  return {\n    case_insensitive: true,\n    illegal: /[<>{}*]/,\n    contains: [\n      {\n        beginKeywords:\n          'begin end start commit rollback savepoint lock alter create drop rename call ' +\n          'delete do handler insert load replace select truncate update set show pragma grant ' +\n          'merge describe use explain help declare prepare execute deallocate release ' +\n          'unlock purge reset change stop analyze cache flush optimize repair kill ' +\n          'install uninstall checksum restore check backup revoke comment values with',\n        end: /;/, endsWithParent: true,\n        lexemes: /[\\w\\.]+/,\n        keywords: {\n          keyword:\n            'as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +\n            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +\n            'all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply ' +\n            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +\n            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +\n            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +\n            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +\n            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +\n            'bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +\n            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +\n            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +\n            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +\n            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +\n            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +\n            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +\n            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +\n            'consider consistent constant constraint constraints constructor container content contents context ' +\n            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +\n            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +\n            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +\n            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +\n            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +\n            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +\n            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +\n            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +\n            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +\n            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +\n            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +\n            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +\n            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +\n            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +\n            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +\n            'execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external ' +\n            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +\n            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +\n            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign ' +\n            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +\n            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +\n            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +\n            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +\n            'hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified ' +\n            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +\n            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +\n            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +\n            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +\n            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +\n            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase ' +\n            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +\n            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +\n            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +\n            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +\n            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +\n            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +\n            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +\n            'minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month ' +\n            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +\n            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +\n            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +\n            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +\n            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +\n            'noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +\n            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +\n            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +\n            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +\n            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +\n            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +\n            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +\n            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +\n            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +\n            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +\n            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +\n            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +\n            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +\n            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +\n            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +\n            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +\n            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +\n            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +\n            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +\n            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +\n            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +\n            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +\n            'sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select ' +\n            'self semi sequence sequential serializable server servererror session session_user sessions_per_user set ' +\n            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +\n            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +\n            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +\n            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +\n            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +\n            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +\n            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +\n            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +\n            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +\n            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +\n            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +\n            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo ' +\n            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +\n            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +\n            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +\n            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +\n            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +\n            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot ' +\n            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +\n            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +\n            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +\n            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +\n            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +\n            'wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped ' +\n            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +\n            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',\n          literal:\n            'true false null unknown',\n          built_in:\n            'array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number ' +\n            'numeric real record serial serial8 smallint text time timestamp tinyint varchar varying void'\n        },\n        contains: [\n          {\n            className: 'string',\n            begin: '\\'', end: '\\'',\n            contains: [hljs.BACKSLASH_ESCAPE, {begin: '\\'\\''}]\n          },\n          {\n            className: 'string',\n            begin: '\"', end: '\"',\n            contains: [hljs.BACKSLASH_ESCAPE, {begin: '\"\"'}]\n          },\n          {\n            className: 'string',\n            begin: '`', end: '`',\n            contains: [hljs.BACKSLASH_ESCAPE]\n          },\n          hljs.C_NUMBER_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          COMMENT_MODE,\n          hljs.HASH_COMMENT_MODE\n        ]\n      },\n      hljs.C_BLOCK_COMMENT_MODE,\n      COMMENT_MODE,\n      hljs.HASH_COMMENT_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        // Statements\n        'break continue discard do else for if return while switch case default ' +\n        // Qualifiers\n        'attribute binding buffer ccw centroid centroid varying coherent column_major const cw ' +\n        'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing ' +\n        'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant ' +\n        'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y ' +\n        'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left ' +\n        'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '+\n        'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict ' +\n        'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 ' +\n        'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 ' +\n        'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip ' +\n        'triangles triangles_adjacency uniform varying vertices volatile writeonly',\n      type:\n        'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 ' +\n        'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray ' +\n        'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer' +\n        'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray ' +\n        'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray ' +\n        'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D ' +\n        'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 ' +\n        'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray ' +\n        'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow ' +\n        'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D ' +\n        'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow ' +\n        'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect ' +\n        'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray ' +\n        'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D ' +\n        'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',\n      built_in:\n        // Constants\n        'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes ' +\n        'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms ' +\n        'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers ' +\n        'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits ' +\n        'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize ' +\n        'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters ' +\n        'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors ' +\n        'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers ' +\n        'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents ' +\n        'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits ' +\n        'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents ' +\n        'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset ' +\n        'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms ' +\n        'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits ' +\n        'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents ' +\n        'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters ' +\n        'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents ' +\n        'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents ' +\n        'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits ' +\n        'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors ' +\n        'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms ' +\n        'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits ' +\n        'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset ' +\n        // Variables\n        'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial ' +\n        'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color ' +\n        'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord ' +\n        'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor ' +\n        'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial ' +\n        'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel ' +\n        'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix ' +\n        'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose ' +\n        'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose ' +\n        'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 ' +\n        'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 ' +\n        'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ ' +\n        'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord ' +\n        'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse ' +\n        'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask ' +\n        'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter ' +\n        'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose ' +\n        'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out ' +\n        // Functions\n        'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin ' +\n        'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement ' +\n        'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier ' +\n        'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross ' +\n        'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB ' +\n        'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan ' +\n        'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap ' +\n        'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad ' +\n        'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset ' +\n        'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log ' +\n        'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer ' +\n        'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 ' +\n        'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 ' +\n        'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod ' +\n        'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh ' +\n        'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod ' +\n        'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod ' +\n        'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod ' +\n        'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset ' +\n        'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset ' +\n        'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod ' +\n        'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 ' +\n        'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',\n      literal: 'true false'\n    },\n    illegal: '\"',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta',\n        begin: '#', end: '$'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var SV_KEYWORDS = {\n    keyword:\n      'accept_on alias always always_comb always_ff always_latch and assert assign ' +\n      'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' +\n      'byte case casex casez cell chandle checker class clocking cmos config const ' +\n      'constraint context continue cover covergroup coverpoint cross deassign default ' +\n      'defparam design disable dist do edge else end endcase endchecker endclass ' +\n      'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' +\n      'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' +\n      'endtask enum event eventually expect export extends extern final first_match for ' +\n      'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' +\n      'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' +\n      'initial inout input inside instance int integer interconnect interface intersect ' +\n      'join join_any join_none large let liblist library local localparam logic longint ' +\n      'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' +\n      'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' +\n      'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' +\n      'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' +\n      'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' +\n      'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' +\n      'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' +\n      'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' +\n      'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' +\n      'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' +\n      'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' +\n      'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',\n    literal:\n      'null',\n    built_in:\n      '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' +\n      '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' +\n      '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' +\n      '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' +\n      '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' +\n      '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' +\n      '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' +\n      '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' +\n      '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' +\n      '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' +\n      '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' +\n      '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' +\n      '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' +\n      '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' +\n      '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' +\n      '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' +\n      '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' +\n      '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' +\n      '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' +\n      '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' +\n      '$write $readmemb $readmemh $writememh $value$plusargs ' +\n      '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' +\n      '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' +\n      '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' +\n      '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' +\n      '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' +\n      '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' +\n      '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' +\n      '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'\n    };\n  return {\n    aliases: ['v', 'sv', 'svh'],\n    case_insensitive: false,\n    keywords: SV_KEYWORDS, lexemes: /[\\w\\$]+/,\n    contains: [\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'number',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          {begin: '\\\\b((\\\\d+\\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},\n          {begin: '\\\\B((\\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},\n          {begin: '\\\\b([0-9_])+', relevance: 0}\n        ]\n      },\n      /* parameters to instances */\n      {\n        className: 'variable',\n        variants: [\n          {begin: '#\\\\((?!parameter).+\\\\)'},\n          {begin: '\\\\.\\\\w+', relevance: 0},\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '`', end: '$',\n        keywords: {'meta-keyword': 'define __FILE__ ' +\n          '__LINE__ begin_keywords celldefine default_nettype define ' +\n          'else elsif end_keywords endcelldefine endif ifdef ifndef ' +\n          'include line nounconnected_drive pragma resetall timescale ' +\n          'unconnected_drive undef undefineall'},\n        relevance: 0\n      }\n    ]\n  }; // return\n};","module.exports = function(hljs) {\n  var CPP = hljs.getLanguage('cpp').exports;\n\n  // In SQF, a variable start with _\n  var VARIABLE = {\n    className: 'variable',\n    begin: /\\b_+[a-zA-Z_]\\w*/\n  };\n\n  // In SQF, a function should fit myTag_fnc_myFunction pattern\n  // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function\n  var FUNCTION = {\n    className: 'title',\n    begin: /[a-zA-Z][a-zA-Z0-9]+_fnc_\\w*/\n  };\n\n  // In SQF strings, quotes matching the start are escaped by adding a consecutive.\n  // Example of single escaped quotes: \" \"\" \" and  ' '' '.\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '\"',\n        end: '\"',\n        contains: [{begin: '\"\"', relevance: 0}]\n      },\n      {\n        begin: '\\'',\n        end: '\\'',\n        contains: [{begin: '\\'\\'', relevance: 0}]\n      }\n    ]\n  };\n\n  return {\n    aliases: ['sqf'],\n    case_insensitive: true,\n    keywords: {\n      keyword:\n        'case catch default do else exit exitWith for forEach from if ' +\n        'private switch then throw to try waitUntil while with',\n      built_in:\n        'abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames ' +\n        'actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey ' +\n        'add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo ' +\n        'addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea ' +\n        'addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler ' +\n        'addForce addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo ' +\n        'addItemCargoGlobal addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats ' +\n        'addMagazine addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal ' +\n        'addMagazinePool addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler ' +\n        'addMPEventHandler addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem ' +\n        'addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem ' +\n        'addSwitchableUnit addTeamMember addToRemainsCollector addTorque addUniform addVehicle addVest ' +\n        'addWaypoint addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem ' +\n        'addWeaponPool addWeaponTurret admin agent agents AGLToASL aimedAtTarget aimPos airDensityRTD ' +\n        'airplaneThrottle airportSide AISFinishHeal alive all3DENEntities allAirports allControls ' +\n        'allCurators allCutLayers allDead allDeadMen allDisplays allGroups allMapMarkers allMines ' +\n        'allMissionObjects allow3DMode allowCrewInImmobile allowCuratorLogicIgnoreAreas allowDamage ' +\n        'allowDammage allowFileOperations allowFleeing allowGetIn allowSprint allPlayers allSimpleObjects ' +\n        'allSites allTurrets allUnits allUnitsUAV allVariables ammo ammoOnPylon and animate animateBay ' +\n        'animateDoor animatePylon animateSource animationNames animationPhase animationSourcePhase ' +\n        'animationState append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert ' +\n        'assignAsCargo assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret ' +\n        'assignCurator assignedCargo assignedCommander assignedDriver assignedGunner assignedItems ' +\n        'assignedTarget assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam ' +\n        'assignToAirport atan atan2 atg ATLToASL attachedObject attachedObjects attachedTo attachObject ' +\n        'attachTo attackEnabled backpack backpackCargo backpackContainer backpackItems backpackMagazines ' +\n        'backpackSpaceFor behaviour benchmark binocular boundingBox boundingBoxReal boundingCenter ' +\n        'breakOut breakTo briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode ' +\n        'call callExtension camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams ' +\n        'camCreate camDestroy cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView ' +\n        'campaignConfigFile camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive ' +\n        'camPrepareFocus camPrepareFov camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget ' +\n        'camSetBank camSetDir camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos ' +\n        'camSetTarget camTarget camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest ' +\n        'cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend ' +\n        'canTriggerDynamicSimulation canUnloadInCombat canVehicleCargo captive captiveNum cbChecked ' +\n        'cbSetChecked ceil channelEnabled cheatsEnabled checkAIFeature checkVisibility className ' +\n        'clearAllItemsFromBackpack clearBackpackCargo clearBackpackCargoGlobal clearGroupIcons ' +\n        'clearItemCargo clearItemCargoGlobal clearItemPool clearMagazineCargo clearMagazineCargoGlobal ' +\n        'clearMagazinePool clearOverlay clearRadio clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool ' +\n        'clientOwner closeDialog closeDisplay closeOverlay collapseObjectTree collect3DENHistory ' +\n        'collectiveRTD combatMode commandArtilleryFire commandChat commander commandFire commandFollow ' +\n        'commandFSM commandGetOut commandingMenu commandMove commandRadio commandStop ' +\n        'commandSuppressiveFire commandTarget commandWatch comment commitOverlay compile compileFinal ' +\n        'completedFSM composeText configClasses configFile configHierarchy configName configProperties ' +\n        'configSourceAddonList configSourceMod configSourceModList confirmSensorTarget ' +\n        'connectTerminalToUAV controlsGroupCtrl copyFromClipboard copyToClipboard copyWaypoints cos count ' +\n        'countEnemy countFriendly countSide countType countUnknown create3DENComposition create3DENEntity ' +\n        'createAgent createCenter createDialog createDiaryLink createDiaryRecord createDiarySubject ' +\n        'createDisplay createGearDialog createGroup createGuardedPoint createLocation createMarker ' +\n        'createMarkerLocal createMenu createMine createMissionDisplay createMPCampaignDisplay ' +\n        'createSimpleObject createSimpleTask createSite createSoundSource createTask createTeam ' +\n        'createTrigger createUnit createVehicle createVehicleCrew createVehicleLocal crew ctAddHeader ' +\n        'ctAddRow ctClear ctCurSel ctData ctFindHeaderRows ctFindRowHeader ctHeaderControls ctHeaderCount ' +\n        'ctRemoveHeaders ctRemoveRows ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ' +\n        'ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ' +\n        'ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ' +\n        'ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ' +\n        'ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ' +\n        'ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ' +\n        'ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ' +\n        'ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ' +\n        'ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ' +\n        'ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ' +\n        'ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ' +\n        'ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ' +\n        'ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ' +\n        'ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPixelPrecision ctrlSetPosition ctrlSetScale ' +\n        'ctrlSetStructuredText ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ' +\n        'ctrlSetTooltipColorShade ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ' +\n        'ctrlTextWidth ctrlType ctrlVisible ctRowControls ctRowCount ctSetCurSel ctSetData ' +\n        'ctSetHeaderTemplate ctSetRowTemplate ctSetValue ctValue curatorAddons curatorCamera ' +\n        'curatorCameraArea curatorCameraAreaCeiling curatorCoef curatorEditableObjects curatorEditingArea ' +\n        'curatorEditingAreaType curatorMouseOver curatorPoints curatorRegisteredObjects curatorSelected ' +\n        'curatorWaypointCost current3DENOperation currentChannel currentCommand currentMagazine ' +\n        'currentMagazineDetail currentMagazineDetailTurret currentMagazineTurret currentMuzzle ' +\n        'currentNamespace currentTask currentTasks currentThrowable currentVisionMode currentWaypoint ' +\n        'currentWeapon currentWeaponMode currentWeaponTurret currentZeroing cursorObject cursorTarget ' +\n        'customChat customRadio cutFadeOut cutObj cutRsc cutText damage date dateToNumber daytime ' +\n        'deActivateKey debriefingText debugFSM debugLog deg delete3DENEntities deleteAt deleteCenter ' +\n        'deleteCollection deleteEditorObject deleteGroup deleteGroupWhenEmpty deleteIdentity ' +\n        'deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources deleteSite deleteStatus ' +\n        'deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach detectedMines ' +\n        'diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts diag_activeSQSScripts ' +\n        'diag_captureFrame diag_captureFrameToFile diag_captureSlowFrame diag_codePerformance ' +\n        'diag_drawMode diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_lightNewLoad ' +\n        'diag_list diag_log diag_logSlowFrame diag_mergeConfigFile diag_recordTurretLimits ' +\n        'diag_setLightNew diag_tickTime diag_toggle dialog diarySubjectExists didJIP didJIPOwner ' +\n        'difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction directSay disableAI ' +\n        'disableCollisionWith disableConversation disableDebriefingStats disableMapIndicators ' +\n        'disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment ' +\n        'disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayParent ' +\n        'displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler dissolveTeam ' +\n        'distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire doFire doFollow ' +\n        'doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch drawArrow drawEllipse ' +\n        'drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon drawRectangle ' +\n        'drawTriangle driver drop dynamicSimulationDistance dynamicSimulationDistanceCoef ' +\n        'dynamicSimulationEnabled dynamicSimulationSystemEnabled echo edit3DENMissionAttributes editObject ' +\n        'editorSetEventHandler effectiveCommander emptyPositions enableAI enableAIFeature ' +\n        'enableAimPrecision enableAttack enableAudioFeature enableAutoStartUpRTD enableAutoTrimRTD ' +\n        'enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot ' +\n        'enableDebriefingStats enableDiagLegend enableDynamicSimulation enableDynamicSimulationSystem ' +\n        'enableEndDialog enableEngineArtillery enableEnvironment enableFatigue enableGunLights ' +\n        'enableInfoPanelComponent enableIRLasers enableMimics enablePersonTurret enableRadio enableReload ' +\n        'enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences enableSimulation ' +\n        'enableSimulationGlobal enableStamina enableTeamSwitch enableTraffic enableUAVConnectability ' +\n        'enableUAVWaypoints enableVehicleCargo enableVehicleSensor enableWeaponDisassembly ' +\n        'endLoadingScreen endMission engineOn enginesIsOnRTD enginesRpmRTD enginesTorqueRTD entities ' +\n        'environmentEnabled estimatedEndServerTime estimatedTimeLeft evalObjectArgument everyBackpack ' +\n        'everyContainer exec execEditorScript execFSM execVM exp expectedDestination exportJIPMessages ' +\n        'eyeDirection eyePos face faction fadeMusic fadeRadio fadeSound fadeSpeech failMission ' +\n        'fillWeaponsFromPool find findCover findDisplay findEditorObject findEmptyPosition ' +\n        'findEmptyPositionReady findIf findNearestEnemy finishMissionInit finite fire fireAtTarget ' +\n        'firstBackpack flag flagAnimationPhase flagOwner flagSide flagTexture fleeing floor flyInHeight ' +\n        'flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceFlagTexture ' +\n        'forceFollowRoad forceMap forceRespawn forceSpeed forceWalk forceWeaponFire forceWeatherChange ' +\n        'forEachMember forEachMemberAgent forEachMemberTeam forgetTarget format formation ' +\n        'formationDirection formationLeader formationMembers formationPosition formationTask formatText ' +\n        'formLeader freeLook fromEditor fuel fullCrew gearIDCAmmoCount gearSlotAmmoCount gearSlotData ' +\n        'get3DENActionState get3DENAttribute get3DENCamera get3DENConnections get3DENEntity ' +\n        'get3DENEntityID get3DENGrid get3DENIconsVisible get3DENLayerEntities get3DENLinesVisible ' +\n        'get3DENMissionAttribute get3DENMouseOver get3DENSelected getAimingCoef getAllEnvSoundControllers ' +\n        'getAllHitPointsDamage getAllOwnedMines getAllSoundControllers getAmmoCargo getAnimAimPrecision ' +\n        'getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA ' +\n        'getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining ' +\n        'getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState ' +\n        'getClientStateNumber getCompatiblePylonMagazines getConnectedUAV getContainerMaxLoad ' +\n        'getCursorObjectParams getCustomAimCoef getDammage getDescription getDir getDirVisual ' +\n        'getDLCAssetsUsage getDLCAssetsUsageByName getDLCs getEditorCamera getEditorMode ' +\n        'getEditorObjectScope getElevationOffset getEnvSoundController getFatigue getForcedFlagTexture ' +\n        'getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons getHideFrom ' +\n        'getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor getMarkerPos ' +\n        'getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue getMissionDLCs ' +\n        'getMissionLayerEntities getModelInfo getMousePosition getMusicPlayedTime getNumber ' +\n        'getObjectArgument getObjectChildren getObjectDLC getObjectMaterials getObjectProxy ' +\n        'getObjectTextures getObjectType getObjectViewDistance getOxygenRemaining getPersonUsedDLCs ' +\n        'getPilotCameraDirection getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget ' +\n        'getPlateNumber getPlayerChannel getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual ' +\n        'getPosASLW getPosATL getPosATLVisual getPosVisual getPosWorld getPylonMagazines getRelDir ' +\n        'getRelPos getRemoteSensorsDisabled getRepairCargo getResolution getShadowDistance getShotParents ' +\n        'getSlingLoad getSoundController getSoundControllerResult getSpeed getStamina getStatValue ' +\n        'getSuppression getTerrainGrid getTerrainHeightASL getText getTotalDLCUsageTime getUnitLoadout ' +\n        'getUnitTrait getUserMFDText getUserMFDvalue getVariable getVehicleCargo getWeaponCargo ' +\n        'getWeaponSway getWingsOrientationRTD getWingsPositionRTD getWPPos glanceAt globalChat globalRadio ' +\n        'goggles goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId ' +\n        'groupOwner groupRadio groupSelectedUnits groupSelectUnit gunner gusts halt handgunItems ' +\n        'handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups ' +\n        'hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup ' +\n        'hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC ' +\n        'hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups ' +\n        'importance in inArea inAreaArray incapacitatedState inflame inflamed infoPanel ' +\n        'infoPanelComponentEnabled infoPanelComponents infoPanels inGameUISetEventHandler inheritsFrom ' +\n        'initAmbientLife inPolygon inputAction inRangeOfArtillery insertEditorObject intersect is3DEN ' +\n        'is3DENMultiplayer isAbleToBreathe isAgent isArray isAutoHoverOn isAutonomous isAutotest ' +\n        'isBleeding isBurning isClass isCollisionLightOn isCopilotEnabled isDamageAllowed isDedicated ' +\n        'isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll isEqualTypeAny isEqualTypeArray ' +\n        'isEqualTypeParams isFilePatchingEnabled isFlashlightOn isFlatEmpty isForcedWalk isFormationLeader ' +\n        'isGroupDeletedWhenEmpty isHidden isInRemainsCollector isInstructorFigureEnabled isIRLaserOn ' +\n        'isKeyActive isKindOf isLaserOn isLightOn isLocalized isManualFire isMarkedForCollection ' +\n        'isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden isObjectRTD isOnRoad ' +\n        'isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP isServer isShowing3DIcons ' +\n        'isSimpleObject isSprintAllowed isStaminaEnabled isSteamMission isStreamFriendlyUIEnabled isText ' +\n        'isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable isUAVConnected isUIContext ' +\n        'isUniformAllowed isVehicleCargo isVehicleRadarOn isVehicleSensorEnabled isWalking ' +\n        'isWeaponDeployed isWeaponRested itemCargo items itemsWithMagazines join joinAs joinAsSilent ' +\n        'joinSilent joinString kbAddDatabase kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact ' +\n        'kbRemoveTopic kbTell kbWasSaid keyImage keyName knowsAbout land landAt landResult language ' +\n        'laserTarget lbAdd lbClear lbColor lbColorRight lbCurSel lbData lbDelete lbIsSelected lbPicture ' +\n        'lbPictureRight lbSelection lbSetColor lbSetColorRight lbSetCurSel lbSetData lbSetPicture ' +\n        'lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetPictureRight ' +\n        'lbSetPictureRightColor lbSetPictureRightColorDisabled lbSetPictureRightColorSelected ' +\n        'lbSetSelectColor lbSetSelectColorRight lbSetSelected lbSetText lbSetTextRight lbSetTooltip ' +\n        'lbSetValue lbSize lbSort lbSortByValue lbText lbTextRight lbValue leader leaderboardDeInit ' +\n        'leaderboardGetRows leaderboardInit leaderboardRequestRowsFriends leaderboardsRequestUploadScore ' +\n        'leaderboardsRequestUploadScoreKeepBest leaderboardState leaveVehicle libraryCredits ' +\n        'libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed ' +\n        'linearConversion lineIntersects lineIntersectsObjs lineIntersectsSurfaces lineIntersectsWith ' +\n        'linkItem list listObjects listRemoteTargets listVehicleSensors ln lnbAddArray lnbAddColumn ' +\n        'lnbAddRow lnbClear lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow ' +\n        'lnbGetColumnsPosition lnbPicture lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData ' +\n        'lnbSetPicture lnbSetText lnbSetValue lnbSize lnbSort lnbSortByValue lnbText lnbValue load loadAbs ' +\n        'loadBackpack loadFile loadGame loadIdentity loadMagazine loadOverlay loadStatus loadUniform ' +\n        'loadVest local localize locationPosition lock lockCameraTo lockCargo lockDriver locked ' +\n        'lockedCargo lockedDriver lockedTurret lockIdentity lockTurret lockWP log logEntities logNetwork ' +\n        'logNetworkTerminate lookAt lookAtPos magazineCargo magazines magazinesAllTurrets magazinesAmmo ' +\n        'magazinesAmmoCargo magazinesAmmoFull magazinesDetail magazinesDetailBackpack ' +\n        'magazinesDetailUniform magazinesDetailVest magazinesTurret magazineTurretAmmo mapAnimAdd ' +\n        'mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera mapGridPosition markAsFinishedOnSteam ' +\n        'markerAlpha markerBrush markerColor markerDir markerPos markerShape markerSize markerText ' +\n        'markerType max members menuAction menuAdd menuChecked menuClear menuCollapse menuData menuDelete ' +\n        'menuEnable menuEnabled menuExpand menuHover menuPicture menuSetAction menuSetCheck menuSetData ' +\n        'menuSetPicture menuSetValue menuShortcut menuShortcutText menuSize menuSort menuText menuURL ' +\n        'menuValue min mineActive mineDetectedBy missionConfigFile missionDifficulty missionName ' +\n        'missionNamespace missionStart missionVersion mod modelToWorld modelToWorldVisual ' +\n        'modelToWorldVisualWorld modelToWorldWorld modParams moonIntensity moonPhase morale move ' +\n        'move3DENCamera moveInAny moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret ' +\n        'moveObjectToEnd moveOut moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound ' +\n        'nearEntities nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing ' +\n        'nearestObject nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads ' +\n        'nearSupplies nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex ' +\n        'nextWeatherChange nMenuItems not numberOfEnginesRTD numberToDate objectCurators objectFromNetId ' +\n        'objectParent objStatus onBriefingGroup onBriefingNotes onBriefingPlan onBriefingTeamSwitch ' +\n        'onCommandModeChanged onDoubleClick onEachFrame onGroupIconClick onGroupIconOverEnter ' +\n        'onGroupIconOverLeave onHCGroupSelectionChanged onMapSingleClick onPlayerConnected ' +\n        'onPlayerDisconnected onPreloadFinished onPreloadStarted onShowNewObject onTeamSwitch ' +\n        'openCuratorInterface openDLCPage openMap openSteamApp openYoutubeVideo or orderGetIn overcast ' +\n        'overcastForecast owner param params parseNumber parseSimpleArray parseText parsingNamespace ' +\n        'particlesQuality pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW ' +\n        'playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide ' +\n        'playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission ' +\n        'playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ' +\n        'ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ' +\n        'ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound ' +\n        'preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon ' +\n        'primaryWeaponItems primaryWeaponMagazine priority processDiaryLink productVersion profileName ' +\n        'profileNamespace profileNameSteam progressLoadingScreen progressPosition progressSetPosition ' +\n        'publicVariable publicVariableClient publicVariableServer pushBack pushBackUnique putWeaponPool ' +\n        'queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd radioChannelCreate ' +\n        'radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume rain rainbow random ' +\n        'rank rankId rating rectangular registeredTasks registerTask reload reloadEnabled remoteControl ' +\n        'remoteExec remoteExecCall remoteExecutedOwner remove3DENConnection remove3DENEventHandler ' +\n        'remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems ' +\n        'removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas ' +\n        'removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems ' +\n        'removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers ' +\n        'removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons ' +\n        'removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea ' +\n        'removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks ' +\n        'removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem ' +\n        'removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest ' +\n        'removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret ' +\n        'removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler ' +\n        'removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem ' +\n        'removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon ' +\n        'removeWeaponAttachmentCargo removeWeaponCargo removeWeaponGlobal removeWeaponTurret ' +\n        'reportRemoteTarget requiredVersion resetCamShake resetSubgroupDirection resize resources ' +\n        'respawnVehicle restartEditorCamera reveal revealMine reverse reversedMouseY roadAt ' +\n        'roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ropeAttachEnabled ' +\n        'ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ropeLength ropes ' +\n        'ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript safeZoneH safeZoneW ' +\n        'safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame saveIdentity ' +\n        'saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say say2D say3D ' +\n        'scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scudState ' +\n        'secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces ' +\n        'selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition ' +\n        'selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectRandomWeighted ' +\n        'selectWeapon selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult ' +\n        'sendUDPMessage serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime ' +\n        'set set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer ' +\n        'set3DENLinesVisible set3DENLogicType set3DENMissionAttribute set3DENMissionAttributes ' +\n        'set3DENModelsVisible set3DENObjectType set3DENSelected setAccTime setActualCollectiveRTD ' +\n        'setAirplaneThrottle setAirportSide setAmmo setAmmoCargo setAmmoOnPylon setAnimSpeedCoef ' +\n        'setAperture setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour ' +\n        'setBleedingRemaining setBrakesRTD setCameraInterest setCamShakeDefParams setCamShakeParams ' +\n        'setCamUseTI setCaptive setCenterOfMass setCollisionLight setCombatMode setCompassOscillation ' +\n        'setConvoySeparation setCuratorCameraAreaCeiling setCuratorCoef setCuratorEditingAreaType ' +\n        'setCuratorWaypointCost setCurrentChannel setCurrentTask setCurrentWaypoint setCustomAimCoef ' +\n        'setCustomWeightRTD setDamage setDammage setDate setDebriefingText setDefaultCamera setDestination ' +\n        'setDetailMapBlendPars setDir setDirection setDrawIcon setDriveOnPath setDropInterval ' +\n        'setDynamicSimulationDistance setDynamicSimulationDistanceCoef setEditorMode setEditorObjectScope ' +\n        'setEffectCondition setEngineRPMRTD setFace setFaceAnimation setFatigue setFeatureType ' +\n        'setFlagAnimationPhase setFlagOwner setFlagSide setFlagTexture setFog setFormation ' +\n        'setFormationTask setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo ' +\n        'setGroupIcon setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId ' +\n        'setGroupIdGlobal setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage ' +\n        'setHorizonParallaxCoef setHUDMovementLevels setIdentity setImportance setInfoPanel setLeader ' +\n        'setLightAmbient setLightAttenuation setLightBrightness setLightColor setLightDayLight ' +\n        'setLightFlareMaxDistance setLightFlareSize setLightIntensity setLightnings setLightUseFlare ' +\n        'setLocalWindParams setMagazineTurretAmmo setMarkerAlpha setMarkerAlphaLocal setMarkerBrush ' +\n        'setMarkerBrushLocal setMarkerColor setMarkerColorLocal setMarkerDir setMarkerDirLocal ' +\n        'setMarkerPos setMarkerPosLocal setMarkerShape setMarkerShapeLocal setMarkerSize ' +\n        'setMarkerSizeLocal setMarkerText setMarkerTextLocal setMarkerType setMarkerTypeLocal setMass ' +\n        'setMimic setMousePosition setMusicEffect setMusicEventHandler setName setNameSound ' +\n        'setObjectArguments setObjectMaterial setObjectMaterialGlobal setObjectProxy setObjectTexture ' +\n        'setObjectTextureGlobal setObjectViewDistance setOvercast setOwner setOxygenRemaining ' +\n        'setParticleCircle setParticleClass setParticleFire setParticleParams setParticleRandom ' +\n        'setPilotCameraDirection setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect ' +\n        'setPitch setPlateNumber setPlayable setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW ' +\n        'setPosATL setPosition setPosWorld setPylonLoadOut setPylonsPriority setRadioMsg setRain ' +\n        'setRainbow setRandomLip setRank setRectangular setRepairCargo setRotorBrakeRTD setShadowDistance ' +\n        'setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData ' +\n        'setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType ' +\n        'setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech ' +\n        'setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits ' +\n        'setTargetAge setTaskMarkerOffset setTaskResult setTaskState setTerrainGrid setText ' +\n        'setTimeMultiplier setTitleEffect setTrafficDensity setTrafficDistance setTrafficGap ' +\n        'setTrafficSpeed setTriggerActivation setTriggerArea setTriggerStatements setTriggerText ' +\n        'setTriggerTimeout setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos ' +\n        'setUnitPosWeak setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat ' +\n        'setUserActionText setUserMFDText setUserMFDvalue setVariable setVectorDir setVectorDirAndUp ' +\n        'setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor setVehicleCargo setVehicleId ' +\n        'setVehicleLock setVehiclePosition setVehicleRadar setVehicleReceiveRemoteTargets ' +\n        'setVehicleReportOwnPosition setVehicleReportRemoteTargets setVehicleTIPars setVehicleVarName ' +\n        'setVelocity setVelocityModelSpace setVelocityTransformation setViewDistance ' +\n        'setVisibleIfTreeCollapsed setWantedRPMRTD setWaves setWaypointBehaviour setWaypointCombatMode ' +\n        'setWaypointCompletionRadius setWaypointDescription setWaypointForceBehaviour setWaypointFormation ' +\n        'setWaypointHousePosition setWaypointLoiterRadius setWaypointLoiterType setWaypointName ' +\n        'setWaypointPosition setWaypointScript setWaypointSpeed setWaypointStatements setWaypointTimeout ' +\n        'setWaypointType setWaypointVisible setWeaponReloadingTime setWind setWindDir setWindForce ' +\n        'setWindStr setWingForceScaleRTD setWPPos show3DIcons showChat showCinemaBorder showCommandingMenu ' +\n        'showCompass showCuratorCompass showGPS showHUD showLegend showMap shownArtilleryComputer ' +\n        'shownChat shownCompass shownCuratorCompass showNewEditorObject shownGPS shownHUD shownMap ' +\n        'shownPad shownRadio shownScoretable shownUAVFeed shownWarrant shownWatch showPad showRadio ' +\n        'showScoretable showSubtitles showUAVFeed showWarrant showWatch showWaypoint showWaypoints side ' +\n        'sideChat sideEnemy sideFriendly sideRadio simpleTasks simulationEnabled simulCloudDensity ' +\n        'simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime ' +\n        'sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed ' +\n        'slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode ' +\n        'splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str ' +\n        'sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth ' +\n        'switchableUnits switchAction switchCamera switchGesture switchLight switchMove ' +\n        'synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd ' +\n        'synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan ' +\n        'targetKnowledge targets targetsAggregate targetsQuery taskAlwaysVisible taskChildren ' +\n        'taskCompleted taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskParent ' +\n        'taskResult taskState taskType teamMember teamName teams teamSwitch teamSwitchEnabled teamType ' +\n        'terminate terrainIntersect terrainIntersectASL terrainIntersectAtASL text textLog textLogFormat ' +\n        'tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray toFixed toLower ' +\n        'toString toUpper triggerActivated triggerActivation triggerArea triggerAttachedVehicle ' +\n        'triggerAttachObject triggerAttachVehicle triggerDynamicSimulation triggerStatements triggerText ' +\n        'triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear ' +\n        'tvCollapse tvCollapseAll tvCount tvCurSel tvData tvDelete tvExpand tvExpandAll tvPicture ' +\n        'tvSetColor tvSetCurSel tvSetData tvSetPicture tvSetPictureColor tvSetPictureColorDisabled ' +\n        'tvSetPictureColorSelected tvSetPictureRight tvSetPictureRightColor tvSetPictureRightColorDisabled ' +\n        'tvSetPictureRightColorSelected tvSetText tvSetTooltip tvSetValue tvSort tvSortByValue tvText ' +\n        'tvTooltip tvValue type typeName typeOf UAVControl uiNamespace uiSleep unassignCurator ' +\n        'unassignItem unassignTeam unassignVehicle underwater uniform uniformContainer uniformItems ' +\n        'uniformMagazines unitAddons unitAimPosition unitAimPositionVisual unitBackpack unitIsUAV unitPos ' +\n        'unitReady unitRecoilCoefficient units unitsBelowHeight unlinkItem unlockAchievement ' +\n        'unregisterTask updateDrawIcon updateMenuItem updateObjectTree useAISteeringComponent ' +\n        'useAudioTimeForMoves userInputDisabled vectorAdd vectorCos vectorCrossProduct vectorDiff ' +\n        'vectorDir vectorDirVisual vectorDistance vectorDistanceSqr vectorDotProduct vectorFromTo ' +\n        'vectorMagnitude vectorMagnitudeSqr vectorModelToWorld vectorModelToWorldVisual vectorMultiply ' +\n        'vectorNormalized vectorUp vectorUpVisual vectorWorldToModel vectorWorldToModelVisual vehicle ' +\n        'vehicleCargoEnabled vehicleChat vehicleRadio vehicleReceiveRemoteTargets vehicleReportOwnPosition ' +\n        'vehicleReportRemoteTargets vehicles vehicleVarName velocity velocityModelSpace verifySignature ' +\n        'vest vestContainer vestItems vestMagazines viewDistance visibleCompass visibleGPS visibleMap ' +\n        'visiblePosition visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject ' +\n        'waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour ' +\n        'waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour ' +\n        'waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName ' +\n        'waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed ' +\n        'waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible ' +\n        'weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered ' +\n        'weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD WFSideText wind ',\n      literal:\n        'blufor civilian configNull controlNull displayNull east endl false grpNull independent lineBreak ' +\n        'locationNull nil objNull opfor pi resistance scriptNull sideAmbientLife sideEmpty sideLogic ' +\n        'sideUnknown taskNull teamMemberNull true west',\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.NUMBER_MODE,\n      VARIABLE,\n      FUNCTION,\n      STRINGS,\n      CPP.preprocessor\n    ],\n    illegal: /#|^\\$ /\n  };\n};","module.exports = function(hljs) {\n  var BUILT_INS = {'builtin-name': 'each in with if else unless bindattr action collection debugger log outlet template unbound view yield'};\n  return {\n    aliases: ['hbs', 'html.hbs', 'html.handlebars'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n    hljs.COMMENT('{{!(--)?', '(--)?}}'),\n      {\n        className: 'template-tag',\n        begin: /\\{\\{[#\\/]/, end: /\\}\\}/,\n        contains: [\n          {\n            className: 'name',\n            begin: /[a-zA-Z\\.-]+/,\n            keywords: BUILT_INS,\n            starts: {\n              endsWithParent: true, relevance: 0,\n              contains: [\n                hljs.QUOTE_STRING_MODE\n              ]\n            }\n          }\n        ]\n      },\n      {\n        className: 'template-variable',\n        begin: /\\{\\{/, end: /\\}\\}/,\n        keywords: BUILT_INS\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var GML_KEYWORDS = {\n    keywords: 'begin end if then else while do for break continue with until ' +\n      'repeat exit and or xor not return mod div switch case default var ' +\n      'globalvar enum #macro #region #endregion',\n    built_in: 'is_real is_string is_array is_undefined is_int32 is_int64 ' +\n      'is_ptr is_vec3 is_vec4 is_matrix is_bool typeof ' +\n      'variable_global_exists variable_global_get variable_global_set ' +\n      'variable_instance_exists variable_instance_get variable_instance_set ' +\n      'variable_instance_get_names array_length_1d array_length_2d ' +\n      'array_height_2d array_equals array_create array_copy random ' +\n      'random_range irandom irandom_range random_set_seed random_get_seed ' +\n      'randomize randomise choose abs round floor ceil sign frac sqrt sqr ' +\n      'exp ln log2 log10 sin cos tan arcsin arccos arctan arctan2 dsin dcos ' +\n      'dtan darcsin darccos darctan darctan2 degtorad radtodeg power logn ' +\n      'min max mean median clamp lerp dot_product dot_product_3d ' +\n      'dot_product_normalised dot_product_3d_normalised ' +\n      'dot_product_normalized dot_product_3d_normalized math_set_epsilon ' +\n      'math_get_epsilon angle_difference point_distance_3d point_distance ' +\n      'point_direction lengthdir_x lengthdir_y real string int64 ptr ' +\n      'string_format chr ansi_char ord string_length string_byte_length ' +\n      'string_pos string_copy string_char_at string_ord_at string_byte_at ' +\n      'string_set_byte_at string_delete string_insert string_lower ' +\n      'string_upper string_repeat string_letters string_digits ' +\n      'string_lettersdigits string_replace string_replace_all string_count ' +\n      'string_hash_to_newline clipboard_has_text clipboard_set_text ' +\n      'clipboard_get_text date_current_datetime date_create_datetime ' +\n      'date_valid_datetime date_inc_year date_inc_month date_inc_week ' +\n      'date_inc_day date_inc_hour date_inc_minute date_inc_second ' +\n      'date_get_year date_get_month date_get_week date_get_day ' +\n      'date_get_hour date_get_minute date_get_second date_get_weekday ' +\n      'date_get_day_of_year date_get_hour_of_year date_get_minute_of_year ' +\n      'date_get_second_of_year date_year_span date_month_span ' +\n      'date_week_span date_day_span date_hour_span date_minute_span ' +\n      'date_second_span date_compare_datetime date_compare_date ' +\n      'date_compare_time date_date_of date_time_of date_datetime_string ' +\n      'date_date_string date_time_string date_days_in_month ' +\n      'date_days_in_year date_leap_year date_is_today date_set_timezone ' +\n      'date_get_timezone game_set_speed game_get_speed motion_set ' +\n      'motion_add place_free place_empty place_meeting place_snapped ' +\n      'move_random move_snap move_towards_point move_contact_solid ' +\n      'move_contact_all move_outside_solid move_outside_all ' +\n      'move_bounce_solid move_bounce_all move_wrap distance_to_point ' +\n      'distance_to_object position_empty position_meeting path_start ' +\n      'path_end mp_linear_step mp_potential_step mp_linear_step_object ' +\n      'mp_potential_step_object mp_potential_settings mp_linear_path ' +\n      'mp_potential_path mp_linear_path_object mp_potential_path_object ' +\n      'mp_grid_create mp_grid_destroy mp_grid_clear_all mp_grid_clear_cell ' +\n      'mp_grid_clear_rectangle mp_grid_add_cell mp_grid_get_cell ' +\n      'mp_grid_add_rectangle mp_grid_add_instances mp_grid_path ' +\n      'mp_grid_draw mp_grid_to_ds_grid collision_point collision_rectangle ' +\n      'collision_circle collision_ellipse collision_line ' +\n      'collision_point_list collision_rectangle_list collision_circle_list ' +\n      'collision_ellipse_list collision_line_list instance_position_list ' +\n      'instance_place_list point_in_rectangle ' +\n      'point_in_triangle point_in_circle rectangle_in_rectangle ' +\n      'rectangle_in_triangle rectangle_in_circle instance_find ' +\n      'instance_exists instance_number instance_position instance_nearest ' +\n      'instance_furthest instance_place instance_create_depth ' +\n      'instance_create_layer instance_copy instance_change instance_destroy ' +\n      'position_destroy position_change instance_id_get ' +\n      'instance_deactivate_all instance_deactivate_object ' +\n      'instance_deactivate_region instance_activate_all ' +\n      'instance_activate_object instance_activate_region room_goto ' +\n      'room_goto_previous room_goto_next room_previous room_next ' +\n      'room_restart game_end game_restart game_load game_save ' +\n      'game_save_buffer game_load_buffer event_perform event_user ' +\n      'event_perform_object event_inherited show_debug_message ' +\n      'show_debug_overlay debug_event debug_get_callstack alarm_get ' +\n      'alarm_set font_texture_page_size keyboard_set_map keyboard_get_map ' +\n      'keyboard_unset_map keyboard_check keyboard_check_pressed ' +\n      'keyboard_check_released keyboard_check_direct keyboard_get_numlock ' +\n      'keyboard_set_numlock keyboard_key_press keyboard_key_release ' +\n      'keyboard_clear io_clear mouse_check_button ' +\n      'mouse_check_button_pressed mouse_check_button_released ' +\n      'mouse_wheel_up mouse_wheel_down mouse_clear draw_self draw_sprite ' +\n      'draw_sprite_pos draw_sprite_ext draw_sprite_stretched ' +\n      'draw_sprite_stretched_ext draw_sprite_tiled draw_sprite_tiled_ext ' +\n      'draw_sprite_part draw_sprite_part_ext draw_sprite_general draw_clear ' +\n      'draw_clear_alpha draw_point draw_line draw_line_width draw_rectangle ' +\n      'draw_roundrect draw_roundrect_ext draw_triangle draw_circle ' +\n      'draw_ellipse draw_set_circle_precision draw_arrow draw_button ' +\n      'draw_path draw_healthbar draw_getpixel draw_getpixel_ext ' +\n      'draw_set_colour draw_set_color draw_set_alpha draw_get_colour ' +\n      'draw_get_color draw_get_alpha merge_colour make_colour_rgb ' +\n      'make_colour_hsv colour_get_red colour_get_green colour_get_blue ' +\n      'colour_get_hue colour_get_saturation colour_get_value merge_color ' +\n      'make_color_rgb make_color_hsv color_get_red color_get_green ' +\n      'color_get_blue color_get_hue color_get_saturation color_get_value ' +\n      'merge_color screen_save screen_save_part draw_set_font ' +\n      'draw_set_halign draw_set_valign draw_text draw_text_ext string_width ' +\n      'string_height string_width_ext string_height_ext ' +\n      'draw_text_transformed draw_text_ext_transformed draw_text_colour ' +\n      'draw_text_ext_colour draw_text_transformed_colour ' +\n      'draw_text_ext_transformed_colour draw_text_color draw_text_ext_color ' +\n      'draw_text_transformed_color draw_text_ext_transformed_color ' +\n      'draw_point_colour draw_line_colour draw_line_width_colour ' +\n      'draw_rectangle_colour draw_roundrect_colour ' +\n      'draw_roundrect_colour_ext draw_triangle_colour draw_circle_colour ' +\n      'draw_ellipse_colour draw_point_color draw_line_color ' +\n      'draw_line_width_color draw_rectangle_color draw_roundrect_color ' +\n      'draw_roundrect_color_ext draw_triangle_color draw_circle_color ' +\n      'draw_ellipse_color draw_primitive_begin draw_vertex ' +\n      'draw_vertex_colour draw_vertex_color draw_primitive_end ' +\n      'sprite_get_uvs font_get_uvs sprite_get_texture font_get_texture ' +\n      'texture_get_width texture_get_height texture_get_uvs ' +\n      'draw_primitive_begin_texture draw_vertex_texture ' +\n      'draw_vertex_texture_colour draw_vertex_texture_color ' +\n      'texture_global_scale surface_create surface_create_ext ' +\n      'surface_resize surface_free surface_exists surface_get_width ' +\n      'surface_get_height surface_get_texture surface_set_target ' +\n      'surface_set_target_ext surface_reset_target surface_depth_disable ' +\n      'surface_get_depth_disable draw_surface draw_surface_stretched ' +\n      'draw_surface_tiled draw_surface_part draw_surface_ext ' +\n      'draw_surface_stretched_ext draw_surface_tiled_ext ' +\n      'draw_surface_part_ext draw_surface_general surface_getpixel ' +\n      'surface_getpixel_ext surface_save surface_save_part surface_copy ' +\n      'surface_copy_part application_surface_draw_enable ' +\n      'application_get_position application_surface_enable ' +\n      'application_surface_is_enabled display_get_width display_get_height ' +\n      'display_get_orientation display_get_gui_width display_get_gui_height ' +\n      'display_reset display_mouse_get_x display_mouse_get_y ' +\n      'display_mouse_set display_set_ui_visibility ' +\n      'window_set_fullscreen window_get_fullscreen ' +\n      'window_set_caption window_set_min_width window_set_max_width ' +\n      'window_set_min_height window_set_max_height window_get_visible_rects ' +\n      'window_get_caption window_set_cursor window_get_cursor ' +\n      'window_set_colour window_get_colour window_set_color ' +\n      'window_get_color window_set_position window_set_size ' +\n      'window_set_rectangle window_center window_get_x window_get_y ' +\n      'window_get_width window_get_height window_mouse_get_x ' +\n      'window_mouse_get_y window_mouse_set window_view_mouse_get_x ' +\n      'window_view_mouse_get_y window_views_mouse_get_x ' +\n      'window_views_mouse_get_y audio_listener_position ' +\n      'audio_listener_velocity audio_listener_orientation ' +\n      'audio_emitter_position audio_emitter_create audio_emitter_free ' +\n      'audio_emitter_exists audio_emitter_pitch audio_emitter_velocity ' +\n      'audio_emitter_falloff audio_emitter_gain audio_play_sound ' +\n      'audio_play_sound_on audio_play_sound_at audio_stop_sound ' +\n      'audio_resume_music audio_music_is_playing audio_resume_sound ' +\n      'audio_pause_sound audio_pause_music audio_channel_num ' +\n      'audio_sound_length audio_get_type audio_falloff_set_model ' +\n      'audio_play_music audio_stop_music audio_master_gain audio_music_gain ' +\n      'audio_sound_gain audio_sound_pitch audio_stop_all audio_resume_all ' +\n      'audio_pause_all audio_is_playing audio_is_paused audio_exists ' +\n      'audio_sound_set_track_position audio_sound_get_track_position ' +\n      'audio_emitter_get_gain audio_emitter_get_pitch audio_emitter_get_x ' +\n      'audio_emitter_get_y audio_emitter_get_z audio_emitter_get_vx ' +\n      'audio_emitter_get_vy audio_emitter_get_vz ' +\n      'audio_listener_set_position audio_listener_set_velocity ' +\n      'audio_listener_set_orientation audio_listener_get_data ' +\n      'audio_set_master_gain audio_get_master_gain audio_sound_get_gain ' +\n      'audio_sound_get_pitch audio_get_name audio_sound_set_track_position ' +\n      'audio_sound_get_track_position audio_create_stream ' +\n      'audio_destroy_stream audio_create_sync_group ' +\n      'audio_destroy_sync_group audio_play_in_sync_group ' +\n      'audio_start_sync_group audio_stop_sync_group audio_pause_sync_group ' +\n      'audio_resume_sync_group audio_sync_group_get_track_pos ' +\n      'audio_sync_group_debug audio_sync_group_is_playing audio_debug ' +\n      'audio_group_load audio_group_unload audio_group_is_loaded ' +\n      'audio_group_load_progress audio_group_name audio_group_stop_all ' +\n      'audio_group_set_gain audio_create_buffer_sound ' +\n      'audio_free_buffer_sound audio_create_play_queue ' +\n      'audio_free_play_queue audio_queue_sound audio_get_recorder_count ' +\n      'audio_get_recorder_info audio_start_recording audio_stop_recording ' +\n      'audio_sound_get_listener_mask audio_emitter_get_listener_mask ' +\n      'audio_get_listener_mask audio_sound_set_listener_mask ' +\n      'audio_emitter_set_listener_mask audio_set_listener_mask ' +\n      'audio_get_listener_count audio_get_listener_info audio_system ' +\n      'show_message show_message_async clickable_add clickable_add_ext ' +\n      'clickable_change clickable_change_ext clickable_delete ' +\n      'clickable_exists clickable_set_style show_question ' +\n      'show_question_async get_integer get_string get_integer_async ' +\n      'get_string_async get_login_async get_open_filename get_save_filename ' +\n      'get_open_filename_ext get_save_filename_ext show_error ' +\n      'highscore_clear highscore_add highscore_value highscore_name ' +\n      'draw_highscore sprite_exists sprite_get_name sprite_get_number ' +\n      'sprite_get_width sprite_get_height sprite_get_xoffset ' +\n      'sprite_get_yoffset sprite_get_bbox_left sprite_get_bbox_right ' +\n      'sprite_get_bbox_top sprite_get_bbox_bottom sprite_save ' +\n      'sprite_save_strip sprite_set_cache_size sprite_set_cache_size_ext ' +\n      'sprite_get_tpe sprite_prefetch sprite_prefetch_multi sprite_flush ' +\n      'sprite_flush_multi sprite_set_speed sprite_get_speed_type ' +\n      'sprite_get_speed font_exists font_get_name font_get_fontname ' +\n      'font_get_bold font_get_italic font_get_first font_get_last ' +\n      'font_get_size font_set_cache_size path_exists path_get_name ' +\n      'path_get_length path_get_time path_get_kind path_get_closed ' +\n      'path_get_precision path_get_number path_get_point_x path_get_point_y ' +\n      'path_get_point_speed path_get_x path_get_y path_get_speed ' +\n      'script_exists script_get_name timeline_add timeline_delete ' +\n      'timeline_clear timeline_exists timeline_get_name ' +\n      'timeline_moment_clear timeline_moment_add_script timeline_size ' +\n      'timeline_max_moment object_exists object_get_name object_get_sprite ' +\n      'object_get_solid object_get_visible object_get_persistent ' +\n      'object_get_mask object_get_parent object_get_physics ' +\n      'object_is_ancestor room_exists room_get_name sprite_set_offset ' +\n      'sprite_duplicate sprite_assign sprite_merge sprite_add ' +\n      'sprite_replace sprite_create_from_surface sprite_add_from_surface ' +\n      'sprite_delete sprite_set_alpha_from_sprite sprite_collision_mask ' +\n      'font_add_enable_aa font_add_get_enable_aa font_add font_add_sprite ' +\n      'font_add_sprite_ext font_replace font_replace_sprite ' +\n      'font_replace_sprite_ext font_delete path_set_kind path_set_closed ' +\n      'path_set_precision path_add path_assign path_duplicate path_append ' +\n      'path_delete path_add_point path_insert_point path_change_point ' +\n      'path_delete_point path_clear_points path_reverse path_mirror ' +\n      'path_flip path_rotate path_rescale path_shift script_execute ' +\n      'object_set_sprite object_set_solid object_set_visible ' +\n      'object_set_persistent object_set_mask room_set_width room_set_height ' +\n      'room_set_persistent room_set_background_colour ' +\n      'room_set_background_color room_set_view room_set_viewport ' +\n      'room_get_viewport room_set_view_enabled room_add room_duplicate ' +\n      'room_assign room_instance_add room_instance_clear room_get_camera ' +\n      'room_set_camera asset_get_index asset_get_type ' +\n      'file_text_open_from_string file_text_open_read file_text_open_write ' +\n      'file_text_open_append file_text_close file_text_write_string ' +\n      'file_text_write_real file_text_writeln file_text_read_string ' +\n      'file_text_read_real file_text_readln file_text_eof file_text_eoln ' +\n      'file_exists file_delete file_rename file_copy directory_exists ' +\n      'directory_create directory_destroy file_find_first file_find_next ' +\n      'file_find_close file_attributes filename_name filename_path ' +\n      'filename_dir filename_drive filename_ext filename_change_ext ' +\n      'file_bin_open file_bin_rewrite file_bin_close file_bin_position ' +\n      'file_bin_size file_bin_seek file_bin_write_byte file_bin_read_byte ' +\n      'parameter_count parameter_string environment_get_variable ' +\n      'ini_open_from_string ini_open ini_close ini_read_string ' +\n      'ini_read_real ini_write_string ini_write_real ini_key_exists ' +\n      'ini_section_exists ini_key_delete ini_section_delete ' +\n      'ds_set_precision ds_exists ds_stack_create ds_stack_destroy ' +\n      'ds_stack_clear ds_stack_copy ds_stack_size ds_stack_empty ' +\n      'ds_stack_push ds_stack_pop ds_stack_top ds_stack_write ds_stack_read ' +\n      'ds_queue_create ds_queue_destroy ds_queue_clear ds_queue_copy ' +\n      'ds_queue_size ds_queue_empty ds_queue_enqueue ds_queue_dequeue ' +\n      'ds_queue_head ds_queue_tail ds_queue_write ds_queue_read ' +\n      'ds_list_create ds_list_destroy ds_list_clear ds_list_copy ' +\n      'ds_list_size ds_list_empty ds_list_add ds_list_insert ' +\n      'ds_list_replace ds_list_delete ds_list_find_index ds_list_find_value ' +\n      'ds_list_mark_as_list ds_list_mark_as_map ds_list_sort ' +\n      'ds_list_shuffle ds_list_write ds_list_read ds_list_set ds_map_create ' +\n      'ds_map_destroy ds_map_clear ds_map_copy ds_map_size ds_map_empty ' +\n      'ds_map_add ds_map_add_list ds_map_add_map ds_map_replace ' +\n      'ds_map_replace_map ds_map_replace_list ds_map_delete ds_map_exists ' +\n      'ds_map_find_value ds_map_find_previous ds_map_find_next ' +\n      'ds_map_find_first ds_map_find_last ds_map_write ds_map_read ' +\n      'ds_map_secure_save ds_map_secure_load ds_map_secure_load_buffer ' +\n      'ds_map_secure_save_buffer ds_map_set ds_priority_create ' +\n      'ds_priority_destroy ds_priority_clear ds_priority_copy ' +\n      'ds_priority_size ds_priority_empty ds_priority_add ' +\n      'ds_priority_change_priority ds_priority_find_priority ' +\n      'ds_priority_delete_value ds_priority_delete_min ds_priority_find_min ' +\n      'ds_priority_delete_max ds_priority_find_max ds_priority_write ' +\n      'ds_priority_read ds_grid_create ds_grid_destroy ds_grid_copy ' +\n      'ds_grid_resize ds_grid_width ds_grid_height ds_grid_clear ' +\n      'ds_grid_set ds_grid_add ds_grid_multiply ds_grid_set_region ' +\n      'ds_grid_add_region ds_grid_multiply_region ds_grid_set_disk ' +\n      'ds_grid_add_disk ds_grid_multiply_disk ds_grid_set_grid_region ' +\n      'ds_grid_add_grid_region ds_grid_multiply_grid_region ds_grid_get ' +\n      'ds_grid_get_sum ds_grid_get_max ds_grid_get_min ds_grid_get_mean ' +\n      'ds_grid_get_disk_sum ds_grid_get_disk_min ds_grid_get_disk_max ' +\n      'ds_grid_get_disk_mean ds_grid_value_exists ds_grid_value_x ' +\n      'ds_grid_value_y ds_grid_value_disk_exists ds_grid_value_disk_x ' +\n      'ds_grid_value_disk_y ds_grid_shuffle ds_grid_write ds_grid_read ' +\n      'ds_grid_sort ds_grid_set ds_grid_get effect_create_below ' +\n      'effect_create_above effect_clear part_type_create part_type_destroy ' +\n      'part_type_exists part_type_clear part_type_shape part_type_sprite ' +\n      'part_type_size part_type_scale part_type_orientation part_type_life ' +\n      'part_type_step part_type_death part_type_speed part_type_direction ' +\n      'part_type_gravity part_type_colour1 part_type_colour2 ' +\n      'part_type_colour3 part_type_colour_mix part_type_colour_rgb ' +\n      'part_type_colour_hsv part_type_color1 part_type_color2 ' +\n      'part_type_color3 part_type_color_mix part_type_color_rgb ' +\n      'part_type_color_hsv part_type_alpha1 part_type_alpha2 ' +\n      'part_type_alpha3 part_type_blend part_system_create ' +\n      'part_system_create_layer part_system_destroy part_system_exists ' +\n      'part_system_clear part_system_draw_order part_system_depth ' +\n      'part_system_position part_system_automatic_update ' +\n      'part_system_automatic_draw part_system_update part_system_drawit ' +\n      'part_system_get_layer part_system_layer part_particles_create ' +\n      'part_particles_create_colour part_particles_create_color ' +\n      'part_particles_clear part_particles_count part_emitter_create ' +\n      'part_emitter_destroy part_emitter_destroy_all part_emitter_exists ' +\n      'part_emitter_clear part_emitter_region part_emitter_burst ' +\n      'part_emitter_stream external_call external_define external_free ' +\n      'window_handle window_device matrix_get matrix_set ' +\n      'matrix_build_identity matrix_build matrix_build_lookat ' +\n      'matrix_build_projection_ortho matrix_build_projection_perspective ' +\n      'matrix_build_projection_perspective_fov matrix_multiply ' +\n      'matrix_transform_vertex matrix_stack_push matrix_stack_pop ' +\n      'matrix_stack_multiply matrix_stack_set matrix_stack_clear ' +\n      'matrix_stack_top matrix_stack_is_empty browser_input_capture ' +\n      'os_get_config os_get_info os_get_language os_get_region ' +\n      'os_lock_orientation display_get_dpi_x display_get_dpi_y ' +\n      'display_set_gui_size display_set_gui_maximise ' +\n      'display_set_gui_maximize device_mouse_dbclick_enable ' +\n      'display_set_timing_method display_get_timing_method ' +\n      'display_set_sleep_margin display_get_sleep_margin virtual_key_add ' +\n      'virtual_key_hide virtual_key_delete virtual_key_show ' +\n      'draw_enable_drawevent draw_enable_swf_aa draw_set_swf_aa_level ' +\n      'draw_get_swf_aa_level draw_texture_flush draw_flush ' +\n      'gpu_set_blendenable gpu_set_ztestenable gpu_set_zfunc ' +\n      'gpu_set_zwriteenable gpu_set_lightingenable gpu_set_fog ' +\n      'gpu_set_cullmode gpu_set_blendmode gpu_set_blendmode_ext ' +\n      'gpu_set_blendmode_ext_sepalpha gpu_set_colorwriteenable ' +\n      'gpu_set_colourwriteenable gpu_set_alphatestenable ' +\n      'gpu_set_alphatestref gpu_set_alphatestfunc gpu_set_texfilter ' +\n      'gpu_set_texfilter_ext gpu_set_texrepeat gpu_set_texrepeat_ext ' +\n      'gpu_set_tex_filter gpu_set_tex_filter_ext gpu_set_tex_repeat ' +\n      'gpu_set_tex_repeat_ext gpu_set_tex_mip_filter ' +\n      'gpu_set_tex_mip_filter_ext gpu_set_tex_mip_bias ' +\n      'gpu_set_tex_mip_bias_ext gpu_set_tex_min_mip gpu_set_tex_min_mip_ext ' +\n      'gpu_set_tex_max_mip gpu_set_tex_max_mip_ext gpu_set_tex_max_aniso ' +\n      'gpu_set_tex_max_aniso_ext gpu_set_tex_mip_enable ' +\n      'gpu_set_tex_mip_enable_ext gpu_get_blendenable gpu_get_ztestenable ' +\n      'gpu_get_zfunc gpu_get_zwriteenable gpu_get_lightingenable ' +\n      'gpu_get_fog gpu_get_cullmode gpu_get_blendmode gpu_get_blendmode_ext ' +\n      'gpu_get_blendmode_ext_sepalpha gpu_get_blendmode_src ' +\n      'gpu_get_blendmode_dest gpu_get_blendmode_srcalpha ' +\n      'gpu_get_blendmode_destalpha gpu_get_colorwriteenable ' +\n      'gpu_get_colourwriteenable gpu_get_alphatestenable ' +\n      'gpu_get_alphatestref gpu_get_alphatestfunc gpu_get_texfilter ' +\n      'gpu_get_texfilter_ext gpu_get_texrepeat gpu_get_texrepeat_ext ' +\n      'gpu_get_tex_filter gpu_get_tex_filter_ext gpu_get_tex_repeat ' +\n      'gpu_get_tex_repeat_ext gpu_get_tex_mip_filter ' +\n      'gpu_get_tex_mip_filter_ext gpu_get_tex_mip_bias ' +\n      'gpu_get_tex_mip_bias_ext gpu_get_tex_min_mip gpu_get_tex_min_mip_ext ' +\n      'gpu_get_tex_max_mip gpu_get_tex_max_mip_ext gpu_get_tex_max_aniso ' +\n      'gpu_get_tex_max_aniso_ext gpu_get_tex_mip_enable ' +\n      'gpu_get_tex_mip_enable_ext gpu_push_state gpu_pop_state ' +\n      'gpu_get_state gpu_set_state draw_light_define_ambient ' +\n      'draw_light_define_direction draw_light_define_point ' +\n      'draw_light_enable draw_set_lighting draw_light_get_ambient ' +\n      'draw_light_get draw_get_lighting shop_leave_rating url_get_domain ' +\n      'url_open url_open_ext url_open_full get_timer achievement_login ' +\n      'achievement_logout achievement_post achievement_increment ' +\n      'achievement_post_score achievement_available ' +\n      'achievement_show_achievements achievement_show_leaderboards ' +\n      'achievement_load_friends achievement_load_leaderboard ' +\n      'achievement_send_challenge achievement_load_progress ' +\n      'achievement_reset achievement_login_status achievement_get_pic ' +\n      'achievement_show_challenge_notifications achievement_get_challenges ' +\n      'achievement_event achievement_show achievement_get_info ' +\n      'cloud_file_save cloud_string_save cloud_synchronise ads_enable ' +\n      'ads_disable ads_setup ads_engagement_launch ads_engagement_available ' +\n      'ads_engagement_active ads_event ads_event_preload ' +\n      'ads_set_reward_callback ads_get_display_height ads_get_display_width ' +\n      'ads_move ads_interstitial_available ads_interstitial_display ' +\n      'device_get_tilt_x device_get_tilt_y device_get_tilt_z ' +\n      'device_is_keypad_open device_mouse_check_button ' +\n      'device_mouse_check_button_pressed device_mouse_check_button_released ' +\n      'device_mouse_x device_mouse_y device_mouse_raw_x device_mouse_raw_y ' +\n      'device_mouse_x_to_gui device_mouse_y_to_gui iap_activate iap_status ' +\n      'iap_enumerate_products iap_restore_all iap_acquire iap_consume ' +\n      'iap_product_details iap_purchase_details facebook_init ' +\n      'facebook_login facebook_status facebook_graph_request ' +\n      'facebook_dialog facebook_logout facebook_launch_offerwall ' +\n      'facebook_post_message facebook_send_invite facebook_user_id ' +\n      'facebook_accesstoken facebook_check_permission ' +\n      'facebook_request_read_permissions ' +\n      'facebook_request_publish_permissions gamepad_is_supported ' +\n      'gamepad_get_device_count gamepad_is_connected ' +\n      'gamepad_get_description gamepad_get_button_threshold ' +\n      'gamepad_set_button_threshold gamepad_get_axis_deadzone ' +\n      'gamepad_set_axis_deadzone gamepad_button_count gamepad_button_check ' +\n      'gamepad_button_check_pressed gamepad_button_check_released ' +\n      'gamepad_button_value gamepad_axis_count gamepad_axis_value ' +\n      'gamepad_set_vibration gamepad_set_colour gamepad_set_color ' +\n      'os_is_paused window_has_focus code_is_compiled http_get ' +\n      'http_get_file http_post_string http_request json_encode json_decode ' +\n      'zip_unzip load_csv base64_encode base64_decode md5_string_unicode ' +\n      'md5_string_utf8 md5_file os_is_network_connected sha1_string_unicode ' +\n      'sha1_string_utf8 sha1_file os_powersave_enable analytics_event ' +\n      'analytics_event_ext win8_livetile_tile_notification ' +\n      'win8_livetile_tile_clear win8_livetile_badge_notification ' +\n      'win8_livetile_badge_clear win8_livetile_queue_enable ' +\n      'win8_secondarytile_pin win8_secondarytile_badge_notification ' +\n      'win8_secondarytile_delete win8_livetile_notification_begin ' +\n      'win8_livetile_notification_secondary_begin ' +\n      'win8_livetile_notification_expiry win8_livetile_notification_tag ' +\n      'win8_livetile_notification_text_add ' +\n      'win8_livetile_notification_image_add win8_livetile_notification_end ' +\n      'win8_appbar_enable win8_appbar_add_element ' +\n      'win8_appbar_remove_element win8_settingscharm_add_entry ' +\n      'win8_settingscharm_add_html_entry win8_settingscharm_add_xaml_entry ' +\n      'win8_settingscharm_set_xaml_property ' +\n      'win8_settingscharm_get_xaml_property win8_settingscharm_remove_entry ' +\n      'win8_share_image win8_share_screenshot win8_share_file ' +\n      'win8_share_url win8_share_text win8_search_enable ' +\n      'win8_search_disable win8_search_add_suggestions ' +\n      'win8_device_touchscreen_available win8_license_initialize_sandbox ' +\n      'win8_license_trial_version winphone_license_trial_version ' +\n      'winphone_tile_title winphone_tile_count winphone_tile_back_title ' +\n      'winphone_tile_back_content winphone_tile_back_content_wide ' +\n      'winphone_tile_front_image winphone_tile_front_image_small ' +\n      'winphone_tile_front_image_wide winphone_tile_back_image ' +\n      'winphone_tile_back_image_wide winphone_tile_background_colour ' +\n      'winphone_tile_background_color winphone_tile_icon_image ' +\n      'winphone_tile_small_icon_image winphone_tile_wide_content ' +\n      'winphone_tile_cycle_images winphone_tile_small_background_image ' +\n      'physics_world_create physics_world_gravity ' +\n      'physics_world_update_speed physics_world_update_iterations ' +\n      'physics_world_draw_debug physics_pause_enable physics_fixture_create ' +\n      'physics_fixture_set_kinematic physics_fixture_set_density ' +\n      'physics_fixture_set_awake physics_fixture_set_restitution ' +\n      'physics_fixture_set_friction physics_fixture_set_collision_group ' +\n      'physics_fixture_set_sensor physics_fixture_set_linear_damping ' +\n      'physics_fixture_set_angular_damping physics_fixture_set_circle_shape ' +\n      'physics_fixture_set_box_shape physics_fixture_set_edge_shape ' +\n      'physics_fixture_set_polygon_shape physics_fixture_set_chain_shape ' +\n      'physics_fixture_add_point physics_fixture_bind ' +\n      'physics_fixture_bind_ext physics_fixture_delete physics_apply_force ' +\n      'physics_apply_impulse physics_apply_angular_impulse ' +\n      'physics_apply_local_force physics_apply_local_impulse ' +\n      'physics_apply_torque physics_mass_properties physics_draw_debug ' +\n      'physics_test_overlap physics_remove_fixture physics_set_friction ' +\n      'physics_set_density physics_set_restitution physics_get_friction ' +\n      'physics_get_density physics_get_restitution ' +\n      'physics_joint_distance_create physics_joint_rope_create ' +\n      'physics_joint_revolute_create physics_joint_prismatic_create ' +\n      'physics_joint_pulley_create physics_joint_wheel_create ' +\n      'physics_joint_weld_create physics_joint_friction_create ' +\n      'physics_joint_gear_create physics_joint_enable_motor ' +\n      'physics_joint_get_value physics_joint_set_value physics_joint_delete ' +\n      'physics_particle_create physics_particle_delete ' +\n      'physics_particle_delete_region_circle ' +\n      'physics_particle_delete_region_box ' +\n      'physics_particle_delete_region_poly physics_particle_set_flags ' +\n      'physics_particle_set_category_flags physics_particle_draw ' +\n      'physics_particle_draw_ext physics_particle_count ' +\n      'physics_particle_get_data physics_particle_get_data_particle ' +\n      'physics_particle_group_begin physics_particle_group_circle ' +\n      'physics_particle_group_box physics_particle_group_polygon ' +\n      'physics_particle_group_add_point physics_particle_group_end ' +\n      'physics_particle_group_join physics_particle_group_delete ' +\n      'physics_particle_group_count physics_particle_group_get_data ' +\n      'physics_particle_group_get_mass physics_particle_group_get_inertia ' +\n      'physics_particle_group_get_centre_x ' +\n      'physics_particle_group_get_centre_y physics_particle_group_get_vel_x ' +\n      'physics_particle_group_get_vel_y physics_particle_group_get_ang_vel ' +\n      'physics_particle_group_get_x physics_particle_group_get_y ' +\n      'physics_particle_group_get_angle physics_particle_set_group_flags ' +\n      'physics_particle_get_group_flags physics_particle_get_max_count ' +\n      'physics_particle_get_radius physics_particle_get_density ' +\n      'physics_particle_get_damping physics_particle_get_gravity_scale ' +\n      'physics_particle_set_max_count physics_particle_set_radius ' +\n      'physics_particle_set_density physics_particle_set_damping ' +\n      'physics_particle_set_gravity_scale network_create_socket ' +\n      'network_create_socket_ext network_create_server ' +\n      'network_create_server_raw network_connect network_connect_raw ' +\n      'network_send_packet network_send_raw network_send_broadcast ' +\n      'network_send_udp network_send_udp_raw network_set_timeout ' +\n      'network_set_config network_resolve network_destroy buffer_create ' +\n      'buffer_write buffer_read buffer_seek buffer_get_surface ' +\n      'buffer_set_surface buffer_delete buffer_exists buffer_get_type ' +\n      'buffer_get_alignment buffer_poke buffer_peek buffer_save ' +\n      'buffer_save_ext buffer_load buffer_load_ext buffer_load_partial ' +\n      'buffer_copy buffer_fill buffer_get_size buffer_tell buffer_resize ' +\n      'buffer_md5 buffer_sha1 buffer_base64_encode buffer_base64_decode ' +\n      'buffer_base64_decode_ext buffer_sizeof buffer_get_address ' +\n      'buffer_create_from_vertex_buffer ' +\n      'buffer_create_from_vertex_buffer_ext buffer_copy_from_vertex_buffer ' +\n      'buffer_async_group_begin buffer_async_group_option ' +\n      'buffer_async_group_end buffer_load_async buffer_save_async ' +\n      'gml_release_mode gml_pragma steam_activate_overlay ' +\n      'steam_is_overlay_enabled steam_is_overlay_activated ' +\n      'steam_get_persona_name steam_initialised ' +\n      'steam_is_cloud_enabled_for_app steam_is_cloud_enabled_for_account ' +\n      'steam_file_persisted steam_get_quota_total steam_get_quota_free ' +\n      'steam_file_write steam_file_write_file steam_file_read ' +\n      'steam_file_delete steam_file_exists steam_file_size steam_file_share ' +\n      'steam_is_screenshot_requested steam_send_screenshot ' +\n      'steam_is_user_logged_on steam_get_user_steam_id steam_user_owns_dlc ' +\n      'steam_user_installed_dlc steam_set_achievement steam_get_achievement ' +\n      'steam_clear_achievement steam_set_stat_int steam_set_stat_float ' +\n      'steam_set_stat_avg_rate steam_get_stat_int steam_get_stat_float ' +\n      'steam_get_stat_avg_rate steam_reset_all_stats ' +\n      'steam_reset_all_stats_achievements steam_stats_ready ' +\n      'steam_create_leaderboard steam_upload_score steam_upload_score_ext ' +\n      'steam_download_scores_around_user steam_download_scores ' +\n      'steam_download_friends_scores steam_upload_score_buffer ' +\n      'steam_upload_score_buffer_ext steam_current_game_language ' +\n      'steam_available_languages steam_activate_overlay_browser ' +\n      'steam_activate_overlay_user steam_activate_overlay_store ' +\n      'steam_get_user_persona_name steam_get_app_id ' +\n      'steam_get_user_account_id steam_ugc_download steam_ugc_create_item ' +\n      'steam_ugc_start_item_update steam_ugc_set_item_title ' +\n      'steam_ugc_set_item_description steam_ugc_set_item_visibility ' +\n      'steam_ugc_set_item_tags steam_ugc_set_item_content ' +\n      'steam_ugc_set_item_preview steam_ugc_submit_item_update ' +\n      'steam_ugc_get_item_update_progress steam_ugc_subscribe_item ' +\n      'steam_ugc_unsubscribe_item steam_ugc_num_subscribed_items ' +\n      'steam_ugc_get_subscribed_items steam_ugc_get_item_install_info ' +\n      'steam_ugc_get_item_update_info steam_ugc_request_item_details ' +\n      'steam_ugc_create_query_user steam_ugc_create_query_user_ex ' +\n      'steam_ugc_create_query_all steam_ugc_create_query_all_ex ' +\n      'steam_ugc_query_set_cloud_filename_filter ' +\n      'steam_ugc_query_set_match_any_tag steam_ugc_query_set_search_text ' +\n      'steam_ugc_query_set_ranked_by_trend_days ' +\n      'steam_ugc_query_add_required_tag steam_ugc_query_add_excluded_tag ' +\n      'steam_ugc_query_set_return_long_description ' +\n      'steam_ugc_query_set_return_total_only ' +\n      'steam_ugc_query_set_allow_cached_response steam_ugc_send_query ' +\n      'shader_set shader_get_name shader_reset shader_current ' +\n      'shader_is_compiled shader_get_sampler_index shader_get_uniform ' +\n      'shader_set_uniform_i shader_set_uniform_i_array shader_set_uniform_f ' +\n      'shader_set_uniform_f_array shader_set_uniform_matrix ' +\n      'shader_set_uniform_matrix_array shader_enable_corner_id ' +\n      'texture_set_stage texture_get_texel_width texture_get_texel_height ' +\n      'shaders_are_supported vertex_format_begin vertex_format_end ' +\n      'vertex_format_delete vertex_format_add_position ' +\n      'vertex_format_add_position_3d vertex_format_add_colour ' +\n      'vertex_format_add_color vertex_format_add_normal ' +\n      'vertex_format_add_texcoord vertex_format_add_textcoord ' +\n      'vertex_format_add_custom vertex_create_buffer ' +\n      'vertex_create_buffer_ext vertex_delete_buffer vertex_begin ' +\n      'vertex_end vertex_position vertex_position_3d vertex_colour ' +\n      'vertex_color vertex_argb vertex_texcoord vertex_normal vertex_float1 ' +\n      'vertex_float2 vertex_float3 vertex_float4 vertex_ubyte4 ' +\n      'vertex_submit vertex_freeze vertex_get_number vertex_get_buffer_size ' +\n      'vertex_create_buffer_from_buffer ' +\n      'vertex_create_buffer_from_buffer_ext push_local_notification ' +\n      'push_get_first_local_notification push_get_next_local_notification ' +\n      'push_cancel_local_notification skeleton_animation_set ' +\n      'skeleton_animation_get skeleton_animation_mix ' +\n      'skeleton_animation_set_ext skeleton_animation_get_ext ' +\n      'skeleton_animation_get_duration skeleton_animation_get_frames ' +\n      'skeleton_animation_clear skeleton_skin_set skeleton_skin_get ' +\n      'skeleton_attachment_set skeleton_attachment_get ' +\n      'skeleton_attachment_create skeleton_collision_draw_set ' +\n      'skeleton_bone_data_get skeleton_bone_data_set ' +\n      'skeleton_bone_state_get skeleton_bone_state_set skeleton_get_minmax ' +\n      'skeleton_get_num_bounds skeleton_get_bounds ' +\n      'skeleton_animation_get_frame skeleton_animation_set_frame ' +\n      'draw_skeleton draw_skeleton_time draw_skeleton_instance ' +\n      'draw_skeleton_collision skeleton_animation_list skeleton_skin_list ' +\n      'skeleton_slot_data layer_get_id layer_get_id_at_depth ' +\n      'layer_get_depth layer_create layer_destroy layer_destroy_instances ' +\n      'layer_add_instance layer_has_instance layer_set_visible ' +\n      'layer_get_visible layer_exists layer_x layer_y layer_get_x ' +\n      'layer_get_y layer_hspeed layer_vspeed layer_get_hspeed ' +\n      'layer_get_vspeed layer_script_begin layer_script_end layer_shader ' +\n      'layer_get_script_begin layer_get_script_end layer_get_shader ' +\n      'layer_set_target_room layer_get_target_room layer_reset_target_room ' +\n      'layer_get_all layer_get_all_elements layer_get_name layer_depth ' +\n      'layer_get_element_layer layer_get_element_type layer_element_move ' +\n      'layer_force_draw_depth layer_is_draw_depth_forced ' +\n      'layer_get_forced_depth layer_background_get_id ' +\n      'layer_background_exists layer_background_create ' +\n      'layer_background_destroy layer_background_visible ' +\n      'layer_background_change layer_background_sprite ' +\n      'layer_background_htiled layer_background_vtiled ' +\n      'layer_background_stretch layer_background_yscale ' +\n      'layer_background_xscale layer_background_blend ' +\n      'layer_background_alpha layer_background_index layer_background_speed ' +\n      'layer_background_get_visible layer_background_get_sprite ' +\n      'layer_background_get_htiled layer_background_get_vtiled ' +\n      'layer_background_get_stretch layer_background_get_yscale ' +\n      'layer_background_get_xscale layer_background_get_blend ' +\n      'layer_background_get_alpha layer_background_get_index ' +\n      'layer_background_get_speed layer_sprite_get_id layer_sprite_exists ' +\n      'layer_sprite_create layer_sprite_destroy layer_sprite_change ' +\n      'layer_sprite_index layer_sprite_speed layer_sprite_xscale ' +\n      'layer_sprite_yscale layer_sprite_angle layer_sprite_blend ' +\n      'layer_sprite_alpha layer_sprite_x layer_sprite_y ' +\n      'layer_sprite_get_sprite layer_sprite_get_index ' +\n      'layer_sprite_get_speed layer_sprite_get_xscale ' +\n      'layer_sprite_get_yscale layer_sprite_get_angle ' +\n      'layer_sprite_get_blend layer_sprite_get_alpha layer_sprite_get_x ' +\n      'layer_sprite_get_y layer_tilemap_get_id layer_tilemap_exists ' +\n      'layer_tilemap_create layer_tilemap_destroy tilemap_tileset tilemap_x ' +\n      'tilemap_y tilemap_set tilemap_set_at_pixel tilemap_get_tileset ' +\n      'tilemap_get_tile_width tilemap_get_tile_height tilemap_get_width ' +\n      'tilemap_get_height tilemap_get_x tilemap_get_y tilemap_get ' +\n      'tilemap_get_at_pixel tilemap_get_cell_x_at_pixel ' +\n      'tilemap_get_cell_y_at_pixel tilemap_clear draw_tilemap draw_tile ' +\n      'tilemap_set_global_mask tilemap_get_global_mask tilemap_set_mask ' +\n      'tilemap_get_mask tilemap_get_frame tile_set_empty tile_set_index ' +\n      'tile_set_flip tile_set_mirror tile_set_rotate tile_get_empty ' +\n      'tile_get_index tile_get_flip tile_get_mirror tile_get_rotate ' +\n      'layer_tile_exists layer_tile_create layer_tile_destroy ' +\n      'layer_tile_change layer_tile_xscale layer_tile_yscale ' +\n      'layer_tile_blend layer_tile_alpha layer_tile_x layer_tile_y ' +\n      'layer_tile_region layer_tile_visible layer_tile_get_sprite ' +\n      'layer_tile_get_xscale layer_tile_get_yscale layer_tile_get_blend ' +\n      'layer_tile_get_alpha layer_tile_get_x layer_tile_get_y ' +\n      'layer_tile_get_region layer_tile_get_visible ' +\n      'layer_instance_get_instance instance_activate_layer ' +\n      'instance_deactivate_layer camera_create camera_create_view ' +\n      'camera_destroy camera_apply camera_get_active camera_get_default ' +\n      'camera_set_default camera_set_view_mat camera_set_proj_mat ' +\n      'camera_set_update_script camera_set_begin_script ' +\n      'camera_set_end_script camera_set_view_pos camera_set_view_size ' +\n      'camera_set_view_speed camera_set_view_border camera_set_view_angle ' +\n      'camera_set_view_target camera_get_view_mat camera_get_proj_mat ' +\n      'camera_get_update_script camera_get_begin_script ' +\n      'camera_get_end_script camera_get_view_x camera_get_view_y ' +\n      'camera_get_view_width camera_get_view_height camera_get_view_speed_x ' +\n      'camera_get_view_speed_y camera_get_view_border_x ' +\n      'camera_get_view_border_y camera_get_view_angle ' +\n      'camera_get_view_target view_get_camera view_get_visible ' +\n      'view_get_xport view_get_yport view_get_wport view_get_hport ' +\n      'view_get_surface_id view_set_camera view_set_visible view_set_xport ' +\n      'view_set_yport view_set_wport view_set_hport view_set_surface_id ' +\n      'gesture_drag_time gesture_drag_distance gesture_flick_speed ' +\n      'gesture_double_tap_time gesture_double_tap_distance ' +\n      'gesture_pinch_distance gesture_pinch_angle_towards ' +\n      'gesture_pinch_angle_away gesture_rotate_time gesture_rotate_angle ' +\n      'gesture_tap_count gesture_get_drag_time gesture_get_drag_distance ' +\n      'gesture_get_flick_speed gesture_get_double_tap_time ' +\n      'gesture_get_double_tap_distance gesture_get_pinch_distance ' +\n      'gesture_get_pinch_angle_towards gesture_get_pinch_angle_away ' +\n      'gesture_get_rotate_time gesture_get_rotate_angle ' +\n      'gesture_get_tap_count keyboard_virtual_show keyboard_virtual_hide ' +\n      'keyboard_virtual_status keyboard_virtual_height',\n    literal: 'self other all noone global local undefined pointer_invalid ' +\n      'pointer_null path_action_stop path_action_restart ' +\n      'path_action_continue path_action_reverse true false pi GM_build_date ' +\n      'GM_version GM_runtime_version  timezone_local timezone_utc ' +\n      'gamespeed_fps gamespeed_microseconds  ev_create ev_destroy ev_step ' +\n      'ev_alarm ev_keyboard ev_mouse ev_collision ev_other ev_draw ' +\n      'ev_draw_begin ev_draw_end ev_draw_pre ev_draw_post ev_keypress ' +\n      'ev_keyrelease ev_trigger ev_left_button ev_right_button ' +\n      'ev_middle_button ev_no_button ev_left_press ev_right_press ' +\n      'ev_middle_press ev_left_release ev_right_release ev_middle_release ' +\n      'ev_mouse_enter ev_mouse_leave ev_mouse_wheel_up ev_mouse_wheel_down ' +\n      'ev_global_left_button ev_global_right_button ev_global_middle_button ' +\n      'ev_global_left_press ev_global_right_press ev_global_middle_press ' +\n      'ev_global_left_release ev_global_right_release ' +\n      'ev_global_middle_release ev_joystick1_left ev_joystick1_right ' +\n      'ev_joystick1_up ev_joystick1_down ev_joystick1_button1 ' +\n      'ev_joystick1_button2 ev_joystick1_button3 ev_joystick1_button4 ' +\n      'ev_joystick1_button5 ev_joystick1_button6 ev_joystick1_button7 ' +\n      'ev_joystick1_button8 ev_joystick2_left ev_joystick2_right ' +\n      'ev_joystick2_up ev_joystick2_down ev_joystick2_button1 ' +\n      'ev_joystick2_button2 ev_joystick2_button3 ev_joystick2_button4 ' +\n      'ev_joystick2_button5 ev_joystick2_button6 ev_joystick2_button7 ' +\n      'ev_joystick2_button8 ev_outside ev_boundary ev_game_start ' +\n      'ev_game_end ev_room_start ev_room_end ev_no_more_lives ' +\n      'ev_animation_end ev_end_of_path ev_no_more_health ev_close_button ' +\n      'ev_user0 ev_user1 ev_user2 ev_user3 ev_user4 ev_user5 ev_user6 ' +\n      'ev_user7 ev_user8 ev_user9 ev_user10 ev_user11 ev_user12 ev_user13 ' +\n      'ev_user14 ev_user15 ev_step_normal ev_step_begin ev_step_end ev_gui ' +\n      'ev_gui_begin ev_gui_end ev_cleanup ev_gesture ev_gesture_tap ' +\n      'ev_gesture_double_tap ev_gesture_drag_start ev_gesture_dragging ' +\n      'ev_gesture_drag_end ev_gesture_flick ev_gesture_pinch_start ' +\n      'ev_gesture_pinch_in ev_gesture_pinch_out ev_gesture_pinch_end ' +\n      'ev_gesture_rotate_start ev_gesture_rotating ev_gesture_rotate_end ' +\n      'ev_global_gesture_tap ev_global_gesture_double_tap ' +\n      'ev_global_gesture_drag_start ev_global_gesture_dragging ' +\n      'ev_global_gesture_drag_end ev_global_gesture_flick ' +\n      'ev_global_gesture_pinch_start ev_global_gesture_pinch_in ' +\n      'ev_global_gesture_pinch_out ev_global_gesture_pinch_end ' +\n      'ev_global_gesture_rotate_start ev_global_gesture_rotating ' +\n      'ev_global_gesture_rotate_end vk_nokey vk_anykey vk_enter vk_return ' +\n      'vk_shift vk_control vk_alt vk_escape vk_space vk_backspace vk_tab ' +\n      'vk_pause vk_printscreen vk_left vk_right vk_up vk_down vk_home ' +\n      'vk_end vk_delete vk_insert vk_pageup vk_pagedown vk_f1 vk_f2 vk_f3 ' +\n      'vk_f4 vk_f5 vk_f6 vk_f7 vk_f8 vk_f9 vk_f10 vk_f11 vk_f12 vk_numpad0 ' +\n      'vk_numpad1 vk_numpad2 vk_numpad3 vk_numpad4 vk_numpad5 vk_numpad6 ' +\n      'vk_numpad7 vk_numpad8 vk_numpad9 vk_divide vk_multiply vk_subtract ' +\n      'vk_add vk_decimal vk_lshift vk_lcontrol vk_lalt vk_rshift ' +\n      'vk_rcontrol vk_ralt  mb_any mb_none mb_left mb_right mb_middle ' +\n      'c_aqua c_black c_blue c_dkgray c_fuchsia c_gray c_green c_lime ' +\n      'c_ltgray c_maroon c_navy c_olive c_purple c_red c_silver c_teal ' +\n      'c_white c_yellow c_orange fa_left fa_center fa_right fa_top ' +\n      'fa_middle fa_bottom pr_pointlist pr_linelist pr_linestrip ' +\n      'pr_trianglelist pr_trianglestrip pr_trianglefan bm_complex bm_normal ' +\n      'bm_add bm_max bm_subtract bm_zero bm_one bm_src_colour ' +\n      'bm_inv_src_colour bm_src_color bm_inv_src_color bm_src_alpha ' +\n      'bm_inv_src_alpha bm_dest_alpha bm_inv_dest_alpha bm_dest_colour ' +\n      'bm_inv_dest_colour bm_dest_color bm_inv_dest_color bm_src_alpha_sat ' +\n      'tf_point tf_linear tf_anisotropic mip_off mip_on mip_markedonly ' +\n      'audio_falloff_none audio_falloff_inverse_distance ' +\n      'audio_falloff_inverse_distance_clamped audio_falloff_linear_distance ' +\n      'audio_falloff_linear_distance_clamped ' +\n      'audio_falloff_exponent_distance ' +\n      'audio_falloff_exponent_distance_clamped audio_old_system ' +\n      'audio_new_system audio_mono audio_stereo audio_3d cr_default cr_none ' +\n      'cr_arrow cr_cross cr_beam cr_size_nesw cr_size_ns cr_size_nwse ' +\n      'cr_size_we cr_uparrow cr_hourglass cr_drag cr_appstart cr_handpoint ' +\n      'cr_size_all spritespeed_framespersecond ' +\n      'spritespeed_framespergameframe asset_object asset_unknown ' +\n      'asset_sprite asset_sound asset_room asset_path asset_script ' +\n      'asset_font asset_timeline asset_tiles asset_shader fa_readonly ' +\n      'fa_hidden fa_sysfile fa_volumeid fa_directory fa_archive  ' +\n      'ds_type_map ds_type_list ds_type_stack ds_type_queue ds_type_grid ' +\n      'ds_type_priority ef_explosion ef_ring ef_ellipse ef_firework ' +\n      'ef_smoke ef_smokeup ef_star ef_spark ef_flare ef_cloud ef_rain ' +\n      'ef_snow pt_shape_pixel pt_shape_disk pt_shape_square pt_shape_line ' +\n      'pt_shape_star pt_shape_circle pt_shape_ring pt_shape_sphere ' +\n      'pt_shape_flare pt_shape_spark pt_shape_explosion pt_shape_cloud ' +\n      'pt_shape_smoke pt_shape_snow ps_distr_linear ps_distr_gaussian ' +\n      'ps_distr_invgaussian ps_shape_rectangle ps_shape_ellipse ' +\n      'ps_shape_diamond ps_shape_line ty_real ty_string dll_cdecl ' +\n      'dll_stdcall matrix_view matrix_projection matrix_world os_win32 ' +\n      'os_windows os_macosx os_ios os_android os_symbian os_linux ' +\n      'os_unknown os_winphone os_tizen os_win8native ' +\n      'os_wiiu os_3ds  os_psvita os_bb10 os_ps4 os_xboxone ' +\n      'os_ps3 os_xbox360 os_uwp os_tvos os_switch ' +\n      'browser_not_a_browser browser_unknown browser_ie browser_firefox ' +\n      'browser_chrome browser_safari browser_safari_mobile browser_opera ' +\n      'browser_tizen browser_edge browser_windows_store browser_ie_mobile  ' +\n      'device_ios_unknown device_ios_iphone device_ios_iphone_retina ' +\n      'device_ios_ipad device_ios_ipad_retina device_ios_iphone5 ' +\n      'device_ios_iphone6 device_ios_iphone6plus device_emulator ' +\n      'device_tablet display_landscape display_landscape_flipped ' +\n      'display_portrait display_portrait_flipped tm_sleep tm_countvsyncs ' +\n      'of_challenge_win of_challen ge_lose of_challenge_tie ' +\n      'leaderboard_type_number leaderboard_type_time_mins_secs ' +\n      'cmpfunc_never cmpfunc_less cmpfunc_equal cmpfunc_lessequal ' +\n      'cmpfunc_greater cmpfunc_notequal cmpfunc_greaterequal cmpfunc_always ' +\n      'cull_noculling cull_clockwise cull_counterclockwise lighttype_dir ' +\n      'lighttype_point iap_ev_storeload iap_ev_product iap_ev_purchase ' +\n      'iap_ev_consume iap_ev_restore iap_storeload_ok iap_storeload_failed ' +\n      'iap_status_uninitialised iap_status_unavailable iap_status_loading ' +\n      'iap_status_available iap_status_processing iap_status_restoring ' +\n      'iap_failed iap_unavailable iap_available iap_purchased iap_canceled ' +\n      'iap_refunded fb_login_default fb_login_fallback_to_webview ' +\n      'fb_login_no_fallback_to_webview fb_login_forcing_webview ' +\n      'fb_login_use_system_account fb_login_forcing_safari  ' +\n      'phy_joint_anchor_1_x phy_joint_anchor_1_y phy_joint_anchor_2_x ' +\n      'phy_joint_anchor_2_y phy_joint_reaction_force_x ' +\n      'phy_joint_reaction_force_y phy_joint_reaction_torque ' +\n      'phy_joint_motor_speed phy_joint_angle phy_joint_motor_torque ' +\n      'phy_joint_max_motor_torque phy_joint_translation phy_joint_speed ' +\n      'phy_joint_motor_force phy_joint_max_motor_force phy_joint_length_1 ' +\n      'phy_joint_length_2 phy_joint_damping_ratio phy_joint_frequency ' +\n      'phy_joint_lower_angle_limit phy_joint_upper_angle_limit ' +\n      'phy_joint_angle_limits phy_joint_max_length phy_joint_max_torque ' +\n      'phy_joint_max_force phy_debug_render_aabb ' +\n      'phy_debug_render_collision_pairs phy_debug_render_coms ' +\n      'phy_debug_render_core_shapes phy_debug_render_joints ' +\n      'phy_debug_render_obb phy_debug_render_shapes  ' +\n      'phy_particle_flag_water phy_particle_flag_zombie ' +\n      'phy_particle_flag_wall phy_particle_flag_spring ' +\n      'phy_particle_flag_elastic phy_particle_flag_viscous ' +\n      'phy_particle_flag_powder phy_particle_flag_tensile ' +\n      'phy_particle_flag_colourmixing phy_particle_flag_colormixing ' +\n      'phy_particle_group_flag_solid phy_particle_group_flag_rigid ' +\n      'phy_particle_data_flag_typeflags phy_particle_data_flag_position ' +\n      'phy_particle_data_flag_velocity phy_particle_data_flag_colour ' +\n      'phy_particle_data_flag_color phy_particle_data_flag_category  ' +\n      'achievement_our_info achievement_friends_info ' +\n      'achievement_leaderboard_info achievement_achievement_info ' +\n      'achievement_filter_all_players achievement_filter_friends_only ' +\n      'achievement_filter_favorites_only ' +\n      'achievement_type_achievement_challenge ' +\n      'achievement_type_score_challenge achievement_pic_loaded  ' +\n      'achievement_show_ui achievement_show_profile ' +\n      'achievement_show_leaderboard achievement_show_achievement ' +\n      'achievement_show_bank achievement_show_friend_picker ' +\n      'achievement_show_purchase_prompt network_socket_tcp ' +\n      'network_socket_udp network_socket_bluetooth network_type_connect ' +\n      'network_type_disconnect network_type_data ' +\n      'network_type_non_blocking_connect network_config_connect_timeout ' +\n      'network_config_use_non_blocking_socket ' +\n      'network_config_enable_reliable_udp ' +\n      'network_config_disable_reliable_udp buffer_fixed buffer_grow ' +\n      'buffer_wrap buffer_fast buffer_vbuffer buffer_network buffer_u8 ' +\n      'buffer_s8 buffer_u16 buffer_s16 buffer_u32 buffer_s32 buffer_u64 ' +\n      'buffer_f16 buffer_f32 buffer_f64 buffer_bool buffer_text ' +\n      'buffer_string buffer_surface_copy buffer_seek_start ' +\n      'buffer_seek_relative buffer_seek_end ' +\n      'buffer_generalerror buffer_outofspace buffer_outofbounds ' +\n      'buffer_invalidtype  text_type button_type input_type ANSI_CHARSET ' +\n      'DEFAULT_CHARSET EASTEUROPE_CHARSET RUSSIAN_CHARSET SYMBOL_CHARSET ' +\n      'SHIFTJIS_CHARSET HANGEUL_CHARSET GB2312_CHARSET CHINESEBIG5_CHARSET ' +\n      'JOHAB_CHARSET HEBREW_CHARSET ARABIC_CHARSET GREEK_CHARSET ' +\n      'TURKISH_CHARSET VIETNAMESE_CHARSET THAI_CHARSET MAC_CHARSET ' +\n      'BALTIC_CHARSET OEM_CHARSET  gp_face1 gp_face2 gp_face3 gp_face4 ' +\n      'gp_shoulderl gp_shoulderr gp_shoulderlb gp_shoulderrb gp_select ' +\n      'gp_start gp_stickl gp_stickr gp_padu gp_padd gp_padl gp_padr ' +\n      'gp_axislh gp_axislv gp_axisrh gp_axisrv ov_friends ov_community ' +\n      'ov_players ov_settings ov_gamegroup ov_achievements lb_sort_none ' +\n      'lb_sort_ascending lb_sort_descending lb_disp_none lb_disp_numeric ' +\n      'lb_disp_time_sec lb_disp_time_ms ugc_result_success ' +\n      'ugc_filetype_community ugc_filetype_microtrans ugc_visibility_public ' +\n      'ugc_visibility_friends_only ugc_visibility_private ' +\n      'ugc_query_RankedByVote ugc_query_RankedByPublicationDate ' +\n      'ugc_query_AcceptedForGameRankedByAcceptanceDate ' +\n      'ugc_query_RankedByTrend ' +\n      'ugc_query_FavoritedByFriendsRankedByPublicationDate ' +\n      'ugc_query_CreatedByFriendsRankedByPublicationDate ' +\n      'ugc_query_RankedByNumTimesReported ' +\n      'ugc_query_CreatedByFollowedUsersRankedByPublicationDate ' +\n      'ugc_query_NotYetRated ugc_query_RankedByTotalVotesAsc ' +\n      'ugc_query_RankedByVotesUp ugc_query_RankedByTextSearch ' +\n      'ugc_sortorder_CreationOrderDesc ugc_sortorder_CreationOrderAsc ' +\n      'ugc_sortorder_TitleAsc ugc_sortorder_LastUpdatedDesc ' +\n      'ugc_sortorder_SubscriptionDateDesc ugc_sortorder_VoteScoreDesc ' +\n      'ugc_sortorder_ForModeration ugc_list_Published ugc_list_VotedOn ' +\n      'ugc_list_VotedUp ugc_list_VotedDown ugc_list_WillVoteLater ' +\n      'ugc_list_Favorited ugc_list_Subscribed ugc_list_UsedOrPlayed ' +\n      'ugc_list_Followed ugc_match_Items ugc_match_Items_Mtx ' +\n      'ugc_match_Items_ReadyToUse ugc_match_Collections ugc_match_Artwork ' +\n      'ugc_match_Videos ugc_match_Screenshots ugc_match_AllGuides ' +\n      'ugc_match_WebGuides ugc_match_IntegratedGuides ' +\n      'ugc_match_UsableInGame ugc_match_ControllerBindings  ' +\n      'vertex_usage_position vertex_usage_colour vertex_usage_color ' +\n      'vertex_usage_normal vertex_usage_texcoord vertex_usage_textcoord ' +\n      'vertex_usage_blendweight vertex_usage_blendindices ' +\n      'vertex_usage_psize vertex_usage_tangent vertex_usage_binormal ' +\n      'vertex_usage_fog vertex_usage_depth vertex_usage_sample ' +\n      'vertex_type_float1 vertex_type_float2 vertex_type_float3 ' +\n      'vertex_type_float4 vertex_type_colour vertex_type_color ' +\n      'vertex_type_ubyte4 layerelementtype_undefined ' +\n      'layerelementtype_background layerelementtype_instance ' +\n      'layerelementtype_oldtilemap layerelementtype_sprite ' +\n      'layerelementtype_tilemap layerelementtype_particlesystem ' +\n      'layerelementtype_tile tile_rotate tile_flip tile_mirror ' +\n      'tile_index_mask kbv_type_default kbv_type_ascii kbv_type_url ' +\n      'kbv_type_email kbv_type_numbers kbv_type_phone kbv_type_phone_name ' +\n      'kbv_returnkey_default kbv_returnkey_go kbv_returnkey_google ' +\n      'kbv_returnkey_join kbv_returnkey_next kbv_returnkey_route ' +\n      'kbv_returnkey_search kbv_returnkey_send kbv_returnkey_yahoo ' +\n      'kbv_returnkey_done kbv_returnkey_continue kbv_returnkey_emergency ' +\n      'kbv_autocapitalize_none kbv_autocapitalize_words ' +\n      'kbv_autocapitalize_sentences kbv_autocapitalize_characters',\n    symbol: 'argument_relative argument argument0 argument1 argument2 ' +\n      'argument3 argument4 argument5 argument6 argument7 argument8 ' +\n      'argument9 argument10 argument11 argument12 argument13 argument14 ' +\n      'argument15 argument_count x y xprevious yprevious xstart ystart ' +\n      'hspeed vspeed direction speed friction gravity gravity_direction ' +\n      'path_index path_position path_positionprevious path_speed ' +\n      'path_scale path_orientation path_endaction object_index id solid ' +\n      'persistent mask_index instance_count instance_id room_speed fps ' +\n      'fps_real current_time current_year current_month current_day ' +\n      'current_weekday current_hour current_minute current_second alarm ' +\n      'timeline_index timeline_position timeline_speed timeline_running ' +\n      'timeline_loop room room_first room_last room_width room_height ' +\n      'room_caption room_persistent score lives health show_score ' +\n      'show_lives show_health caption_score caption_lives caption_health ' +\n      'event_type event_number event_object event_action ' +\n      'application_surface gamemaker_pro gamemaker_registered ' +\n      'gamemaker_version error_occurred error_last debug_mode ' +\n      'keyboard_key keyboard_lastkey keyboard_lastchar keyboard_string ' +\n      'mouse_x mouse_y mouse_button mouse_lastbutton cursor_sprite ' +\n      'visible sprite_index sprite_width sprite_height sprite_xoffset ' +\n      'sprite_yoffset image_number image_index image_speed depth ' +\n      'image_xscale image_yscale image_angle image_alpha image_blend ' +\n      'bbox_left bbox_right bbox_top bbox_bottom layer background_colour  ' +\n      'background_showcolour background_color background_showcolor ' +\n      'view_enabled view_current view_visible view_xview view_yview ' +\n      'view_wview view_hview view_xport view_yport view_wport view_hport ' +\n      'view_angle view_hborder view_vborder view_hspeed view_vspeed ' +\n      'view_object view_surface_id view_camera game_id game_display_name ' +\n      'game_project_name game_save_id working_directory temp_directory ' +\n      'program_directory browser_width browser_height os_type os_device ' +\n      'os_browser os_version display_aa async_load delta_time ' +\n      'webgl_enabled event_data iap_data phy_rotation phy_position_x ' +\n      'phy_position_y phy_angular_velocity phy_linear_velocity_x ' +\n      'phy_linear_velocity_y phy_speed_x phy_speed_y phy_speed ' +\n      'phy_angular_damping phy_linear_damping phy_bullet ' +\n      'phy_fixed_rotation phy_active phy_mass phy_inertia phy_com_x ' +\n      'phy_com_y phy_dynamic phy_kinematic phy_sleeping ' +\n      'phy_collision_points phy_collision_x phy_collision_y ' +\n      'phy_col_normal_x phy_col_normal_y phy_position_xprevious ' +\n      'phy_position_yprevious'\n  };\n\n  return {\n    aliases: ['gml', 'GML'],\n    case_insensitive: false, // language is case-insensitive\n    keywords: GML_KEYWORDS,\n\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  function orReValues(ops){\n    return ops\n    .map(function(op) {\n      return op\n        .split('')\n        .map(function(char) {\n          return '\\\\' + char;\n        })\n        .join('');\n    })\n    .join('|');\n  }\n\n  var RE_IDENT = '~?[a-z$_][0-9a-zA-Z$_]*';\n  var RE_MODULE_IDENT = '`?[A-Z$_][0-9a-zA-Z$_]*';\n\n  var RE_PARAM_TYPEPARAM = '\\'?[a-z$_][0-9a-z$_]*';\n  var RE_PARAM_TYPE = '\\s*:\\s*[a-z$_][0-9a-z$_]*(\\(\\s*(' + RE_PARAM_TYPEPARAM + '\\s*(,' + RE_PARAM_TYPEPARAM + ')*)?\\s*\\))?';\n  var RE_PARAM = RE_IDENT + '(' + RE_PARAM_TYPE + ')?(' + RE_PARAM_TYPE + ')?';\n  var RE_OPERATOR = \"(\" + orReValues(['||', '&&', '++', '**', '+.', '*', '/', '*.', '/.', '...', '|>']) + \"|==|===)\";\n  var RE_OPERATOR_SPACED = \"\\\\s+\" + RE_OPERATOR + \"\\\\s+\";\n\n  var KEYWORDS = {\n    keyword:\n      'and as asr assert begin class constraint do done downto else end exception external' +\n      'for fun function functor if in include inherit initializer' +\n      'land lazy let lor lsl lsr lxor match method mod module mutable new nonrec' +\n      'object of open or private rec sig struct then to try type val virtual when while with',\n    built_in:\n      'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 ref string unit ',\n    literal:\n      'true false'\n  };\n\n  var RE_NUMBER = '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n    '0[oO][0-7_]+[Lln]?|' +\n    '0[bB][01_]+[Lln]?|' +\n    '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)';\n\n  var NUMBER_MODE = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        begin: RE_NUMBER\n      },\n      {\n        begin: '\\\\(\\\\-' + RE_NUMBER + '\\\\)'\n      }\n    ]\n  };\n\n  var OPERATOR_MODE = {\n    className: 'operator',\n    relevance: 0,\n    begin: RE_OPERATOR\n  };\n  var LIST_CONTENTS_MODES = [\n    {\n      className: 'identifier',\n      relevance: 0,\n      begin: RE_IDENT\n    },\n    OPERATOR_MODE,\n    NUMBER_MODE\n  ];\n\n  var MODULE_ACCESS_CONTENTS = [\n    hljs.QUOTE_STRING_MODE,\n    OPERATOR_MODE,\n    {\n      className: 'module',\n      begin: \"\\\\b\" + RE_MODULE_IDENT, returnBegin: true,\n      end: \"\\.\",\n      contains: [\n        {\n          className: 'identifier',\n          begin: RE_MODULE_IDENT,\n          relevance: 0\n        }\n      ]\n    }\n  ];\n\n  var PARAMS_CONTENTS = [\n    {\n      className: 'module',\n      begin: \"\\\\b\" + RE_MODULE_IDENT, returnBegin: true,\n      end: \"\\.\",\n      relevance: 0,\n      contains: [\n        {\n          className: 'identifier',\n          begin: RE_MODULE_IDENT,\n          relevance: 0\n        }\n      ]\n    }\n  ];\n\n  var PARAMS_MODE = {\n    begin: RE_IDENT,\n    end: '(,|\\\\n|\\\\))',\n    relevance: 0,\n    contains: [\n      OPERATOR_MODE,\n      {\n        className: 'typing',\n        begin: ':',\n        end: '(,|\\\\n)',\n        returnBegin: true,\n        relevance: 0,\n        contains: PARAMS_CONTENTS\n      }\n    ]\n  };\n\n  var FUNCTION_BLOCK_MODE = {\n    className: 'function',\n    relevance: 0,\n    keywords: KEYWORDS,\n    variants: [\n      {\n        begin: '\\\\s(\\\\(\\\\.?.*?\\\\)|' + RE_IDENT + ')\\\\s*=>',\n        end: '\\\\s*=>',\n        returnBegin: true,\n        relevance: 0,\n        contains: [\n          {\n            className: 'params',\n            variants: [\n              {\n                begin: RE_IDENT\n              },\n              {\n                begin: RE_PARAM\n              },\n              {\n                begin: /\\(\\s*\\)/,\n              }\n            ]\n          }\n        ]\n      },\n      {\n        begin: '\\\\s\\\\(\\\\.?[^;\\\\|]*\\\\)\\\\s*=>',\n        end: '\\\\s=>',\n        returnBegin: true,\n        relevance: 0,\n        contains: [\n          {\n            className: 'params',\n            relevance: 0,\n            variants: [\n              PARAMS_MODE\n            ]\n          }\n        ]\n      },\n      {\n        begin: '\\\\(\\\\.\\\\s' + RE_IDENT + '\\\\)\\\\s*=>'\n      }\n    ]\n  };\n  MODULE_ACCESS_CONTENTS.push(FUNCTION_BLOCK_MODE);\n\n  var CONSTRUCTOR_MODE = {\n    className: 'constructor',\n    begin: RE_MODULE_IDENT + '\\\\(',\n    end: '\\\\)',\n    illegal: '\\\\n',\n    keywords: KEYWORDS,\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      OPERATOR_MODE,\n      {\n        className: 'params',\n        begin: '\\\\b' + RE_IDENT\n      }\n    ]\n  };\n\n  var PATTERN_MATCH_BLOCK_MODE = {\n    className: 'pattern-match',\n    begin: '\\\\|',\n    returnBegin: true,\n    keywords: KEYWORDS,\n    end: '=>',\n    relevance: 0,\n    contains: [\n      CONSTRUCTOR_MODE,\n      OPERATOR_MODE,\n      {\n        relevance: 0,\n        className: 'constructor',\n        begin: RE_MODULE_IDENT\n      }\n    ]\n  };\n\n  var MODULE_ACCESS_MODE = {\n    className: 'module-access',\n    keywords: KEYWORDS,\n    returnBegin: true,\n    variants: [\n      {\n        begin: \"\\\\b(\" + RE_MODULE_IDENT + \"\\\\.)+\" + RE_IDENT\n      },\n      {\n        begin: \"\\\\b(\" + RE_MODULE_IDENT + \"\\\\.)+\\\\(\",\n        end: \"\\\\)\",\n        returnBegin: true,\n        contains: [\n          FUNCTION_BLOCK_MODE,\n          {\n            begin: '\\\\(',\n            end: '\\\\)',\n            skip: true\n          }\n        ].concat(MODULE_ACCESS_CONTENTS)\n      },\n      {\n        begin: \"\\\\b(\" + RE_MODULE_IDENT + \"\\\\.)+{\",\n        end: \"}\"\n      }\n    ],\n    contains: MODULE_ACCESS_CONTENTS\n  };\n\n  PARAMS_CONTENTS.push(MODULE_ACCESS_MODE);\n\n  return {\n    aliases: ['re'],\n    keywords: KEYWORDS,\n    illegal: '(:\\\\-|:=|\\\\${|\\\\+=)',\n    contains: [\n      hljs.COMMENT('/\\\\*', '\\\\*/', { illegal: '^(\\\\#,\\\\/\\\\/)' }),\n      {\n        className: 'character',\n        begin: '\\'(\\\\\\\\[^\\']+|[^\\'])\\'',\n        illegal: '\\\\n',\n        relevance: 0\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'literal',\n        begin: '\\\\(\\\\)',\n        relevance: 0\n      },\n      {\n        className: 'literal',\n        begin: '\\\\[\\\\|',\n        end: '\\\\|\\\\]',\n        relevance:  0,\n        contains: LIST_CONTENTS_MODES\n      },\n      {\n        className: 'literal',\n        begin: '\\\\[',\n        end: '\\\\]',\n        relevance: 0,\n        contains: LIST_CONTENTS_MODES\n      },\n      CONSTRUCTOR_MODE,\n      {\n        className: 'operator',\n        begin: RE_OPERATOR_SPACED,\n        illegal: '\\\\-\\\\->',\n        relevance: 0\n      },\n      NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      PATTERN_MATCH_BLOCK_MODE,\n      FUNCTION_BLOCK_MODE,\n      {\n        className: 'module-def',\n        begin: \"\\\\bmodule\\\\s+\" + RE_IDENT + \"\\\\s+\" + RE_MODULE_IDENT + \"\\\\s+=\\\\s+{\",\n        end: \"}\",\n        returnBegin: true,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n          {\n            className: 'module',\n            relevance: 0,\n            begin: RE_MODULE_IDENT\n          },\n          {\n            begin: '{',\n            end: '}',\n            skip: true\n          }\n        ].concat(MODULE_ACCESS_CONTENTS)\n      },\n      MODULE_ACCESS_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n\n  var COMMON_CONTAINS = [\n    hljs.C_NUMBER_MODE,\n    {\n      className: 'string',\n      begin: '\\'|\\\"', end: '\\'|\\\"',\n      contains: [hljs.BACKSLASH_ESCAPE, {begin: '\\'\\''}]\n    }\n  ];\n\n  return {\n    aliases: ['sci'],\n    lexemes: /%?\\w+/,\n    keywords: {\n      keyword: 'abort break case clear catch continue do elseif else endfunction end for function '+\n        'global if pause return resume select try then while',\n      literal:\n        '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',\n      built_in: // Scilab has more than 2000 functions. Just list the most commons\n       'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '+\n       'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '+\n       'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '+\n       'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '+\n       'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '+\n       'type typename warning zeros matrix'\n    },\n    illegal: '(\"|#|/\\\\*|\\\\s+/\\\\w+)',\n    contains: [\n      {\n        className: 'function',\n        beginKeywords: 'function', end: '$',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            className: 'params',\n            begin: '\\\\(', end: '\\\\)'\n          }\n        ]\n      },\n      {\n        begin: '[a-zA-Z_][a-zA-Z_0-9]*(\\'+[\\\\.\\']*|[\\\\.\\']+)', end: '',\n        relevance: 0\n      },\n      {\n        begin: '\\\\[', end: '\\\\]\\'*[\\\\.\\']*',\n        relevance: 0,\n        contains: COMMON_CONTAINS\n      },\n      hljs.COMMENT('//', '$')\n    ].concat(COMMON_CONTAINS)\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['cmake.in'],\n    case_insensitive: true,\n    keywords: {\n      keyword:\n        // scripting commands\n        'break cmake_host_system_information cmake_minimum_required cmake_parse_arguments ' +\n        'cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro ' +\n        'endwhile execute_process file find_file find_library find_package find_path ' +\n        'find_program foreach function get_cmake_property get_directory_property ' +\n        'get_filename_component get_property if include include_guard list macro ' +\n        'mark_as_advanced math message option return separate_arguments ' +\n        'set_directory_properties set_property set site_name string unset variable_watch while ' +\n        // project commands\n        'add_compile_definitions add_compile_options add_custom_command add_custom_target ' +\n        'add_definitions add_dependencies add_executable add_library add_link_options ' +\n        'add_subdirectory add_test aux_source_directory build_command create_test_sourcelist ' +\n        'define_property enable_language enable_testing export fltk_wrap_ui ' +\n        'get_source_file_property get_target_property get_test_property include_directories ' +\n        'include_external_msproject include_regular_expression install link_directories ' +\n        'link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions ' +\n        'set_source_files_properties set_target_properties set_tests_properties source_group ' +\n        'target_compile_definitions target_compile_features target_compile_options ' +\n        'target_include_directories target_link_directories target_link_libraries ' +\n        'target_link_options target_sources try_compile try_run ' +\n        // CTest commands\n        'ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ' +\n        'ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ' +\n        'ctest_test ctest_update ctest_upload ' +\n        // deprecated commands\n        'build_name exec_program export_library_dependencies install_files install_programs ' +\n        'install_targets load_command make_directory output_required_files remove ' +\n        'subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file ' +\n        'qt5_use_modules qt5_use_package qt5_wrap_cpp ' +\n        // core keywords\n        'on off true false and or not command policy target test exists is_newer_than ' +\n        'is_directory is_symlink is_absolute matches less greater equal less_equal ' +\n        'greater_equal strless strgreater strequal strless_equal strgreater_equal version_less ' +\n        'version_greater version_equal version_less_equal version_greater_equal in_list defined'\n    },\n    contains: [\n      {\n        className: 'variable',\n        begin: '\\\\${', end: '}'\n      },\n      hljs.HASH_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.NUMBER_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var OPENING_LONG_BRACKET = '\\\\[=*\\\\[';\n  var CLOSING_LONG_BRACKET = '\\\\]=*\\\\]';\n  var LONG_BRACKETS = {\n    begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,\n    contains: ['self']\n  };\n  var COMMENTS = [\n    hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),\n    hljs.COMMENT(\n      '--' + OPENING_LONG_BRACKET,\n      CLOSING_LONG_BRACKET,\n      {\n        contains: [LONG_BRACKETS],\n        relevance: 10\n      }\n    )\n  ];\n  return {\n    lexemes: hljs.UNDERSCORE_IDENT_RE,\n    keywords: {\n      literal: \"true false nil\",\n      keyword: \"and break do else elseif end for goto if in local not or repeat return then until while\",\n      built_in:\n        //Metatags and globals:\n        '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len ' +\n        '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert ' +\n        //Standard methods and properties:\n        'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring' +\n        'module next pairs pcall print rawequal rawget rawset require select setfenv' +\n        'setmetatable tonumber tostring type unpack xpcall arg self' +\n        //Library methods and properties (one line per library):\n        'coroutine resume yield status wrap create running debug getupvalue ' +\n        'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv ' +\n        'io lines write close flush open output type read stderr stdin input stdout popen tmpfile ' +\n        'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan ' +\n        'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall ' +\n        'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower ' +\n        'table setn insert getn foreachi maxn foreach concat sort remove'\n    },\n    contains: COMMENTS.concat([\n      {\n        className: 'function',\n        beginKeywords: 'function', end: '\\\\)',\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\\\w*\\\\.)*([_a-zA-Z]\\\\w*:)?[_a-zA-Z]\\\\w*'}),\n          {\n            className: 'params',\n            begin: '\\\\(', endsWithParent: true,\n            contains: COMMENTS\n          }\n        ].concat(COMMENTS)\n      },\n      hljs.C_NUMBER_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,\n        contains: [LONG_BRACKETS],\n        relevance: 5\n      }\n    ])\n  };\n};","module.exports = function(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    aliases: ['ml'],\n    keywords: {\n      keyword:\n        'and as assert asr begin class constraint do done downto else end ' +\n        'exception external for fun function functor if in include ' +\n        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +\n        'mod module mutable new object of open! open or private rec sig struct ' +\n        'then to try type val! val virtual when while with ' +\n        /* camlp4 */\n        'parser value',\n      built_in:\n        /* built-in types */\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n        /* (some) types in Pervasives */\n        'in_channel out_channel ref',\n      literal:\n        'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [\n      {\n        className: 'literal',\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*', relevance: 0\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /[-=]>/ // relevance booster\n      }\n    ]\n  }\n};","module.exports = function(hljs) {\n  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';\n  var RULE = {\n    begin: /[A-Z\\_\\.\\-]+\\s*:/, returnBegin: true, end: ';', endsWithParent: true,\n    contains: [\n      {\n        className: 'attribute',\n        begin: /\\S/, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, excludeEnd: true,\n          contains: [\n            {\n              begin: /[\\w-]+\\(/, returnBegin: true,\n              contains: [\n                {\n                  className: 'built_in',\n                  begin: /[\\w-]+/\n                },\n                {\n                  begin: /\\(/, end: /\\)/,\n                  contains: [\n                    hljs.APOS_STRING_MODE,\n                    hljs.QUOTE_STRING_MODE\n                  ]\n                }\n              ]\n            },\n            hljs.CSS_NUMBER_MODE,\n            hljs.QUOTE_STRING_MODE,\n            hljs.APOS_STRING_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n              className: 'number', begin: '#[0-9A-Fa-f]+'\n            },\n            {\n              className: 'meta', begin: '!important'\n            }\n          ]\n        }\n      }\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    illegal: /[=\\/|'\\$]/,\n    contains: [\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'selector-id', begin: /#[A-Za-z0-9_-]+/\n      },\n      {\n        className: 'selector-class', begin: /\\.[A-Za-z0-9_-]+/\n      },\n      {\n        className: 'selector-attr',\n        begin: /\\[/, end: /\\]/,\n        illegal: '$'\n      },\n      {\n        className: 'selector-pseudo',\n        begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/\n      },\n      {\n        begin: '@(font-face|page)',\n        lexemes: '[a-z-]+',\n        keywords: 'font-face page'\n      },\n      {\n        begin: '@', end: '[{;]', // at_rule eating first \"{\" is a good thing\n                                 // because it doesn’t let it to be parsed as\n                                 // a rule set but instead drops parser into\n                                 // the default mode which is how it should be.\n        illegal: /:/, // break on Less variables @var: ...\n        contains: [\n          {\n            className: 'keyword',\n            begin: /\\w+/\n          },\n          {\n            begin: /\\s/, endsWithParent: true, excludeEnd: true,\n            relevance: 0,\n            contains: [\n              hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,\n              hljs.CSS_NUMBER_MODE\n            ]\n          }\n        ]\n      },\n      {\n        className: 'selector-tag', begin: IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: '{', end: '}',\n        illegal: /\\S/,\n        contains: [\n          hljs.C_BLOCK_COMMENT_MODE,\n          RULE,\n        ]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['mma'],\n    lexemes: '(\\\\$|\\\\b)' + hljs.IDENT_RE + '\\\\b',\n    keywords: 'AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis ' +\n      'BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering ' +\n      'C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ' +\n      'ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition ' +\n      'D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform ' +\n      'DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions ' +\n      'E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution ' +\n      'FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve ' +\n      'FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance ' +\n      'GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion ' +\n      'GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution ' +\n      'HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData ' +\n      'I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction ' +\n      'InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess ' +\n      'JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition ' +\n      'K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter ' +\n      'Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions ' +\n      'LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy ' +\n      'MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution ' +\n      'N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator ' +\n      'NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot ' +\n      'O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues ' +\n      'PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList ' +\n      'PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions ' +\n      'QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder ' +\n      'RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity ' +\n      'SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity ' +\n      'SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders ' +\n      'SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub ' +\n      'Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine ' +\n      'Transparent ' +\n      'UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd ' +\n      'V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution ' +\n      'WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian ' +\n      'XMLElement XMLObject Xnor Xor ' +\n      'Yellow YuleDissimilarity ' +\n      'ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform ' +\n      '$Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber',\n    contains: [\n      {\n        className: 'comment',\n        begin: /\\(\\*/, end: /\\*\\)/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        begin: /\\{/, end: /\\}/,\n        illegal: /:/\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n    var KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop ' +\n        'Default Dim Do Else ElseIf EndFunc EndIf EndSelect ' +\n        'EndSwitch EndWith Enum Exit ExitLoop For Func ' +\n        'Global If In Local Next ReDim Return Select Static ' +\n        'Step Switch Then To Until Volatile WEnd While With',\n\n        LITERAL = 'True False And Null Not Or',\n\n        BUILT_IN =\n          'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait',\n\n        COMMENT = {\n            variants: [\n              hljs.COMMENT(';', '$', {relevance: 0}),\n              hljs.COMMENT('#cs', '#ce'),\n              hljs.COMMENT('#comments-start', '#comments-end')\n            ]\n        },\n\n        VARIABLE = {\n            begin: '\\\\$[A-z0-9_]+'\n        },\n\n        STRING = {\n            className: 'string',\n            variants: [{\n                begin: /\"/,\n                end: /\"/,\n                contains: [{\n                    begin: /\"\"/,\n                    relevance: 0\n                }]\n            }, {\n                begin: /'/,\n                end: /'/,\n                contains: [{\n                    begin: /''/,\n                    relevance: 0\n                }]\n            }]\n        },\n\n        NUMBER = {\n            variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n        },\n\n        PREPROCESSOR = {\n            className: 'meta',\n            begin: '#',\n            end: '$',\n            keywords: {'meta-keyword': 'comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin'},\n            contains: [{\n                    begin: /\\\\\\n/,\n                    relevance: 0\n                }, {\n                    beginKeywords: 'include',\n                    keywords: {'meta-keyword': 'include'},\n                    end: '$',\n                    contains: [\n                        STRING, {\n                            className: 'meta-string',\n                            variants: [{\n                                begin: '<',\n                                end: '>'\n                            }, {\n                                begin: /\"/,\n                                end: /\"/,\n                                contains: [{\n                                    begin: /\"\"/,\n                                    relevance: 0\n                                }]\n                            }, {\n                                begin: /'/,\n                                end: /'/,\n                                contains: [{\n                                    begin: /''/,\n                                    relevance: 0\n                                }]\n                            }]\n                        }\n                    ]\n                },\n                STRING,\n                COMMENT\n            ]\n        },\n\n        CONSTANT = {\n            className: 'symbol',\n            // begin: '@',\n            // end: '$',\n            // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',\n            // relevance: 5\n            begin: '@[A-z0-9_]+'\n        },\n\n        FUNCTION = {\n            className: 'function',\n            beginKeywords: 'Func',\n            end: '$',\n            illegal: '\\\\$|\\\\[|%',\n            contains: [\n                hljs.UNDERSCORE_TITLE_MODE, {\n                    className: 'params',\n                    begin: '\\\\(',\n                    end: '\\\\)',\n                    contains: [\n                        VARIABLE,\n                        STRING,\n                        NUMBER\n                    ]\n                }\n            ]\n        };\n\n    return {\n        case_insensitive: true,\n        illegal: /\\/\\*/,\n        keywords: {\n            keyword: KEYWORDS,\n            built_in: BUILT_IN,\n            literal: LITERAL\n        },\n        contains: [\n            COMMENT,\n            VARIABLE,\n            STRING,\n            NUMBER,\n            PREPROCESSOR,\n            CONSTANT,\n            FUNCTION\n        ]\n    }\n};","module.exports = function(hljs) {\n  var NUMBER = {className: 'number', begin: '[\\\\$%]\\\\d+'};\n  return {\n    aliases: ['apacheconf'],\n    case_insensitive: true,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      {className: 'section', begin: '</?', end: '>'},\n      {\n        className: 'attribute',\n        begin: /\\w+/,\n        relevance: 0,\n        // keywords aren’t needed for highlighting per se, they only boost relevance\n        // for a very generally defined mode (starts with a word, ends with line-end\n        keywords: {\n          nomarkup:\n            'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' +\n            'sethandler errordocument loadmodule options header listen serverroot ' +\n            'servername'\n        },\n        starts: {\n          end: /$/,\n          relevance: 0,\n          keywords: {\n            literal: 'on off all'\n          },\n          contains: [\n            {\n              className: 'meta',\n              begin: '\\\\s\\\\[', end: '\\\\]$'\n            },\n            {\n              className: 'variable',\n              begin: '[\\\\$%]\\\\{', end: '\\\\}',\n              contains: ['self', NUMBER]\n            },\n            NUMBER,\n            hljs.QUOTE_STRING_MODE\n          ]\n        }\n      }\n    ],\n    illegal: /\\S/\n  };\n};","module.exports = function(hljs) {\n  var VAR = {\n    className: 'variable',\n    variants: [\n      {begin: /\\$[\\w\\d#@][\\w\\d_]*/},\n      {begin: /\\$\\{(.*?)}/}\n    ]\n  };\n  var QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      {\n        className: 'variable',\n        begin: /\\$\\(/, end: /\\)/,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n  var APOS_STRING = {\n    className: 'string',\n    begin: /'/, end: /'/\n  };\n\n  return {\n    aliases: ['sh', 'zsh'],\n    lexemes: /\\b-?[a-z\\._]+\\b/,\n    keywords: {\n      keyword:\n        'if then else elif fi for while in do done case esac function',\n      literal:\n        'true false',\n      built_in:\n        // Shell built-ins\n        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +\n        'trap umask unset ' +\n        // Bash built-ins\n        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +\n        'read readarray source type typeset ulimit unalias ' +\n        // Shell modifiers\n        'set shopt ' +\n        // Zsh built-ins\n        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +\n        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +\n        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +\n        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +\n        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +\n        'zpty zregexparse zsocket zstyle ztcp',\n      _:\n        '-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster\n    },\n    contains: [\n      {\n        className: 'meta',\n        begin: /^#![^\\n]+sh\\s*$/,\n        relevance: 10\n      },\n      {\n        className: 'function',\n        begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n        returnBegin: true,\n        contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\\w[\\w\\d_]*/})],\n        relevance: 0\n      },\n      hljs.HASH_COMMENT_MODE,\n      QUOTE_STRING,\n      APOS_STRING,\n      VAR\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        // Value types\n        'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 ' +\n        'uint16 uint32 uint64 float double bool struct enum string void ' +\n        // Reference types\n        'weak unowned owned ' +\n        // Modifiers\n        'async signal static abstract interface override virtual delegate ' +\n        // Control Structures\n        'if while do for foreach else switch case break default return try catch ' +\n        // Visibility\n        'public private protected internal ' +\n        // Other\n        'using new this get set const stdout stdin stderr var',\n      built_in:\n        'DBus GLib CCode Gee Object Gtk Posix',\n      literal:\n        'false true null'\n    },\n    contains: [\n      {\n        className: 'class',\n        beginKeywords: 'class interface namespace', end: '{', excludeEnd: true,\n        illegal: '[^,:\\\\n\\\\s\\\\.]',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'string',\n        begin: '\"\"\"', end: '\"\"\"',\n        relevance: 5\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'meta',\n        begin: '^#', end: '$',\n        relevance: 2\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    subLanguage: 'xml',\n    contains: [\n      {\n        begin: '<%', end: '%>',\n        subLanguage: 'vbscript'\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var PARAMS = {\n    className: 'params',\n    begin: '\\\\(', end: '\\\\)'\n  };\n\n  var FUNCTION_NAMES = 'attribute block constant cycle date dump include ' +\n                  'max min parent random range source template_from_string';\n\n  var FUNCTIONS = {\n    beginKeywords: FUNCTION_NAMES,\n    keywords: {name: FUNCTION_NAMES},\n    relevance: 0,\n    contains: [\n      PARAMS\n    ]\n  };\n\n  var FILTER = {\n    begin: /\\|[A-Za-z_]+:?/,\n    keywords:\n      'abs batch capitalize convert_encoding date date_modify default ' +\n      'escape first format join json_encode keys last length lower ' +\n      'merge nl2br number_format raw replace reverse round slice sort split ' +\n      'striptags title trim upper url_encode',\n    contains: [\n      FUNCTIONS\n    ]\n  };\n\n  var TAGS = 'autoescape block do embed extends filter flush for ' +\n    'if import include macro sandbox set spaceless use verbatim';\n\n  TAGS = TAGS + ' ' + TAGS.split(' ').map(function(t){return 'end' + t}).join(' ');\n\n  return {\n    aliases: ['craftcms'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      hljs.COMMENT(/\\{#/, /#}/),\n      {\n        className: 'template-tag',\n        begin: /\\{%/, end: /%}/,\n        contains: [\n          {\n            className: 'name',\n            begin: /\\w+/,\n            keywords: TAGS,\n            starts: {\n              endsWithParent: true,\n              contains: [FILTER, FUNCTIONS],\n              relevance: 0\n            }\n          }\n        ]\n      },\n      {\n        className: 'template-variable',\n        begin: /\\{\\{/, end: /}}/,\n        contains: ['self', FILTER, FUNCTIONS]\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    keywords: {\n      built_in:\n        'spawn spawn_link self',\n      keyword:\n        'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if ' +\n        'let not of or orelse|10 query receive rem try when xor'\n    },\n    contains: [\n      {\n        className: 'meta', begin: '^[0-9]+> ',\n        relevance: 10\n      },\n      hljs.COMMENT('%', '$'),\n      {\n        className: 'number',\n        begin: '\\\\b(\\\\d+#[a-fA-F0-9]+|\\\\d+(\\\\.\\\\d+)?([eE][-+]?\\\\d+)?)',\n        relevance: 0\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        begin: '\\\\?(::)?([A-Z]\\\\w*(::)?)+'\n      },\n      {\n        begin: '->'\n      },\n      {\n        begin: 'ok'\n      },\n      {\n        begin: '!'\n      },\n      {\n        begin: '(\\\\b[a-z\\'][a-zA-Z0-9_\\']*:[a-z\\'][a-zA-Z0-9_\\']*)|(\\\\b[a-z\\'][a-zA-Z0-9_\\']*)',\n        relevance: 0\n      },\n      {\n        begin: '[A-Z][a-zA-Z0-9_\\']*',\n        relevance: 0\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  return {\n    case_insensitive: true,\n    contains: [\n      {\n        beginKeywords:\n          'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',\n        end: /;/, endsWithParent: true,\n        keywords: {\n          // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html\n          keyword:\n            'all alter analyze and any array as asc begin between binary boolean break bucket build by call ' +\n            'case cast cluster collate collection commit connect continue correlate cover create database ' +\n            'dataset datastore declare decrement delete derived desc describe distinct do drop each element ' +\n            'else end every except exclude execute exists explain fetch first flatten for force from ' +\n            'function grant group gsi having if ignore ilike in include increment index infer inline inner ' +\n            'insert intersect into is join key keys keyspace known last left let letting like limit lsm map ' +\n            'mapping matched materialized merge minus namespace nest not number object offset on ' +\n            'option or order outer over parse partition password path pool prepare primary private privilege ' +\n            'procedure public raw realm reduce rename return returning revoke right role rollback satisfies ' +\n            'schema select self semi set show some start statistics string system then to transaction trigger ' +\n            'truncate under union unique unknown unnest unset update upsert use user using validate value ' +\n            'valued values via view when where while with within work xor',\n          // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html\n          literal:\n            'true false null missing|5',\n          // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html\n          built_in:\n            'array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length ' +\n            'array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace ' +\n            'array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull ' +\n            'missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis ' +\n            'date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str ' +\n            'duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str ' +\n            'str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode ' +\n            'base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random ' +\n            'round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values ' +\n            'object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position ' +\n            'regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper ' +\n            'isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring'\n        },\n        contains: [\n          {\n            className: 'string',\n            begin: '\\'', end: '\\'',\n            contains: [hljs.BACKSLASH_ESCAPE],\n            relevance: 0\n          },\n          {\n            className: 'string',\n            begin: '\"', end: '\"',\n            contains: [hljs.BACKSLASH_ESCAPE],\n            relevance: 0\n          },\n          {\n            className: 'symbol',\n            begin: '`', end: '`',\n            contains: [hljs.BACKSLASH_ESCAPE],\n            relevance: 2\n          },\n          hljs.C_NUMBER_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';\n  return {\n    aliases: ['dst'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      {\n        className: 'template-tag',\n        begin: /\\{[#\\/]/, end: /\\}/, illegal: /;/,\n        contains: [\n          {\n            className: 'name',\n            begin: /[a-zA-Z\\.-]+/,\n            starts: {\n              endsWithParent: true, relevance: 0,\n              contains: [\n                hljs.QUOTE_STRING_MODE\n              ]\n            }\n          }\n        ]\n      },\n      {\n        className: 'template-variable',\n        begin: /\\{/, end: /\\}/, illegal: /;/,\n        keywords: EXPRESSION_KEYWORDS\n      }\n    ]\n  };\n};","module.exports = function(hljs) {\n  var IDENTIFIER = '[a-zA-Z-_][^\\\\n{]+\\\\{';\n\n  var PROPERTY = {\n    className: 'attribute',\n    begin: /[a-zA-Z-_]+/, end: /\\s*:/, excludeEnd: true,\n    starts: {\n      end: ';',\n      relevance: 0,\n      contains: [\n        {\n          className: 'variable',\n          begin: /\\.[a-zA-Z-_]+/\n        },\n        {\n          className: 'keyword',\n          begin: /\\(optional\\)/\n        }\n      ]\n    }\n  };\n\n  return {\n    aliases: ['graph', 'instances'],\n    case_insensitive: true,\n    keywords: 'import',\n    contains: [\n      // Facet sections\n      {\n        begin: '^facet ' + IDENTIFIER,\n        end: '}',\n        keywords: 'facet',\n        contains: [\n          PROPERTY,\n          hljs.HASH_COMMENT_MODE\n        ]\n      },\n\n      // Instance sections\n      {\n        begin: '^\\\\s*instance of ' + IDENTIFIER,\n        end: '}',\n        keywords: 'name count channels instance-data instance-state instance of',\n        illegal: /\\S/,\n        contains: [\n          'self',\n          PROPERTY,\n          hljs.HASH_COMMENT_MODE\n        ]\n      },\n\n      // Component sections\n      {\n        begin: '^' + IDENTIFIER,\n        end: '}',\n        contains: [\n          PROPERTY,\n          hljs.HASH_COMMENT_MODE\n        ]\n      },\n\n      // Comments\n      hljs.HASH_COMMENT_MODE\n    ]\n  };\n};","module.exports = function(hljs) {\n  var VAR = {\n    className: 'variable',\n    variants: [\n      {begin: /\\$\\d+/},\n      {begin: /\\$\\{/, end: /}/},\n      {begin: '[\\\\$\\\\@]' + hljs.UNDERSCORE_IDENT_RE}\n    ]\n  };\n  var DEFAULT = {\n    endsWithParent: true,\n    lexemes: '[a-z/_]+',\n    keywords: {\n      literal:\n        'on off yes no true false none blocked debug info notice warn error crit ' +\n        'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'\n    },\n    relevance: 0,\n    illegal: '=>',\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE, VAR],\n        variants: [\n          {begin: /\"/, end: /\"/},\n          {begin: /'/, end: /'/}\n        ]\n      },\n      // this swallows entire URLs to avoid detecting numbers within\n      {\n        begin: '([a-z]+):/', end: '\\\\s', endsWithParent: true, excludeEnd: true,\n        contains: [VAR]\n      },\n      {\n        className: 'regexp',\n        contains: [hljs.BACKSLASH_ESCAPE, VAR],\n        variants: [\n          {begin: \"\\\\s\\\\^\", end: \"\\\\s|{|;\", returnEnd: true},\n          // regexp locations (~, ~*)\n          {begin: \"~\\\\*?\\\\s+\", end: \"\\\\s|{|;\", returnEnd: true},\n          // *.example.com\n          {begin: \"\\\\*(\\\\.[a-z\\\\-]+)+\"},\n          // sub.example.*\n          {begin: \"([a-z\\\\-]+\\\\.)+\\\\*\"}\n        ]\n      },\n      // IP\n      {\n        className: 'number',\n        begin: '\\\\b\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}(:\\\\d{1,5})?\\\\b'\n      },\n      // units\n      {\n        className: 'number',\n        begin: '\\\\b\\\\d+[kKmMgGdshdwy]*\\\\b',\n        relevance: 0\n      },\n      VAR\n    ]\n  };\n\n  return {\n    aliases: ['nginxconf'],\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      {\n        begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s+{', returnBegin: true,\n        end: '{',\n        contains: [\n          {\n            className: 'section',\n            begin: hljs.UNDERSCORE_IDENT_RE\n          }\n        ],\n        relevance: 0\n      },\n      {\n        begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s', end: ';|{', returnBegin: true,\n        contains: [\n          {\n            className: 'attribute',\n            begin: hljs.UNDERSCORE_IDENT_RE,\n            starts: DEFAULT\n          }\n        ],\n        relevance: 0\n      }\n    ],\n    illegal: '[^\\\\s\\\\}]'\n  };\n};","module.exports = function(hljs) {\n  return {\n    aliases: ['xlsx', 'xls'],\n    case_insensitive: true,\n    lexemes: /[a-zA-Z][\\w\\.]*/,\n    // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188\n    keywords: {\n        built_in: 'ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST'\n    },\n    contains: [\n      {\n        /* matches a beginning equal sign found in Excel formula examples */ \n        begin: /^=/,\n        end: /[^=]/, returnEnd: true, illegal: /=/, /* only allow single equal sign at front of line */\n        relevance: 10\n      },\n      /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */\n      {\n        /* matches a reference to a single cell */\n        className: 'symbol',\n        begin: /\\b[A-Z]{1,2}\\d+\\b/,\n        end: /[^\\d]/, excludeEnd: true,\n        relevance: 0\n      },\n      {\n        /* matches a reference to a range of cells */\n        className: 'symbol',\n        begin: /[A-Z]{0,2}\\d*:[A-Z]{0,2}\\d*/,\n        relevance: 0\n      },\n      hljs.BACKSLASH_ESCAPE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'number',\n        begin: hljs.NUMBER_RE + '(%)?',\n        relevance: 0\n      },\n      /* Excel formula comments are done by putting the comment in a function call to N() */\n      hljs.COMMENT(/\\bN\\(/,/\\)/,\n      {\n        excludeBegin: true,\n        excludeEnd: true,\n        illegal: /\\n/\n      })\n    ]\n  };\n};","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","module.exports = function(hljs){\n\n  // общий паттерн для определения идентификаторов\n  var UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';\n  \n  // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword\n  var v7_keywords =\n  'далее ';\n\n  // v8 ключевые слова ==> keyword\n  var v8_keywords =\n  'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли ' +\n  'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';\n\n  // keyword : ключевые слова\n  var KEYWORD = v7_keywords + v8_keywords;\n  \n  // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword\n  var v7_meta_keywords =\n  'загрузитьизфайла ';\n\n  // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword\n  var v8_meta_keywords =\n  'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер ' +\n  'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед ' +\n  'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';\n\n  // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях\n  var METAKEYWORD = v7_meta_keywords + v8_meta_keywords;\n\n  // v7 системные константы ==> built_in\n  var v7_system_constants =\n  'разделительстраниц разделительстрок символтабуляции ';\n  \n  // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in\n  var v7_global_context_methods =\n  'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов ' +\n  'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя ' +\n  'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца ' +\n  'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид ' +\n  'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца ' +\n  'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов ' +\n  'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута ' +\n  'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта ' +\n  'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына ' +\n  'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента ' +\n  'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';\n  \n  // v8 методы глобального контекста ==> built_in\n  var v8_global_context_methods =\n  'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока ' +\n  'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ' +\n  'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации ' +\n  'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода ' +\n  'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы ' +\n  'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации ' +\n  'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию ' +\n  'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла ' +\n  'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке ' +\n  'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку ' +\n  'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты ' +\n  'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы ' +\n  'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти ' +\n  'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы ' +\n  'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя ' +\n  'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты ' +\n  'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов ' +\n  'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя ' +\n  'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога ' +\n  'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией ' +\n  'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы ' +\n  'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения ' +\n  'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении ' +\n  'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения ' +\n  'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально ' +\n  'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа ' +\n  'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту ' +\n  'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения ' +\n  'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки ' +\n  'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение ' +\n  'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя ' +\n  'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса ' +\n  'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора ' +\n  'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса ' +\n  'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации ' +\n  'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла ' +\n  'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации ' +\n  'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления ' +\n  'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу ' +\n  'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы ' +\n  'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет ' +\n  'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима ' +\n  'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения ' +\n  'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути ' +\n  'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы ' +\n  'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю ' +\n  'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных ' +\n  'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию ' +\n  'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище ' +\n  'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода ' +\n  'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение ' +\n  'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока ' +\n  'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных ' +\n  'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени ' +\n  'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить ' +\n  'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс ' +\n  'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений '+\n  'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах ' +\n  'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации ' +\n  'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы ' +\n  'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим ' +\n  'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту ' +\n  'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных ' +\n  'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации ' +\n  'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения ' +\n  'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования ' +\n  'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима ' +\n  'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим ' +\n  'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией ' +\n  'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы ' +\n  'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса ' +\n  'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';\n\n  // v8 свойства глобального контекста ==> built_in\n  var v8_global_context_property =\n  'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы ' +\n  'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль ' +\n  'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты ' +\n  'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений ' +\n  'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик ' +\n  'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок ' +\n  'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений ' +\n  'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа ' +\n  'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек ' +\n  'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков ' +\n  'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';\n\n  // built_in : встроенные или библиотечные объекты (константы, классы, функции)\n  var BUILTIN =\n  v7_system_constants +\n  v7_global_context_methods + v8_global_context_methods +\n  v8_global_context_property;\n  \n  // v8 системные наборы значений ==> class\n  var v8_system_sets_of_values =\n  'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';\n\n  // v8 системные перечисления - интерфейсные ==> class\n  var v8_system_enums_interface =\n  'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий ' +\n  'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы ' +\n  'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы ' +\n  'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя ' +\n  'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение ' +\n  'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы ' +\n  'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания ' +\n  'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки ' +\n  'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы ' +\n  'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева ' +\n  'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ' +\n  'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме ' +\n  'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы ' +\n  'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы ' +\n  'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы ' +\n  'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска ' +\n  'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования ' +\n  'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта ' +\n  'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы ' +\n  'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы ' +\n  'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы ' +\n  'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы ' +\n  'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы ' +\n  'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском ' +\n  'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы ' +\n  'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта ' +\n  'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты ' +\n  'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения ' +\n  'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра ' +\n  'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения ' +\n  'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы ' +\n  'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки ' +\n  'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание ' +\n  'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы ' +\n  'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление ' +\n  'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы ' +\n  'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы ' +\n  'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления ' +\n  'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы ' +\n  'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы ' +\n  'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений ' +\n  'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы ' +\n  'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы ' +\n  'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы ' +\n  'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени ' +\n  'форматкартинки ширинаподчиненныхэлементовформы ';\n\n  // v8 системные перечисления - свойства прикладных объектов ==> class\n  var v8_system_enums_objects_properties =\n  'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса ' +\n  'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения ' +\n  'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';\n\n  // v8 системные перечисления - планы обмена ==> class\n  var v8_system_enums_exchange_plans =\n  'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';\n\n  // v8 системные перечисления - табличный документ ==> class\n  var v8_system_enums_tabular_document =\n  'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы ' +\n  'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента ' +\n  'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента ' +\n  'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента ' +\n  'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы ' +\n  'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента ' +\n  'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';\n\n  // v8 системные перечисления - планировщик ==> class\n  var v8_system_enums_sheduler =\n  'отображениевремениэлементовпланировщика ';\n\n  // v8 системные перечисления - форматированный документ ==> class\n  var v8_system_enums_formatted_document =\n  'типфайлаформатированногодокумента ';\n\n  // v8 системные перечисления - запрос ==> class\n  var v8_system_enums_query =\n  'обходрезультатазапроса типзаписизапроса ';\n\n  // v8 системные перечисления - построитель отчета ==> class\n  var v8_system_enums_report_builder =\n  'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';\n\n  // v8 системные перечисления - работа с файлами ==> class\n  var v8_system_enums_files =\n  'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';\n\n  // v8 системные перечисления - построитель запроса ==> class\n  var v8_system_enums_query_builder =\n  'типизмеренияпостроителязапроса ';\n\n  // v8 системные перечисления - анализ данных ==> class\n  var v8_system_enums_data_analysis =\n  'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных ' +\n  'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений ' +\n  'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций ' +\n  'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных ' +\n  'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных ' +\n  'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';\n\n  // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class\n  var v8_system_enums_xml_json_xs_dom_xdto_ws =\n  'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto ' +\n  'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs ' +\n  'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs ' +\n  'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ' +\n  'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson ' +\n  'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs ' +\n  'форматдатыjson экранированиесимволовjson ';\n\n  // v8 системные перечисления - система компоновки данных ==> class\n  var v8_system_enums_data_composition_system =\n  'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных ' +\n  'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных ' +\n  'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных ' +\n  'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных ' +\n  'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных ' +\n  'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных ' +\n  'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных ' +\n  'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных ' +\n  'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных ' +\n  'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных '+\n  'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных ' +\n  'использованиеусловногооформлениякомпоновкиданных ';\n\n  // v8 системные перечисления - почта ==> class\n  var v8_system_enums_email =\n  'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения ' +\n  'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты ' +\n  'статусразборапочтовогосообщения ';\n\n  // v8 системные перечисления - журнал регистрации ==> class\n  var v8_system_enums_logbook =\n  'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';\n\n  // v8 системные перечисления - криптография ==> class\n  var v8_system_enums_cryptography =\n  'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии ' +\n  'типхранилищасертификатовкриптографии ';\n\n  // v8 системные перечисления - ZIP ==> class\n  var v8_system_enums_zip =\n  'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip ' +\n  'режимсохраненияпутейzip уровеньсжатияzip ';\n\n  // v8 системные перечисления - \n  // Блокировка данных, Фоновые задания, Автоматизированное тестирование,\n  // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class\n  var v8_system_enums_other =\n  'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных ' +\n  'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';\n\n  // v8 системные перечисления - схема запроса ==> class\n  var v8_system_enums_request_schema =\n  'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса ' +\n  'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';\n\n  // v8 системные перечисления - свойства объектов метаданных ==> class\n  var v8_system_enums_properties_of_metadata_objects =\n  'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления ' +\n  'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование ' +\n  'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения ' +\n  'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита ' +\n  'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных ' +\n  'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи ' +\n  'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении ' +\n  'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений ' +\n  'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение ' +\n  'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита '+\n  'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности ' +\n  'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов ' +\n  'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса ' +\n  'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов ' +\n  'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования ' +\n  'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса ' +\n  'типномерадокумента типномеразадачи типформы удалениедвижений ';\n\n  // v8 системные перечисления - разные ==> class\n  var v8_system_enums_differents =\n  'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения ' +\n  'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки ' +\n  'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак ' +\n  'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога ' +\n  'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных ' +\n  'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения ' +\n  'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных ' +\n  'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter ' +\n  'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';\n\n  // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)\n  var CLASS =\n  v8_system_sets_of_values +\n  v8_system_enums_interface +\n  v8_system_enums_objects_properties +\n  v8_system_enums_exchange_plans +\n  v8_system_enums_tabular_document +\n  v8_system_enums_sheduler +\n  v8_system_enums_formatted_document +\n  v8_system_enums_query +\n  v8_system_enums_report_builder +\n  v8_system_enums_files +\n  v8_system_enums_query_builder +\n  v8_system_enums_data_analysis +\n  v8_system_enums_xml_json_xs_dom_xdto_ws +\n  v8_system_enums_data_composition_system +\n  v8_system_enums_email +\n  v8_system_enums_logbook +\n  v8_system_enums_cryptography +\n  v8_system_enums_zip +\n  v8_system_enums_other +\n  v8_system_enums_request_schema +\n  v8_system_enums_properties_of_metadata_objects +\n  v8_system_enums_differents;\n\n  // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type\n  var v8_shared_object =\n  'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs ' +\n  'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема ' +\n  'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма ' +\n  'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания ' +\n  'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление ' +\n  'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom ' +\n  'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта ' +\n  'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs ' +\n  'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных ' +\n  'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла ' +\n  'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных ' +\n  'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных ' +\n  'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson ' +\n  'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs ' +\n  'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации ' +\n  'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных ' +\n  'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs ' +\n  'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom ' +\n  'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных ' +\n  'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных ' +\n  'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных ' +\n  'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml ' +\n  'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент ' +\n  'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml ' +\n  'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto ' +\n  'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows ' +\n  'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш ' +\n  'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент ' +\n  'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток ' +\n  'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs ' +\n  'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs ' +\n  'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs ' +\n  'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент ' +\n  'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла ' +\n  'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';\n\n  // v8 универсальные коллекции значений ==> type\n  var v8_universal_collection =\n  'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура ' +\n  'фиксированноесоответствие фиксированныймассив ';\n\n  // type : встроенные типы\n  var TYPE =\n  v8_shared_object +\n  v8_universal_collection;\n\n  // literal : примитивные типы\n  var LITERAL = 'null истина ложь неопределено';\n  \n  // number : числа\n  var NUMBERS = hljs.inherit(hljs.NUMBER_MODE);\n\n  // string : строки\n  var STRINGS = {\n    className: 'string',\n    begin: '\"|\\\\|', end: '\"|$',\n    contains: [{begin: '\"\"'}]\n  };\n\n  // number : даты\n  var DATE = {\n    begin: \"'\", end: \"'\", excludeBegin: true, excludeEnd: true,\n    contains: [\n      {\n        className: 'number',\n        begin: '\\\\d{4}([\\\\.\\\\\\\\/:-]?\\\\d{2}){0,5}'\n      }\n    ]\n  };\n  \n  // comment : комментарии\n  var COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);\n  \n  // meta : инструкции препроцессора, директивы компиляции\n  var META = {\n    className: 'meta',\n    lexemes: UNDERSCORE_IDENT_RE,\n    begin: '#|&', end: '$',\n    keywords: {'meta-keyword': KEYWORD + METAKEYWORD},\n    contains: [\n      COMMENTS\n    ]\n  };\n  \n  // symbol : метка goto\n  var SYMBOL = {\n    className: 'symbol',\n    begin: '~', end: ';|:', excludeEnd: true\n  };  \n  \n  // function : объявление процедур и функций\n  var FUNCTION = {\n    className: 'function',\n    lexemes: UNDERSCORE_IDENT_RE,\n    variants: [\n      {begin: 'процедура|функция', end: '\\\\)', keywords: 'процедура функция'},\n      {begin: 'конецпроцедуры|конецфункции', keywords: 'конецпроцедуры конецфункции'}\n    ],\n    contains: [\n      {\n        begin: '\\\\(', end: '\\\\)', endsParent : true,\n        contains: [\n          {\n            className: 'params',\n            lexemes: UNDERSCORE_IDENT_RE,\n            begin: UNDERSCORE_IDENT_RE, end: ',', excludeEnd: true, endsWithParent: true,\n            keywords: {\n              keyword: 'знач',\n              literal: LITERAL\n            },\n            contains: [\n              NUMBERS,\n              STRINGS,\n              DATE\n            ]\n          },\n          COMMENTS\n        ]\n      },\n      hljs.inherit(hljs.TITLE_MODE, {begin: UNDERSCORE_IDENT_RE})\n    ]\n  };\n\n  return {\n    case_insensitive: true,\n    lexemes: UNDERSCORE_IDENT_RE,\n    keywords: {\n      keyword: KEYWORD,\n      built_in: BUILTIN,\n      class: CLASS,\n      type: TYPE,\n      literal: LITERAL\n    },\n    contains: [\n      META,\n      FUNCTION,\n      COMMENTS,\n      SYMBOL,\n      NUMBERS,\n      STRINGS,\n      DATE\n    ]  \n  }\n};","module.exports = function(hljs) {\n  var COMMENT_MODE = hljs.COMMENT('--', '$');\n  var UNQUOTED_IDENT = '[a-zA-Z_][a-zA-Z_0-9$]*';\n  var DOLLAR_STRING = '\\\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\\\$';\n  var LABEL = '<<\\\\s*' + UNQUOTED_IDENT + '\\\\s*>>';\n\n  var SQL_KW = \n    // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html\n    // https://www.postgresql.org/docs/11/static/sql-commands.html\n    // SQL commands (starting words)\n    'ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE ' +\n    'DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY ' +\n    'PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW ' +\n    'START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES ' +\n    // SQL commands (others)\n    'AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN ' +\n    'WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS ' +\n    'FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM ' +\n    'TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS ' +\n    'METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION ' +\n    'INDEX PROCEDURE ASSERTION ' +\n    // additional reserved key words\n    'ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK ' +\n    'COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS ' +\n    'DEFERRABLE RANGE ' +\n    'DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ' +\n    'ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT ' +\n    'NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY ' +\n    'REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN ' +\n    'TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH ' +\n    // some of non-reserved (which are used in clauses or as PL/pgSQL keyword)\n    'BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN ' +\n    'BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT ' +\n    'TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN ' +\n    'EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH ' +\n    'REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ' +\n    'ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED ' +\n    'INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 ' +\n    'INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ' +\n    'ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES ' +\n    'RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS ' +\n    'UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF ' +\n    // some parameters of VACUUM/ANALYZE/EXPLAIN\n    'FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING ' +\n    //\n    'RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED ' +\n    'OF NOTHING NONE EXCLUDE ATTRIBUTE ' +\n    // from GRANT (not keywords actually)\n    'USAGE ROUTINES ' +\n    // actually literals, but look better this way (due to IS TRUE, IS FALSE, ISNULL etc)\n    'TRUE FALSE NAN INFINITY ';\n\n  var ROLE_ATTRS = // only those not in keywrods already\n    'SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT ' +\n    'LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ';\n\n  var PLPGSQL_KW = \n    'ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS ' +\n    'STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT ' +\n    'OPEN ';\n\n  var TYPES =\n    // https://www.postgresql.org/docs/11/static/datatype.html\n    'BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR ' +\n    'CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 ' +\n    'MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 ' +\n    'SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 ' +\n    'TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR ' +\n    'INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ' +\n    // pseudotypes\n    'ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL ' +\n    'RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR ' +\n    // spec. type\n    'NAME ' +\n    // OID-types\n    'OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 ' +\n    'REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ';// +\n    // some types from standard extensions\n    'HSTORE|10 LO LTREE|10 ';\n    \n  var TYPES_RE = \n    TYPES.trim()\n         .split(' ')\n         .map( function(val) { return val.split('|')[0]; } )\n         .join('|');\n\n  var SQL_BI =\n    'CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP ' +\n    'CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ';\n\n  var PLPGSQL_BI =\n    'FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 ' +\n    'TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ' +\n    // get diagnostics\n    'ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME ' +\n    'PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 ' +\n    'PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ';\n\n  var PLPGSQL_EXCEPTIONS =\n    // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html\n    'SQLSTATE SQLERRM|10 ' +\n    'SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING ' +\n    'NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED ' +\n    'STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED ' +\n    'SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE ' +\n    'SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION ' +\n    'TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED ' +\n    'INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR ' +\n    'INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION ' +\n    'STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION ' +\n    'DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW ' +\n    'DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW ' +\n    'INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION ' +\n    'INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION ' +\n    'INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST ' +\n    'INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE ' +\n    'NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE ' +\n    'INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE ' +\n    'INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT ' +\n    'INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH ' +\n    'NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE ' +\n    'SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION ' +\n    'SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING ' +\n    'FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION ' +\n    'BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT ' +\n    'INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION ' +\n    'INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION ' +\n    'UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE ' +\n    'INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE ' +\n    'HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION ' +\n    'INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION ' +\n    'NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION ' +\n    'SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION ' +\n    'IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME ' +\n    'TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD ' +\n    'DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST ' +\n    'INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT ' +\n    'MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED ' +\n    'READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION ' +\n    'CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED ' +\n    'PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED ' +\n    'EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED ' +\n    'TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED ' +\n    'SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME ' +\n    'INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION ' +\n    'SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED ' +\n    'SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE ' +\n    'GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME ' +\n    'NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH ' +\n    'INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN ' +\n    'UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT ' +\n    'DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION ' +\n    'DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS ' +\n    'DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS ' +\n    'INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION ' +\n    'INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION ' +\n    'INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION ' +\n    'INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL ' +\n    'OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED ' +\n    'STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE ' +\n    'OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION ' +\n    'QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED ' +\n    'SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR ' +\n    'LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED ' +\n    'FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION ' +\n    'FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER ' +\n    'FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS ' +\n    'FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX ' +\n    'FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH ' +\n    'FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES ' +\n    'FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE ' +\n    'FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION ' +\n    'FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR ' +\n    'RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED ' +\n    'INDEX_CORRUPTED ';\n\n  var FUNCTIONS =\n    // https://www.postgresql.org/docs/11/static/functions-aggregate.html\n    'ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG ' +\n    'JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG ' +\n    'CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE ' +\n    'REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP ' +\n    'PERCENTILE_CONT PERCENTILE_DISC ' +\n    // https://www.postgresql.org/docs/11/static/functions-window.html\n    'ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE ' +\n    // https://www.postgresql.org/docs/11/static/functions-comparison.html\n    'NUM_NONNULLS NUM_NULLS ' +\n    // https://www.postgresql.org/docs/11/static/functions-math.html\n    'ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT ' +\n    'TRUNC WIDTH_BUCKET ' +\n    'RANDOM SETSEED ' +\n    'ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND ' +\n    // https://www.postgresql.org/docs/11/static/functions-string.html\n    'BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ' +\n    'ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP' +\n    'LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 ' +\n    'QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY ' +\n    'REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR ' +\n    'TO_ASCII TO_HEX TRANSLATE ' +\n    // https://www.postgresql.org/docs/11/static/functions-binarystring.html\n    'OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE ' +\n    // https://www.postgresql.org/docs/11/static/functions-formatting.html\n    'TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP ' +\n    // https://www.postgresql.org/docs/11/static/functions-datetime.html\n    'AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL ' +\n    'MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 ' +\n    'TIMEOFDAY TRANSACTION_TIMESTAMP|10 ' +\n    // https://www.postgresql.org/docs/11/static/functions-enum.html\n    'ENUM_FIRST ENUM_LAST ENUM_RANGE ' +\n    // https://www.postgresql.org/docs/11/static/functions-geometry.html\n    'AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH ' +\n    'BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ' +\n    // https://www.postgresql.org/docs/11/static/functions-net.html\n    'ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY' +\n    'INET_MERGE MACADDR8_SET7BIT ' +\n    // https://www.postgresql.org/docs/11/static/functions-textsearch.html\n    'ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY ' +\n    'QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE ' +\n    'TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY ' +\n    'TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN ' +\n    // https://www.postgresql.org/docs/11/static/functions-xml.html\n    'XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT ' +\n    'XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT ' +\n    'XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES ' +\n    'TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA ' +\n    'QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA ' +\n    'CURSOR_TO_XML CURSOR_TO_XMLSCHEMA ' +\n    'SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA ' +\n    'DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA ' +\n    'XMLATTRIBUTES ' +\n    // https://www.postgresql.org/docs/11/static/functions-json.html\n    'TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT ' +\n    'JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH ' +\n    'JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH ' +\n    'JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET ' +\n    'JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT ' +\n    'JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET ' +\n    'JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY ' +\n    // https://www.postgresql.org/docs/11/static/functions-sequence.html\n    'CURRVAL LASTVAL NEXTVAL SETVAL ' +\n    // https://www.postgresql.org/docs/11/static/functions-conditional.html\n    'COALESCE NULLIF GREATEST LEAST ' +\n    // https://www.postgresql.org/docs/11/static/functions-array.html\n    'ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ' +\n    'ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY ' +\n    'STRING_TO_ARRAY UNNEST ' +\n    // https://www.postgresql.org/docs/11/static/functions-range.html\n    'ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE ' +\n    // https://www.postgresql.org/docs/11/static/functions-srf.html\n    'GENERATE_SERIES GENERATE_SUBSCRIPTS ' +\n    // https://www.postgresql.org/docs/11/static/functions-info.html\n    'CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT ' +\n    'INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE ' +\n    'TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE ' +\n    'COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION ' +\n    'TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX ' +\n    'TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS ' +\n    // https://www.postgresql.org/docs/11/static/functions-admin.html\n    'CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE ' +\n    'GIN_CLEAN_PENDING_LIST ' +\n    // https://www.postgresql.org/docs/11/static/functions-trigger.html\n    'SUPPRESS_REDUNDANT_UPDATES_TRIGGER ' +\n    // ihttps://www.postgresql.org/docs/devel/static/lo-funcs.html\n    'LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE ' +\n    //\n    'GROUPING CAST ';\n\n    var FUNCTIONS_RE = \n      FUNCTIONS.trim()\n               .split(' ')\n               .map( function(val) { return val.split('|')[0]; } )\n               .join('|');\n\n    return {\n        aliases: ['postgres','postgresql'],\n        case_insensitive: true,\n        keywords: {\n          keyword:\n            SQL_KW + PLPGSQL_KW + ROLE_ATTRS,\n          built_in:\n            SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS,\n        },\n        // Forbid some cunstructs from other languages to improve autodetect. In fact\n        // \"[a-z]:\" is legal (as part of array slice), but improbabal.\n        illegal: /:==|\\W\\s*\\(\\*|(^|\\s)\\$[a-z]|{{|[a-z]:\\s*$|\\.\\.\\.|TO:|DO:/,\n        contains: [\n          // special handling of some words, which are reserved only in some contexts\n          {\n            className: 'keyword',\n            variants: [\n              { begin: /\\bTEXT\\s*SEARCH\\b/ },\n              { begin: /\\b(PRIMARY|FOREIGN|FOR(\\s+NO)?)\\s+KEY\\b/ },\n              { begin: /\\bPARALLEL\\s+(UNSAFE|RESTRICTED|SAFE)\\b/ },\n              { begin: /\\bSTORAGE\\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\\b/ },\n              { begin: /\\bMATCH\\s+(FULL|PARTIAL|SIMPLE)\\b/ },\n              { begin: /\\bNULLS\\s+(FIRST|LAST)\\b/ },\n              { begin: /\\bEVENT\\s+TRIGGER\\b/ },\n              { begin: /\\b(MAPPING|OR)\\s+REPLACE\\b/ },\n              { begin: /\\b(FROM|TO)\\s+(PROGRAM|STDIN|STDOUT)\\b/ },\n              { begin: /\\b(SHARE|EXCLUSIVE)\\s+MODE\\b/ },\n              { begin: /\\b(LEFT|RIGHT)\\s+(OUTER\\s+)?JOIN\\b/ },\n              { begin: /\\b(FETCH|MOVE)\\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\\b/ },\n              { begin: /\\bPRESERVE\\s+ROWS\\b/ },\n              { begin: /\\bDISCARD\\s+PLANS\\b/ },\n              { begin: /\\bREFERENCING\\s+(OLD|NEW)\\b/ },\n              { begin: /\\bSKIP\\s+LOCKED\\b/ },\n              { begin: /\\bGROUPING\\s+SETS\\b/ },\n              { begin: /\\b(BINARY|INSENSITIVE|SCROLL|NO\\s+SCROLL)\\s+(CURSOR|FOR)\\b/ },\n              { begin: /\\b(WITH|WITHOUT)\\s+HOLD\\b/ },\n              { begin: /\\bWITH\\s+(CASCADED|LOCAL)\\s+CHECK\\s+OPTION\\b/ },\n              { begin: /\\bEXCLUDE\\s+(TIES|NO\\s+OTHERS)\\b/ },\n              { begin: /\\bFORMAT\\s+(TEXT|XML|JSON|YAML)\\b/ },\n              { begin: /\\bSET\\s+((SESSION|LOCAL)\\s+)?NAMES\\b/ },\n              { begin: /\\bIS\\s+(NOT\\s+)?UNKNOWN\\b/ },\n              { begin: /\\bSECURITY\\s+LABEL\\b/ },\n              { begin: /\\bSTANDALONE\\s+(YES|NO|NO\\s+VALUE)\\b/ },\n              { begin: /\\bWITH\\s+(NO\\s+)?DATA\\b/ },\n              { begin: /\\b(FOREIGN|SET)\\s+DATA\\b/ },\n              { begin: /\\bSET\\s+(CATALOG|CONSTRAINTS)\\b/ },\n              { begin: /\\b(WITH|FOR)\\s+ORDINALITY\\b/ },\n              { begin: /\\bIS\\s+(NOT\\s+)?DOCUMENT\\b/ },\n              { begin: /\\bXML\\s+OPTION\\s+(DOCUMENT|CONTENT)\\b/ },\n              { begin: /\\b(STRIP|PRESERVE)\\s+WHITESPACE\\b/ },\n              { begin: /\\bNO\\s+(ACTION|MAXVALUE|MINVALUE)\\b/ },\n              { begin: /\\bPARTITION\\s+BY\\s+(RANGE|LIST|HASH)\\b/ },\n              { begin: /\\bAT\\s+TIME\\s+ZONE\\b/ },\n              { begin: /\\bGRANTED\\s+BY\\b/ },\n              { begin: /\\bRETURN\\s+(QUERY|NEXT)\\b/ },\n              { begin: /\\b(ATTACH|DETACH)\\s+PARTITION\\b/ },\n              { begin: /\\bFORCE\\s+ROW\\s+LEVEL\\s+SECURITY\\b/ },\n              { begin: /\\b(INCLUDING|EXCLUDING)\\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\\b/ },\n              { begin: /\\bAS\\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\\b/ }\n            ]\n          },\n          // functions named as keywords, followed by '('\n          {\n            begin: /\\b(FORMAT|FAMILY|VERSION)\\s*\\(/,\n            //keywords: { built_in: 'FORMAT FAMILY VERSION' }\n          },\n          // INCLUDE ( ... ) in index_parameters in CREATE TABLE\n          {\n            begin: /\\bINCLUDE\\s*\\(/,\n            keywords: 'INCLUDE'\n          },\n          // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)\n          {\n            begin: /\\bRANGE(?!\\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/\n          },\n          // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE\n          // and in PL/pgSQL RAISE ... USING\n          {\n            begin: /\\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\\s*=/\n          },\n          // PG_smth; HAS_some_PRIVILEGE\n          {\n            //className: 'built_in',\n            begin: /\\b(PG_\\w+?|HAS_[A-Z_]+_PRIVILEGE)\\b/,\n            relevance: 10\n          },\n          // extract\n          {\n            begin: /\\bEXTRACT\\s*\\(/,\n            end: /\\bFROM\\b/,\n            returnEnd: true,\n            keywords: {\n              //built_in: 'EXTRACT',\n              type:     'CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS ' +\n                        'MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR ' +\n                        'TIMEZONE_MINUTE WEEK YEAR'\n            }\n          },\n          // xmlelement, xmlpi - special NAME\n          {\n            begin: /\\b(XMLELEMENT|XMLPI)\\s*\\(\\s*NAME/,\n            keywords: {\n              //built_in: 'XMLELEMENT XMLPI',\n              keyword:  'NAME'\n            }\n          },\n          // xmlparse, xmlserialize\n          {\n            begin: /\\b(XMLPARSE|XMLSERIALIZE)\\s*\\(\\s*(DOCUMENT|CONTENT)/,\n            keywords: {\n              //built_in: 'XMLPARSE XMLSERIALIZE',\n              keyword:  'DOCUMENT CONTENT'\n            }\n          },\n          // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and\n          // nearest following numeric constant. Without with trick we find a lot of \"keywords\"\n          // in 'avrasm' autodetection test...\n          {\n            beginKeywords: 'CACHE INCREMENT MAXVALUE MINVALUE',\n            end: hljs.C_NUMBER_RE,\n            returnEnd: true,\n            keywords: 'BY CACHE INCREMENT MAXVALUE MINVALUE'\n          },\n          // WITH|WITHOUT TIME ZONE as part of datatype\n          {\n            className: 'type',\n            begin: /\\b(WITH|WITHOUT)\\s+TIME\\s+ZONE\\b/\n          },\n          // INTERVAL optional fields\n          {\n            className: 'type',\n            begin: /\\bINTERVAL\\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\\s+TO\\s+(MONTH|HOUR|MINUTE|SECOND))?\\b/\n          },\n          // Pseudo-types which allowed only as return type\n          {\n            begin: /\\bRETURNS\\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\\b/,\n            keywords: {\n              keyword: 'RETURNS',\n              type: 'LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER'\n            }\n          },\n          // Known functions - only when followed by '('\n          {\n            begin: '\\\\b(' + FUNCTIONS_RE + ')\\\\s*\\\\('\n            //keywords: { built_in: FUNCTIONS }\n          },\n          // Types\n          {\n            begin: '\\\\.(' + TYPES_RE + ')\\\\b' // prevent highlight as type, say, 'oid' in 'pgclass.oid'\n          },\n          {\n            begin: '\\\\b(' + TYPES_RE + ')\\\\s+PATH\\\\b', // in XMLTABLE\n            keywords: {\n              keyword: 'PATH', // hopefully no one would use PATH type in XMLTABLE...\n              type: TYPES.replace('PATH ','')\n            }\n          },\n          {\n            className: 'type',\n            begin: '\\\\b(' + TYPES_RE + ')\\\\b'\n          },\n          // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS\n          {\n            className: 'string',\n            begin: '\\'', end: '\\'',\n            contains: [{begin: '\\'\\''}]\n          },\n          {\n            className: 'string',\n            begin: '(e|E|u&|U&)\\'', end: '\\'',\n            contains: [{begin: '\\\\\\\\.'}],\n            relevance: 10\n          },\n          {\n            begin: DOLLAR_STRING,\n            endSameAsBegin: true,\n            contains: [\n              {\n                // actually we want them all except SQL; listed are those with known implementations\n                // and XML + JSON just in case\n                subLanguage: ['pgsql','perl','python','tcl','r','lua','java','php','ruby','bash','scheme','xml','json'],\n                endsWithParent: true\n              }\n            ]\n          },\n          // identifiers in quotes\n          {\n            begin: '\"', end: '\"',\n            contains: [{begin: '\"\"'}]\n          },\n          // numbers\n          hljs.C_NUMBER_MODE,\n          // comments\n          hljs.C_BLOCK_COMMENT_MODE,\n          COMMENT_MODE,\n          // PL/pgSQL staff\n          // %ROWTYPE, %TYPE, $n\n          {\n            className: 'meta',\n            variants: [\n              {begin: '%(ROW)?TYPE', relevance: 10}, // %TYPE, %ROWTYPE\n              {begin: '\\\\$\\\\d+'},                    // $n\n              {begin: '^#\\\\w', end: '$'}             // #compiler option\n            ]\n          },\n          // <<labeles>>\n          {\n            className: 'symbol',\n            begin: LABEL,\n            relevance: 10\n          }\n        ]\n  };\n};","module.exports = function(hljs) {\n  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';\n  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';\n\n  var AS3_REST_ARG_MODE = {\n    className: 'rest_arg',\n    begin: '[.]{3}', end: IDENT_RE,\n    relevance: 10\n  };\n\n  return {\n    aliases: ['as'],\n    keywords: {\n      keyword: 'as break case catch class const continue default delete do dynamic each ' +\n        'else extends final finally for function get if implements import in include ' +\n        'instanceof interface internal is namespace native new override package private ' +\n        'protected public return set static super switch this throw try typeof use var void ' +\n        'while with',\n      literal: 'true false null undefined'\n    },\n    contains: [\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'class',\n        beginKeywords: 'package', end: '{',\n        contains: [hljs.TITLE_MODE]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface', end: '{', excludeEnd: true,\n        contains: [\n          {\n            beginKeywords: 'extends implements'\n          },\n          hljs.TITLE_MODE\n        ]\n      },\n      {\n        className: 'meta',\n        beginKeywords: 'import include', end: ';',\n        keywords: {'meta-keyword': 'import include'}\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: '[{;]', excludeEnd: true,\n        illegal: '\\\\S',\n        contains: [\n          hljs.TITLE_MODE,\n          {\n            className: 'params',\n            begin: '\\\\(', end: '\\\\)',\n            contains: [\n              hljs.APOS_STRING_MODE,\n              hljs.QUOTE_STRING_MODE,\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              AS3_REST_ARG_MODE\n            ]\n          },\n          {\n            begin: ':\\\\s*' + IDENT_FUNC_RETURN_TYPE_RE\n          }\n        ]\n      },\n      hljs.METHOD_GUARD\n    ],\n    illegal: /#/\n  };\n};","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","import Vue from 'vue'\nimport VueHighlightJS from 'vue-highlightjs'\nimport 'highlight.js/styles/github.css'\n\nVue.use(VueHighlightJS);\n\n(window.__branVueComponentRegisters =\n\twindow.__branVueComponentRegisters || []).push(function (Vue) {\n\t\tVue.component(\"BranCode\", {\n\t\t\tname: \"BranCode\",\n\t\t\tprops: ['language'],\n\t\t\ttemplate: `<pre v-highlightjs><code :class=\"language\"><slot name=\"sourcecode\"></slot></code></pre>`,\n\t\t});\n\t});\n"],"sourceRoot":""}\"")
}
