// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package branoverlay

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./overlayjs/dist/", "branoverlay.css", "\"\"")
	packr.PackJSONBytes("./overlayjs/dist/", "branoverlay.umd.min.js", "\"KGZ1bmN0aW9uKHQsZSl7Im9iamVjdCI9PT10eXBlb2YgZXhwb3J0cyYmIm9iamVjdCI9PT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZSgidnVlIikpOiJmdW5jdGlvbiI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKToib2JqZWN0Ij09PXR5cGVvZiBleHBvcnRzP2V4cG9ydHNbImJyYW5vdmVybGF5Il09ZShyZXF1aXJlKCJ2dWUiKSk6dFsiYnJhbm92ZXJsYXkiXT1lKHRbIlZ1ZSJdKX0pKCJ1bmRlZmluZWQiIT09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBuKHIpe2lmKGVbcl0pcmV0dXJuIGVbcl0uZXhwb3J0czt2YXIgbz1lW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxuKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiBuLm09dCxuLmM9ZSxuLmQ9ZnVuY3Rpb24odCxlLHIpe24ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ucj1mdW5jdGlvbih0KXsidW5kZWZpbmVkIiE9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZToiTW9kdWxlIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiYib2JqZWN0Ij09PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIociksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsImRlZmF1bHQiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJiJzdHJpbmciIT10eXBlb2YgdClmb3IodmFyIG8gaW4gdCluLmQocixvLGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfS5iaW5kKG51bGwsbykpO3JldHVybiByfSxuLm49ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHRbImRlZmF1bHQiXX06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIG4uZChlLCJhIixlKSxlfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4ucD0iIixuKG4ucz0iZmIxNSIpfSh7IjAwZmQiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI5ZTY5Iiksbz1PYmplY3QucHJvdG90eXBlLGk9by5oYXNPd25Qcm9wZXJ0eSxhPW8udG9TdHJpbmcscz1yP3IudG9TdHJpbmdUYWc6dm9pZCAwO2Z1bmN0aW9uIHUodCl7dmFyIGU9aS5jYWxsKHQscyksbj10W3NdO3RyeXt0W3NdPXZvaWQgMDt2YXIgcj0hMH1jYXRjaCh1KXt9dmFyIG89YS5jYWxsKHQpO3JldHVybiByJiYoZT90W3NdPW46ZGVsZXRlIHRbc10pLG99dC5leHBvcnRzPXV9LCIwMTRiIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImU1M2QiKSxvPW4oIjA3ZTMiKSxpPW4oIjhlNjAiKSxhPW4oIjYzYjYiKSxzPW4oIjkxMzgiKSx1PW4oImViZmQiKS5LRVksYz1uKCIyOTRjIiksZj1uKCJkYmRiIiksbD1uKCI0NWYyIiksZD1uKCI2MmEwIikscD1uKCI1MTY4IiksaD1uKCJjY2I5Iiksdj1uKCI2NzE4IiksbT1uKCI0N2VlIikseT1uKCI5MDAzIiksYj1uKCJlNGFlIiksZz1uKCJmNzcyIiksdz1uKCIzNmMzIikseD1uKCIxYmMzIiksTz1uKCJhZWJkIiksVD1uKCJhMTU5Iiksaj1uKCIwMzk1IiksXz1uKCJiZjBiIiksUD1uKCJkOWY2IiksQz1uKCJjM2ExIiksRT1fLmYsUz1QLmYsQT1qLmYsTT1yLlN5bWJvbCxrPXIuSlNPTiwkPWsmJmsuc3RyaW5naWZ5LEQ9InByb3RvdHlwZSIsTj1wKCJfaGlkZGVuIiksTD1wKCJ0b1ByaW1pdGl2ZSIpLEY9e30ucHJvcGVydHlJc0VudW1lcmFibGUsVj1mKCJzeW1ib2wtcmVnaXN0cnkiKSxIPWYoInN5bWJvbHMiKSxJPWYoIm9wLXN5bWJvbHMiKSxXPU9iamVjdFtEXSxSPSJmdW5jdGlvbiI9PXR5cGVvZiBNLHo9ci5RT2JqZWN0LEI9IXp8fCF6W0RdfHwheltEXS5maW5kQ2hpbGQsWD1pJiZjKGZ1bmN0aW9uKCl7cmV0dXJuIDchPVQoUyh7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiBTKHRoaXMsImEiLHt2YWx1ZTo3fSkuYX19KSkuYX0pP2Z1bmN0aW9uKHQsZSxuKXt2YXIgcj1FKFcsZSk7ciYmZGVsZXRlIFdbZV0sUyh0LGUsbiksciYmdCE9PVcmJlMoVyxlLHIpfTpTLFk9ZnVuY3Rpb24odCl7dmFyIGU9SFt0XT1UKE1bRF0pO3JldHVybiBlLl9rPXQsZX0scT1SJiYic3ltYm9sIj09dHlwZW9mIE0uaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuInN5bWJvbCI9PXR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIE19LFU9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PT09VyYmVShJLGUsbiksYih0KSxlPXgoZSwhMCksYihuKSxvKEgsZSk/KG4uZW51bWVyYWJsZT8obyh0LE4pJiZ0W05dW2VdJiYodFtOXVtlXT0hMSksbj1UKG4se2VudW1lcmFibGU6TygwLCExKX0pKToobyh0LE4pfHxTKHQsTixPKDEse30pKSx0W05dW2VdPSEwKSxYKHQsZSxuKSk6Uyh0LGUsbil9LEc9ZnVuY3Rpb24odCxlKXtiKHQpO3ZhciBuLHI9bShlPXcoZSkpLG89MCxpPXIubGVuZ3RoO3doaWxlKGk+bylVKHQsbj1yW28rK10sZVtuXSk7cmV0dXJuIHR9LEs9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZT9UKHQpOkcoVCh0KSxlKX0sWj1mdW5jdGlvbih0KXt2YXIgZT1GLmNhbGwodGhpcyx0PXgodCwhMCkpO3JldHVybiEodGhpcz09PVcmJm8oSCx0KSYmIW8oSSx0KSkmJighKGV8fCFvKHRoaXMsdCl8fCFvKEgsdCl8fG8odGhpcyxOKSYmdGhpc1tOXVt0XSl8fGUpfSxKPWZ1bmN0aW9uKHQsZSl7aWYodD13KHQpLGU9eChlLCEwKSx0IT09V3x8IW8oSCxlKXx8byhJLGUpKXt2YXIgbj1FKHQsZSk7cmV0dXJuIW58fCFvKEgsZSl8fG8odCxOKSYmdFtOXVtlXXx8KG4uZW51bWVyYWJsZT0hMCksbn19LFE9ZnVuY3Rpb24odCl7dmFyIGUsbj1BKHcodCkpLHI9W10saT0wO3doaWxlKG4ubGVuZ3RoPmkpbyhILGU9bltpKytdKXx8ZT09Tnx8ZT09dXx8ci5wdXNoKGUpO3JldHVybiByfSx0dD1mdW5jdGlvbih0KXt2YXIgZSxuPXQ9PT1XLHI9QShuP0k6dyh0KSksaT1bXSxhPTA7d2hpbGUoci5sZW5ndGg+YSkhbyhILGU9clthKytdKXx8biYmIW8oVyxlKXx8aS5wdXNoKEhbZV0pO3JldHVybiBpfTtSfHwoTT1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBNKXRocm93IFR5cGVFcnJvcigiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yISIpO3ZhciB0PWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLGU9ZnVuY3Rpb24obil7dGhpcz09PVcmJmUuY2FsbChJLG4pLG8odGhpcyxOKSYmbyh0aGlzW05dLHQpJiYodGhpc1tOXVt0XT0hMSksWCh0aGlzLHQsTygxLG4pKX07cmV0dXJuIGkmJkImJlgoVyx0LHtjb25maWd1cmFibGU6ITAsc2V0OmV9KSxZKHQpfSxzKE1bRF0sInRvU3RyaW5nIixmdW5jdGlvbigpe3JldHVybiB0aGlzLl9rfSksXy5mPUosUC5mPVUsbigiNmFiZiIpLmY9ai5mPVEsbigiMzU1ZCIpLmY9WixuKCI5YWE5IikuZj10dCxpJiYhbigiYjhlMyIpJiZzKFcsInByb3BlcnR5SXNFbnVtZXJhYmxlIixaLCEwKSxoLmY9ZnVuY3Rpb24odCl7cmV0dXJuIFkocCh0KSl9KSxhKGEuRythLlcrYS5GKiFSLHtTeW1ib2w6TX0pO2Zvcih2YXIgZXQ9Imhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzIi5zcGxpdCgiLCIpLG50PTA7ZXQubGVuZ3RoPm50OylwKGV0W250KytdKTtmb3IodmFyIHJ0PUMocC5zdG9yZSksb3Q9MDtydC5sZW5ndGg+b3Q7KXYocnRbb3QrK10pO2EoYS5TK2EuRiohUiwiU3ltYm9sIix7Zm9yOmZ1bmN0aW9uKHQpe3JldHVybiBvKFYsdCs9IiIpP1ZbdF06Vlt0XT1NKHQpfSxrZXlGb3I6ZnVuY3Rpb24odCl7aWYoIXEodCkpdGhyb3cgVHlwZUVycm9yKHQrIiBpcyBub3QgYSBzeW1ib2whIik7Zm9yKHZhciBlIGluIFYpaWYoVltlXT09PXQpcmV0dXJuIGV9LHVzZVNldHRlcjpmdW5jdGlvbigpe0I9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe0I9ITF9fSksYShhLlMrYS5GKiFSLCJPYmplY3QiLHtjcmVhdGU6SyxkZWZpbmVQcm9wZXJ0eTpVLGRlZmluZVByb3BlcnRpZXM6RyxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6SixnZXRPd25Qcm9wZXJ0eU5hbWVzOlEsZ2V0T3duUHJvcGVydHlTeW1ib2xzOnR0fSksayYmYShhLlMrYS5GKighUnx8YyhmdW5jdGlvbigpe3ZhciB0PU0oKTtyZXR1cm4iW251bGxdIiE9JChbdF0pfHwie30iIT0kKHthOnR9KXx8Int9IiE9JChPYmplY3QodCkpfSkpLCJKU09OIix7c3RyaW5naWZ5OmZ1bmN0aW9uKHQpe3ZhciBlLG4scj1bdF0sbz0xO3doaWxlKGFyZ3VtZW50cy5sZW5ndGg+bylyLnB1c2goYXJndW1lbnRzW28rK10pO2lmKG49ZT1yWzFdLChnKGUpfHx2b2lkIDAhPT10KSYmIXEodCkpcmV0dXJuIHkoZSl8fChlPWZ1bmN0aW9uKHQsZSl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIG4mJihlPW4uY2FsbCh0aGlzLHQsZSkpLCFxKGUpKXJldHVybiBlfSksclsxXT1lLCQuYXBwbHkoayxyKX19KSxNW0RdW0xdfHxuKCIzNWU4IikoTVtEXSxMLE1bRF0udmFsdWVPZiksbChNLCJTeW1ib2wiKSxsKE1hdGgsIk1hdGgiLCEwKSxsKHIuSlNPTiwiSlNPTiIsITApfSwiMDM5NSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjM2YzMiKSxvPW4oIjZhYmYiKS5mLGk9e30udG9TdHJpbmcsYT0ib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdLHM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBvKHQpfWNhdGNoKGUpe3JldHVybiBhLnNsaWNlKCl9fTt0LmV4cG9ydHMuZj1mdW5jdGlvbih0KXtyZXR1cm4gYSYmIltvYmplY3QgV2luZG93XSI9PWkuY2FsbCh0KT9zKHQpOm8ocih0KSl9fSwiMDNkZCI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImVhYzUiKSxvPW4oIjU3YTUiKSxpPU9iamVjdC5wcm90b3R5cGUsYT1pLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHModCl7aWYoIXIodCkpcmV0dXJuIG8odCk7dmFyIGU9W107Zm9yKHZhciBuIGluIE9iamVjdCh0KSlhLmNhbGwodCxuKSYmImNvbnN0cnVjdG9yIiE9biYmZS5wdXNoKG4pO3JldHVybiBlfXQuZXhwb3J0cz1zfSwiMDY0NCI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjM4MTgiKSxvPTEsaT00O2Z1bmN0aW9uIGEodCl7cmV0dXJuIHIodCxvfGkpfXQuZXhwb3J0cz1hfSwiMDdjNyI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKCl7cmV0dXJuITF9dC5leHBvcnRzPW59LCIwN2UzIjpmdW5jdGlvbih0LGUpe3ZhciBuPXt9Lmhhc093blByb3BlcnR5O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiBuLmNhbGwodCxlKX19LCIwODdkIjpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4odCxlKXt2YXIgbj0tMSxyPWUubGVuZ3RoLG89dC5sZW5ndGg7d2hpbGUoKytuPHIpdFtvK25dPWVbbl07cmV0dXJuIHR9dC5leHBvcnRzPW59LCIwOTUyIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKCI0MWIyIiksbz1DKHIpLGk9bigiOGJiZiIpLGE9QyhpKSxzPW4oIjQ2Y2YiKSx1PUMocyksYz1uKCI3YjQ0IiksZj1DKGMpLGw9bigiYWM2OSIpLGQ9QyhsKSxwPW4oIjczYzgiKSxoPW4oIjMxZjIiKSx2PW4oIjk3NzgiKSxtPUModikseT1uKCJhN2UyIiksYj1DKHkpLGc9bigiZDI3YyIpLHc9QyhnKSx4PW4oImRkNDIiKSxPPW4oIjQ4YmIiKSxUPUMoTyksaj1uKCJkMmY5IiksXz1uKCJmNzcyZCIpLFA9QyhfKTtmdW5jdGlvbiBDKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBFKCl7cmV0dXJuIiJ9ZnVuY3Rpb24gUygpe3JldHVybiB3aW5kb3cuZG9jdW1lbnR9YVsiZGVmYXVsdCJdLnVzZSh1WyJkZWZhdWx0Il0se25hbWU6ImFudC1yZWYifSk7dmFyIEE9WyJjbGljayIsIm1vdXNlZG93biIsInRvdWNoc3RhcnQiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZvY3VzIiwiYmx1ciIsImNvbnRleHRtZW51Il07ZVsiZGVmYXVsdCJdPXtuYW1lOiJUcmlnZ2VyIixtaXhpbnM6W1RbImRlZmF1bHQiXV0scHJvcHM6e2FjdGlvbjpmWyJkZWZhdWx0Il0ub25lT2ZUeXBlKFtmWyJkZWZhdWx0Il0uc3RyaW5nLGZbImRlZmF1bHQiXS5hcnJheU9mKGZbImRlZmF1bHQiXS5zdHJpbmcpXSkuZGVmKFtdKSxzaG93QWN0aW9uOmZbImRlZmF1bHQiXS5hbnkuZGVmKFtdKSxoaWRlQWN0aW9uOmZbImRlZmF1bHQiXS5hbnkuZGVmKFtdKSxnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbjpmWyJkZWZhdWx0Il0uYW55LmRlZihFKSxhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTpmWyJkZWZhdWx0Il0uZnVuYy5kZWYoeC5ub29wKSxwb3B1cDpmWyJkZWZhdWx0Il0uYW55LHBvcHVwU3R5bGU6ZlsiZGVmYXVsdCJdLm9iamVjdC5kZWYoe30pLHByZWZpeENsczpmWyJkZWZhdWx0Il0uc3RyaW5nLmRlZigicmMtdHJpZ2dlci1wb3B1cCIpLHBvcHVwQ2xhc3NOYW1lOmZbImRlZmF1bHQiXS5zdHJpbmcuZGVmKCIiKSxwb3B1cFBsYWNlbWVudDpmWyJkZWZhdWx0Il0uc3RyaW5nLGJ1aWx0aW5QbGFjZW1lbnRzOmZbImRlZmF1bHQiXS5vYmplY3QscG9wdXBUcmFuc2l0aW9uTmFtZTpmWyJkZWZhdWx0Il0ub25lT2ZUeXBlKFtmWyJkZWZhdWx0Il0uc3RyaW5nLGZbImRlZmF1bHQiXS5vYmplY3RdKSxwb3B1cEFuaW1hdGlvbjpmWyJkZWZhdWx0Il0uYW55LG1vdXNlRW50ZXJEZWxheTpmWyJkZWZhdWx0Il0ubnVtYmVyLmRlZigwKSxtb3VzZUxlYXZlRGVsYXk6ZlsiZGVmYXVsdCJdLm51bWJlci5kZWYoLjEpLHpJbmRleDpmWyJkZWZhdWx0Il0ubnVtYmVyLGZvY3VzRGVsYXk6ZlsiZGVmYXVsdCJdLm51bWJlci5kZWYoMCksYmx1ckRlbGF5OmZbImRlZmF1bHQiXS5udW1iZXIuZGVmKC4xNSksZ2V0UG9wdXBDb250YWluZXI6ZlsiZGVmYXVsdCJdLmZ1bmMsZ2V0RG9jdW1lbnQ6ZlsiZGVmYXVsdCJdLmZ1bmMuZGVmKFMpLGZvcmNlUmVuZGVyOmZbImRlZmF1bHQiXS5ib29sLGRlc3Ryb3lQb3B1cE9uSGlkZTpmWyJkZWZhdWx0Il0uYm9vbC5kZWYoITEpLG1hc2s6ZlsiZGVmYXVsdCJdLmJvb2wuZGVmKCExKSxtYXNrQ2xvc2FibGU6ZlsiZGVmYXVsdCJdLmJvb2wuZGVmKCEwKSxwb3B1cEFsaWduOmZbImRlZmF1bHQiXS5vYmplY3QuZGVmKHt9KSxwb3B1cFZpc2libGU6ZlsiZGVmYXVsdCJdLmJvb2wsZGVmYXVsdFBvcHVwVmlzaWJsZTpmWyJkZWZhdWx0Il0uYm9vbC5kZWYoITEpLG1hc2tUcmFuc2l0aW9uTmFtZTpmWyJkZWZhdWx0Il0ub25lT2ZUeXBlKFtmWyJkZWZhdWx0Il0uc3RyaW5nLGZbImRlZmF1bHQiXS5vYmplY3RdKSxtYXNrQW5pbWF0aW9uOmZbImRlZmF1bHQiXS5zdHJpbmcsc3RyZXRjaDpmWyJkZWZhdWx0Il0uc3RyaW5nLGFsaWduUG9pbnQ6ZlsiZGVmYXVsdCJdLmJvb2x9LHByb3ZpZGU6ZnVuY3Rpb24oKXtyZXR1cm57dmNUcmlnZ2VyQ29udGV4dDp0aGlzfX0saW5qZWN0Ont2Y1RyaWdnZXJDb250ZXh0OntkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue319fX0sZGF0YTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dm9pZCAwO3JldHVybiBlPSgwLHAuaGFzUHJvcCkodGhpcywicG9wdXBWaXNpYmxlIik/ISF0LnBvcHVwVmlzaWJsZTohIXQuZGVmYXVsdFBvcHVwVmlzaWJsZSx7c1BvcHVwVmlzaWJsZTplLHBvaW50Om51bGx9fSx3YXRjaDp7cG9wdXBWaXNpYmxlOmZ1bmN0aW9uKHQpe3ZvaWQgMCE9PXQmJih0aGlzLnNQb3B1cFZpc2libGU9dCl9LHNQb3B1cFZpc2libGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe2UucmVuZGVyQ29tcG9uZW50KG51bGwsZnVuY3Rpb24oKXtlLmFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlKHQpfSl9KX19LGJlZm9yZUNyZWF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7QS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbImZpcmUiK2VdPWZ1bmN0aW9uKG4pe3QuZmlyZUV2ZW50cyhlLG4pfX0pfSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QucmVuZGVyQ29tcG9uZW50KG51bGwpLHQudXBkYXRlZENhbCgpfSl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dC51cGRhdGVkQ2FsKCl9KX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuY2xlYXJEZWxheVRpbWVyKCksdGhpcy5jbGVhck91dHNpZGVIYW5kbGVyKCksY2xlYXJUaW1lb3V0KHRoaXMubW91c2VEb3duVGltZW91dCl9LG1ldGhvZHM6e3VwZGF0ZWRDYWw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRwcm9wcyxlPXRoaXMuJGRhdGE7aWYoZS5zUG9wdXBWaXNpYmxlKXt2YXIgbj12b2lkIDA7dGhpcy5jbGlja091dHNpZGVIYW5kbGVyfHwhdGhpcy5pc0NsaWNrVG9IaWRlKCkmJiF0aGlzLmlzQ29udGV4dG1lbnVUb1Nob3coKXx8KG49dC5nZXREb2N1bWVudCgpLHRoaXMuY2xpY2tPdXRzaWRlSGFuZGxlcj0oMCxtWyJkZWZhdWx0Il0pKG4sIm1vdXNlZG93biIsdGhpcy5vbkRvY3VtZW50Q2xpY2spKSx0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXJ8fChuPW58fHQuZ2V0RG9jdW1lbnQoKSx0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXI9KDAsbVsiZGVmYXVsdCJdKShuLCJ0b3VjaHN0YXJ0Iix0aGlzLm9uRG9jdW1lbnRDbGljaykpLCF0aGlzLmNvbnRleHRtZW51T3V0c2lkZUhhbmRsZXIxJiZ0aGlzLmlzQ29udGV4dG1lbnVUb1Nob3coKSYmKG49bnx8dC5nZXREb2N1bWVudCgpLHRoaXMuY29udGV4dG1lbnVPdXRzaWRlSGFuZGxlcjE9KDAsbVsiZGVmYXVsdCJdKShuLCJzY3JvbGwiLHRoaXMub25Db250ZXh0bWVudUNsb3NlKSksIXRoaXMuY29udGV4dG1lbnVPdXRzaWRlSGFuZGxlcjImJnRoaXMuaXNDb250ZXh0bWVudVRvU2hvdygpJiYodGhpcy5jb250ZXh0bWVudU91dHNpZGVIYW5kbGVyMj0oMCxtWyJkZWZhdWx0Il0pKHdpbmRvdywiYmx1ciIsdGhpcy5vbkNvbnRleHRtZW51Q2xvc2UpKX1lbHNlIHRoaXMuY2xlYXJPdXRzaWRlSGFuZGxlcigpfSxvbk1vdXNlZW50ZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy4kcHJvcHMubW91c2VFbnRlckRlbGF5O3RoaXMuZmlyZUV2ZW50cygibW91c2VlbnRlciIsdCksdGhpcy5kZWxheVNldFBvcHVwVmlzaWJsZSghMCxlLGU/bnVsbDp0KX0sb25Nb3VzZU1vdmU6ZnVuY3Rpb24odCl7dGhpcy5maXJlRXZlbnRzKCJtb3VzZW1vdmUiLHQpLHRoaXMuc2V0UG9pbnQodCl9LG9uTW91c2VsZWF2ZTpmdW5jdGlvbih0KXt0aGlzLmZpcmVFdmVudHMoIm1vdXNlbGVhdmUiLHQpLHRoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUoITEsdGhpcy4kcHJvcHMubW91c2VMZWF2ZURlbGF5KX0sb25Qb3B1cE1vdXNlZW50ZXI6ZnVuY3Rpb24oKXt0aGlzLmNsZWFyRGVsYXlUaW1lcigpfSxvblBvcHVwTW91c2VsZWF2ZTpmdW5jdGlvbih0KXt0JiZ0LnJlbGF0ZWRUYXJnZXQmJiF0LnJlbGF0ZWRUYXJnZXQuc2V0VGltZW91dCYmdGhpcy5fY29tcG9uZW50JiZ0aGlzLl9jb21wb25lbnQuZ2V0UG9wdXBEb21Ob2RlJiYoMCxkWyJkZWZhdWx0Il0pKHRoaXMuX2NvbXBvbmVudC5nZXRQb3B1cERvbU5vZGUoKSx0LnJlbGF0ZWRUYXJnZXQpfHx0aGlzLmRlbGF5U2V0UG9wdXBWaXNpYmxlKCExLHRoaXMuJHByb3BzLm1vdXNlTGVhdmVEZWxheSl9LG9uRm9jdXM6ZnVuY3Rpb24odCl7dGhpcy5maXJlRXZlbnRzKCJmb2N1cyIsdCksdGhpcy5jbGVhckRlbGF5VGltZXIoKSx0aGlzLmlzRm9jdXNUb1Nob3coKSYmKHRoaXMuZm9jdXNUaW1lPURhdGUubm93KCksdGhpcy5kZWxheVNldFBvcHVwVmlzaWJsZSghMCx0aGlzLiRwcm9wcy5mb2N1c0RlbGF5KSl9LG9uTW91c2Vkb3duOmZ1bmN0aW9uKHQpe3RoaXMuZmlyZUV2ZW50cygibW91c2Vkb3duIix0KSx0aGlzLnByZUNsaWNrVGltZT1EYXRlLm5vdygpfSxvblRvdWNoc3RhcnQ6ZnVuY3Rpb24odCl7dGhpcy5maXJlRXZlbnRzKCJ0b3VjaHN0YXJ0Iix0KSx0aGlzLnByZVRvdWNoVGltZT1EYXRlLm5vdygpfSxvbkJsdXI6ZnVuY3Rpb24odCl7dGhpcy5maXJlRXZlbnRzKCJibHVyIix0KSx0aGlzLmNsZWFyRGVsYXlUaW1lcigpLHRoaXMuaXNCbHVyVG9IaWRlKCkmJnRoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUoITEsdGhpcy4kcHJvcHMuYmx1ckRlbGF5KX0sb25Db250ZXh0bWVudTpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdGhpcy5maXJlRXZlbnRzKCJjb250ZXh0bWVudSIsdCksdGhpcy5zZXRQb3B1cFZpc2libGUoITAsdCl9LG9uQ29udGV4dG1lbnVDbG9zZTpmdW5jdGlvbigpe3RoaXMuaXNDb250ZXh0bWVudVRvU2hvdygpJiZ0aGlzLmNsb3NlKCl9LG9uQ2xpY2s6ZnVuY3Rpb24odCl7aWYodGhpcy5maXJlRXZlbnRzKCJjbGljayIsdCksdGhpcy5mb2N1c1RpbWUpe3ZhciBlPXZvaWQgMDtpZih0aGlzLnByZUNsaWNrVGltZSYmdGhpcy5wcmVUb3VjaFRpbWU/ZT1NYXRoLm1pbih0aGlzLnByZUNsaWNrVGltZSx0aGlzLnByZVRvdWNoVGltZSk6dGhpcy5wcmVDbGlja1RpbWU/ZT10aGlzLnByZUNsaWNrVGltZTp0aGlzLnByZVRvdWNoVGltZSYmKGU9dGhpcy5wcmVUb3VjaFRpbWUpLE1hdGguYWJzKGUtdGhpcy5mb2N1c1RpbWUpPDIwKXJldHVybjt0aGlzLmZvY3VzVGltZT0wfXRoaXMucHJlQ2xpY2tUaW1lPTAsdGhpcy5wcmVUb3VjaFRpbWU9MCx0JiZ0LnByZXZlbnREZWZhdWx0JiZ0LnByZXZlbnREZWZhdWx0KCksdCYmdC5kb21FdmVudCYmdC5kb21FdmVudC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBuPSF0aGlzLiRkYXRhLnNQb3B1cFZpc2libGU7KHRoaXMuaXNDbGlja1RvSGlkZSgpJiYhbnx8biYmdGhpcy5pc0NsaWNrVG9TaG93KCkpJiZ0aGlzLnNldFBvcHVwVmlzaWJsZSghdGhpcy4kZGF0YS5zUG9wdXBWaXNpYmxlLHQpfSxvblBvcHVwTW91c2VEb3duOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMudmNUcmlnZ2VyQ29udGV4dCxuPXZvaWQgMD09PWU/e306ZTt0aGlzLmhhc1BvcHVwTW91c2VEb3duPSEwLGNsZWFyVGltZW91dCh0aGlzLm1vdXNlRG93blRpbWVvdXQpLHRoaXMubW91c2VEb3duVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5oYXNQb3B1cE1vdXNlRG93bj0hMX0sMCksbi5vblBvcHVwTW91c2VEb3duJiZuLm9uUG9wdXBNb3VzZURvd24uYXBwbHkobixhcmd1bWVudHMpfSxvbkRvY3VtZW50Q2xpY2s6ZnVuY3Rpb24odCl7aWYoIXRoaXMuJHByb3BzLm1hc2t8fHRoaXMuJHByb3BzLm1hc2tDbG9zYWJsZSl7dmFyIGU9dC50YXJnZXQsbj10aGlzLiRlbDsoMCxkWyJkZWZhdWx0Il0pKG4sZSl8fHRoaXMuaGFzUG9wdXBNb3VzZURvd258fHRoaXMuY2xvc2UoKX19LGdldFBvcHVwRG9tTm9kZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb21wb25lbnQmJnRoaXMuX2NvbXBvbmVudC5nZXRQb3B1cERvbU5vZGU/dGhpcy5fY29tcG9uZW50LmdldFBvcHVwRG9tTm9kZSgpOm51bGx9LGdldFJvb3REb21Ob2RlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVsfSxoYW5kbGVHZXRQb3B1cENsYXNzRnJvbUFsaWduOmZ1bmN0aW9uKHQpe3ZhciBlPVtdLG49dGhpcy4kcHJvcHMscj1uLnBvcHVwUGxhY2VtZW50LG89bi5idWlsdGluUGxhY2VtZW50cyxpPW4ucHJlZml4Q2xzLGE9bi5hbGlnblBvaW50LHM9bi5nZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbjtyZXR1cm4gciYmbyYmZS5wdXNoKCgwLHguZ2V0QWxpZ25Qb3B1cENsYXNzTmFtZSkobyxpLHQsYSkpLHMmJmUucHVzaChzKHQpKSxlLmpvaW4oIiAiKX0sZ2V0UG9wdXBBbGlnbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dC5wb3B1cFBsYWNlbWVudCxuPXQucG9wdXBBbGlnbixyPXQuYnVpbHRpblBsYWNlbWVudHM7cmV0dXJuIGUmJnI/KDAseC5nZXRBbGlnbkZyb21QbGFjZW1lbnQpKHIsZSxuKTpufSxzYXZlUG9wdXA6ZnVuY3Rpb24odCl7dGhpcy5fY29tcG9uZW50PXR9LGdldENvbXBvbmVudDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJGNyZWF0ZUVsZW1lbnQsZT10aGlzLG49e307dGhpcy5pc01vdXNlRW50ZXJUb1Nob3coKSYmKG4ubW91c2VlbnRlcj1lLm9uUG9wdXBNb3VzZWVudGVyKSx0aGlzLmlzTW91c2VMZWF2ZVRvSGlkZSgpJiYobi5tb3VzZWxlYXZlPWUub25Qb3B1cE1vdXNlbGVhdmUpLG4ubW91c2Vkb3duPXRoaXMub25Qb3B1cE1vdXNlRG93bixuLnRvdWNoc3RhcnQ9dGhpcy5vblBvcHVwTW91c2VEb3duO3ZhciByPWUuaGFuZGxlR2V0UG9wdXBDbGFzc0Zyb21BbGlnbixpPWUuZ2V0Um9vdERvbU5vZGUsYT1lLmdldENvbnRhaW5lcixzPWUuJGxpc3RlbmVycyx1PWUuJHByb3BzLGM9dS5wcmVmaXhDbHMsZj11LmRlc3Ryb3lQb3B1cE9uSGlkZSxsPXUucG9wdXBDbGFzc05hbWUsZD11LmFjdGlvbixoPXUucG9wdXBBbmltYXRpb24sdj11LnBvcHVwVHJhbnNpdGlvbk5hbWUsbT11LnBvcHVwU3R5bGUseT11Lm1hc2ssYj11Lm1hc2tBbmltYXRpb24sZz11Lm1hc2tUcmFuc2l0aW9uTmFtZSxPPXUuekluZGV4LFQ9dS5zdHJldGNoLGo9dS5hbGlnblBvaW50LF89dGhpcy4kZGF0YSxQPV8uc1BvcHVwVmlzaWJsZSxDPV8ucG9pbnQsRT10aGlzLmdldFBvcHVwQWxpZ24oKSxTPXtwcm9wczp7cHJlZml4Q2xzOmMsZGVzdHJveVBvcHVwT25IaWRlOmYsdmlzaWJsZTpQLHBvaW50OmomJkMsYWN0aW9uOmQsYWxpZ246RSxhbmltYXRpb246aCxnZXRDbGFzc05hbWVGcm9tQWxpZ246cixzdHJldGNoOlQsZ2V0Um9vdERvbU5vZGU6aSxtYXNrOnksekluZGV4Ok8sdHJhbnNpdGlvbk5hbWU6dixtYXNrQW5pbWF0aW9uOmIsbWFza1RyYW5zaXRpb25OYW1lOmcsZ2V0Q29udGFpbmVyOmEscG9wdXBDbGFzc05hbWU6bCxwb3B1cFN0eWxlOm19LG9uOigwLG9bImRlZmF1bHQiXSkoe2FsaWduOnMucG9wdXBBbGlnbnx8eC5ub29wfSxuKSxkaXJlY3RpdmVzOlt7bmFtZToiYW50LXJlZiIsdmFsdWU6dGhpcy5zYXZlUG9wdXB9XX07cmV0dXJuIHQod1siZGVmYXVsdCJdLFMsWygwLHAuZ2V0Q29tcG9uZW50RnJvbVByb3ApKGUsInBvcHVwIildKX0sZ2V0Q29udGFpbmVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kcHJvcHMsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtlLnN0eWxlLnBvc2l0aW9uPSJhYnNvbHV0ZSIsZS5zdHlsZS50b3A9IjAiLGUuc3R5bGUubGVmdD0iMCIsZS5zdHlsZS53aWR0aD0iMTAwJSI7dmFyIG49dC5nZXRQb3B1cENvbnRhaW5lcj90LmdldFBvcHVwQ29udGFpbmVyKHRoaXMuJGVsKTp0LmdldERvY3VtZW50KCkuYm9keTtyZXR1cm4gbi5hcHBlbmRDaGlsZChlKSx0aGlzLnBvcHVwQ29udGFpbmVyPWUsZX0sc2V0UG9wdXBWaXNpYmxlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy4kcHJvcHMuYWxpZ25Qb2ludDt0aGlzLmNsZWFyRGVsYXlUaW1lcigpLHRoaXMuJGRhdGEuc1BvcHVwVmlzaWJsZSE9PXQmJigoMCxwLmhhc1Byb3ApKHRoaXMsInBvcHVwVmlzaWJsZSIpfHx0aGlzLnNldFN0YXRlKHtzUG9wdXBWaXNpYmxlOnR9KSx0aGlzLiRsaXN0ZW5lcnMucG9wdXBWaXNpYmxlQ2hhbmdlJiZ0aGlzLiRsaXN0ZW5lcnMucG9wdXBWaXNpYmxlQ2hhbmdlKHQpKSx0JiZuJiZlJiZ0aGlzLnNldFBvaW50KGUpfSxzZXRQb2ludDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLiRwcm9wcy5hbGlnblBvaW50O2UmJnQmJnRoaXMuc2V0U3RhdGUoe3BvaW50OntwYWdlWDp0LnBhZ2VYLHBhZ2VZOnQucGFnZVl9fSl9LGRlbGF5U2V0UG9wdXBWaXNpYmxlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLG89MWUzKmU7aWYodGhpcy5jbGVhckRlbGF5VGltZXIoKSxvKXt2YXIgaT1uP3twYWdlWDpuLnBhZ2VYLHBhZ2VZOm4ucGFnZVl9Om51bGw7dGhpcy5kZWxheVRpbWVyPSgwLGgucmVxdWVzdEFuaW1hdGlvblRpbWVvdXQpKGZ1bmN0aW9uKCl7ci5zZXRQb3B1cFZpc2libGUodCxpKSxyLmNsZWFyRGVsYXlUaW1lcigpfSxvKX1lbHNlIHRoaXMuc2V0UG9wdXBWaXNpYmxlKHQsbil9LGNsZWFyRGVsYXlUaW1lcjpmdW5jdGlvbigpe3RoaXMuZGVsYXlUaW1lciYmKCgwLGguY2FuY2VsQW5pbWF0aW9uVGltZW91dCkodGhpcy5kZWxheVRpbWVyKSx0aGlzLmRlbGF5VGltZXI9bnVsbCl9LGNsZWFyT3V0c2lkZUhhbmRsZXI6ZnVuY3Rpb24oKXt0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXImJih0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIucmVtb3ZlKCksdGhpcy5jbGlja091dHNpZGVIYW5kbGVyPW51bGwpLHRoaXMuY29udGV4dG1lbnVPdXRzaWRlSGFuZGxlcjEmJih0aGlzLmNvbnRleHRtZW51T3V0c2lkZUhhbmRsZXIxLnJlbW92ZSgpLHRoaXMuY29udGV4dG1lbnVPdXRzaWRlSGFuZGxlcjE9bnVsbCksdGhpcy5jb250ZXh0bWVudU91dHNpZGVIYW5kbGVyMiYmKHRoaXMuY29udGV4dG1lbnVPdXRzaWRlSGFuZGxlcjIucmVtb3ZlKCksdGhpcy5jb250ZXh0bWVudU91dHNpZGVIYW5kbGVyMj1udWxsKSx0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXImJih0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIucmVtb3ZlKCksdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyPW51bGwpfSxjcmVhdGVUd29DaGFpbnM6ZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24oKXt9LG49dGhpcy4kbGlzdGVuZXJzO3JldHVybiB0aGlzLmNoaWxkT3JpZ2luRXZlbnRzW3RdJiZuW3RdP3RoaXNbImZpcmUiK3RdOihlPXRoaXMuY2hpbGRPcmlnaW5FdmVudHNbdF18fG5bdF18fGUsZSl9LGlzQ2xpY2tUb1Nob3c6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRwcm9wcyxlPXQuYWN0aW9uLG49dC5zaG93QWN0aW9uO3JldHVybi0xIT09ZS5pbmRleE9mKCJjbGljayIpfHwtMSE9PW4uaW5kZXhPZigiY2xpY2siKX0saXNDb250ZXh0bWVudVRvU2hvdzpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dC5hY3Rpb24sbj10LnNob3dBY3Rpb247cmV0dXJuLTEhPT1lLmluZGV4T2YoImNvbnRleHRtZW51Iil8fC0xIT09bi5pbmRleE9mKCJjb250ZXh0bWVudSIpfSxpc0NsaWNrVG9IaWRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kcHJvcHMsZT10LmFjdGlvbixuPXQuaGlkZUFjdGlvbjtyZXR1cm4tMSE9PWUuaW5kZXhPZigiY2xpY2siKXx8LTEhPT1uLmluZGV4T2YoImNsaWNrIil9LGlzTW91c2VFbnRlclRvU2hvdzpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dC5hY3Rpb24sbj10LnNob3dBY3Rpb247cmV0dXJuLTEhPT1lLmluZGV4T2YoImhvdmVyIil8fC0xIT09bi5pbmRleE9mKCJtb3VzZWVudGVyIil9LGlzTW91c2VMZWF2ZVRvSGlkZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dC5hY3Rpb24sbj10LmhpZGVBY3Rpb247cmV0dXJuLTEhPT1lLmluZGV4T2YoImhvdmVyIil8fC0xIT09bi5pbmRleE9mKCJtb3VzZWxlYXZlIil9LGlzRm9jdXNUb1Nob3c6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRwcm9wcyxlPXQuYWN0aW9uLG49dC5zaG93QWN0aW9uO3JldHVybi0xIT09ZS5pbmRleE9mKCJmb2N1cyIpfHwtMSE9PW4uaW5kZXhPZigiZm9jdXMiKX0saXNCbHVyVG9IaWRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kcHJvcHMsZT10LmFjdGlvbixuPXQuaGlkZUFjdGlvbjtyZXR1cm4tMSE9PWUuaW5kZXhPZigiZm9jdXMiKXx8LTEhPT1uLmluZGV4T2YoImJsdXIiKX0sZm9yY2VQb3B1cEFsaWduOmZ1bmN0aW9uKCl7dGhpcy4kZGF0YS5zUG9wdXBWaXNpYmxlJiZ0aGlzLl9jb21wb25lbnQmJnRoaXMuX2NvbXBvbmVudC4kcmVmcy5hbGlnbkluc3RhbmNlJiZ0aGlzLl9jb21wb25lbnQuJHJlZnMuYWxpZ25JbnN0YW5jZS5mb3JjZUFsaWduKCl9LGZpcmVFdmVudHM6ZnVuY3Rpb24odCxlKXt0aGlzLmNoaWxkT3JpZ2luRXZlbnRzW3RdJiZ0aGlzLmNoaWxkT3JpZ2luRXZlbnRzW3RdKGUpLHRoaXMuX19lbWl0KHQsZSl9LGNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5zZXRQb3B1cFZpc2libGUoITEpfX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50c1swXSxuPXRoaXMuc1BvcHVwVmlzaWJsZSxyPSgwLHAuZmlsdGVyRW1wdHkpKHRoaXMuJHNsb3RzWyJkZWZhdWx0Il0pLG89dGhpcy4kcHJvcHMsaT1vLmZvcmNlUmVuZGVyLGE9by5hbGlnblBvaW50O3IubGVuZ3RoPjEmJigwLGJbImRlZmF1bHQiXSkoITEsIlRyaWdnZXIgJHNsb3RzLmRlZmF1bHQubGVuZ3RoID4gMSwganVzdCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQiLCEwKTt2YXIgcz1yWzBdO3RoaXMuY2hpbGRPcmlnaW5FdmVudHM9KDAscC5nZXRFdmVudHMpKHMpO3ZhciB1PXtwcm9wczp7fSxvbjp7fSxrZXk6InRyaWdnZXIifTt0aGlzLmlzQ29udGV4dG1lbnVUb1Nob3coKT91Lm9uLmNvbnRleHRtZW51PXRoaXMub25Db250ZXh0bWVudTp1Lm9uLmNvbnRleHRtZW51PXRoaXMuY3JlYXRlVHdvQ2hhaW5zKCJjb250ZXh0bWVudSIpLHRoaXMuaXNDbGlja1RvSGlkZSgpfHx0aGlzLmlzQ2xpY2tUb1Nob3coKT8odS5vbi5jbGljaz10aGlzLm9uQ2xpY2ssdS5vbi5tb3VzZWRvd249dGhpcy5vbk1vdXNlZG93bix1Lm9uLnRvdWNoc3RhcnQ9dGhpcy5vblRvdWNoc3RhcnQpOih1Lm9uLmNsaWNrPXRoaXMuY3JlYXRlVHdvQ2hhaW5zKCJjbGljayIpLHUub24ubW91c2Vkb3duPXRoaXMuY3JlYXRlVHdvQ2hhaW5zKCJtb3VzZWRvd24iKSx1Lm9uLnRvdWNoc3RhcnQ9dGhpcy5jcmVhdGVUd29DaGFpbnMoIm9uVG91Y2hzdGFydCIpKSx0aGlzLmlzTW91c2VFbnRlclRvU2hvdygpPyh1Lm9uLm1vdXNlZW50ZXI9dGhpcy5vbk1vdXNlZW50ZXIsYSYmKHUub24ubW91c2Vtb3ZlPXRoaXMub25Nb3VzZU1vdmUpKTp1Lm9uLm1vdXNlZW50ZXI9dGhpcy5jcmVhdGVUd29DaGFpbnMoIm1vdXNlZW50ZXIiKSx0aGlzLmlzTW91c2VMZWF2ZVRvSGlkZSgpP3Uub24ubW91c2VsZWF2ZT10aGlzLm9uTW91c2VsZWF2ZTp1Lm9uLm1vdXNlbGVhdmU9dGhpcy5jcmVhdGVUd29DaGFpbnMoIm1vdXNlbGVhdmUiKSx0aGlzLmlzRm9jdXNUb1Nob3coKXx8dGhpcy5pc0JsdXJUb0hpZGUoKT8odS5vbi5mb2N1cz10aGlzLm9uRm9jdXMsdS5vbi5ibHVyPXRoaXMub25CbHVyKToodS5vbi5mb2N1cz10aGlzLmNyZWF0ZVR3b0NoYWlucygiZm9jdXMiKSx1Lm9uLmJsdXI9ZnVuY3Rpb24oZSl7IWV8fGUucmVsYXRlZFRhcmdldCYmKDAsZFsiZGVmYXVsdCJdKShlLnRhcmdldCxlLnJlbGF0ZWRUYXJnZXQpfHx0LmNyZWF0ZVR3b0NoYWlucygiYmx1ciIpKGUpfSk7dmFyIGM9KDAsai5jbG9uZUVsZW1lbnQpKHMsdSk7cmV0dXJuIGUoUFsiZGVmYXVsdCJdLHthdHRyczp7cGFyZW50OnRoaXMsdmlzaWJsZTpuLGF1dG9Nb3VudDohMSxmb3JjZVJlbmRlcjppLGdldENvbXBvbmVudDp0aGlzLmdldENvbXBvbmVudCxnZXRDb250YWluZXI6dGhpcy5nZXRDb250YWluZXIsY2hpbGRyZW46ZnVuY3Rpb24oZSl7dmFyIG49ZS5yZW5kZXJDb21wb25lbnQ7cmV0dXJuIHQucmVuZGVyQ29tcG9uZW50PW4sY319fSl9fX0sIjBiMDciOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIzNGFjIiksbz1uKCIzNjk4Iik7ZnVuY3Rpb24gaSh0LGUpe3ZhciBuPW8odCxlKTtyZXR1cm4gcihuKT9uOnZvaWQgMH10LmV4cG9ydHM9aX0sIjBjYTUiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGVbImRlZmF1bHQiXT1pLGUuY2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lPWE7dmFyIHI9WyJtb3oiLCJtcyIsIndlYmtpdCJdO2Z1bmN0aW9uIG8oKXt2YXIgdD0wO3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj0obmV3IERhdGUpLmdldFRpbWUoKSxyPU1hdGgubWF4KDAsMTYtKG4tdCkpLG89d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKG4rcil9LHIpO3JldHVybiB0PW4rcixvfX1mdW5jdGlvbiBpKCl7aWYoInVuZGVmaW5lZCI9PT10eXBlb2Ygd2luZG93KXJldHVybiBmdW5jdGlvbigpe307aWYod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdyk7dmFyIHQ9ci5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQrIlJlcXVlc3RBbmltYXRpb25GcmFtZSJpbiB3aW5kb3d9KVswXTtyZXR1cm4gdD93aW5kb3dbdCsiUmVxdWVzdEFuaW1hdGlvbkZyYW1lIl06bygpfWZ1bmN0aW9uIGEodCl7aWYoInVuZGVmaW5lZCI9PT10eXBlb2Ygd2luZG93KXJldHVybiBudWxsO2lmKHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSlyZXR1cm4gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHQpO3ZhciBlPXIuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0KyJDYW5jZWxBbmltYXRpb25GcmFtZSJpbiB3aW5kb3d8fHQrIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSJpbiB3aW5kb3d9KVswXTtyZXR1cm4gZT8od2luZG93W2UrIkNhbmNlbEFuaW1hdGlvbkZyYW1lIl18fHdpbmRvd1tlKyJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiXSkuY2FsbCh0aGlzLHQpOmNsZWFyVGltZW91dCh0KX19LCIwZDI0IjpmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKHQpe3ZhciByPW4oIjJiM2UiKSxvPW4oIjA3YzciKSxpPWUmJiFlLm5vZGVUeXBlJiZlLGE9aSYmIm9iamVjdCI9PXR5cGVvZiB0JiZ0JiYhdC5ub2RlVHlwZSYmdCxzPWEmJmEuZXhwb3J0cz09PWksdT1zP3IuQnVmZmVyOnZvaWQgMCxjPXU/dS5pc0J1ZmZlcjp2b2lkIDAsZj1jfHxvO3QuZXhwb3J0cz1mfSkuY2FsbCh0aGlzLG4oIjYyZTQiKSh0KSl9LCIwZjBmIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiOGVlYiIpLG89bigiOTkzNCIpO2Z1bmN0aW9uIGkodCxlKXtyZXR1cm4gdCYmcihlLG8oZSksdCl9dC5leHBvcnRzPWl9LCIwZmM5IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiM2EzOCIpLG89TWF0aC5tYXgsaT1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD1yKHQpLHQ8MD9vKHQrZSwwKTppKHQsZSl9fSwxMDQxOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI4ZWViIiksbz1uKCJhMDI5Iik7ZnVuY3Rpb24gaSh0LGUpe3JldHVybiByKHQsbyh0KSxlKX10LmV4cG9ydHM9aX0sMTA5ODpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2UuX19lc01vZHVsZT0hMDt2YXIgcj1uKCIxN2VkIiksbz11KHIpLGk9bigiZjg5MyIpLGE9dShpKSxzPSJmdW5jdGlvbiI9PT10eXBlb2YgYS5kZWZhdWx0JiYic3ltYm9sIj09PXR5cGVvZiBvLmRlZmF1bHQ/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmImZ1bmN0aW9uIj09PXR5cGVvZiBhLmRlZmF1bHQmJnQuY29uc3RydWN0b3I9PT1hLmRlZmF1bHQmJnQhPT1hLmRlZmF1bHQucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fTtmdW5jdGlvbiB1KHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lLmRlZmF1bHQ9ImZ1bmN0aW9uIj09PXR5cGVvZiBhLmRlZmF1bHQmJiJzeW1ib2wiPT09cyhvLmRlZmF1bHQpP2Z1bmN0aW9uKHQpe3JldHVybiJ1bmRlZmluZWQiPT09dHlwZW9mIHQ/InVuZGVmaW5lZCI6cyh0KX06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PT10eXBlb2YgYS5kZWZhdWx0JiZ0LmNvbnN0cnVjdG9yPT09YS5kZWZhdWx0JiZ0IT09YS5kZWZhdWx0LnByb3RvdHlwZT8ic3ltYm9sIjoidW5kZWZpbmVkIj09PXR5cGVvZiB0PyJ1bmRlZmluZWQiOnModCl9fSwiMTE4ZiI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigiODc1ZCIpLG89aShyKTtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lWyJkZWZhdWx0Il09b1siZGVmYXVsdCJdfSwxMjkwOmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgZT10eXBlb2YgdDtyZXR1cm4ic3RyaW5nIj09ZXx8Im51bWJlciI9PWV8fCJzeW1ib2wiPT1lfHwiYm9vbGVhbiI9PWU/Il9fcHJvdG9fXyIhPT10Om51bGw9PT10fXQuZXhwb3J0cz1ufSwxMzEwOmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXtyZXR1cm4gbnVsbCE9dCYmIm9iamVjdCI9PXR5cGVvZiB0fXQuZXhwb3J0cz1ufSwiMTM0YiI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigiNDAzOSIpLGk9cihvKSxhPW4oIjMyMGMiKSxzPXIoYSksdT0hMCxjPSExLGY9WyJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImN0cmxLZXkiLCJjdXJyZW50VGFyZ2V0IiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsInRhcmdldCIsInRpbWVTdGFtcCIsInZpZXciLCJ0eXBlIl07ZnVuY3Rpb24gbCh0KXtyZXR1cm4gbnVsbD09PXR8fHZvaWQgMD09PXR9dmFyIGQ9W3tyZWc6L15rZXkvLHByb3BzOlsiY2hhciIsImNoYXJDb2RlIiwia2V5Iiwia2V5Q29kZSIsIndoaWNoIl0sZml4OmZ1bmN0aW9uKHQsZSl7bCh0LndoaWNoKSYmKHQud2hpY2g9bChlLmNoYXJDb2RlKT9lLmtleUNvZGU6ZS5jaGFyQ29kZSksdm9pZCAwPT09dC5tZXRhS2V5JiYodC5tZXRhS2V5PXQuY3RybEtleSl9fSx7cmVnOi9edG91Y2gvLHByb3BzOlsidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidGFyZ2V0VG91Y2hlcyJdfSx7cmVnOi9eaGFzaGNoYW5nZSQvLHByb3BzOlsibmV3VVJMIiwib2xkVVJMIl19LHtyZWc6L15nZXN0dXJlY2hhbmdlJC9pLHByb3BzOlsicm90YXRpb24iLCJzY2FsZSJdfSx7cmVnOi9eKG1vdXNld2hlZWx8RE9NTW91c2VTY3JvbGwpJC8scHJvcHM6W10sZml4OmZ1bmN0aW9uKHQsZSl7dmFyIG49dm9pZCAwLHI9dm9pZCAwLG89dm9pZCAwLGk9ZS53aGVlbERlbHRhLGE9ZS5heGlzLHM9ZS53aGVlbERlbHRhWSx1PWUud2hlZWxEZWx0YVgsYz1lLmRldGFpbDtpJiYobz1pLzEyMCksYyYmKG89MC0oYyUzPT09MD9jLzM6YykpLHZvaWQgMCE9PWEmJihhPT09dC5IT1JJWk9OVEFMX0FYSVM/KHI9MCxuPTAtbyk6YT09PXQuVkVSVElDQUxfQVhJUyYmKG49MCxyPW8pKSx2b2lkIDAhPT1zJiYocj1zLzEyMCksdm9pZCAwIT09dSYmKG49LTEqdS8xMjApLG58fHJ8fChyPW8pLHZvaWQgMCE9PW4mJih0LmRlbHRhWD1uKSx2b2lkIDAhPT1yJiYodC5kZWx0YVk9ciksdm9pZCAwIT09byYmKHQuZGVsdGE9byl9fSx7cmVnOi9ebW91c2V8Y29udGV4dG1lbnV8Y2xpY2t8bXNwb2ludGVyfCheRE9NTW91c2VTY3JvbGwkKS9pLHByb3BzOlsiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwiYnV0dG9uIiwib2Zmc2V0WCIsInJlbGF0ZWRUYXJnZXQiLCJ3aGljaCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50Iiwib2Zmc2V0WSIsInBhZ2VYIiwicGFnZVkiLCJzY3JlZW5YIiwic2NyZWVuWSJdLGZpeDpmdW5jdGlvbih0LGUpe3ZhciBuPXZvaWQgMCxyPXZvaWQgMCxvPXZvaWQgMCxpPXQudGFyZ2V0LGE9ZS5idXR0b247cmV0dXJuIGkmJmwodC5wYWdlWCkmJiFsKGUuY2xpZW50WCkmJihuPWkub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQscj1uLmRvY3VtZW50RWxlbWVudCxvPW4uYm9keSx0LnBhZ2VYPWUuY2xpZW50WCsociYmci5zY3JvbGxMZWZ0fHxvJiZvLnNjcm9sbExlZnR8fDApLShyJiZyLmNsaWVudExlZnR8fG8mJm8uY2xpZW50TGVmdHx8MCksdC5wYWdlWT1lLmNsaWVudFkrKHImJnIuc2Nyb2xsVG9wfHxvJiZvLnNjcm9sbFRvcHx8MCktKHImJnIuY2xpZW50VG9wfHxvJiZvLmNsaWVudFRvcHx8MCkpLHQud2hpY2h8fHZvaWQgMD09PWF8fCh0LndoaWNoPTEmYT8xOjImYT8zOjQmYT8yOjApLCF0LnJlbGF0ZWRUYXJnZXQmJnQuZnJvbUVsZW1lbnQmJih0LnJlbGF0ZWRUYXJnZXQ9dC5mcm9tRWxlbWVudD09PWk/dC50b0VsZW1lbnQ6dC5mcm9tRWxlbWVudCksdH19XTtmdW5jdGlvbiBwKCl7cmV0dXJuIHV9ZnVuY3Rpb24gaCgpe3JldHVybiBjfWZ1bmN0aW9uIHYodCl7dmFyIGU9dC50eXBlLG49ImZ1bmN0aW9uIj09PXR5cGVvZiB0LnN0b3BQcm9wYWdhdGlvbnx8ImJvb2xlYW4iPT09dHlwZW9mIHQuY2FuY2VsQnViYmxlO2lbImRlZmF1bHQiXS5jYWxsKHRoaXMpLHRoaXMubmF0aXZlRXZlbnQ9dDt2YXIgcj1oOyJkZWZhdWx0UHJldmVudGVkImluIHQ/cj10LmRlZmF1bHRQcmV2ZW50ZWQ/cDpoOiJnZXRQcmV2ZW50RGVmYXVsdCJpbiB0P3I9dC5nZXRQcmV2ZW50RGVmYXVsdCgpP3A6aDoicmV0dXJuVmFsdWUiaW4gdCYmKHI9dC5yZXR1cm5WYWx1ZT09PWM/cDpoKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1yO3ZhciBvPVtdLGE9dm9pZCAwLHM9dm9pZCAwLHU9dm9pZCAwLGw9Zi5jb25jYXQoKTtkLmZvckVhY2goZnVuY3Rpb24odCl7ZS5tYXRjaCh0LnJlZykmJihsPWwuY29uY2F0KHQucHJvcHMpLHQuZml4JiZvLnB1c2godC5maXgpKX0pLHM9bC5sZW5ndGg7d2hpbGUocyl1PWxbLS1zXSx0aGlzW3VdPXRbdV07IXRoaXMudGFyZ2V0JiZuJiYodGhpcy50YXJnZXQ9dC5zcmNFbGVtZW50fHxkb2N1bWVudCksdGhpcy50YXJnZXQmJjM9PT10aGlzLnRhcmdldC5ub2RlVHlwZSYmKHRoaXMudGFyZ2V0PXRoaXMudGFyZ2V0LnBhcmVudE5vZGUpLHM9by5sZW5ndGg7d2hpbGUocylhPW9bLS1zXSxhKHRoaXMsdCk7dGhpcy50aW1lU3RhbXA9dC50aW1lU3RhbXB8fERhdGUubm93KCl9dmFyIG09aVsiZGVmYXVsdCJdLnByb3RvdHlwZTsoMCxzWyJkZWZhdWx0Il0pKHYucHJvdG90eXBlLG0se2NvbnN0cnVjdG9yOnYscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm5hdGl2ZUV2ZW50O3QucHJldmVudERlZmF1bHQ/dC5wcmV2ZW50RGVmYXVsdCgpOnQucmV0dXJuVmFsdWU9YyxtLnByZXZlbnREZWZhdWx0LmNhbGwodGhpcyl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMubmF0aXZlRXZlbnQ7dC5zdG9wUHJvcGFnYXRpb24/dC5zdG9wUHJvcGFnYXRpb24oKTp0LmNhbmNlbEJ1YmJsZT11LG0uc3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyl9fSksZVsiZGVmYXVsdCJdPXYsdC5leHBvcnRzPWVbImRlZmF1bHQiXX0sMTM2ODpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZGEwMyIpLG89ZnVuY3Rpb24oKXt2YXIgdD0vW14uXSskLy5leGVjKHImJnIua2V5cyYmci5rZXlzLklFX1BST1RPfHwiIik7cmV0dXJuIHQ/IlN5bWJvbChzcmMpXzEuIit0OiIifSgpO2Z1bmN0aW9uIGkodCl7cmV0dXJuISFvJiZvIGluIHR9dC5leHBvcnRzPWl9LDE2NTQ6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCI3MWMxIikoITApO24oIjMwZjEiKShTdHJpbmcsIlN0cmluZyIsZnVuY3Rpb24odCl7dGhpcy5fdD1TdHJpbmcodCksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5fdCxuPXRoaXMuX2k7cmV0dXJuIG4+PWUubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9cihlLG4pLHRoaXMuX2krPXQubGVuZ3RoLHt2YWx1ZTp0LGRvbmU6ITF9KX0pfSwxNjkxOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YiLnNwbGl0KCIsIil9LDE3Mjc6ZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz17ZGVmYXVsdDpuKCI0NjlmIiksX19lc01vZHVsZTohMH19LCIxN2VkIjpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oImQ4ZDYiKSxfX2VzTW9kdWxlOiEwfX0sIjFhMmQiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI0MmEyIiksbz1uKCIxMzEwIiksaT0iW29iamVjdCBNYXBdIjtmdW5jdGlvbiBhKHQpe3JldHVybiBvKHQpJiZyKHQpPT1pfXQuZXhwb3J0cz1hfSwiMWE4YyI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQpe3ZhciBlPXR5cGVvZiB0O3JldHVybiBudWxsIT10JiYoIm9iamVjdCI9PWV8fCJmdW5jdGlvbiI9PWUpfXQuZXhwb3J0cz1ufSwiMWJhYyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjdkMWYiKSxvPW4oImEwMjkiKSxpPW4oIjk5MzQiKTtmdW5jdGlvbiBhKHQpe3JldHVybiByKHQsaSxvKX10LmV4cG9ydHM9YX0sIjFiYzMiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJmNzcyIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIXIodCkpcmV0dXJuIHQ7dmFyIG4sbztpZihlJiYiZnVuY3Rpb24iPT10eXBlb2Yobj10LnRvU3RyaW5nKSYmIXIobz1uLmNhbGwodCkpKXJldHVybiBvO2lmKCJmdW5jdGlvbiI9PXR5cGVvZihuPXQudmFsdWVPZikmJiFyKG89bi5jYWxsKHQpKSlyZXR1cm4gbztpZighZSYmImZ1bmN0aW9uIj09dHlwZW9mKG49dC50b1N0cmluZykmJiFyKG89bi5jYWxsKHQpKSlyZXR1cm4gbzt0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpfX0sIjFjZWMiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIwYjA3Iiksbz1uKCIyYjNlIiksaT1yKG8sIlByb21pc2UiKTt0LmV4cG9ydHM9aX0sIjFlYzkiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJmNzcyIiksbz1uKCJlNTNkIikuZG9jdW1lbnQsaT1yKG8pJiZyKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudCh0KTp7fX19LCIxZWZjIjpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4odCl7dmFyIGU9dGhpcy5oYXModCkmJmRlbGV0ZSB0aGlzLl9fZGF0YV9fW3RdO3JldHVybiB0aGlzLnNpemUtPWU/MTowLGV9dC5leHBvcnRzPW59LCIxZmM4IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNDI0NSIpO2Z1bmN0aW9uIG8odCxlKXt2YXIgbj1yKHRoaXMsdCksbz1uLnNpemU7cmV0dXJuIG4uc2V0KHQsZSksdGhpcy5zaXplKz1uLnNpemU9PW8/MDoxLHRoaXN9dC5leHBvcnRzPW99LDIwMDU6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtuLnIoZSk7dmFyIHI9dm9pZCAwLG89e1dlYmtpdDoiLXdlYmtpdC0iLE1vejoiLW1vei0iLG1zOiItbXMtIixPOiItby0ifTtmdW5jdGlvbiBpKCl7aWYodm9pZCAwIT09cilyZXR1cm4gcjtyPSIiO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKS5zdHlsZSxlPSJUcmFuc2Zvcm0iO2Zvcih2YXIgbiBpbiBvKW4rZSBpbiB0JiYocj1uKTtyZXR1cm4gcn1mdW5jdGlvbiBhKCl7cmV0dXJuIGkoKT9pKCkrIlRyYW5zaXRpb25Qcm9wZXJ0eSI6InRyYW5zaXRpb25Qcm9wZXJ0eSJ9ZnVuY3Rpb24gcygpe3JldHVybiBpKCk/aSgpKyJUcmFuc2Zvcm0iOiJ0cmFuc2Zvcm0ifWZ1bmN0aW9uIHUodCxlKXt2YXIgbj1hKCk7biYmKHQuc3R5bGVbbl09ZSwidHJhbnNpdGlvblByb3BlcnR5IiE9PW4mJih0LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eT1lKSl9ZnVuY3Rpb24gYyh0LGUpe3ZhciBuPXMoKTtuJiYodC5zdHlsZVtuXT1lLCJ0cmFuc2Zvcm0iIT09biYmKHQuc3R5bGUudHJhbnNmb3JtPWUpKX1mdW5jdGlvbiBmKHQpe3JldHVybiB0LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eXx8dC5zdHlsZVthKCldfWZ1bmN0aW9uIGwodCl7dmFyIGU9d2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKSxuPWUuZ2V0UHJvcGVydHlWYWx1ZSgidHJhbnNmb3JtIil8fGUuZ2V0UHJvcGVydHlWYWx1ZShzKCkpO2lmKG4mJiJub25lIiE9PW4pe3ZhciByPW4ucmVwbGFjZSgvW14wLTlcLS4sXS9nLCIiKS5zcGxpdCgiLCIpO3JldHVybnt4OnBhcnNlRmxvYXQoclsxMl18fHJbNF0sMCkseTpwYXJzZUZsb2F0KHJbMTNdfHxyWzVdLDApfX1yZXR1cm57eDowLHk6MH19dmFyIGQ9L21hdHJpeFwoKC4qKVwpLyxwPS9tYXRyaXgzZFwoKC4qKVwpLztmdW5jdGlvbiBoKHQsZSl7dmFyIG49d2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKSxyPW4uZ2V0UHJvcGVydHlWYWx1ZSgidHJhbnNmb3JtIil8fG4uZ2V0UHJvcGVydHlWYWx1ZShzKCkpO2lmKHImJiJub25lIiE9PXIpe3ZhciBvPXZvaWQgMCxpPXIubWF0Y2goZCk7aWYoaSlpPWlbMV0sbz1pLnNwbGl0KCIsIikubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBwYXJzZUZsb2F0KHQsMTApfSksb1s0XT1lLngsb1s1XT1lLnksYyh0LCJtYXRyaXgoIitvLmpvaW4oIiwiKSsiKSIpO2Vsc2V7dmFyIGE9ci5tYXRjaChwKVsxXTtvPWEuc3BsaXQoIiwiKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHBhcnNlRmxvYXQodCwxMCl9KSxvWzEyXT1lLngsb1sxM109ZS55LGModCwibWF0cml4M2QoIitvLmpvaW4oIiwiKSsiKSIpfX1lbHNlIGModCwidHJhbnNsYXRlWCgiK2UueCsicHgpIHRyYW5zbGF0ZVkoIitlLnkrInB4KSB0cmFuc2xhdGVaKDApIil9dmFyIHY9ImZ1bmN0aW9uIj09PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiYiZnVuY3Rpb24iPT09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIHR9LG09L1tcLStdPyg/OlxkKlwufClcZCsoPzpbZUVdW1wtK10/XGQrfCkvLnNvdXJjZSx5PXZvaWQgMDtmdW5jdGlvbiBiKHQpe3ZhciBlPXQuc3R5bGUuZGlzcGxheTt0LnN0eWxlLmRpc3BsYXk9Im5vbmUiLHQub2Zmc2V0SGVpZ2h0LHQuc3R5bGUuZGlzcGxheT1lfWZ1bmN0aW9uIGcodCxlLG4pe3ZhciByPW47aWYoIm9iamVjdCIhPT0oInVuZGVmaW5lZCI9PT10eXBlb2YgZT8idW5kZWZpbmVkIjp2KGUpKSlyZXR1cm4idW5kZWZpbmVkIiE9PXR5cGVvZiByPygibnVtYmVyIj09PXR5cGVvZiByJiYocis9InB4Iiksdm9pZCh0LnN0eWxlW2VdPXIpKTp5KHQsZSk7Zm9yKHZhciBvIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShvKSYmZyh0LG8sZVtvXSl9ZnVuY3Rpb24gdyh0KXt2YXIgZT12b2lkIDAsbj12b2lkIDAscj12b2lkIDAsbz10Lm93bmVyRG9jdW1lbnQsaT1vLmJvZHksYT1vJiZvLmRvY3VtZW50RWxlbWVudDtyZXR1cm4gZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49ZS5sZWZ0LHI9ZS50b3Asbi09YS5jbGllbnRMZWZ0fHxpLmNsaWVudExlZnR8fDAsci09YS5jbGllbnRUb3B8fGkuY2xpZW50VG9wfHwwLHtsZWZ0Om4sdG9wOnJ9fWZ1bmN0aW9uIHgodCxlKXt2YXIgbj10WyJwYWdlIisoZT8iWSI6IlgiKSsiT2Zmc2V0Il0scj0ic2Nyb2xsIisoZT8iVG9wIjoiTGVmdCIpO2lmKCJudW1iZXIiIT09dHlwZW9mIG4pe3ZhciBvPXQuZG9jdW1lbnQ7bj1vLmRvY3VtZW50RWxlbWVudFtyXSwibnVtYmVyIiE9PXR5cGVvZiBuJiYobj1vLmJvZHlbcl0pfXJldHVybiBufWZ1bmN0aW9uIE8odCl7cmV0dXJuIHgodCl9ZnVuY3Rpb24gVCh0KXtyZXR1cm4geCh0LCEwKX1mdW5jdGlvbiBqKHQpe3ZhciBlPXcodCksbj10Lm93bmVyRG9jdW1lbnQscj1uLmRlZmF1bHRWaWV3fHxuLnBhcmVudFdpbmRvdztyZXR1cm4gZS5sZWZ0Kz1PKHIpLGUudG9wKz1UKHIpLGV9ZnVuY3Rpb24gXyh0KXtyZXR1cm4gbnVsbCE9PXQmJnZvaWQgMCE9PXQmJnQ9PXQud2luZG93fWZ1bmN0aW9uIFAodCl7cmV0dXJuIF8odCk/dC5kb2N1bWVudDo5PT09dC5ub2RlVHlwZT90OnQub3duZXJEb2N1bWVudH1mdW5jdGlvbiBDKHQsZSxuKXt2YXIgcj1uLG89IiIsaT1QKHQpO3JldHVybiByPXJ8fGkuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0LG51bGwpLHImJihvPXIuZ2V0UHJvcGVydHlWYWx1ZShlKXx8cltlXSksb312YXIgRT1uZXcgUmVnRXhwKCJeKCIrbSsiKSg/IXB4KVthLXolXSskIiwiaSIpLFM9L14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvLEE9ImN1cnJlbnRTdHlsZSIsTT0icnVudGltZVN0eWxlIixrPSJsZWZ0IiwkPSJweCI7ZnVuY3Rpb24gRCh0LGUpe3ZhciBuPXRbQV0mJnRbQV1bZV07aWYoRS50ZXN0KG4pJiYhUy50ZXN0KGUpKXt2YXIgcj10LnN0eWxlLG89cltrXSxpPXRbTV1ba107dFtNXVtrXT10W0FdW2tdLHJba109ImZvbnRTaXplIj09PWU/IjFlbSI6bnx8MCxuPXIucGl4ZWxMZWZ0KyQscltrXT1vLHRbTV1ba109aX1yZXR1cm4iIj09PW4/ImF1dG8iOm59ZnVuY3Rpb24gTih0LGUpe3JldHVybiJsZWZ0Ij09PXQ/ZS51c2VDc3NSaWdodD8icmlnaHQiOnQ6ZS51c2VDc3NCb3R0b20/ImJvdHRvbSI6dH1mdW5jdGlvbiBMKHQpe3JldHVybiJsZWZ0Ij09PXQ/InJpZ2h0IjoicmlnaHQiPT09dD8ibGVmdCI6InRvcCI9PT10PyJib3R0b20iOiJib3R0b20iPT09dD8idG9wIjp2b2lkIDB9ZnVuY3Rpb24gRih0LGUsbil7InN0YXRpYyI9PT1nKHQsInBvc2l0aW9uIikmJih0LnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSIpO3ZhciByPS05OTksbz0tOTk5LGk9TigibGVmdCIsbiksYT1OKCJ0b3AiLG4pLHM9TChpKSxjPUwoYSk7ImxlZnQiIT09aSYmKHI9OTk5KSwidG9wIiE9PWEmJihvPTk5OSk7dmFyIGw9IiIsZD1qKHQpOygibGVmdCJpbiBlfHwidG9wImluIGUpJiYobD1mKHQpfHwiIix1KHQsIm5vbmUiKSksImxlZnQiaW4gZSYmKHQuc3R5bGVbc109IiIsdC5zdHlsZVtpXT1yKyJweCIpLCJ0b3AiaW4gZSYmKHQuc3R5bGVbY109IiIsdC5zdHlsZVthXT1vKyJweCIpLGIodCk7dmFyIHA9aih0KSxoPXt9O2Zvcih2YXIgdiBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodikpe3ZhciBtPU4odixuKSx5PSJsZWZ0Ij09PXY/cjpvLHc9ZFt2XS1wW3ZdO2hbbV09bT09PXY/eSt3Onktd31nKHQsaCksYih0KSwoImxlZnQiaW4gZXx8InRvcCJpbiBlKSYmdSh0LGwpO3ZhciB4PXt9O2Zvcih2YXIgTyBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkoTykpe3ZhciBUPU4oTyxuKSxfPWVbT10tZFtPXTt4W1RdPU89PT1UP2hbVF0rXzpoW1RdLV99Zyh0LHgpfWZ1bmN0aW9uIFYodCxlKXt2YXIgbj1qKHQpLHI9bCh0KSxvPXt4OnIueCx5OnIueX07ImxlZnQiaW4gZSYmKG8ueD1yLngrZS5sZWZ0LW4ubGVmdCksInRvcCJpbiBlJiYoby55PXIueStlLnRvcC1uLnRvcCksaCh0LG8pfWZ1bmN0aW9uIEgodCxlLG4pe2lmKG4uaWdub3JlU2hha2Upe3ZhciByPWoodCksbz1yLmxlZnQudG9GaXhlZCgwKSxpPXIudG9wLnRvRml4ZWQoMCksYT1lLmxlZnQudG9GaXhlZCgwKSx1PWUudG9wLnRvRml4ZWQoMCk7aWYobz09PWEmJmk9PT11KXJldHVybn1uLnVzZUNzc1JpZ2h0fHxuLnVzZUNzc0JvdHRvbT9GKHQsZSxuKTpuLnVzZUNzc1RyYW5zZm9ybSYmcygpaW4gZG9jdW1lbnQuYm9keS5zdHlsZT9WKHQsZSxuKTpGKHQsZSxuKX1mdW5jdGlvbiBJKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspZSh0W25dKX1mdW5jdGlvbiBXKHQpe3JldHVybiJib3JkZXItYm94Ij09PXkodCwiYm94U2l6aW5nIil9InVuZGVmaW5lZCIhPT10eXBlb2Ygd2luZG93JiYoeT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZT9DOkQpO3ZhciBSPVsibWFyZ2luIiwiYm9yZGVyIiwicGFkZGluZyJdLHo9LTEsQj0yLFg9MSxZPTA7ZnVuY3Rpb24gcSh0LGUsbil7dmFyIHI9e30sbz10LnN0eWxlLGk9dm9pZCAwO2ZvcihpIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShpKSYmKHJbaV09b1tpXSxvW2ldPWVbaV0pO2ZvcihpIGluIG4uY2FsbCh0KSxlKWUuaGFzT3duUHJvcGVydHkoaSkmJihvW2ldPXJbaV0pfWZ1bmN0aW9uIFUodCxlLG4pe3ZhciByPTAsbz12b2lkIDAsaT12b2lkIDAsYT12b2lkIDA7Zm9yKGk9MDtpPGUubGVuZ3RoO2krKylpZihvPWVbaV0sbylmb3IoYT0wO2E8bi5sZW5ndGg7YSsrKXt2YXIgcz12b2lkIDA7cz0iYm9yZGVyIj09PW8/IiIrbytuW2FdKyJXaWR0aCI6bytuW2FdLHIrPXBhcnNlRmxvYXQoeSh0LHMpKXx8MH1yZXR1cm4gcn12YXIgRz17fTtmdW5jdGlvbiBLKHQsZSxuKXt2YXIgcj1uO2lmKF8odCkpcmV0dXJuIndpZHRoIj09PWU/Ry52aWV3cG9ydFdpZHRoKHQpOkcudmlld3BvcnRIZWlnaHQodCk7aWYoOT09PXQubm9kZVR5cGUpcmV0dXJuIndpZHRoIj09PWU/Ry5kb2NXaWR0aCh0KTpHLmRvY0hlaWdodCh0KTt2YXIgbz0id2lkdGgiPT09ZT9bIkxlZnQiLCJSaWdodCJdOlsiVG9wIiwiQm90dG9tIl0saT0id2lkdGgiPT09ZT90LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoOnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LGE9eSh0KSxzPVcodCxhKSx1PTA7KG51bGw9PT1pfHx2b2lkIDA9PT1pfHxpPD0wKSYmKGk9dm9pZCAwLHU9eSh0LGUpLChudWxsPT09dXx8dm9pZCAwPT09dXx8TnVtYmVyKHUpPDApJiYodT10LnN0eWxlW2VdfHwwKSx1PXBhcnNlRmxvYXQodSl8fDApLHZvaWQgMD09PXImJihyPXM/WDp6KTt2YXIgYz12b2lkIDAhPT1pfHxzLGY9aXx8dTtyZXR1cm4gcj09PXo/Yz9mLVUodCxbImJvcmRlciIsInBhZGRpbmciXSxvLGEpOnU6Yz9yPT09WD9mOmYrKHI9PT1CPy1VKHQsWyJib3JkZXIiXSxvLGEpOlUodCxbIm1hcmdpbiJdLG8sYSkpOnUrVSh0LFIuc2xpY2UociksbyxhKX1JKFsiV2lkdGgiLCJIZWlnaHQiXSxmdW5jdGlvbih0KXtHWyJkb2MiK3RdPWZ1bmN0aW9uKGUpe3ZhciBuPWUuZG9jdW1lbnQ7cmV0dXJuIE1hdGgubWF4KG4uZG9jdW1lbnRFbGVtZW50WyJzY3JvbGwiK3RdLG4uYm9keVsic2Nyb2xsIit0XSxHWyJ2aWV3cG9ydCIrdF0obikpfSxHWyJ2aWV3cG9ydCIrdF09ZnVuY3Rpb24oZSl7dmFyIG49ImNsaWVudCIrdCxyPWUuZG9jdW1lbnQsbz1yLmJvZHksaT1yLmRvY3VtZW50RWxlbWVudCxhPWlbbl07cmV0dXJuIkNTUzFDb21wYXQiPT09ci5jb21wYXRNb2RlJiZhfHxvJiZvW25dfHxhfX0pO3ZhciBaPXtwb3NpdGlvbjoiYWJzb2x1dGUiLHZpc2liaWxpdHk6ImhpZGRlbiIsZGlzcGxheToiYmxvY2sifTtmdW5jdGlvbiBKKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheSh0KSxuPTA7bjx0O24rKyllW25dPWFyZ3VtZW50c1tuXTt2YXIgcj12b2lkIDAsbz1lWzBdO3JldHVybiAwIT09by5vZmZzZXRXaWR0aD9yPUsuYXBwbHkodm9pZCAwLGUpOnEobyxaLGZ1bmN0aW9uKCl7cj1LLmFwcGx5KHZvaWQgMCxlKX0pLHJ9ZnVuY3Rpb24gUSh0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pO3JldHVybiB0fUkoWyJ3aWR0aCIsImhlaWdodCJdLGZ1bmN0aW9uKHQpe3ZhciBlPXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKTtHWyJvdXRlciIrZV09ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZSYmSihlLHQsbj9ZOlgpfTt2YXIgbj0id2lkdGgiPT09dD9bIkxlZnQiLCJSaWdodCJdOlsiVG9wIiwiQm90dG9tIl07R1t0XT1mdW5jdGlvbihlLHIpe3ZhciBvPXI7aWYodm9pZCAwPT09bylyZXR1cm4gZSYmSihlLHQseik7aWYoZSl7dmFyIGk9eShlKSxhPVcoZSk7cmV0dXJuIGEmJihvKz1VKGUsWyJwYWRkaW5nIiwiYm9yZGVyIl0sbixpKSksZyhlLHQsbyl9fX0pO3ZhciB0dD17Z2V0V2luZG93OmZ1bmN0aW9uKHQpe2lmKHQmJnQuZG9jdW1lbnQmJnQuc2V0VGltZW91dClyZXR1cm4gdDt2YXIgZT10Lm93bmVyRG9jdW1lbnR8fHQ7cmV0dXJuIGUuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93fSxnZXREb2N1bWVudDpQLG9mZnNldDpmdW5jdGlvbih0LGUsbil7aWYoInVuZGVmaW5lZCI9PT10eXBlb2YgZSlyZXR1cm4gaih0KTtIKHQsZSxufHx7fSl9LGlzV2luZG93Ol8sZWFjaDpJLGNzczpnLGNsb25lOmZ1bmN0aW9uKHQpe3ZhciBlPXZvaWQgMCxuPXt9O2ZvcihlIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShlKSYmKG5bZV09dFtlXSk7dmFyIHI9dC5vdmVyZmxvdztpZihyKWZvcihlIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShlKSYmKG4ub3ZlcmZsb3dbZV09dC5vdmVyZmxvd1tlXSk7cmV0dXJuIG59LG1peDpRLGdldFdpbmRvd1Njcm9sbExlZnQ6ZnVuY3Rpb24odCl7cmV0dXJuIE8odCl9LGdldFdpbmRvd1Njcm9sbFRvcDpmdW5jdGlvbih0KXtyZXR1cm4gVCh0KX0sbWVyZ2U6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9e30sZT1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkoZSkscj0wO3I8ZTtyKyspbltyXT1hcmd1bWVudHNbcl07Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspdHQubWl4KHQsbltvXSk7cmV0dXJuIHR9LHZpZXdwb3J0V2lkdGg6MCx2aWV3cG9ydEhlaWdodDowfTtRKHR0LEcpO3ZhciBldD10dDtmdW5jdGlvbiBudCh0KXtpZihldC5pc1dpbmRvdyh0KXx8OT09PXQubm9kZVR5cGUpcmV0dXJuIG51bGw7dmFyIGU9ZXQuZ2V0RG9jdW1lbnQodCksbj1lLmJvZHkscj12b2lkIDAsbz1ldC5jc3ModCwicG9zaXRpb24iKSxpPSJmaXhlZCI9PT1vfHwiYWJzb2x1dGUiPT09bztpZighaSlyZXR1cm4iaHRtbCI9PT10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDp0LnBhcmVudE5vZGU7Zm9yKHI9dC5wYXJlbnROb2RlO3ImJnIhPT1uO3I9ci5wYXJlbnROb2RlKWlmKG89ZXQuY3NzKHIsInBvc2l0aW9uIiksInN0YXRpYyIhPT1vKXJldHVybiByO3JldHVybiBudWxsfXZhciBydD1udDtmdW5jdGlvbiBvdCh0KXtpZihldC5pc1dpbmRvdyh0KXx8OT09PXQubm9kZVR5cGUpcmV0dXJuITE7dmFyIGU9ZXQuZ2V0RG9jdW1lbnQodCksbj1lLmJvZHkscj1udWxsO2ZvcihyPXQucGFyZW50Tm9kZTtyJiZyIT09bjtyPXIucGFyZW50Tm9kZSl7dmFyIG89ZXQuY3NzKHIsInBvc2l0aW9uIik7aWYoImZpeGVkIj09PW8pcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gaXQodCl7dmFyIGU9e2xlZnQ6MCxyaWdodDoxLzAsdG9wOjAsYm90dG9tOjEvMH0sbj1ydCh0KSxyPWV0LmdldERvY3VtZW50KHQpLG89ci5kZWZhdWx0Vmlld3x8ci5wYXJlbnRXaW5kb3csaT1yLmJvZHksYT1yLmRvY3VtZW50RWxlbWVudDt3aGlsZShuKXtpZigtMSE9PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiTVNJRSIpJiYwPT09bi5jbGllbnRXaWR0aHx8bj09PWl8fG49PT1hfHwidmlzaWJsZSI9PT1ldC5jc3Mobiwib3ZlcmZsb3ciKSl7aWYobj09PWl8fG49PT1hKWJyZWFrfWVsc2V7dmFyIHM9ZXQub2Zmc2V0KG4pO3MubGVmdCs9bi5jbGllbnRMZWZ0LHMudG9wKz1uLmNsaWVudFRvcCxlLnRvcD1NYXRoLm1heChlLnRvcCxzLnRvcCksZS5yaWdodD1NYXRoLm1pbihlLnJpZ2h0LHMubGVmdCtuLmNsaWVudFdpZHRoKSxlLmJvdHRvbT1NYXRoLm1pbihlLmJvdHRvbSxzLnRvcCtuLmNsaWVudEhlaWdodCksZS5sZWZ0PU1hdGgubWF4KGUubGVmdCxzLmxlZnQpfW49cnQobil9dmFyIHU9bnVsbDtpZighZXQuaXNXaW5kb3codCkmJjkhPT10Lm5vZGVUeXBlKXt1PXQuc3R5bGUucG9zaXRpb247dmFyIGM9ZXQuY3NzKHQsInBvc2l0aW9uIik7ImFic29sdXRlIj09PWMmJih0LnN0eWxlLnBvc2l0aW9uPSJmaXhlZCIpfXZhciBmPWV0LmdldFdpbmRvd1Njcm9sbExlZnQobyksbD1ldC5nZXRXaW5kb3dTY3JvbGxUb3AobyksZD1ldC52aWV3cG9ydFdpZHRoKG8pLHA9ZXQudmlld3BvcnRIZWlnaHQobyksaD1hLnNjcm9sbFdpZHRoLHY9YS5zY3JvbGxIZWlnaHQsbT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpKTtpZigiaGlkZGVuIj09PW0ub3ZlcmZsb3dYJiYoaD1vLmlubmVyV2lkdGgpLCJoaWRkZW4iPT09bS5vdmVyZmxvd1kmJih2PW8uaW5uZXJIZWlnaHQpLHQuc3R5bGUmJih0LnN0eWxlLnBvc2l0aW9uPXUpLG90KHQpKWUubGVmdD1NYXRoLm1heChlLmxlZnQsZiksZS50b3A9TWF0aC5tYXgoZS50b3AsbCksZS5yaWdodD1NYXRoLm1pbihlLnJpZ2h0LGYrZCksZS5ib3R0b209TWF0aC5taW4oZS5ib3R0b20sbCtwKTtlbHNle3ZhciB5PU1hdGgubWF4KGgsZitkKTtlLnJpZ2h0PU1hdGgubWluKGUucmlnaHQseSk7dmFyIGI9TWF0aC5tYXgodixsK3ApO2UuYm90dG9tPU1hdGgubWluKGUuYm90dG9tLGIpfXJldHVybiBlLnRvcD49MCYmZS5sZWZ0Pj0wJiZlLmJvdHRvbT5lLnRvcCYmZS5yaWdodD5lLmxlZnQ/ZTpudWxsfXZhciBhdD1pdDtmdW5jdGlvbiBzdCh0LGUsbixyKXt2YXIgbz1ldC5jbG9uZSh0KSxpPXt3aWR0aDplLndpZHRoLGhlaWdodDplLmhlaWdodH07cmV0dXJuIHIuYWRqdXN0WCYmby5sZWZ0PG4ubGVmdCYmKG8ubGVmdD1uLmxlZnQpLHIucmVzaXplV2lkdGgmJm8ubGVmdD49bi5sZWZ0JiZvLmxlZnQraS53aWR0aD5uLnJpZ2h0JiYoaS53aWR0aC09by5sZWZ0K2kud2lkdGgtbi5yaWdodCksci5hZGp1c3RYJiZvLmxlZnQraS53aWR0aD5uLnJpZ2h0JiYoby5sZWZ0PU1hdGgubWF4KG4ucmlnaHQtaS53aWR0aCxuLmxlZnQpKSxyLmFkanVzdFkmJm8udG9wPG4udG9wJiYoby50b3A9bi50b3ApLHIucmVzaXplSGVpZ2h0JiZvLnRvcD49bi50b3AmJm8udG9wK2kuaGVpZ2h0Pm4uYm90dG9tJiYoaS5oZWlnaHQtPW8udG9wK2kuaGVpZ2h0LW4uYm90dG9tKSxyLmFkanVzdFkmJm8udG9wK2kuaGVpZ2h0Pm4uYm90dG9tJiYoby50b3A9TWF0aC5tYXgobi5ib3R0b20taS5oZWlnaHQsbi50b3ApKSxldC5taXgobyxpKX12YXIgdXQ9c3Q7ZnVuY3Rpb24gY3QodCl7dmFyIGU9dm9pZCAwLG49dm9pZCAwLHI9dm9pZCAwO2lmKGV0LmlzV2luZG93KHQpfHw5PT09dC5ub2RlVHlwZSl7dmFyIG89ZXQuZ2V0V2luZG93KHQpO2U9e2xlZnQ6ZXQuZ2V0V2luZG93U2Nyb2xsTGVmdChvKSx0b3A6ZXQuZ2V0V2luZG93U2Nyb2xsVG9wKG8pfSxuPWV0LnZpZXdwb3J0V2lkdGgobykscj1ldC52aWV3cG9ydEhlaWdodChvKX1lbHNlIGU9ZXQub2Zmc2V0KHQpLG49ZXQub3V0ZXJXaWR0aCh0KSxyPWV0Lm91dGVySGVpZ2h0KHQpO3JldHVybiBlLndpZHRoPW4sZS5oZWlnaHQ9cixlfXZhciBmdD1jdDtmdW5jdGlvbiBsdCh0LGUpe3ZhciBuPWUuY2hhckF0KDApLHI9ZS5jaGFyQXQoMSksbz10LndpZHRoLGk9dC5oZWlnaHQsYT10LmxlZnQscz10LnRvcDtyZXR1cm4iYyI9PT1uP3MrPWkvMjoiYiI9PT1uJiYocys9aSksImMiPT09cj9hKz1vLzI6InIiPT09ciYmKGErPW8pLHtsZWZ0OmEsdG9wOnN9fXZhciBkdD1sdDtmdW5jdGlvbiBwdCh0LGUsbixyLG8pe3ZhciBpPWR0KGUsblsxXSksYT1kdCh0LG5bMF0pLHM9W2EubGVmdC1pLmxlZnQsYS50b3AtaS50b3BdO3JldHVybntsZWZ0OnQubGVmdC1zWzBdK3JbMF0tb1swXSx0b3A6dC50b3Atc1sxXStyWzFdLW9bMV19fXZhciBodD1wdDtmdW5jdGlvbiB2dCh0LGUsbil7cmV0dXJuIHQubGVmdDxuLmxlZnR8fHQubGVmdCtlLndpZHRoPm4ucmlnaHR9ZnVuY3Rpb24gbXQodCxlLG4pe3JldHVybiB0LnRvcDxuLnRvcHx8dC50b3ArZS5oZWlnaHQ+bi5ib3R0b219ZnVuY3Rpb24geXQodCxlLG4pe3JldHVybiB0LmxlZnQ+bi5yaWdodHx8dC5sZWZ0K2Uud2lkdGg8bi5sZWZ0fWZ1bmN0aW9uIGJ0KHQsZSxuKXtyZXR1cm4gdC50b3A+bi5ib3R0b218fHQudG9wK2UuaGVpZ2h0PG4udG9wfWZ1bmN0aW9uIGd0KHQsZSxuKXt2YXIgcj1bXTtyZXR1cm4gZXQuZWFjaCh0LGZ1bmN0aW9uKHQpe3IucHVzaCh0LnJlcGxhY2UoZSxmdW5jdGlvbih0KXtyZXR1cm4gblt0XX0pKX0pLHJ9ZnVuY3Rpb24gd3QodCxlKXtyZXR1cm4gdFtlXT0tdFtlXSx0fWZ1bmN0aW9uIHh0KHQsZSl7dmFyIG49dm9pZCAwO3JldHVybiBuPS8lJC8udGVzdCh0KT9wYXJzZUludCh0LnN1YnN0cmluZygwLHQubGVuZ3RoLTEpLDEwKS8xMDAqZTpwYXJzZUludCh0LDEwKSxufHwwfWZ1bmN0aW9uIE90KHQsZSl7dFswXT14dCh0WzBdLGUud2lkdGgpLHRbMV09eHQodFsxXSxlLmhlaWdodCl9ZnVuY3Rpb24gVHQodCxlLG4scil7dmFyIG89bi5wb2ludHMsaT1uLm9mZnNldHx8WzAsMF0sYT1uLnRhcmdldE9mZnNldHx8WzAsMF0scz1uLm92ZXJmbG93LHU9bi5zb3VyY2V8fHQ7aT1bXS5jb25jYXQoaSksYT1bXS5jb25jYXQoYSkscz1zfHx7fTt2YXIgYz17fSxmPTAsbD1hdCh1KSxkPWZ0KHUpO090KGksZCksT3QoYSxlKTt2YXIgcD1odChkLGUsbyxpLGEpLGg9ZXQubWVyZ2UoZCxwKTtpZihsJiYocy5hZGp1c3RYfHxzLmFkanVzdFkpJiZyKXtpZihzLmFkanVzdFgmJnZ0KHAsZCxsKSl7dmFyIHY9Z3QobywvW2xyXS9naSx7bDoiciIscjoibCJ9KSxtPXd0KGksMCkseT13dChhLDApLGI9aHQoZCxlLHYsbSx5KTt5dChiLGQsbCl8fChmPTEsbz12LGk9bSxhPXkpfWlmKHMuYWRqdXN0WSYmbXQocCxkLGwpKXt2YXIgZz1ndChvLC9bdGJdL2dpLHt0OiJiIixiOiJ0In0pLHc9d3QoaSwxKSx4PXd0KGEsMSksTz1odChkLGUsZyx3LHgpO2J0KE8sZCxsKXx8KGY9MSxvPWcsaT13LGE9eCl9ZiYmKHA9aHQoZCxlLG8saSxhKSxldC5taXgoaCxwKSk7dmFyIFQ9dnQocCxkLGwpLGo9bXQocCxkLGwpOyhUfHxqKSYmKG89bi5wb2ludHMsaT1uLm9mZnNldHx8WzAsMF0sYT1uLnRhcmdldE9mZnNldHx8WzAsMF0pLGMuYWRqdXN0WD1zLmFkanVzdFgmJlQsYy5hZGp1c3RZPXMuYWRqdXN0WSYmaiwoYy5hZGp1c3RYfHxjLmFkanVzdFkpJiYoaD11dChwLGQsbCxjKSl9cmV0dXJuIGgud2lkdGghPT1kLndpZHRoJiZldC5jc3ModSwid2lkdGgiLGV0LndpZHRoKHUpK2gud2lkdGgtZC53aWR0aCksaC5oZWlnaHQhPT1kLmhlaWdodCYmZXQuY3NzKHUsImhlaWdodCIsZXQuaGVpZ2h0KHUpK2guaGVpZ2h0LWQuaGVpZ2h0KSxldC5vZmZzZXQodSx7bGVmdDpoLmxlZnQsdG9wOmgudG9wfSx7dXNlQ3NzUmlnaHQ6bi51c2VDc3NSaWdodCx1c2VDc3NCb3R0b206bi51c2VDc3NCb3R0b20sdXNlQ3NzVHJhbnNmb3JtOm4udXNlQ3NzVHJhbnNmb3JtLGlnbm9yZVNoYWtlOm4uaWdub3JlU2hha2V9KSx7cG9pbnRzOm8sb2Zmc2V0OmksdGFyZ2V0T2Zmc2V0OmEsb3ZlcmZsb3c6Y319dmFyIGp0PVR0O2Z1bmN0aW9uIF90KHQpe3ZhciBlPWF0KHQpLG49ZnQodCk7cmV0dXJuIWV8fG4ubGVmdCtuLndpZHRoPD1lLmxlZnR8fG4udG9wK24uaGVpZ2h0PD1lLnRvcHx8bi5sZWZ0Pj1lLnJpZ2h0fHxuLnRvcD49ZS5ib3R0b219ZnVuY3Rpb24gUHQodCxlLG4pe3ZhciByPW4udGFyZ2V0fHxlLG89ZnQociksaT0hX3Qocik7cmV0dXJuIGp0KHQsbyxuLGkpfVB0Ll9fZ2V0T2Zmc2V0UGFyZW50PXJ0LFB0Ll9fZ2V0VmlzaWJsZVJlY3RGb3JFbGVtZW50PWF0O3ZhciBDdD1QdCxFdD1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgbj1hcmd1bWVudHNbZV07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJih0W3JdPW5bcl0pfXJldHVybiB0fTtmdW5jdGlvbiBTdCh0LGUsbil7dmFyIHI9dm9pZCAwLG89dm9pZCAwLGk9ZXQuZ2V0RG9jdW1lbnQodCksYT1pLmRlZmF1bHRWaWV3fHxpLnBhcmVudFdpbmRvdyxzPWV0LmdldFdpbmRvd1Njcm9sbExlZnQoYSksdT1ldC5nZXRXaW5kb3dTY3JvbGxUb3AoYSksYz1ldC52aWV3cG9ydFdpZHRoKGEpLGY9ZXQudmlld3BvcnRIZWlnaHQoYSk7cj0icGFnZVgiaW4gZT9lLnBhZ2VYOnMrZS5jbGllbnRYLG89InBhZ2VZImluIGU/ZS5wYWdlWTp1K2UuY2xpZW50WTt2YXIgbD17bGVmdDpyLHRvcDpvLHdpZHRoOjAsaGVpZ2h0OjB9LGQ9cj49MCYmcjw9cytjJiZvPj0wJiZvPD11K2YscD1bbi5wb2ludHNbMF0sImNjIl07cmV0dXJuIGp0KHQsbCxFdCh7fSxuLHtwb2ludHM6cH0pLGQpfXZhciBBdD1TdDtuLmQoZSwiYWxpZ25FbGVtZW50IixmdW5jdGlvbigpe3JldHVybiBDdH0pLG4uZChlLCJhbGlnblBvaW50IixmdW5jdGlvbigpe3JldHVybiBBdH0pO2VbImRlZmF1bHQiXT1DdH0sIjIwZmQiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiZDlmNiIpLG89bigiYWViZCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7ZSBpbiB0P3IuZih0LGUsbygwLG4pKTp0W2VdPW59fSwiMjQxZSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjI1ZWIiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdChyKHQpKX19LDI0NzQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjJiM2UiKSxvPXIuVWludDhBcnJheTt0LmV4cG9ydHM9b30sMjQ3ODpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNDI0NSIpO2Z1bmN0aW9uIG8odCl7cmV0dXJuIHIodGhpcyx0KS5nZXQodCl9dC5leHBvcnRzPW99LDI1MjQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjYwNDQiKSxvPSJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fIjtmdW5jdGlvbiBpKHQsZSl7dmFyIG49dGhpcy5fX2RhdGFfXztyZXR1cm4gdGhpcy5zaXplKz10aGlzLmhhcyh0KT8wOjEsblt0XT1yJiZ2b2lkIDA9PT1lP286ZSx0aGlzfXQuZXhwb3J0cz1pfSwiMjUzYyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjM3MjkiKSxvPW4oIjEzMTAiKSxpPSJbb2JqZWN0IEFyZ3VtZW50c10iO2Z1bmN0aW9uIGEodCl7cmV0dXJuIG8odCkmJnIodCk9PWl9dC5leHBvcnRzPWF9LCIyNWQ3IjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKCI3YjQ0Iiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWVbImRlZmF1bHQiXT17cHJvcHM6e3ByZWZpeENsczpvWyJkZWZhdWx0Il0uc3RyaW5nLG92ZXJsYXk6b1siZGVmYXVsdCJdLmFueSx0cmlnZ2VyOm9bImRlZmF1bHQiXS5hbnl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnRyaWdnZXI7dCYmdC5mb3JjZVBvcHVwQWxpZ24oKX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5vdmVybGF5LG49dGhpcy5wcmVmaXhDbHM7cmV0dXJuIHQoImRpdiIse2NsYXNzOm4rIi1pbm5lciIsYXR0cnM6e3JvbGU6InRvb2x0aXAifX0sWyJmdW5jdGlvbiI9PT10eXBlb2YgZT9lKCk6ZV0pfX19LCIyNWViIjpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PXQpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIit0KTtyZXR1cm4gdH19LDI2Mzg6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKCl7cmV0dXJuIHI9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKWZvcih2YXIgciBpbiBlPWFyZ3VtZW50c1tuXSxlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdH0sci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIG89WyJhdHRycyIsInByb3BzIiwiZG9tUHJvcHMiXSxpPVsiY2xhc3MiLCJzdHlsZSIsImRpcmVjdGl2ZXMiXSxhPVsib24iLCJuYXRpdmVPbiJdLHM9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVkdWNlKGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpaWYodFtuXSlpZigtMSE9PW8uaW5kZXhPZihuKSl0W25dPXIoe30sdFtuXSxlW25dKTtlbHNlIGlmKC0xIT09aS5pbmRleE9mKG4pKXt2YXIgcz10W25daW5zdGFuY2VvZiBBcnJheT90W25dOlt0W25dXSxjPWVbbl1pbnN0YW5jZW9mIEFycmF5P2Vbbl06W2Vbbl1dO3Rbbl09cy5jb25jYXQoYyl9ZWxzZSBpZigtMSE9PWEuaW5kZXhPZihuKSlmb3IodmFyIGYgaW4gZVtuXSlpZih0W25dW2ZdKXt2YXIgbD10W25dW2ZdaW5zdGFuY2VvZiBBcnJheT90W25dW2ZdOlt0W25dW2ZdXSxkPWVbbl1bZl1pbnN0YW5jZW9mIEFycmF5P2Vbbl1bZl06W2Vbbl1bZl1dO3Rbbl1bZl09bC5jb25jYXQoZCl9ZWxzZSB0W25dW2ZdPWVbbl1bZl07ZWxzZSBpZigiaG9vayI9PW4pZm9yKHZhciBwIGluIGVbbl0pdFtuXVtwXT10W25dW3BdP3UodFtuXVtwXSxlW25dW3BdKTplW25dW3BdO2Vsc2UgdFtuXT1lW25dO2Vsc2UgdFtuXT1lW25dO3JldHVybiB0fSx7fSl9LHU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oKXt0JiZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlJiZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19O3QuZXhwb3J0cz1zfSwiMjY4ZiI6ZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz1uKCJmZGU0Iil9LCIyOGM5IjpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oKXt0aGlzLl9fZGF0YV9fPVtdLHRoaXMuc2l6ZT0wfXQuZXhwb3J0cz1ufSwiMjk0YyI6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiEhdCgpfWNhdGNoKGUpe3JldHVybiEwfX19LCIyOWYzIjpmdW5jdGlvbih0LGUpe3ZhciBuPU9iamVjdC5wcm90b3R5cGUscj1uLnRvU3RyaW5nO2Z1bmN0aW9uIG8odCl7cmV0dXJuIHIuY2FsbCh0KX10LmV4cG9ydHM9b30sIjJiM2UiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI1ODVhIiksbz0ib2JqZWN0Ij09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLGk9cnx8b3x8RnVuY3Rpb24oInJldHVybiB0aGlzIikoKTt0LmV4cG9ydHM9aX0sIjJjODAiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGVbImRlZmF1bHQiXT1hO3ZhciBvPW4oIjEzNGIiKSxpPXIobyk7ZnVuY3Rpb24gYSh0LGUsbixyKXtmdW5jdGlvbiBvKGUpe3ZhciByPW5ldyBpWyJkZWZhdWx0Il0oZSk7bi5jYWxsKHQscil9aWYodC5hZGRFdmVudExpc3RlbmVyKXt2YXIgYT1mdW5jdGlvbigpe3ZhciBuPSExO3JldHVybiJvYmplY3QiPT09dHlwZW9mIHI/bj1yLmNhcHR1cmV8fCExOiJib29sZWFuIj09PXR5cGVvZiByJiYobj1yKSx0LmFkZEV2ZW50TGlzdGVuZXIoZSxvLHJ8fCExKSx7djp7cmVtb3ZlOmZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKGUsbyxuKX19fX0oKTtpZigib2JqZWN0Ij09PXR5cGVvZiBhKXJldHVybiBhLnZ9ZWxzZSBpZih0LmF0dGFjaEV2ZW50KXJldHVybiB0LmF0dGFjaEV2ZW50KCJvbiIrZSxvKSx7cmVtb3ZlOmZ1bmN0aW9uKCl7dC5kZXRhY2hFdmVudCgib24iK2Usbyl9fX10LmV4cG9ydHM9ZVsiZGVmYXVsdCJdfSwiMmQ3YyI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7dmFyIG49LTEscj1udWxsPT10PzA6dC5sZW5ndGgsbz0wLGk9W107d2hpbGUoKytuPHIpe3ZhciBhPXRbbl07ZShhLG4sdCkmJihpW28rK109YSl9cmV0dXJuIGl9dC5leHBvcnRzPW59LCIyZGNiIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiOTFlOSIpLG89cihPYmplY3QuZ2V0UHJvdG90eXBlT2YsT2JqZWN0KTt0LmV4cG9ydHM9b30sIjJmNTIiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjA5NTIiKSxvPWkocik7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZVsiZGVmYXVsdCJdPW9bImRlZmF1bHQiXX0sIjJmY2MiOmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgZT10aGlzLl9fZGF0YV9fLG49ZVsiZGVsZXRlIl0odCk7cmV0dXJuIHRoaXMuc2l6ZT1lLnNpemUsbn10LmV4cG9ydHM9bn0sIjMwYzkiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI5NTIwIiksbz1uKCJiMjE4Iik7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gbnVsbCE9dCYmbyh0Lmxlbmd0aCkmJiFyKHQpfXQuZXhwb3J0cz1pfSwiMzBmMSI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJiOGUzIiksbz1uKCI2M2I2IiksaT1uKCI5MTM4IiksYT1uKCIzNWU4Iikscz1uKCI0ODFiIiksdT1uKCI4ZjYwIiksYz1uKCI0NWYyIiksZj1uKCI1M2UyIiksbD1uKCI1MTY4IikoIml0ZXJhdG9yIiksZD0hKFtdLmtleXMmJiJuZXh0ImluW10ua2V5cygpKSxwPSJAQGl0ZXJhdG9yIixoPSJrZXlzIix2PSJ2YWx1ZXMiLG09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLHksYixnLHcpe3UobixlLHkpO3ZhciB4LE8sVCxqPWZ1bmN0aW9uKHQpe2lmKCFkJiZ0IGluIEUpcmV0dXJuIEVbdF07c3dpdGNoKHQpe2Nhc2UgaDpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyx0KX07Y2FzZSB2OnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgbih0aGlzLHQpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyx0KX19LF89ZSsiIEl0ZXJhdG9yIixQPWI9PXYsQz0hMSxFPXQucHJvdG90eXBlLFM9RVtsXXx8RVtwXXx8YiYmRVtiXSxBPVN8fGooYiksTT1iP1A/aigiZW50cmllcyIpOkE6dm9pZCAwLGs9IkFycmF5Ij09ZSYmRS5lbnRyaWVzfHxTO2lmKGsmJihUPWYoay5jYWxsKG5ldyB0KSksVCE9PU9iamVjdC5wcm90b3R5cGUmJlQubmV4dCYmKGMoVCxfLCEwKSxyfHwiZnVuY3Rpb24iPT10eXBlb2YgVFtsXXx8YShULGwsbSkpKSxQJiZTJiZTLm5hbWUhPT12JiYoQz0hMCxBPWZ1bmN0aW9uKCl7cmV0dXJuIFMuY2FsbCh0aGlzKX0pLHImJiF3fHwhZCYmIUMmJkVbbF18fGEoRSxsLEEpLHNbZV09QSxzW19dPW0sYilpZih4PXt2YWx1ZXM6UD9BOmoodiksa2V5czpnP0E6aihoKSxlbnRyaWVzOk19LHcpZm9yKE8gaW4geClPIGluIEV8fGkoRSxPLHhbT10pO2Vsc2UgbyhvLlArby5GKihkfHxDKSxlLHgpO3JldHVybiB4fX0sIjMxZjIiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUucmVxdWVzdEFuaW1hdGlvblRpbWVvdXQ9ZS5jYW5jZWxBbmltYXRpb25UaW1lb3V0PXZvaWQgMDt2YXIgcj1uKCIwY2E1Iiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fXZhciBhPSgwLG9bImRlZmF1bHQiXSkoKTtlLmNhbmNlbEFuaW1hdGlvblRpbWVvdXQ9ZnVuY3Rpb24odCl7cmV0dXJuKDAsci5jYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpKHQuaWQpfSxlLnJlcXVlc3RBbmltYXRpb25UaW1lb3V0PWZ1bmN0aW9uKHQsZSl7dmFyIG49RGF0ZS5ub3coKTtmdW5jdGlvbiByKCl7RGF0ZS5ub3coKS1uPj1lP3QuY2FsbCgpOm8uaWQ9YShyKX12YXIgbz17aWQ6YShyKX07cmV0dXJuIG99fSwiMzIwYyI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjsKLyoKb2JqZWN0LWFzc2lnbgooYykgU2luZHJlIFNvcmh1cwpAbGljZW5zZSBNSVQKKi92YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLG89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxpPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7ZnVuY3Rpb24gYSh0KXtpZihudWxsPT09dHx8dm9pZCAwPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCIpO3JldHVybiBPYmplY3QodCl9ZnVuY3Rpb24gcygpe3RyeXtpZighT2JqZWN0LmFzc2lnbilyZXR1cm4hMTt2YXIgdD1uZXcgU3RyaW5nKCJhYmMiKTtpZih0WzVdPSJkZSIsIjUiPT09T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModClbMF0pcmV0dXJuITE7Zm9yKHZhciBlPXt9LG49MDtuPDEwO24rKyllWyJfIitTdHJpbmcuZnJvbUNoYXJDb2RlKG4pXT1uO3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pO2lmKCIwMTIzNDU2Nzg5IiE9PXIuam9pbigiIikpcmV0dXJuITE7dmFyIG89e307cmV0dXJuImFiY2RlZmdoaWprbG1ub3BxcnN0Ii5zcGxpdCgiIikuZm9yRWFjaChmdW5jdGlvbih0KXtvW3RdPXR9KSwiYWJjZGVmZ2hpamtsbW5vcHFyc3QiPT09T2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSxvKSkuam9pbigiIil9Y2F0Y2goaSl7cmV0dXJuITF9fXQuZXhwb3J0cz1zKCk/T2JqZWN0LmFzc2lnbjpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbixzLHU9YSh0KSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyl7Zm9yKHZhciBmIGluIG49T2JqZWN0KGFyZ3VtZW50c1tjXSksbilvLmNhbGwobixmKSYmKHVbZl09bltmXSk7aWYocil7cz1yKG4pO2Zvcih2YXIgbD0wO2w8cy5sZW5ndGg7bCsrKWkuY2FsbChuLHNbbF0pJiYodVtzW2xdXT1uW3NbbF1dKX19cmV0dXJuIHV9fSwiMzJhNiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjI0MWUiKSxvPW4oImMzYTEiKTtuKCJjZTdlIikoImtleXMiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBvKHIodCkpfX0pfSwiMzJiMyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjg3MmEiKSxvPW4oIjk2MzgiKSxpPU9iamVjdC5wcm90b3R5cGUsYT1pLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHModCxlLG4pe3ZhciBpPXRbZV07YS5jYWxsKHQsZSkmJm8oaSxuKSYmKHZvaWQgMCE9PW58fGUgaW4gdCl8fHIodCxlLG4pfXQuZXhwb3J0cz1zfSwiMzJmNCI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjJkN2MiKSxvPW4oImQzMjciKSxpPU9iamVjdC5wcm90b3R5cGUsYT1pLnByb3BlcnR5SXNFbnVtZXJhYmxlLHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyx1PXM/ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXQ/W106KHQ9T2JqZWN0KHQpLHIocyh0KSxmdW5jdGlvbihlKXtyZXR1cm4gYS5jYWxsKHQsZSl9KSl9Om87dC5leHBvcnRzPXV9LCIzMmZjIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZTUzZCIpLmRvY3VtZW50O3QuZXhwb3J0cz1yJiZyLmRvY3VtZW50RWxlbWVudH0sIjMzNWMiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI2YjRjIik7dC5leHBvcnRzPU9iamVjdCgieiIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbih0KXtyZXR1cm4iU3RyaW5nIj09cih0KT90LnNwbGl0KCIiKTpPYmplY3QodCl9fSwzNDMyOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPXthZGp1c3RYOjEsYWRqdXN0WToxfSxvPVswLDBdLGk9ZS5wbGFjZW1lbnRzPXtsZWZ0Ontwb2ludHM6WyJjciIsImNsIl0sb3ZlcmZsb3c6cixvZmZzZXQ6Wy00LDBdLHRhcmdldE9mZnNldDpvfSxyaWdodDp7cG9pbnRzOlsiY2wiLCJjciJdLG92ZXJmbG93OnIsb2Zmc2V0Ols0LDBdLHRhcmdldE9mZnNldDpvfSx0b3A6e3BvaW50czpbImJjIiwidGMiXSxvdmVyZmxvdzpyLG9mZnNldDpbMCwtNF0sdGFyZ2V0T2Zmc2V0Om99LGJvdHRvbTp7cG9pbnRzOlsidGMiLCJiYyJdLG92ZXJmbG93OnIsb2Zmc2V0OlswLDRdLHRhcmdldE9mZnNldDpvfSx0b3BMZWZ0Ontwb2ludHM6WyJibCIsInRsIl0sb3ZlcmZsb3c6cixvZmZzZXQ6WzAsLTRdLHRhcmdldE9mZnNldDpvfSxsZWZ0VG9wOntwb2ludHM6WyJ0ciIsInRsIl0sb3ZlcmZsb3c6cixvZmZzZXQ6Wy00LDBdLHRhcmdldE9mZnNldDpvfSx0b3BSaWdodDp7cG9pbnRzOlsiYnIiLCJ0ciJdLG92ZXJmbG93OnIsb2Zmc2V0OlswLC00XSx0YXJnZXRPZmZzZXQ6b30scmlnaHRUb3A6e3BvaW50czpbInRsIiwidHIiXSxvdmVyZmxvdzpyLG9mZnNldDpbNCwwXSx0YXJnZXRPZmZzZXQ6b30sYm90dG9tUmlnaHQ6e3BvaW50czpbInRyIiwiYnIiXSxvdmVyZmxvdzpyLG9mZnNldDpbMCw0XSx0YXJnZXRPZmZzZXQ6b30scmlnaHRCb3R0b206e3BvaW50czpbImJsIiwiYnIiXSxvdmVyZmxvdzpyLG9mZnNldDpbNCwwXSx0YXJnZXRPZmZzZXQ6b30sYm90dG9tTGVmdDp7cG9pbnRzOlsidGwiLCJibCJdLG92ZXJmbG93OnIsb2Zmc2V0OlswLDRdLHRhcmdldE9mZnNldDpvfSxsZWZ0Qm90dG9tOntwb2ludHM6WyJiciIsImJsIl0sb3ZlcmZsb3c6cixvZmZzZXQ6Wy00LDBdLHRhcmdldE9mZnNldDpvfX07ZVsiZGVmYXVsdCJdPWl9LCIzNGFjIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiOTUyMCIpLG89bigiMTM2OCIpLGk9bigiMWE4YyIpLGE9bigiZGM1NyIpLHM9L1tcXF4kLiorPygpW1xde318XS9nLHU9L15cW29iamVjdCAuKz9Db25zdHJ1Y3RvclxdJC8sYz1GdW5jdGlvbi5wcm90b3R5cGUsZj1PYmplY3QucHJvdG90eXBlLGw9Yy50b1N0cmluZyxkPWYuaGFzT3duUHJvcGVydHkscD1SZWdFeHAoIl4iK2wuY2FsbChkKS5yZXBsYWNlKHMsIlxcJCYiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcKCl8IGZvciAuKz8oPz1cXFxdKS9nLCIkMS4qPyIpKyIkIik7ZnVuY3Rpb24gaCh0KXtpZighaSh0KXx8byh0KSlyZXR1cm4hMTt2YXIgZT1yKHQpP3A6dTtyZXR1cm4gZS50ZXN0KGEodCkpfXQuZXhwb3J0cz1ofSwiMzU1ZCI6ZnVuY3Rpb24odCxlKXtlLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LCIzNWU4IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZDlmNiIpLG89bigiYWViZCIpO3QuZXhwb3J0cz1uKCI4ZTYwIik/ZnVuY3Rpb24odCxlLG4pe3JldHVybiByLmYodCxlLG8oMSxuKSl9OmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdFtlXT1uLHR9fSwzNjk4OmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0LGUpe3JldHVybiBudWxsPT10P3ZvaWQgMDp0W2VdfXQuZXhwb3J0cz1ufSwiMzZjMyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjMzNWMiKSxvPW4oIjI1ZWIiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHIobyh0KSl9fSwzNzAyOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI0ODFiIiksbz1uKCI1MTY4IikoIml0ZXJhdG9yIiksaT1BcnJheS5wcm90b3R5cGU7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10JiYoci5BcnJheT09PXR8fGlbb109PT10KX19LDM3Mjk6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjllNjkiKSxvPW4oIjAwZmQiKSxpPW4oIjI5ZjMiKSxhPSJbb2JqZWN0IE51bGxdIixzPSJbb2JqZWN0IFVuZGVmaW5lZF0iLHU9cj9yLnRvU3RyaW5nVGFnOnZvaWQgMDtmdW5jdGlvbiBjKHQpe3JldHVybiBudWxsPT10P3ZvaWQgMD09PXQ/czphOnUmJnUgaW4gT2JqZWN0KHQpP28odCk6aSh0KX10LmV4cG9ydHM9Y30sMzgxODpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiN2U2NCIpLG89bigiODA1NyIpLGk9bigiMzJiMyIpLGE9bigiNWIwMSIpLHM9bigiMGYwZiIpLHU9bigiZTUzOCIpLGM9bigiNDM1OSIpLGY9bigiNTRlYiIpLGw9bigiMTA0MSIpLGQ9bigiYTk5NCIpLHA9bigiMWJhYyIpLGg9bigiNDJhMiIpLHY9bigiYzg3YyIpLG09bigiYzJiNiIpLHk9bigiZmEyMSIpLGI9bigiNjc0NyIpLGc9bigiMGQyNCIpLHc9bigiY2M0NSIpLHg9bigiMWE4YyIpLE89bigiZDdlZSIpLFQ9bigiZWM2OSIpLGo9MSxfPTIsUD00LEM9IltvYmplY3QgQXJndW1lbnRzXSIsRT0iW29iamVjdCBBcnJheV0iLFM9IltvYmplY3QgQm9vbGVhbl0iLEE9IltvYmplY3QgRGF0ZV0iLE09IltvYmplY3QgRXJyb3JdIixrPSJbb2JqZWN0IEZ1bmN0aW9uXSIsJD0iW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0iLEQ9IltvYmplY3QgTWFwXSIsTj0iW29iamVjdCBOdW1iZXJdIixMPSJbb2JqZWN0IE9iamVjdF0iLEY9IltvYmplY3QgUmVnRXhwXSIsVj0iW29iamVjdCBTZXRdIixIPSJbb2JqZWN0IFN0cmluZ10iLEk9IltvYmplY3QgU3ltYm9sXSIsVz0iW29iamVjdCBXZWFrTWFwXSIsUj0iW29iamVjdCBBcnJheUJ1ZmZlcl0iLHo9IltvYmplY3QgRGF0YVZpZXddIixCPSJbb2JqZWN0IEZsb2F0MzJBcnJheV0iLFg9IltvYmplY3QgRmxvYXQ2NEFycmF5XSIsWT0iW29iamVjdCBJbnQ4QXJyYXldIixxPSJbb2JqZWN0IEludDE2QXJyYXldIixVPSJbb2JqZWN0IEludDMyQXJyYXldIixHPSJbb2JqZWN0IFVpbnQ4QXJyYXldIixLPSJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSIsWj0iW29iamVjdCBVaW50MTZBcnJheV0iLEo9IltvYmplY3QgVWludDMyQXJyYXldIixRPXt9O2Z1bmN0aW9uIHR0KHQsZSxuLEUsUyxBKXt2YXIgTSxEPWUmaixOPWUmXyxGPWUmUDtpZihuJiYoTT1TP24odCxFLFMsQSk6bih0KSksdm9pZCAwIT09TSlyZXR1cm4gTTtpZigheCh0KSlyZXR1cm4gdDt2YXIgVj1iKHQpO2lmKFYpe2lmKE09dih0KSwhRClyZXR1cm4gYyh0LE0pfWVsc2V7dmFyIEg9aCh0KSxJPUg9PWt8fEg9PSQ7aWYoZyh0KSlyZXR1cm4gdSh0LEQpO2lmKEg9PUx8fEg9PUN8fEkmJiFTKXtpZihNPU58fEk/e306eSh0KSwhRClyZXR1cm4gTj9sKHQscyhNLHQpKTpmKHQsYShNLHQpKX1lbHNle2lmKCFRW0hdKXJldHVybiBTP3Q6e307TT1tKHQsSCxEKX19QXx8KEE9bmV3IHIpO3ZhciBXPUEuZ2V0KHQpO2lmKFcpcmV0dXJuIFc7aWYoQS5zZXQodCxNKSxPKHQpKXJldHVybiB0LmZvckVhY2goZnVuY3Rpb24ocil7TS5hZGQodHQocixlLG4scix0LEEpKX0pLE07aWYodyh0KSlyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKHIsbyl7TS5zZXQobyx0dChyLGUsbixvLHQsQSkpfSksTTt2YXIgUj1GP04/cDpkOk4/a2V5c0luOlQsej1WP3ZvaWQgMDpSKHQpO3JldHVybiBvKHp8fHQsZnVuY3Rpb24ocixvKXt6JiYobz1yLHI9dFtvXSksaShNLG8sdHQocixlLG4sbyx0LEEpKX0pLE19UVtDXT1RW0VdPVFbUl09UVt6XT1RW1NdPVFbQV09UVtCXT1RW1hdPVFbWV09UVtxXT1RW1VdPVFbRF09UVtOXT1RW0xdPVFbRl09UVtWXT1RW0hdPVFbSV09UVtHXT1RW0tdPVFbWl09UVtKXT0hMCxRW01dPVFba109UVtXXT0hMSx0LmV4cG9ydHM9dHR9LCIzOWZmIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMGIwNyIpLG89bigiMmIzZSIpLGk9cihvLCJXZWFrTWFwIik7dC5leHBvcnRzPWl9LCIzYTM4IjpmdW5jdGlvbih0LGUpe3ZhciBuPU1hdGguY2VpbCxyPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpc05hTih0PSt0KT8wOih0PjA/cjpuKSh0KX19LCIzYjExIjpmdW5jdGlvbih0LGUsbil7fSwiM2I0YSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjBiMDciKSxvPWZ1bmN0aW9uKCl7dHJ5e3ZhciB0PXIoT2JqZWN0LCJkZWZpbmVQcm9wZXJ0eSIpO3JldHVybiB0KHt9LCIiLHt9KSx0fWNhdGNoKGUpe319KCk7dC5leHBvcnRzPW99LCIzYzU1IjpmdW5jdGlvbih0LGUsbil7dHJ5e3ZhciByPW4oImNlY2QiKX1jYXRjaChzKXtyPW4oImNlY2QiKX12YXIgbz0vXHMrLyxpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gYSh0KXtpZighdHx8IXQubm9kZVR5cGUpdGhyb3cgbmV3IEVycm9yKCJBIERPTSBlbGVtZW50IHJlZmVyZW5jZSBpcyByZXF1aXJlZCIpO3RoaXMuZWw9dCx0aGlzLmxpc3Q9dC5jbGFzc0xpc3R9dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgYSh0KX0sYS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe2lmKHRoaXMubGlzdClyZXR1cm4gdGhpcy5saXN0LmFkZCh0KSx0aGlzO3ZhciBlPXRoaXMuYXJyYXkoKSxuPXIoZSx0KTtyZXR1cm5+bnx8ZS5wdXNoKHQpLHRoaXMuZWwuY2xhc3NOYW1lPWUuam9pbigiICIpLHRoaXN9LGEucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXtpZigiW29iamVjdCBSZWdFeHBdIj09aS5jYWxsKHQpKXJldHVybiB0aGlzLnJlbW92ZU1hdGNoaW5nKHQpO2lmKHRoaXMubGlzdClyZXR1cm4gdGhpcy5saXN0LnJlbW92ZSh0KSx0aGlzO3ZhciBlPXRoaXMuYXJyYXkoKSxuPXIoZSx0KTtyZXR1cm5+biYmZS5zcGxpY2UobiwxKSx0aGlzLmVsLmNsYXNzTmFtZT1lLmpvaW4oIiAiKSx0aGlzfSxhLnByb3RvdHlwZS5yZW1vdmVNYXRjaGluZz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5hcnJheSgpLG49MDtuPGUubGVuZ3RoO24rKyl0LnRlc3QoZVtuXSkmJnRoaXMucmVtb3ZlKGVbbl0pO3JldHVybiB0aGlzfSxhLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5saXN0PygidW5kZWZpbmVkIiE9PXR5cGVvZiBlP2UhPT10aGlzLmxpc3QudG9nZ2xlKHQsZSkmJnRoaXMubGlzdC50b2dnbGUodCk6dGhpcy5saXN0LnRvZ2dsZSh0KSx0aGlzKTooInVuZGVmaW5lZCIhPT10eXBlb2YgZT9lP3RoaXMuYWRkKHQpOnRoaXMucmVtb3ZlKHQpOnRoaXMuaGFzKHQpP3RoaXMucmVtb3ZlKHQpOnRoaXMuYWRkKHQpLHRoaXMpfSxhLnByb3RvdHlwZS5hcnJheT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWwuZ2V0QXR0cmlidXRlKCJjbGFzcyIpfHwiIixlPXQucmVwbGFjZSgvXlxzK3xccyskL2csIiIpLG49ZS5zcGxpdChvKTtyZXR1cm4iIj09PW5bMF0mJm4uc2hpZnQoKSxufSxhLnByb3RvdHlwZS5oYXM9YS5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubGlzdD90aGlzLmxpc3QuY29udGFpbnModCk6ISF+cih0aGlzLmFycmF5KCksdCl9fSwiM2Y2YiI6ZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz17ZGVmYXVsdDpuKCI1MWI2IiksX19lc01vZHVsZTohMH19LCI0MDFiIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLmlzQ3NzQW5pbWF0aW9uU3VwcG9ydGVkPXZvaWQgMDt2YXIgcj1uKCIxMDk4Iiksbz1mKHIpLGk9bigiZTA5OCIpLGE9ZihpKSxzPW4oIjNjNTUiKSx1PWYocyksYz1uKCIzMWYyIik7ZnVuY3Rpb24gZih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19dmFyIGw9MCE9PWFbImRlZmF1bHQiXS5lbmRFdmVudHMubGVuZ3RoLGQ9WyJXZWJraXQiLCJNb3oiLCJPIiwibXMiXSxwPVsiLXdlYmtpdC0iLCItbW96LSIsIi1vLSIsIm1zLSIsIiJdO2Z1bmN0aW9uIGgodCxlKXtmb3IodmFyIG49d2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKSxyPSIiLG89MDtvPHAubGVuZ3RoO28rKylpZihyPW4uZ2V0UHJvcGVydHlWYWx1ZShwW29dK2UpLHIpYnJlYWs7cmV0dXJuIHJ9ZnVuY3Rpb24gdih0KXtpZihsKXt2YXIgZT1wYXJzZUZsb2F0KGgodCwidHJhbnNpdGlvbi1kZWxheSIpKXx8MCxuPXBhcnNlRmxvYXQoaCh0LCJ0cmFuc2l0aW9uLWR1cmF0aW9uIikpfHwwLHI9cGFyc2VGbG9hdChoKHQsImFuaW1hdGlvbi1kZWxheSIpKXx8MCxvPXBhcnNlRmxvYXQoaCh0LCJhbmltYXRpb24tZHVyYXRpb24iKSl8fDAsaT1NYXRoLm1heChuK2UsbytyKTt0LnJjRW5kQW5pbVRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe3QucmNFbmRBbmltVGltZW91dD1udWxsLHQucmNFbmRMaXN0ZW5lciYmdC5yY0VuZExpc3RlbmVyKCl9LDFlMyppKzIwMCl9fWZ1bmN0aW9uIG0odCl7dC5yY0VuZEFuaW1UaW1lb3V0JiYoY2xlYXJUaW1lb3V0KHQucmNFbmRBbmltVGltZW91dCksdC5yY0VuZEFuaW1UaW1lb3V0PW51bGwpfXZhciB5PWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj0ib2JqZWN0Ij09PSgidW5kZWZpbmVkIj09PXR5cGVvZiBlPyJ1bmRlZmluZWQiOigwLG9bImRlZmF1bHQiXSkoZSkpLGk9cj9lLm5hbWU6ZSxzPXI/ZS5hY3RpdmU6ZSsiLWFjdGl2ZSIsZj1uLGw9dm9pZCAwLGQ9dm9pZCAwLHA9KDAsdVsiZGVmYXVsdCJdKSh0KTtyZXR1cm4gbiYmIltvYmplY3QgT2JqZWN0XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikmJihmPW4uZW5kLGw9bi5zdGFydCxkPW4uYWN0aXZlKSx0LnJjRW5kTGlzdGVuZXImJnQucmNFbmRMaXN0ZW5lcigpLHQucmNFbmRMaXN0ZW5lcj1mdW5jdGlvbihlKXtlJiZlLnRhcmdldCE9PXR8fCh0LnJjQW5pbVRpbWVvdXQmJigoMCxjLmNhbmNlbEFuaW1hdGlvblRpbWVvdXQpKHQucmNBbmltVGltZW91dCksdC5yY0FuaW1UaW1lb3V0PW51bGwpLG0odCkscC5yZW1vdmUoaSkscC5yZW1vdmUocyksYVsiZGVmYXVsdCJdLnJlbW92ZUVuZEV2ZW50TGlzdGVuZXIodCx0LnJjRW5kTGlzdGVuZXIpLHQucmNFbmRMaXN0ZW5lcj1udWxsLGYmJmYoKSl9LGFbImRlZmF1bHQiXS5hZGRFbmRFdmVudExpc3RlbmVyKHQsdC5yY0VuZExpc3RlbmVyKSxsJiZsKCkscC5hZGQoaSksdC5yY0FuaW1UaW1lb3V0PSgwLGMucmVxdWVzdEFuaW1hdGlvblRpbWVvdXQpKGZ1bmN0aW9uKCl7dC5yY0FuaW1UaW1lb3V0PW51bGwscC5hZGQocyksZCYmKDAsYy5yZXF1ZXN0QW5pbWF0aW9uVGltZW91dCkoZCwwKSx2KHQpfSwzMCkse3N0b3A6ZnVuY3Rpb24oKXt0LnJjRW5kTGlzdGVuZXImJnQucmNFbmRMaXN0ZW5lcigpfX19O3kuc3R5bGU9ZnVuY3Rpb24odCxlLG4pe3QucmNFbmRMaXN0ZW5lciYmdC5yY0VuZExpc3RlbmVyKCksdC5yY0VuZExpc3RlbmVyPWZ1bmN0aW9uKGUpe2UmJmUudGFyZ2V0IT09dHx8KHQucmNBbmltVGltZW91dCYmKCgwLGMuY2FuY2VsQW5pbWF0aW9uVGltZW91dCkodC5yY0FuaW1UaW1lb3V0KSx0LnJjQW5pbVRpbWVvdXQ9bnVsbCksbSh0KSxhWyJkZWZhdWx0Il0ucmVtb3ZlRW5kRXZlbnRMaXN0ZW5lcih0LHQucmNFbmRMaXN0ZW5lciksdC5yY0VuZExpc3RlbmVyPW51bGwsbiYmbigpKX0sYVsiZGVmYXVsdCJdLmFkZEVuZEV2ZW50TGlzdGVuZXIodCx0LnJjRW5kTGlzdGVuZXIpLHQucmNBbmltVGltZW91dD0oMCxjLnJlcXVlc3RBbmltYXRpb25UaW1lb3V0KShmdW5jdGlvbigpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0LnN0eWxlW25dPWVbbl0pO3QucmNBbmltVGltZW91dD1udWxsLHYodCl9LDApfSx5LnNldFRyYW5zaXRpb249ZnVuY3Rpb24odCxlLG4pe3ZhciByPWUsbz1uO3ZvaWQgMD09PW4mJihvPXIscj0iIikscj1yfHwiIixkLmZvckVhY2goZnVuY3Rpb24oZSl7dC5zdHlsZVtlKyJUcmFuc2l0aW9uIityXT1vfSl9LHkuaXNDc3NBbmltYXRpb25TdXBwb3J0ZWQ9bCxlLmlzQ3NzQW5pbWF0aW9uU3VwcG9ydGVkPWwsZVsiZGVmYXVsdCJdPXl9LDQwMzk6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKCl7cmV0dXJuITF9ZnVuY3Rpb24gbygpe3JldHVybiEwfWZ1bmN0aW9uIGkoKXt0aGlzLnRpbWVTdGFtcD1EYXRlLm5vdygpLHRoaXMudGFyZ2V0PXZvaWQgMCx0aGlzLmN1cnJlbnRUYXJnZXQ9dm9pZCAwfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxpLnByb3RvdHlwZT17aXNFdmVudE9iamVjdDoxLGNvbnN0cnVjdG9yOmksaXNEZWZhdWx0UHJldmVudGVkOnIsaXNQcm9wYWdhdGlvblN0b3BwZWQ6cixpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpyLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9b30sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1vfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPW8sdGhpcy5zdG9wUHJvcGFnYXRpb24oKX0saGFsdDpmdW5jdGlvbih0KXt0P3RoaXMuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk6dGhpcy5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLnByZXZlbnREZWZhdWx0KCl9fSxlWyJkZWZhdWx0Il09aSx0LmV4cG9ydHM9ZVsiZGVmYXVsdCJdfSwiNDBjMyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjZiNGMiKSxvPW4oIjUxNjgiKSgidG9TdHJpbmdUYWciKSxpPSJBcmd1bWVudHMiPT1yKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSksYT1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaChuKXt9fTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGUsbixzO3JldHVybiB2b2lkIDA9PT10PyJVbmRlZmluZWQiOm51bGw9PT10PyJOdWxsIjoic3RyaW5nIj09dHlwZW9mKG49YShlPU9iamVjdCh0KSxvKSk/bjppP3IoZSk6Ik9iamVjdCI9PShzPXIoZSkpJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5jYWxsZWU/IkFyZ3VtZW50cyI6c319LCI0MWIyIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2UuX19lc01vZHVsZT0hMDt2YXIgcj1uKCIzZjZiIiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWUuZGVmYXVsdD1vLmRlZmF1bHR8fGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPWFyZ3VtZW50c1tlXTtmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKHRbcl09bltyXSl9cmV0dXJuIHR9fSwiNDFjMyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjFhOGMiKSxvPW4oImVhYzUiKSxpPW4oImVjOGMiKSxhPU9iamVjdC5wcm90b3R5cGUscz1hLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHUodCl7aWYoIXIodCkpcmV0dXJuIGkodCk7dmFyIGU9byh0KSxuPVtdO2Zvcih2YXIgYSBpbiB0KSgiY29uc3RydWN0b3IiIT1hfHwhZSYmcy5jYWxsKHQsYSkpJiZuLnB1c2goYSk7cmV0dXJuIG59dC5leHBvcnRzPXV9LDQyNDU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjEyOTAiKTtmdW5jdGlvbiBvKHQsZSl7dmFyIG49dC5fX2RhdGFfXztyZXR1cm4gcihlKT9uWyJzdHJpbmciPT10eXBlb2YgZT8ic3RyaW5nIjoiaGFzaCJdOm4ubWFwfXQuZXhwb3J0cz1vfSwiNDJhMiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImI1YTciKSxvPW4oIjc5YmMiKSxpPW4oIjFjZWMiKSxhPW4oImM4NjkiKSxzPW4oIjM5ZmYiKSx1PW4oIjM3MjkiKSxjPW4oImRjNTciKSxmPSJbb2JqZWN0IE1hcF0iLGw9IltvYmplY3QgT2JqZWN0XSIsZD0iW29iamVjdCBQcm9taXNlXSIscD0iW29iamVjdCBTZXRdIixoPSJbb2JqZWN0IFdlYWtNYXBdIix2PSJbb2JqZWN0IERhdGFWaWV3XSIsbT1jKHIpLHk9YyhvKSxiPWMoaSksZz1jKGEpLHc9YyhzKSx4PXU7KHImJngobmV3IHIobmV3IEFycmF5QnVmZmVyKDEpKSkhPXZ8fG8mJngobmV3IG8pIT1mfHxpJiZ4KGkucmVzb2x2ZSgpKSE9ZHx8YSYmeChuZXcgYSkhPXB8fHMmJngobmV3IHMpIT1oKSYmKHg9ZnVuY3Rpb24odCl7dmFyIGU9dSh0KSxuPWU9PWw/dC5jb25zdHJ1Y3Rvcjp2b2lkIDAscj1uP2Mobik6IiI7aWYocilzd2l0Y2gocil7Y2FzZSBtOnJldHVybiB2O2Nhc2UgeTpyZXR1cm4gZjtjYXNlIGI6cmV0dXJuIGQ7Y2FzZSBnOnJldHVybiBwO2Nhc2UgdzpyZXR1cm4gaH1yZXR1cm4gZX0pLHQuZXhwb3J0cz14fSw0MzU5OmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0LGUpe3ZhciBuPS0xLHI9dC5sZW5ndGg7ZXx8KGU9QXJyYXkocikpO3doaWxlKCsrbjxyKWVbbl09dFtuXTtyZXR1cm4gZX10LmV4cG9ydHM9bn0sIjQ1NGYiOmZ1bmN0aW9uKHQsZSxuKXtuKCI0NmE3Iik7dmFyIHI9bigiNTg0YSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiByLmRlZmluZVByb3BlcnR5KHQsZSxuKX19LCI0NWYyIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZDlmNiIpLmYsbz1uKCIwN2UzIiksaT1uKCI1MTY4IikoInRvU3RyaW5nVGFnIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXt0JiYhbyh0PW4/dDp0LnByb3RvdHlwZSxpKSYmcih0LGkse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTplfSl9fSwiNDY5ZiI6ZnVuY3Rpb24odCxlLG4pe24oIjZjMWMiKSxuKCIxNjU0IiksdC5leHBvcnRzPW4oIjdkN2IiKX0sIjQ2YTciOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI2M2I2Iik7cihyLlMrci5GKiFuKCI4ZTYwIiksIk9iamVjdCIse2RlZmluZVByb3BlcnR5Om4oImQ5ZjYiKS5mfSl9LCI0NmNmIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e2luc3RhbGw6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LG49ZS5uYW1lfHwicmVmIjt0LmRpcmVjdGl2ZShuLHtiaW5kOmZ1bmN0aW9uKHQsZSxuKXtlLnZhbHVlKG4uY29tcG9uZW50SW5zdGFuY2V8fHQsbi5rZXkpfSx1cGRhdGU6ZnVuY3Rpb24odCxlLHIsbyl7aWYoby5kYXRhJiZvLmRhdGEuZGlyZWN0aXZlcyl7dmFyIGk9by5kYXRhLmRpcmVjdGl2ZXMuZmluZChmdW5jdGlvbih0KXt2YXIgZT10Lm5hbWU7cmV0dXJuIGU9PT1ufSk7aWYoaSYmaS52YWx1ZSE9PWUudmFsdWUpcmV0dXJuIGkmJmkudmFsdWUobnVsbCxvLmtleSksdm9pZCBlLnZhbHVlKHIuY29tcG9uZW50SW5zdGFuY2V8fHQsci5rZXkpfXIuY29tcG9uZW50SW5zdGFuY2U9PT1vLmNvbXBvbmVudEluc3RhbmNlJiZyLmVsbT09PW8uZWxtfHxlLnZhbHVlKHIuY29tcG9uZW50SW5zdGFuY2V8fHQsci5rZXkpfSx1bmJpbmQ6ZnVuY3Rpb24odCxlLG4pe2UudmFsdWUobnVsbCxuLmtleSl9fSl9fX0sIjQ3ZWUiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJjM2ExIiksbz1uKCI5YWE5IiksaT1uKCIzNTVkIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXIodCksbj1vLmY7aWYobil7dmFyIGEscz1uKHQpLHU9aS5mLGM9MDt3aGlsZShzLmxlbmd0aD5jKXUuY2FsbCh0LGE9c1tjKytdKSYmZS5wdXNoKGEpfXJldHVybiBlfX0sIjQ4MWIiOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXt9fSw0ODQ5OmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9e2RlZmF1bHQ6bigiNDU0ZiIpLF9fZXNNb2R1bGU6ITB9fSwiNDhiYiI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigiOWI1NyIpLG89cyhyKSxpPW4oIjQxYjIiKSxhPXMoaSk7ZnVuY3Rpb24gcyh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZVsiZGVmYXVsdCJdPXttZXRob2RzOntzZXRTdGF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuPSJmdW5jdGlvbiI9PT10eXBlb2YgdD90KHRoaXMuJGRhdGEsdGhpcy4kcHJvcHMpOnQ7KDAsYVsiZGVmYXVsdCJdKSh0aGlzLiRkYXRhLG4pLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZSYmZSgpfSl9LF9fZW1pdDpmdW5jdGlvbigpe3ZhciB0LGU9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMCksbj1bXSxyPWVbMF07ZS5sZW5ndGgmJnRoaXMuJGxpc3RlbmVyc1tyXSYmKG4uaW5jbHVkZXMocik/dGhpcy4kZW1pdC5hcHBseSh0aGlzLFtyXS5jb25jYXQoKDAsb1siZGVmYXVsdCJdKShlLnNsaWNlKDEpKSkpOih0PXRoaXMuJGxpc3RlbmVycylbcl0uYXBwbHkodCwoMCxvWyJkZWZhdWx0Il0pKGUuc2xpY2UoMSkpKSl9fX19LCI0OWY0IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNjA0NCIpO2Z1bmN0aW9uIG8oKXt0aGlzLl9fZGF0YV9fPXI/cihudWxsKTp7fSx0aGlzLnNpemU9MH10LmV4cG9ydHM9b30sIjRkMjYiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvOwovKiEKICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi4KICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZQogIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXMKKi8KLyohCiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uCiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWUKICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzCiovCihmdW5jdGlvbigpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBpKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgcj1hcmd1bWVudHNbZV07aWYocil7dmFyIG89dHlwZW9mIHI7aWYoInN0cmluZyI9PT1vfHwibnVtYmVyIj09PW8pdC5wdXNoKHIpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShyKSYmci5sZW5ndGgpe3ZhciBhPWkuYXBwbHkobnVsbCxyKTthJiZ0LnB1c2goYSl9ZWxzZSBpZigib2JqZWN0Ij09PW8pZm9yKHZhciBzIGluIHIpbi5jYWxsKHIscykmJnJbc10mJnQucHVzaChzKX19cmV0dXJuIHQuam9pbigiICIpfXQuZXhwb3J0cz8oaS5kZWZhdWx0PWksdC5leHBvcnRzPWkpOihyPVtdLG89ZnVuY3Rpb24oKXtyZXR1cm4gaX0uYXBwbHkoZSxyKSx2b2lkIDA9PT1vfHwodC5leHBvcnRzPW8pKX0pKCl9LCI0ZWUxIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNTE2OCIpKCJpdGVyYXRvciIpLG89ITE7dHJ5e3ZhciBpPVs3XVtyXSgpO2lbInJldHVybiJdPWZ1bmN0aW9uKCl7bz0hMH0sQXJyYXkuZnJvbShpLGZ1bmN0aW9uKCl7dGhyb3cgMn0pfWNhdGNoKGEpe310LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighZSYmIW8pcmV0dXJuITE7dmFyIG49ITE7dHJ5e3ZhciBpPVs3XSxzPWlbcl0oKTtzLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpuPSEwfX0saVtyXT1mdW5jdGlvbigpe3JldHVybiBzfSx0KGkpfWNhdGNoKGEpe31yZXR1cm4gbn19LCI1MGQ4IjpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4odCxlKXt2YXIgbj0tMSxyPUFycmF5KHQpO3doaWxlKCsrbjx0KXJbbl09ZShuKTtyZXR1cm4gcn10LmV4cG9ydHM9bn0sIjUwZWQiOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJue3ZhbHVlOmUsZG9uZTohIXR9fX0sNTE2ODpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZGJkYiIpKCJ3a3MiKSxvPW4oIjYyYTAiKSxpPW4oImU1M2QiKS5TeW1ib2wsYT0iZnVuY3Rpb24iPT10eXBlb2YgaSxzPXQuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gclt0XXx8KHJbdF09YSYmaVt0XXx8KGE/aTpvKSgiU3ltYm9sLiIrdCkpfTtzLnN0b3JlPXJ9LCI1MWI2IjpmdW5jdGlvbih0LGUsbil7bigiYTNjMyIpLHQuZXhwb3J0cz1uKCI1ODRhIikuT2JqZWN0LmFzc2lnbn0sIjUzZTIiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIwN2UzIiksbz1uKCIyNDFlIiksaT1uKCI1NTU5IikoIklFX1BST1RPIiksYT1PYmplY3QucHJvdG90eXBlO3QuZXhwb3J0cz1PYmplY3QuZ2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQpe3JldHVybiB0PW8odCkscih0LGkpP3RbaV06ImZ1bmN0aW9uIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/YTpudWxsfX0sIjU0OWIiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiZDg2NCIpLG89bigiNjNiNiIpLGk9bigiMjQxZSIpLGE9bigiYjBkYyIpLHM9bigiMzcwMiIpLHU9bigiYjQ0NyIpLGM9bigiMjBmZCIpLGY9bigiN2NkNiIpO28oby5TK28uRiohbigiNGVlMSIpKGZ1bmN0aW9uKHQpe0FycmF5LmZyb20odCl9KSwiQXJyYXkiLHtmcm9tOmZ1bmN0aW9uKHQpe3ZhciBlLG4sbyxsLGQ9aSh0KSxwPSJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzP3RoaXM6QXJyYXksaD1hcmd1bWVudHMubGVuZ3RoLHY9aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbT12b2lkIDAhPT12LHk9MCxiPWYoZCk7aWYobSYmKHY9cih2LGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwLDIpKSx2b2lkIDA9PWJ8fHA9PUFycmF5JiZzKGIpKWZvcihlPXUoZC5sZW5ndGgpLG49bmV3IHAoZSk7ZT55O3krKyljKG4seSxtP3YoZFt5XSx5KTpkW3ldKTtlbHNlIGZvcihsPWIuY2FsbChkKSxuPW5ldyBwOyEobz1sLm5leHQoKSkuZG9uZTt5KyspYyhuLHksbT9hKGwsdixbby52YWx1ZSx5XSwhMCk6by52YWx1ZSk7cmV0dXJuIG4ubGVuZ3RoPXksbn19KX0sIjU0YTEiOmZ1bmN0aW9uKHQsZSxuKXtuKCI2YzFjIiksbigiMTY1NCIpLHQuZXhwb3J0cz1uKCI5NWQ1Iil9LCI1NGViIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiOGVlYiIpLG89bigiMzJmNCIpO2Z1bmN0aW9uIGkodCxlKXtyZXR1cm4gcih0LG8odCksZSl9dC5leHBvcnRzPWl9LDU1NTk6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImRiZGIiKSgia2V5cyIpLG89bigiNjJhMCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gclt0XXx8KHJbdF09byh0KSl9fSwiNTVhMyI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQpe3JldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh0KX10LmV4cG9ydHM9bn0sIjU3YTUiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI5MWU5Iiksbz1yKE9iamVjdC5rZXlzLE9iamVjdCk7dC5leHBvcnRzPW99LCI1ODRhIjpmdW5jdGlvbih0LGUpe3ZhciBuPXQuZXhwb3J0cz17dmVyc2lvbjoiMi42LjUifTsibnVtYmVyIj09dHlwZW9mIF9fZSYmKF9fZT1uKX0sIjU4NWEiOmZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oZSl7dmFyIG49Im9iamVjdCI9PXR5cGVvZiBlJiZlJiZlLk9iamVjdD09PU9iamVjdCYmZTt0LmV4cG9ydHM9bn0pLmNhbGwodGhpcyxuKCJjOGJhIikpfSwiNWIwMSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjhlZWIiKSxvPW4oImVjNjkiKTtmdW5jdGlvbiBpKHQsZSl7cmV0dXJuIHQmJnIoZSxvKGUpLHQpfXQuZXhwb3J0cz1pfSwiNWI0ZSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjM2YzMiKSxvPW4oImI0NDciKSxpPW4oIjBmYzkiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsbixhKXt2YXIgcyx1PXIoZSksYz1vKHUubGVuZ3RoKSxmPWkoYSxjKTtpZih0JiZuIT1uKXt3aGlsZShjPmYpaWYocz11W2YrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7Yz5mO2YrKylpZigodHx8ZiBpbiB1KSYmdVtmXT09PW4pcmV0dXJuIHR8fGZ8fDA7cmV0dXJuIXQmJi0xfX19LCI1ZDg5IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZjhhZiIpO2Z1bmN0aW9uIG8odCxlKXt2YXIgbj1lP3IodC5idWZmZXIpOnQuYnVmZmVyO3JldHVybiBuZXcgdC5jb25zdHJ1Y3RvcihuLHQuYnl0ZU9mZnNldCx0LmJ5dGVMZW5ndGgpfXQuZXhwb3J0cz1vfSwiNWUyZSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjI4YzkiKSxvPW4oIjY5ZDUiKSxpPW4oImI0YzAiKSxhPW4oImZiYTUiKSxzPW4oIjY3Y2EiKTtmdW5jdGlvbiB1KHQpe3ZhciBlPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoO3RoaXMuY2xlYXIoKTt3aGlsZSgrK2U8bil7dmFyIHI9dFtlXTt0aGlzLnNldChyWzBdLHJbMV0pfX11LnByb3RvdHlwZS5jbGVhcj1yLHUucHJvdG90eXBlWyJkZWxldGUiXT1vLHUucHJvdG90eXBlLmdldD1pLHUucHJvdG90eXBlLmhhcz1hLHUucHJvdG90eXBlLnNldD1zLHQuZXhwb3J0cz11fSw2MDQyOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZS5fX2VzTW9kdWxlPSEwO3ZhciByPW4oIjQ4NDkiKSxvPWkocik7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZS5kZWZhdWx0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSBpbiB0PygwLG8uZGVmYXVsdCkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9fSw2MDQ0OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIwYjA3Iiksbz1yKE9iamVjdCwiY3JlYXRlIik7dC5leHBvcnRzPW99LCI2MGVkIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMzcyOSIpLG89bigiMmRjYiIpLGk9bigiMTMxMCIpLGE9IltvYmplY3QgT2JqZWN0XSIscz1GdW5jdGlvbi5wcm90b3R5cGUsdT1PYmplY3QucHJvdG90eXBlLGM9cy50b1N0cmluZyxmPXUuaGFzT3duUHJvcGVydHksbD1jLmNhbGwoT2JqZWN0KTtmdW5jdGlvbiBkKHQpe2lmKCFpKHQpfHxyKHQpIT1hKXJldHVybiExO3ZhciBlPW8odCk7aWYobnVsbD09PWUpcmV0dXJuITA7dmFyIG49Zi5jYWxsKGUsImNvbnN0cnVjdG9yIikmJmUuY29uc3RydWN0b3I7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIG4mJm4gaW5zdGFuY2VvZiBuJiZjLmNhbGwobik9PWx9dC5leHBvcnRzPWR9LDYyMTg6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigiN2I0NCIpLG89aShyKTtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lWyJkZWZhdWx0Il09e3dyYXBwZXJDbGFzc05hbWU6b1siZGVmYXVsdCJdLnN0cmluZyx3aWR0aDpvWyJkZWZhdWx0Il0uYW55LGhlaWdodDpvWyJkZWZhdWx0Il0uYW55LGRlZmF1bHRPcGVuOm9bImRlZmF1bHQiXS5ib29sLGZpcnN0RW50ZXI6b1siZGVmYXVsdCJdLmJvb2wsb3BlbjpvWyJkZWZhdWx0Il0uYm9vbCxwcmVmaXhDbHM6b1siZGVmYXVsdCJdLnN0cmluZyxwbGFjZW1lbnQ6b1siZGVmYXVsdCJdLnN0cmluZyxsZXZlbDpvWyJkZWZhdWx0Il0ub25lT2ZUeXBlKFtvWyJkZWZhdWx0Il0uc3RyaW5nLG9bImRlZmF1bHQiXS5hcnJheV0pLGxldmVsTW92ZTpvWyJkZWZhdWx0Il0ub25lT2ZUeXBlKFtvWyJkZWZhdWx0Il0ubnVtYmVyLG9bImRlZmF1bHQiXS5mdW5jLG9bImRlZmF1bHQiXS5hcnJheV0pLGVhc2U6b1siZGVmYXVsdCJdLnN0cmluZyxkdXJhdGlvbjpvWyJkZWZhdWx0Il0uc3RyaW5nLGdldENvbnRhaW5lcjpvWyJkZWZhdWx0Il0ub25lT2ZUeXBlKFtvWyJkZWZhdWx0Il0uc3RyaW5nLG9bImRlZmF1bHQiXS5mdW5jLG9bImRlZmF1bHQiXS5vYmplY3Qsb1siZGVmYXVsdCJdLmJvb2xdKSxoYW5kbGVyOm9bImRlZmF1bHQiXS5hbnksc2hvd01hc2s6b1siZGVmYXVsdCJdLmJvb2wsbWFza1N0eWxlOm9bImRlZmF1bHQiXS5vYmplY3QsY2xhc3NOYW1lOm9bImRlZmF1bHQiXS5zdHJpbmcsd3JhcFN0eWxlOm9bImRlZmF1bHQiXS5vYmplY3R9fSwiNjJhMCI6ZnVuY3Rpb24odCxlKXt2YXIgbj0wLHI9TWF0aC5yYW5kb20oKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIlN5bWJvbCgiLmNvbmNhdCh2b2lkIDA9PT10PyIiOnQsIilfIiwoKytuK3IpLnRvU3RyaW5nKDM2KSl9fSwiNjJlNCI6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHQud2VicGFja1BvbHlmaWxsfHwodC5kZXByZWNhdGU9ZnVuY3Rpb24oKXt9LHQucGF0aHM9W10sdC5jaGlsZHJlbnx8KHQuY2hpbGRyZW49W10pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJsb2FkZWQiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0Lmx9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsImlkIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5pfX0pLHQud2VicGFja1BvbHlmaWxsPTEpLHR9fSwiNjNiNiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImU1M2QiKSxvPW4oIjU4NGEiKSxpPW4oImQ4NjQiKSxhPW4oIjM1ZTgiKSxzPW4oIjA3ZTMiKSx1PSJwcm90b3R5cGUiLGM9ZnVuY3Rpb24odCxlLG4pe3ZhciBmLGwsZCxwPXQmYy5GLGg9dCZjLkcsdj10JmMuUyxtPXQmYy5QLHk9dCZjLkIsYj10JmMuVyxnPWg/bzpvW2VdfHwob1tlXT17fSksdz1nW3VdLHg9aD9yOnY/cltlXToocltlXXx8e30pW3VdO2ZvcihmIGluIGgmJihuPWUpLG4pbD0hcCYmeCYmdm9pZCAwIT09eFtmXSxsJiZzKGcsZil8fChkPWw/eFtmXTpuW2ZdLGdbZl09aCYmImZ1bmN0aW9uIiE9dHlwZW9mIHhbZl0/bltmXTp5JiZsP2koZCxyKTpiJiZ4W2ZdPT1kP2Z1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKGUsbixyKXtpZih0aGlzIGluc3RhbmNlb2YgdCl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IHQ7Y2FzZSAxOnJldHVybiBuZXcgdChlKTtjYXNlIDI6cmV0dXJuIG5ldyB0KGUsbil9cmV0dXJuIG5ldyB0KGUsbixyKX1yZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiBlW3VdPXRbdV0sZX0oZCk6bSYmImZ1bmN0aW9uIj09dHlwZW9mIGQ/aShGdW5jdGlvbi5jYWxsLGQpOmQsbSYmKChnLnZpcnR1YWx8fChnLnZpcnR1YWw9e30pKVtmXT1kLHQmYy5SJiZ3JiYhd1tmXSYmYSh3LGYsZCkpKX07Yy5GPTEsYy5HPTIsYy5TPTQsYy5QPTgsYy5CPTE2LGMuVz0zMixjLlU9NjQsYy5SPTEyOCx0LmV4cG9ydHM9Y30sNjcxODpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZTUzZCIpLG89bigiNTg0YSIpLGk9bigiYjhlMyIpLGE9bigiY2NiOSIpLHM9bigiZDlmNiIpLmY7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPW8uU3ltYm9sfHwoby5TeW1ib2w9aT97fTpyLlN5bWJvbHx8e30pOyJfIj09dC5jaGFyQXQoMCl8fHQgaW4gZXx8cyhlLHQse3ZhbHVlOmEuZih0KX0pfX0sNjc0NzpmdW5jdGlvbih0LGUpe3ZhciBuPUFycmF5LmlzQXJyYXk7dC5leHBvcnRzPW59LCI2N2NhIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiY2I1YSIpO2Z1bmN0aW9uIG8odCxlKXt2YXIgbj10aGlzLl9fZGF0YV9fLG89cihuLHQpO3JldHVybiBvPDA/KCsrdGhpcy5zaXplLG4ucHVzaChbdCxlXSkpOm5bb11bMV09ZSx0aGlzfXQuZXhwb3J0cz1vfSwiNjlkMyI6ZnVuY3Rpb24odCxlLG4pe24oIjY3MTgiKSgiYXN5bmNJdGVyYXRvciIpfSwiNjlkNSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImNiNWEiKSxvPUFycmF5LnByb3RvdHlwZSxpPW8uc3BsaWNlO2Z1bmN0aW9uIGEodCl7dmFyIGU9dGhpcy5fX2RhdGFfXyxuPXIoZSx0KTtpZihuPDApcmV0dXJuITE7dmFyIG89ZS5sZW5ndGgtMTtyZXR1cm4gbj09bz9lLnBvcCgpOmkuY2FsbChlLG4sMSksLS10aGlzLnNpemUsITB9dC5leHBvcnRzPWF9LCI2YWJmIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZTZmMyIpLG89bigiMTY5MSIpLmNvbmNhdCgibGVuZ3RoIiwicHJvdG90eXBlIik7ZS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbih0KXtyZXR1cm4gcih0LG8pfX0sIjZiNGMiOmZ1bmN0aW9uKHQsZSl7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuLmNhbGwodCkuc2xpY2UoOCwtMSl9fSwiNmMxYyI6ZnVuY3Rpb24odCxlLG4pe24oImMzNjciKTtmb3IodmFyIHI9bigiZTUzZCIpLG89bigiMzVlOCIpLGk9bigiNDgxYiIpLGE9bigiNTE2OCIpKCJ0b1N0cmluZ1RhZyIpLHM9IkNTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsRE9NVG9rZW5MaXN0LERhdGFUcmFuc2Zlckl0ZW1MaXN0LEZpbGVMaXN0LEhUTUxBbGxDb2xsZWN0aW9uLEhUTUxDb2xsZWN0aW9uLEhUTUxGb3JtRWxlbWVudCxIVE1MU2VsZWN0RWxlbWVudCxNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LFNWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LFRleHRUcmFja0xpc3QsVG91Y2hMaXN0Ii5zcGxpdCgiLCIpLHU9MDt1PHMubGVuZ3RoO3UrKyl7dmFyIGM9c1t1XSxmPXJbY10sbD1mJiZmLnByb3RvdHlwZTtsJiYhbFthXSYmbyhsLGEsYyksaVtjXT1pLkFycmF5fX0sIjZmNmMiOmZ1bmN0aW9uKHQsZSl7dmFyIG49L1x3KiQvO2Z1bmN0aW9uIHIodCl7dmFyIGU9bmV3IHQuY29uc3RydWN0b3IodC5zb3VyY2Usbi5leGVjKHQpKTtyZXR1cm4gZS5sYXN0SW5kZXg9dC5sYXN0SW5kZXgsZX10LmV4cG9ydHM9cn0sIjZmY2QiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI1MGQ4Iiksbz1uKCJkMzcwIiksaT1uKCI2NzQ3IiksYT1uKCIwZDI0Iikscz1uKCJjMDk4IiksdT1uKCI3M2FjIiksYz1PYmplY3QucHJvdG90eXBlLGY9Yy5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBsKHQsZSl7dmFyIG49aSh0KSxjPSFuJiZvKHQpLGw9IW4mJiFjJiZhKHQpLGQ9IW4mJiFjJiYhbCYmdSh0KSxwPW58fGN8fGx8fGQsaD1wP3IodC5sZW5ndGgsU3RyaW5nKTpbXSx2PWgubGVuZ3RoO2Zvcih2YXIgbSBpbiB0KSFlJiYhZi5jYWxsKHQsbSl8fHAmJigibGVuZ3RoIj09bXx8bCYmKCJvZmZzZXQiPT1tfHwicGFyZW50Ij09bSl8fGQmJigiYnVmZmVyIj09bXx8ImJ5dGVMZW5ndGgiPT1tfHwiYnl0ZU9mZnNldCI9PW0pfHxzKG0sdikpfHxoLnB1c2gobSk7cmV0dXJuIGh9dC5leHBvcnRzPWx9LCI3MTBkIjpmdW5jdGlvbih0LGUsbil7fSwiNzFjMSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjNhMzgiKSxvPW4oIjI1ZWIiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsbil7dmFyIGksYSxzPVN0cmluZyhvKGUpKSx1PXIobiksYz1zLmxlbmd0aDtyZXR1cm4gdTwwfHx1Pj1jP3Q/IiI6dm9pZCAwOihpPXMuY2hhckNvZGVBdCh1KSxpPDU1Mjk2fHxpPjU2MzE5fHx1KzE9PT1jfHwoYT1zLmNoYXJDb2RlQXQodSsxKSk8NTYzMjB8fGE+NTczNDM/dD9zLmNoYXJBdCh1KTppOnQ/cy5zbGljZSh1LHUrMik6YS01NjMyMCsoaS01NTI5Njw8MTApKzY1NTM2KX19fSwiNzNhYyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjc0M2YiKSxvPW4oImIwNDciKSxpPW4oIjk5ZDMiKSxhPWkmJmkuaXNUeXBlZEFycmF5LHM9YT9vKGEpOnI7dC5leHBvcnRzPXN9LCI3M2M4IjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLmdldEFsbENoaWxkcmVuPWUuZ2V0QWxsUHJvcHM9ZS5nZXRTbG90cz1lLmNhbWVsaXplPWUuaXNWYWxpZEVsZW1lbnQ9ZS5pbml0RGVmYXVsdFByb3BzPWUucGFyc2VTdHlsZVRleHQ9ZS5nZXRWYWx1ZUJ5UHJvcD1lLmdldEF0dHJzPWUuZ2V0S2V5PWUuZ2V0UHJvcHNEYXRhPWUuc2xvdEhhc1Byb3A9ZS5nZXRTbG90T3B0aW9ucz1lLmdldENvbXBvbmVudEZyb21Qcm9wPWUuZ2V0T3B0aW9uUHJvcHM9ZS5maWx0ZXJQcm9wcz1lLmhhc1Byb3A9dm9pZCAwO3ZhciByPW4oIjEwOTgiKSxvPXAociksaT1uKCI0MWIyIiksYT1wKGkpLHM9bigiYjI0ZiIpLHU9cChzKTtlLmdldEV2ZW50cz1NLGUuZ2V0Q2xhc3M9ayxlLmdldFN0eWxlPSQsZS5nZXRDb21wb25lbnROYW1lPUQsZS5pc0VtcHR5RWxlbWVudD1OLGUuZmlsdGVyRW1wdHk9TCxlLm1lcmdlUHJvcHM9Vjt2YXIgYz1uKCI2MGVkIiksZj1wKGMpLGw9bigiNGQyNiIpLGQ9cChsKTtmdW5jdGlvbiBwKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBoKHQpe3ZhciBlPXQmJnQudG9TdHJpbmcoKS5tYXRjaCgvXlxzKmZ1bmN0aW9uIChcdyspLyk7cmV0dXJuIGU/ZVsxXToiIn12YXIgdj0vLShcdykvZyxtPWZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UodixmdW5jdGlvbih0LGUpe3JldHVybiBlP2UudG9VcHBlckNhc2UoKToiIn0pfSx5PWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOiIiLGU9YXJndW1lbnRzWzFdLG49e30scj0vOyg/IVteKF0qXCkpL2csbz0vOiguKykvO3JldHVybiB0LnNwbGl0KHIpLmZvckVhY2goZnVuY3Rpb24odCl7aWYodCl7dmFyIHI9dC5zcGxpdChvKTtpZihyLmxlbmd0aD4xKXt2YXIgaT1lP20oclswXS50cmltKCkpOnJbMF0udHJpbSgpO25baV09clsxXS50cmltKCl9fX0pLG59LGI9ZnVuY3Rpb24odCxlKXt2YXIgbj10LiRvcHRpb25zfHx7fSxyPW4ucHJvcHNEYXRhfHx7fTtyZXR1cm4gZSBpbiByfSxnPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5jb21wb25lbnRPcHRpb25zfHx7fSxyPW4ucHJvcHNEYXRhfHx7fTtyZXR1cm4gZSBpbiByfSx3PWZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxuPXt9O3JldHVybiBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKHIpeyhyIGluIGV8fHZvaWQgMCE9PXRbcl0pJiYobltyXT10W3JdKX0pLG59LHg9ZnVuY3Rpb24odCl7dmFyIGU9dC5jb21wb25lbnRPcHRpb25zfHx7fTt0LiR2bm9kZSYmKGU9dC4kdm5vZGUuY29tcG9uZW50T3B0aW9uc3x8e30pO3ZhciBuPXQuY2hpbGRyZW58fGUuY2hpbGRyZW58fFtdLHI9e307cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbih0KXtpZighTih0KSl7dmFyIGU9dC5kYXRhJiZ0LmRhdGEuc2xvdHx8ImRlZmF1bHQiO3JbZV09cltlXXx8W10scltlXS5wdXNoKHQpfX0pLHJ9LE89ZnVuY3Rpb24odCl7dmFyIGU9dC5jb21wb25lbnRPcHRpb25zfHx7fTtyZXR1cm4gdC4kdm5vZGUmJihlPXQuJHZub2RlLmNvbXBvbmVudE9wdGlvbnN8fHt9KSx0LmNoaWxkcmVufHxlLmNoaWxkcmVufHxbXX0sVD1mdW5jdGlvbih0KXtpZih0LmZuT3B0aW9ucylyZXR1cm4gdC5mbk9wdGlvbnM7dmFyIGU9dC5jb21wb25lbnRPcHRpb25zO3JldHVybiB0LiR2bm9kZSYmKGU9dC4kdm5vZGUuY29tcG9uZW50T3B0aW9ucyksZSYmZS5DdG9yLm9wdGlvbnN8fHt9fSxqPWZ1bmN0aW9uKHQpe2lmKHQuY29tcG9uZW50T3B0aW9ucyl7dmFyIGU9dC5jb21wb25lbnRPcHRpb25zLG49ZS5wcm9wc0RhdGEscj12b2lkIDA9PT1uP3t9Om4sbz1lLkN0b3IsaT12b2lkIDA9PT1vP3t9Om8scz0oaS5vcHRpb25zfHx7fSkucHJvcHN8fHt9LGM9e30sZj0hMCxsPSExLGQ9dm9pZCAwO3RyeXtmb3IodmFyIHAsdj1PYmplY3QuZW50cmllcyhzKVtTeW1ib2wuaXRlcmF0b3JdKCk7IShmPShwPXYubmV4dCgpKS5kb25lKTtmPSEwKXt2YXIgbT1wLnZhbHVlLHk9KDAsdVsiZGVmYXVsdCJdKShtLDIpLGI9eVswXSxnPXlbMV0seD1nWyJkZWZhdWx0Il07dm9pZCAwIT09eCYmKGNbYl09ImZ1bmN0aW9uIj09PXR5cGVvZiB4JiYiRnVuY3Rpb24iIT09aChnLnR5cGUpP3guY2FsbCh0KTp4KX19Y2F0Y2goUCl7bD0hMCxkPVB9ZmluYWxseXt0cnl7IWYmJnZbInJldHVybiJdJiZ2WyJyZXR1cm4iXSgpfWZpbmFsbHl7aWYobCl0aHJvdyBkfX1yZXR1cm4oMCxhWyJkZWZhdWx0Il0pKHt9LGMscil9dmFyIE89dC4kb3B0aW9ucyxUPXZvaWQgMD09PU8/e306TyxqPXQuJHByb3BzLF89dm9pZCAwPT09aj97fTpqO3JldHVybiB3KF8sVC5wcm9wc0RhdGEpfSxfPWZ1bmN0aW9uKHQsZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnQscj0hKGFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdKXx8YXJndW1lbnRzWzNdO2lmKHQuJGNyZWF0ZUVsZW1lbnQpe3ZhciBvPXQuJGNyZWF0ZUVsZW1lbnQsaT10W2VdO3JldHVybiB2b2lkIDAhPT1pPyJmdW5jdGlvbiI9PT10eXBlb2YgaSYmcj9pKG8sbik6aTp0LiRzbG90c1tlXXx8dC4kc2NvcGVkU2xvdHNbZV0mJnImJnQuJHNjb3BlZFNsb3RzW2VdKG4pfHx0LiRzY29wZWRTbG90c1tlXXx8dm9pZCAwfXZhciBhPXQuY29udGV4dC4kY3JlYXRlRWxlbWVudCxzPUModClbZV07aWYodm9pZCAwIT09cylyZXR1cm4iZnVuY3Rpb24iPT09dHlwZW9mIHMmJnI/cyhhLG4pOnM7dmFyIHU9W10sYz10LmNvbXBvbmVudE9wdGlvbnN8fHt9O3JldHVybihjLmNoaWxkcmVufHxbXSkuZm9yRWFjaChmdW5jdGlvbih0KXt0LmRhdGEmJnQuZGF0YS5zbG90PT09ZSYmKCJ0ZW1wbGF0ZSI9PT10LnRhZz91LnB1c2godC5jaGlsZHJlbik6dS5wdXNoKHQpKX0pLHUubGVuZ3RoP3U6dm9pZCAwfSxQPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0YXx8e30sbj10LmNvbXBvbmVudE9wdGlvbnN8fHt9O3JldHVybiB0LiR2bm9kZSYmKGU9dC4kdm5vZGUuZGF0YXx8e30sbj10LiR2bm9kZS5jb21wb25lbnRPcHRpb25zfHx7fSksKDAsYVsiZGVmYXVsdCJdKSh7fSxlLnByb3BzLGUuYXR0cnMsbi5wcm9wc0RhdGEpfSxDPWZ1bmN0aW9uKHQpe3ZhciBlPXQuY29tcG9uZW50T3B0aW9ucztyZXR1cm4gdC4kdm5vZGUmJihlPXQuJHZub2RlLmNvbXBvbmVudE9wdGlvbnMpLGUmJmUucHJvcHNEYXRhfHx7fX0sRT1mdW5jdGlvbih0LGUpe3JldHVybiBDKHQpW2VdfSxTPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0YTtyZXR1cm4gdC4kdm5vZGUmJihlPXQuJHZub2RlLmRhdGEpLGUmJmUuYXR0cnN8fHt9fSxBPWZ1bmN0aW9uKHQpe3ZhciBlPXQua2V5O3JldHVybiB0LiR2bm9kZSYmKGU9dC4kdm5vZGUua2V5KSxlfTtmdW5jdGlvbiBNKHQpe3ZhciBlPXt9O3JldHVybiB0LmNvbXBvbmVudE9wdGlvbnMmJnQuY29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM/ZT10LmNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzOnQuZGF0YSYmdC5kYXRhLm9uJiYoZT10LmRhdGEub24pLCgwLGFbImRlZmF1bHQiXSkoe30sZSl9ZnVuY3Rpb24gayh0KXt2YXIgZT17fTt0LmRhdGE/ZT10LmRhdGE6dC4kdm5vZGUmJnQuJHZub2RlLmRhdGEmJihlPXQuJHZub2RlLmRhdGEpO3ZhciBuPWVbImNsYXNzIl18fHt9LHI9ZS5zdGF0aWNDbGFzcyxvPXt9O3JldHVybiByJiZyLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbih0KXtvW3QudHJpbSgpXT0hMH0pLCJzdHJpbmciPT09dHlwZW9mIG4/bi5zcGxpdCgiICIpLmZvckVhY2goZnVuY3Rpb24odCl7b1t0LnRyaW0oKV09ITB9KTpBcnJheS5pc0FycmF5KG4pPygwLGRbImRlZmF1bHQiXSkobikuc3BsaXQoIiAiKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe29bdC50cmltKCldPSEwfSk6bz0oMCxhWyJkZWZhdWx0Il0pKHt9LG8sbiksb31mdW5jdGlvbiAkKHQsZSl7dmFyIG49e307dC5kYXRhP249dC5kYXRhOnQuJHZub2RlJiZ0LiR2bm9kZS5kYXRhJiYobj10LiR2bm9kZS5kYXRhKTt2YXIgcj1uLnN0eWxlfHxuLnN0YXRpY1N0eWxlO2lmKCJzdHJpbmciPT09dHlwZW9mIHIpcj15KHIsZSk7ZWxzZSBpZihlJiZyKXt2YXIgbz17fTtyZXR1cm4gT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gb1ttKHQpXT1yW3RdfSksb31yZXR1cm4gcn1mdW5jdGlvbiBEKHQpe3JldHVybiB0JiYodC5DdG9yLm9wdGlvbnMubmFtZXx8dC50YWcpfWZ1bmN0aW9uIE4odCl7cmV0dXJuISh0LnRhZ3x8dC50ZXh0JiYiIiE9PXQudGV4dC50cmltKCkpfWZ1bmN0aW9uIEwoKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W107cmV0dXJuIHQuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiFOKHQpfSl9dmFyIEY9ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXtpZighdFtuXSl0aHJvdyBuZXcgRXJyb3IoIm5vdCBoYXZlICIrbisiIHByb3AiKTt0W25dLmRlZiYmKHRbbl09dFtuXS5kZWYoZVtuXSkpfSksdH07ZnVuY3Rpb24gVigpe3ZhciB0PVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLGU9e307cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxuPSEwLHI9ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxzPU9iamVjdC5lbnRyaWVzKHQpW1N5bWJvbC5pdGVyYXRvcl0oKTshKG49KGk9cy5uZXh0KCkpLmRvbmUpO249ITApe3ZhciBjPWkudmFsdWUsbD0oMCx1WyJkZWZhdWx0Il0pKGMsMiksZD1sWzBdLHA9bFsxXTtlW2RdPWVbZF18fHt9LCgwLGZbImRlZmF1bHQiXSkocCk/KDAsYVsiZGVmYXVsdCJdKShlW2RdLHApOmVbZF09cH19Y2F0Y2goaCl7cj0hMCxvPWh9ZmluYWxseXt0cnl7IW4mJnNbInJldHVybiJdJiZzWyJyZXR1cm4iXSgpfWZpbmFsbHl7aWYocil0aHJvdyBvfX19KSxlfWZ1bmN0aW9uIEgodCl7cmV0dXJuIHQmJiJvYmplY3QiPT09KCJ1bmRlZmluZWQiPT09dHlwZW9mIHQ/InVuZGVmaW5lZCI6KDAsb1siZGVmYXVsdCJdKSh0KSkmJiJjb21wb25lbnRPcHRpb25zImluIHQmJiJjb250ZXh0ImluIHQmJnZvaWQgMCE9PXQudGFnfWUuaGFzUHJvcD1iLGUuZmlsdGVyUHJvcHM9dyxlLmdldE9wdGlvblByb3BzPWosZS5nZXRDb21wb25lbnRGcm9tUHJvcD1fLGUuZ2V0U2xvdE9wdGlvbnM9VCxlLnNsb3RIYXNQcm9wPWcsZS5nZXRQcm9wc0RhdGE9QyxlLmdldEtleT1BLGUuZ2V0QXR0cnM9UyxlLmdldFZhbHVlQnlQcm9wPUUsZS5wYXJzZVN0eWxlVGV4dD15LGUuaW5pdERlZmF1bHRQcm9wcz1GLGUuaXNWYWxpZEVsZW1lbnQ9SCxlLmNhbWVsaXplPW0sZS5nZXRTbG90cz14LGUuZ2V0QWxsUHJvcHM9UCxlLmdldEFsbENoaWxkcmVuPU8sZVsiZGVmYXVsdCJdPWJ9LCI3NDNmIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMzcyOSIpLG89bigiYjIxOCIpLGk9bigiMTMxMCIpLGE9IltvYmplY3QgQXJndW1lbnRzXSIscz0iW29iamVjdCBBcnJheV0iLHU9IltvYmplY3QgQm9vbGVhbl0iLGM9IltvYmplY3QgRGF0ZV0iLGY9IltvYmplY3QgRXJyb3JdIixsPSJbb2JqZWN0IEZ1bmN0aW9uXSIsZD0iW29iamVjdCBNYXBdIixwPSJbb2JqZWN0IE51bWJlcl0iLGg9IltvYmplY3QgT2JqZWN0XSIsdj0iW29iamVjdCBSZWdFeHBdIixtPSJbb2JqZWN0IFNldF0iLHk9IltvYmplY3QgU3RyaW5nXSIsYj0iW29iamVjdCBXZWFrTWFwXSIsZz0iW29iamVjdCBBcnJheUJ1ZmZlcl0iLHc9IltvYmplY3QgRGF0YVZpZXddIix4PSJbb2JqZWN0IEZsb2F0MzJBcnJheV0iLE89IltvYmplY3QgRmxvYXQ2NEFycmF5XSIsVD0iW29iamVjdCBJbnQ4QXJyYXldIixqPSJbb2JqZWN0IEludDE2QXJyYXldIixfPSJbb2JqZWN0IEludDMyQXJyYXldIixQPSJbb2JqZWN0IFVpbnQ4QXJyYXldIixDPSJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSIsRT0iW29iamVjdCBVaW50MTZBcnJheV0iLFM9IltvYmplY3QgVWludDMyQXJyYXldIixBPXt9O2Z1bmN0aW9uIE0odCl7cmV0dXJuIGkodCkmJm8odC5sZW5ndGgpJiYhIUFbcih0KV19QVt4XT1BW09dPUFbVF09QVtqXT1BW19dPUFbUF09QVtDXT1BW0VdPUFbU109ITAsQVthXT1BW3NdPUFbZ109QVt1XT1BW3ddPUFbY109QVtmXT1BW2xdPUFbZF09QVtwXT1BW2hdPUFbdl09QVttXT1BW3ldPUFbYl09ITEsdC5leHBvcnRzPU19LDc1MzA6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjFhOGMiKSxvPU9iamVjdC5jcmVhdGUsaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKCFyKGUpKXJldHVybnt9O2lmKG8pcmV0dXJuIG8oZSk7dC5wcm90b3R5cGU9ZTt2YXIgbj1uZXcgdDtyZXR1cm4gdC5wcm90b3R5cGU9dm9pZCAwLG59fSgpO3QuZXhwb3J0cz1pfSwiNzY1ZCI6ZnVuY3Rpb24odCxlLG4pe24oIjY3MTgiKSgib2JzZXJ2YWJsZSIpfSwiNzk0YiI6ZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz0hbigiOGU2MCIpJiYhbigiMjk0YyIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuKCIxZWM5IikoImRpdiIpLCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSwiNzlhYSI6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgVHlwZUVycm9yKHQrIiBpcyBub3QgYSBmdW5jdGlvbiEiKTtyZXR1cm4gdH19LCI3OWJjIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMGIwNyIpLG89bigiMmIzZSIpLGk9cihvLCJNYXAiKTt0LmV4cG9ydHM9aX0sIjdhNDgiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI2MDQ0Iiksbz1PYmplY3QucHJvdG90eXBlLGk9by5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBhKHQpe3ZhciBlPXRoaXMuX19kYXRhX187cmV0dXJuIHI/dm9pZCAwIT09ZVt0XTppLmNhbGwoZSx0KX10LmV4cG9ydHM9YX0sIjdiNDQiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjEwOTgiKSxvPXUociksaT1uKCI2MGVkIiksYT11KGkpLHM9bigiYmI3OCIpO2Z1bmN0aW9uIHUodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fXZhciBjPXtnZXQgYW55KCl7cmV0dXJuKDAscy50b1R5cGUpKCJhbnkiLHt0eXBlOm51bGx9KX0sZ2V0IGZ1bmMoKXtyZXR1cm4oMCxzLnRvVHlwZSkoImZ1bmN0aW9uIix7dHlwZTpGdW5jdGlvbn0pLmRlZihsLmZ1bmMpfSxnZXQgYm9vbCgpe3JldHVybigwLHMudG9UeXBlKSgiYm9vbGVhbiIse3R5cGU6Qm9vbGVhbn0pLmRlZihsLmJvb2wpfSxnZXQgc3RyaW5nKCl7cmV0dXJuKDAscy50b1R5cGUpKCJzdHJpbmciLHt0eXBlOlN0cmluZ30pLmRlZihsLnN0cmluZyl9LGdldCBudW1iZXIoKXtyZXR1cm4oMCxzLnRvVHlwZSkoIm51bWJlciIse3R5cGU6TnVtYmVyfSkuZGVmKGwubnVtYmVyKX0sZ2V0IGFycmF5KCl7cmV0dXJuKDAscy50b1R5cGUpKCJhcnJheSIse3R5cGU6QXJyYXl9KS5kZWYobC5hcnJheSl9LGdldCBvYmplY3QoKXtyZXR1cm4oMCxzLnRvVHlwZSkoIm9iamVjdCIse3R5cGU6T2JqZWN0fSkuZGVmKGwub2JqZWN0KX0sZ2V0IGludGVnZXIoKXtyZXR1cm4oMCxzLnRvVHlwZSkoImludGVnZXIiLHt0eXBlOk51bWJlcix2YWxpZGF0b3I6ZnVuY3Rpb24odCl7cmV0dXJuKDAscy5pc0ludGVnZXIpKHQpfX0pLmRlZihsLmludGVnZXIpfSxnZXQgc3ltYm9sKCl7cmV0dXJuKDAscy50b1R5cGUpKCJzeW1ib2wiLHt0eXBlOm51bGwsdmFsaWRhdG9yOmZ1bmN0aW9uKHQpe3JldHVybiJzeW1ib2wiPT09KCJ1bmRlZmluZWQiPT09dHlwZW9mIHQ/InVuZGVmaW5lZCI6KDAsb1siZGVmYXVsdCJdKSh0KSl9fSl9LGN1c3RvbTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ImN1c3RvbSB2YWxpZGF0aW9uIGZhaWxlZCI7aWYoImZ1bmN0aW9uIiE9PXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoIltWdWVUeXBlcyBlcnJvcl06IFlvdSBtdXN0IHByb3ZpZGUgYSBmdW5jdGlvbiBhcyBhcmd1bWVudCIpO3JldHVybigwLHMudG9UeXBlKSh0Lm5hbWV8fCI8PGFub255bW91cyBmdW5jdGlvbj4+Iix7dmFsaWRhdG9yOmZ1bmN0aW9uKCl7dmFyIG49dC5hcHBseSh2b2lkIDAsYXJndW1lbnRzKTtyZXR1cm4gbnx8KDAscy53YXJuKSh0aGlzLl92dWVUeXBlc19uYW1lKyIgLSAiK2UpLG59fSl9LG9uZU9mOmZ1bmN0aW9uKHQpe2lmKCEoMCxzLmlzQXJyYXkpKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIltWdWVUeXBlcyBlcnJvcl06IFlvdSBtdXN0IHByb3ZpZGUgYW4gYXJyYXkgYXMgYXJndW1lbnQiKTt2YXIgZT0nb25lT2YgLSB2YWx1ZSBzaG91bGQgYmUgb25lIG9mICInK3Quam9pbignIiwgIicpKyciJyxuPXQucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYtMT09PXQuaW5kZXhPZihlLmNvbnN0cnVjdG9yKSYmdC5wdXNoKGUuY29uc3RydWN0b3IpLHR9LFtdKTtyZXR1cm4oMCxzLnRvVHlwZSkoIm9uZU9mIix7dHlwZTpuLmxlbmd0aD4wP246bnVsbCx2YWxpZGF0b3I6ZnVuY3Rpb24obil7dmFyIHI9LTEhPT10LmluZGV4T2Yobik7cmV0dXJuIHJ8fCgwLHMud2FybikoZSkscn19KX0saW5zdGFuY2VPZjpmdW5jdGlvbih0KXtyZXR1cm4oMCxzLnRvVHlwZSkoImluc3RhbmNlT2YiLHt0eXBlOnR9KX0sb25lT2ZUeXBlOmZ1bmN0aW9uKHQpe2lmKCEoMCxzLmlzQXJyYXkpKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIltWdWVUeXBlcyBlcnJvcl06IFlvdSBtdXN0IHByb3ZpZGUgYW4gYXJyYXkgYXMgYXJndW1lbnQiKTt2YXIgZT0hMSxuPXQucmVkdWNlKGZ1bmN0aW9uKHQsbil7aWYoKDAsYVsiZGVmYXVsdCJdKShuKSl7aWYoIm9uZU9mIj09PW4uX3Z1ZVR5cGVzX25hbWUpcmV0dXJuIHQuY29uY2F0KG4udHlwZXx8W10pO2lmKG4udHlwZSYmISgwLHMuaXNGdW5jdGlvbikobi52YWxpZGF0b3IpKXtpZigoMCxzLmlzQXJyYXkpKG4udHlwZSkpcmV0dXJuIHQuY29uY2F0KG4udHlwZSk7dC5wdXNoKG4udHlwZSl9ZWxzZSgwLHMuaXNGdW5jdGlvbikobi52YWxpZGF0b3IpJiYoZT0hMCk7cmV0dXJuIHR9cmV0dXJuIHQucHVzaChuKSx0fSxbXSk7aWYoIWUpcmV0dXJuKDAscy50b1R5cGUpKCJvbmVPZlR5cGUiLHt0eXBlOm59KS5kZWYodm9pZCAwKTt2YXIgcj10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdCYmKDAscy5pc0FycmF5KSh0LnR5cGUpP3QudHlwZS5tYXAocy5nZXRUeXBlKTooMCxzLmdldFR5cGUpKHQpfSkucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KCgwLHMuaXNBcnJheSkoZSk/ZTpbZV0pfSxbXSkuam9pbignIiwgIicpO3JldHVybiB0aGlzLmN1c3RvbShmdW5jdGlvbihlKXt2YXIgbj10LnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIm9uZU9mIj09PXQuX3Z1ZVR5cGVzX25hbWU/IXQudHlwZXx8KDAscy52YWxpZGF0ZVR5cGUpKHQudHlwZSxlLCEwKTooMCxzLnZhbGlkYXRlVHlwZSkodCxlLCEwKX0pO3JldHVybiBufHwoMCxzLndhcm4pKCdvbmVPZlR5cGUgLSB2YWx1ZSB0eXBlIHNob3VsZCBiZSBvbmUgb2YgIicrcisnIicpLG59KS5kZWYodm9pZCAwKX0sYXJyYXlPZjpmdW5jdGlvbih0KXtyZXR1cm4oMCxzLnRvVHlwZSkoImFycmF5T2YiLHt0eXBlOkFycmF5LHZhbGlkYXRvcjpmdW5jdGlvbihlKXt2YXIgbj1lLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybigwLHMudmFsaWRhdGVUeXBlKSh0LGUpfSk7cmV0dXJuIG58fCgwLHMud2FybikoJ2FycmF5T2YgLSB2YWx1ZSBtdXN0IGJlIGFuIGFycmF5IG9mICInKygwLHMuZ2V0VHlwZSkodCkrJyInKSxufX0pfSxvYmplY3RPZjpmdW5jdGlvbih0KXtyZXR1cm4oMCxzLnRvVHlwZSkoIm9iamVjdE9mIix7dHlwZTpPYmplY3QsdmFsaWRhdG9yOmZ1bmN0aW9uKGUpe3ZhciBuPU9iamVjdC5rZXlzKGUpLmV2ZXJ5KGZ1bmN0aW9uKG4pe3JldHVybigwLHMudmFsaWRhdGVUeXBlKSh0LGVbbl0pfSk7cmV0dXJuIG58fCgwLHMud2FybikoJ29iamVjdE9mIC0gdmFsdWUgbXVzdCBiZSBhbiBvYmplY3Qgb2YgIicrKDAscy5nZXRUeXBlKSh0KSsnIicpLG59fSl9LHNoYXBlOmZ1bmN0aW9uKHQpe3ZhciBlPU9iamVjdC5rZXlzKHQpLG49ZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV0mJiEwPT09dFtlXS5yZXF1aXJlZH0pLHI9KDAscy50b1R5cGUpKCJzaGFwZSIse3R5cGU6T2JqZWN0LHZhbGlkYXRvcjpmdW5jdGlvbihyKXt2YXIgbz10aGlzO2lmKCEoMCxhWyJkZWZhdWx0Il0pKHIpKXJldHVybiExO3ZhciBpPU9iamVjdC5rZXlzKHIpO3JldHVybiBuLmxlbmd0aD4wJiZuLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuLTE9PT1pLmluZGV4T2YodCl9KT8oKDAscy53YXJuKSgnc2hhcGUgLSBhdCBsZWFzdCBvbmUgb2YgcmVxdWlyZWQgcHJvcGVydGllcyAiJytuLmpvaW4oJyIsICInKSsnIiBpcyBub3QgcHJlc2VudCcpLCExKTppLmV2ZXJ5KGZ1bmN0aW9uKG4pe2lmKC0xPT09ZS5pbmRleE9mKG4pKXJldHVybiEwPT09by5fdnVlVHlwZXNfaXNMb29zZXx8KCgwLHMud2FybikoJ3NoYXBlIC0gb2JqZWN0IGlzIG1pc3NpbmcgIicrbisnIiBwcm9wZXJ0eScpLCExKTt2YXIgaT10W25dO3JldHVybigwLHMudmFsaWRhdGVUeXBlKShpLHJbbl0pfSl9fSk7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfdnVlVHlwZXNfaXNMb29zZSIse2VudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsdmFsdWU6ITF9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkociwibG9vc2UiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdnVlVHlwZXNfaXNMb29zZT0hMCx0aGlzfSxlbnVtZXJhYmxlOiExfSkscn19LGY9ZnVuY3Rpb24oKXtyZXR1cm57ZnVuYzp2b2lkIDAsYm9vbDp2b2lkIDAsc3RyaW5nOnZvaWQgMCxudW1iZXI6dm9pZCAwLGFycmF5OnZvaWQgMCxvYmplY3Q6dm9pZCAwLGludGVnZXI6dm9pZCAwfX0sbD1mKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGMsInNlbnNpYmxlRGVmYXVsdHMiLHtlbnVtZXJhYmxlOiExLHNldDpmdW5jdGlvbih0KXshMT09PXQ/bD17fTohMD09PXQ/bD1mKCk6KDAsYVsiZGVmYXVsdCJdKSh0KSYmKGw9dCl9LGdldDpmdW5jdGlvbigpe3JldHVybiBsfX0pLGVbImRlZmF1bHQiXT1jfSwiN2I4MyI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjdjNjQiKSxvPW4oIjkzZWQiKSxpPW4oIjI0NzgiKSxhPW4oImE1MjQiKSxzPW4oIjFmYzgiKTtmdW5jdGlvbiB1KHQpe3ZhciBlPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoO3RoaXMuY2xlYXIoKTt3aGlsZSgrK2U8bil7dmFyIHI9dFtlXTt0aGlzLnNldChyWzBdLHJbMV0pfX11LnByb3RvdHlwZS5jbGVhcj1yLHUucHJvdG90eXBlWyJkZWxldGUiXT1vLHUucHJvdG90eXBlLmdldD1pLHUucHJvdG90eXBlLmhhcz1hLHUucHJvdG90eXBlLnNldD1zLHQuZXhwb3J0cz11fSwiN2M2NCI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImUyNGIiKSxvPW4oIjVlMmUiKSxpPW4oIjc5YmMiKTtmdW5jdGlvbiBhKCl7dGhpcy5zaXplPTAsdGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgcixtYXA6bmV3KGl8fG8pLHN0cmluZzpuZXcgcn19dC5leHBvcnRzPWF9LCI3Y2Q2IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNDBjMyIpLG89bigiNTE2OCIpKCJpdGVyYXRvciIpLGk9bigiNDgxYiIpO3QuZXhwb3J0cz1uKCI1ODRhIikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24odCl7aWYodm9pZCAwIT10KXJldHVybiB0W29dfHx0WyJAQGl0ZXJhdG9yIl18fGlbcih0KV19fSwiN2QxZiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjA4N2QiKSxvPW4oIjY3NDciKTtmdW5jdGlvbiBpKHQsZSxuKXt2YXIgaT1lKHQpO3JldHVybiBvKHQpP2k6cihpLG4odCkpfXQuZXhwb3J0cz1pfSwiN2Q3YiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImU0YWUiKSxvPW4oIjdjZDYiKTt0LmV4cG9ydHM9bigiNTg0YSIpLmdldEl0ZXJhdG9yPWZ1bmN0aW9uKHQpe3ZhciBlPW8odCk7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKHQrIiBpcyBub3QgaXRlcmFibGUhIik7cmV0dXJuIHIoZS5jYWxsKHQpKX19LCI3ZTY0IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNWUyZSIpLG89bigiZWZiNiIpLGk9bigiMmZjYyIpLGE9bigiODAyYSIpLHM9bigiNTVhMyIpLHU9bigiZDAyYyIpO2Z1bmN0aW9uIGModCl7dmFyIGU9dGhpcy5fX2RhdGFfXz1uZXcgcih0KTt0aGlzLnNpemU9ZS5zaXplfWMucHJvdG90eXBlLmNsZWFyPW8sYy5wcm90b3R5cGVbImRlbGV0ZSJdPWksYy5wcm90b3R5cGUuZ2V0PWEsYy5wcm90b3R5cGUuaGFzPXMsYy5wcm90b3R5cGUuc2V0PXUsdC5leHBvcnRzPWN9LCI3ZTkwIjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZDlmNiIpLG89bigiZTRhZSIpLGk9bigiYzNhMSIpO3QuZXhwb3J0cz1uKCI4ZTYwIik/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24odCxlKXtvKHQpO3ZhciBuLGE9aShlKSxzPWEubGVuZ3RoLHU9MDt3aGlsZShzPnUpci5mKHQsbj1hW3UrK10sZVtuXSk7cmV0dXJuIHR9fSwiODAyYSI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQpe3JldHVybiB0aGlzLl9fZGF0YV9fLmdldCh0KX10LmV4cG9ydHM9bn0sODA1NzpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4odCxlKXt2YXIgbj0tMSxyPW51bGw9PXQ/MDp0Lmxlbmd0aDt3aGlsZSgrK248cilpZighMT09PWUodFtuXSxuLHQpKWJyZWFrO3JldHVybiB0fXQuZXhwb3J0cz1ufSw4MjA3OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjkyZmEiKSxvPWMociksaT1uKCI3YjQ0IiksYT1jKGkpLHM9bigiZWQ1YyIpLHU9YyhzKTtmdW5jdGlvbiBjKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lWyJkZWZhdWx0Il09e3Byb3BzOntoaWRkZW5DbGFzc05hbWU6YVsiZGVmYXVsdCJdLnN0cmluZy5kZWYoIiIpLHByZWZpeENsczphWyJkZWZhdWx0Il0uc3RyaW5nLHZpc2libGU6YVsiZGVmYXVsdCJdLmJvb2x9LHJlbmRlcjpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50c1swXSxlPXRoaXMuJHByb3BzLG49ZS5wcmVmaXhDbHMscj1lLnZpc2libGUsaT1lLmhpZGRlbkNsYXNzTmFtZSxhPXRoaXMuJGxpc3RlbmVycyxzPXtvbjphfTtyZXR1cm4gdCgiZGl2IiwoMCxvWyJkZWZhdWx0Il0pKFtzLHtjbGFzczpyPyIiOml9XSksW3QodVsiZGVmYXVsdCJdLHtjbGFzczpuKyItY29udGVudCIsYXR0cnM6e3Zpc2libGU6cn19LFt0aGlzLiRzbG90c1siZGVmYXVsdCJdXSldKX19fSw4NDM2OmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKCl7fX0sIjg1ZjIiOmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigiNDU0ZiIpfSwiODcyYSI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjNiNGEiKTtmdW5jdGlvbiBvKHQsZSxuKXsiX19wcm90b19fIj09ZSYmcj9yKHQsZSx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6bix3cml0YWJsZTohMH0pOnRbZV09bn10LmV4cG9ydHM9b30sIjg3NWQiOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjQxYjIiKSxvPW0ociksaT1uKCIxMDk4IiksYT1tKGkpLHM9bigiN2I0NCIpLHU9bShzKSxjPW4oIjIwMDUiKSxmPW4oIjk3NzgiKSxsPW0oZiksZD1uKCJkZjRlIikscD1uKCJkMmY5IiksaD1uKCIwNjQ0Iiksdj1tKGgpO2Z1bmN0aW9uIG0odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIHkodCl7cmV0dXJuImZ1bmN0aW9uIj09PXR5cGVvZiB0JiZ0P3QoKTpudWxsfWZ1bmN0aW9uIGIodCl7cmV0dXJuIm9iamVjdCI9PT0oInVuZGVmaW5lZCI9PT10eXBlb2YgdD8idW5kZWZpbmVkIjooMCxhWyJkZWZhdWx0Il0pKHQpKSYmdD90Om51bGx9ZVsiZGVmYXVsdCJdPXtwcm9wczp7Y2hpbGRyZW5Qcm9wczp1WyJkZWZhdWx0Il0ub2JqZWN0LGFsaWduOnVbImRlZmF1bHQiXS5vYmplY3QuaXNSZXF1aXJlZCx0YXJnZXQ6dVsiZGVmYXVsdCJdLm9uZU9mVHlwZShbdVsiZGVmYXVsdCJdLmZ1bmMsdVsiZGVmYXVsdCJdLm9iamVjdF0pLmRlZihmdW5jdGlvbigpe3JldHVybiB3aW5kb3d9KSxtb25pdG9yQnVmZmVyVGltZTp1WyJkZWZhdWx0Il0ubnVtYmVyLmRlZig1MCksbW9uaXRvcldpbmRvd1Jlc2l6ZTp1WyJkZWZhdWx0Il0uYm9vbC5kZWYoITEpLGRpc2FibGVkOnVbImRlZmF1bHQiXS5ib29sLmRlZighMSl9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hbGlnbmVkPSExLHt9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QucHJldlByb3BzPSgwLG9bImRlZmF1bHQiXSkoe30sdC4kcHJvcHMpO3ZhciBlPXQuJHByb3BzOyF0LmFsaWduZWQmJnQuZm9yY2VBbGlnbigpLCFlLmRpc2FibGVkJiZlLm1vbml0b3JXaW5kb3dSZXNpemUmJnQuc3RhcnRNb25pdG9yV2luZG93UmVzaXplKCl9KX0sdXBkYXRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXt2YXIgZT10LnByZXZQcm9wcyxuPXQuJHByb3BzLHI9ITE7aWYoIW4uZGlzYWJsZWQpe3ZhciBpPXQuJGVsLGE9aT9pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOm51bGw7aWYoZS5kaXNhYmxlZClyPSEwO2Vsc2V7dmFyIHM9eShlLnRhcmdldCksdT15KG4udGFyZ2V0KSxjPWIoZS50YXJnZXQpLGY9YihuLnRhcmdldCk7KDAsZC5pc1dpbmRvdykocykmJigwLGQuaXNXaW5kb3cpKHUpP3I9ITE6KHMhPT11fHxzJiYhdSYmZnx8YyYmZiYmdXx8ZiYmISgwLGQuaXNTYW1lUG9pbnQpKGMsZikpJiYocj0hMCk7dmFyIGw9dC5zb3VyY2VSZWN0fHx7fTtyfHwhaXx8bC53aWR0aD09PWEud2lkdGgmJmwuaGVpZ2h0PT09YS5oZWlnaHR8fChyPSEwKX10LnNvdXJjZVJlY3Q9YX1yJiZ0LmZvcmNlQWxpZ24oKSxuLm1vbml0b3JXaW5kb3dSZXNpemUmJiFuLmRpc2FibGVkP3Quc3RhcnRNb25pdG9yV2luZG93UmVzaXplKCk6dC5zdG9wTW9uaXRvcldpbmRvd1Jlc2l6ZSgpLHQucHJldlByb3BzPSgwLG9bImRlZmF1bHQiXSkoe30sdC4kcHJvcHMse2FsaWduOigwLHZbImRlZmF1bHQiXSkodC4kcHJvcHMuYWxpZ24pfSl9KX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuc3RvcE1vbml0b3JXaW5kb3dSZXNpemUoKX0sbWV0aG9kczp7c3RhcnRNb25pdG9yV2luZG93UmVzaXplOmZ1bmN0aW9uKCl7dGhpcy5yZXNpemVIYW5kbGVyfHwodGhpcy5idWZmZXJNb25pdG9yPSgwLGQuYnVmZmVyKSh0aGlzLmZvcmNlQWxpZ24sdGhpcy4kcHJvcHMubW9uaXRvckJ1ZmZlclRpbWUpLHRoaXMucmVzaXplSGFuZGxlcj0oMCxsWyJkZWZhdWx0Il0pKHdpbmRvdywicmVzaXplIix0aGlzLmJ1ZmZlck1vbml0b3IpKX0sc3RvcE1vbml0b3JXaW5kb3dSZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnJlc2l6ZUhhbmRsZXImJih0aGlzLmJ1ZmZlck1vbml0b3IuY2xlYXIoKSx0aGlzLnJlc2l6ZUhhbmRsZXIucmVtb3ZlKCksdGhpcy5yZXNpemVIYW5kbGVyPW51bGwpfSxmb3JjZUFsaWduOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kcHJvcHMsZT10LmRpc2FibGVkLG49dC50YXJnZXQscj10LmFsaWduO2lmKCFlJiZuKXt2YXIgbz10aGlzLiRlbCxpPXZvaWQgMCxhPXkobikscz1iKG4pO2E/aT0oMCxjLmFsaWduRWxlbWVudCkobyxhLHIpOnMmJihpPSgwLGMuYWxpZ25Qb2ludCkobyxzLHIpKSx0aGlzLmFsaWduZWQ9ITAsdGhpcy4kbGlzdGVuZXJzLmFsaWduJiZ0aGlzLiRsaXN0ZW5lcnMuYWxpZ24obyxpKX19fSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRwcm9wcy5jaGlsZHJlblByb3BzLGU9dGhpcy4kc2xvdHNbImRlZmF1bHQiXVswXTtyZXR1cm4gdD8oMCxwLmNsb25lRWxlbWVudCkoZSx7cHJvcHM6dH0pOmV9fX0sIjhhYWUiOmZ1bmN0aW9uKHQsZSxuKXtuKCIzMmE2IiksdC5leHBvcnRzPW4oIjU4NGEiKS5PYmplY3Qua2V5c30sIjhiYmYiOmZ1bmN0aW9uKGUsbil7ZS5leHBvcnRzPXR9LCI4ZTYwIjpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPSFuKCIyOTRjIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSwiOGU4ZSI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtlLl9fZXNNb2R1bGU9ITAsZS5kZWZhdWx0PWZ1bmN0aW9uKHQsZSl7dmFyIG49e307Zm9yKHZhciByIGluIHQpZS5pbmRleE9mKHIpPj0wfHxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmKG5bcl09dFtyXSk7cmV0dXJuIG59fSwiOGVlYiI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjMyYjMiKSxvPW4oIjg3MmEiKTtmdW5jdGlvbiBpKHQsZSxuLGkpe3ZhciBhPSFuO258fChuPXt9KTt2YXIgcz0tMSx1PWUubGVuZ3RoO3doaWxlKCsrczx1KXt2YXIgYz1lW3NdLGY9aT9pKG5bY10sdFtjXSxjLG4sdCk6dm9pZCAwO3ZvaWQgMD09PWYmJihmPXRbY10pLGE/byhuLGMsZik6cihuLGMsZil9cmV0dXJuIG59dC5leHBvcnRzPWl9LCI4ZjYwIjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImExNTkiKSxvPW4oImFlYmQiKSxpPW4oIjQ1ZjIiKSxhPXt9O24oIjM1ZTgiKShhLG4oIjUxNjgiKSgiaXRlcmF0b3IiKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksdC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZT1yKGEse25leHQ6bygxLG4pfSksaSh0LGUrIiBJdGVyYXRvciIpfX0sOTAwMzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNmI0YyIpO3QuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbih0KXtyZXR1cm4iQXJyYXkiPT1yKHQpfX0sOTEzODpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oIjM1ZTgiKX0sIjkxZTkiOmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0LGUpe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gdChlKG4pKX19dC5leHBvcnRzPW59LCI5MmZhIjpmdW5jdGlvbih0LGUpe3ZhciBuPS9eKGF0dHJzfHByb3BzfG9ufG5hdGl2ZU9ufGNsYXNzfHN0eWxlfGhvb2spJC87ZnVuY3Rpb24gcih0LGUpe3JldHVybiBmdW5jdGlvbigpe3QmJnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLGUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX10LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVkdWNlKGZ1bmN0aW9uKHQsZSl7dmFyIG8saSxhLHMsdTtmb3IoYSBpbiBlKWlmKG89dFthXSxpPWVbYV0sbyYmbi50ZXN0KGEpKWlmKCJjbGFzcyI9PT1hJiYoInN0cmluZyI9PT10eXBlb2YgbyYmKHU9byx0W2FdPW89e30sb1t1XT0hMCksInN0cmluZyI9PT10eXBlb2YgaSYmKHU9aSxlW2FdPWk9e30saVt1XT0hMCkpLCJvbiI9PT1hfHwibmF0aXZlT24iPT09YXx8Imhvb2siPT09YSlmb3IocyBpbiBpKW9bc109cihvW3NdLGlbc10pO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShvKSl0W2FdPW8uY29uY2F0KGkpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShpKSl0W2FdPVtvXS5jb25jYXQoaSk7ZWxzZSBmb3IocyBpbiBpKW9bc109aVtzXTtlbHNlIHRbYV09ZVthXTtyZXR1cm4gdH0se30pfX0sOTMwNjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImMzYTEiKSxvPW4oIjlhYTkiKSxpPW4oIjM1NWQiKSxhPW4oIjI0MWUiKSxzPW4oIjMzNWMiKSx1PU9iamVjdC5hc3NpZ247dC5leHBvcnRzPSF1fHxuKCIyOTRjIikoZnVuY3Rpb24oKXt2YXIgdD17fSxlPXt9LG49U3ltYm9sKCkscj0iYWJjZGVmZ2hpamtsbW5vcHFyc3QiO3JldHVybiB0W25dPTcsci5zcGxpdCgiIikuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPXR9KSw3IT11KHt9LHQpW25dfHxPYmplY3Qua2V5cyh1KHt9LGUpKS5qb2luKCIiKSE9cn0pP2Z1bmN0aW9uKHQsZSl7dmFyIG49YSh0KSx1PWFyZ3VtZW50cy5sZW5ndGgsYz0xLGY9by5mLGw9aS5mO3doaWxlKHU+Yyl7dmFyIGQscD1zKGFyZ3VtZW50c1tjKytdKSxoPWY/cihwKS5jb25jYXQoZihwKSk6cihwKSx2PWgubGVuZ3RoLG09MDt3aGlsZSh2Pm0pbC5jYWxsKHAsZD1oW20rK10pJiYobltkXT1wW2RdKX1yZXR1cm4gbn06dX0sIjkzZWQiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI0MjQ1Iik7ZnVuY3Rpb24gbyh0KXt2YXIgZT1yKHRoaXMsdClbImRlbGV0ZSJdKHQpO3JldHVybiB0aGlzLnNpemUtPWU/MTowLGV9dC5leHBvcnRzPW99LCI5M2ZmIjpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oIjU0YTEiKSxfX2VzTW9kdWxlOiEwfX0sOTUyMDpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMzcyOSIpLG89bigiMWE4YyIpLGk9IltvYmplY3QgQXN5bmNGdW5jdGlvbl0iLGE9IltvYmplY3QgRnVuY3Rpb25dIixzPSJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSIsdT0iW29iamVjdCBQcm94eV0iO2Z1bmN0aW9uIGModCl7aWYoIW8odCkpcmV0dXJuITE7dmFyIGU9cih0KTtyZXR1cm4gZT09YXx8ZT09c3x8ZT09aXx8ZT09dX10LmV4cG9ydHM9Y30sIjk1ZDUiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI0MGMzIiksbz1uKCI1MTY4IikoIml0ZXJhdG9yIiksaT1uKCI0ODFiIik7dC5leHBvcnRzPW4oIjU4NGEiKS5pc0l0ZXJhYmxlPWZ1bmN0aW9uKHQpe3ZhciBlPU9iamVjdCh0KTtyZXR1cm4gdm9pZCAwIT09ZVtvXXx8IkBAaXRlcmF0b3IiaW4gZXx8aS5oYXNPd25Qcm9wZXJ0eShyKGUpKX19LDk2Mzg6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7cmV0dXJuIHQ9PT1lfHx0IT09dCYmZSE9PWV9dC5leHBvcnRzPW59LDk3Nzg6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZVsiZGVmYXVsdCJdPWE7dmFyIHI9bigiMmM4MCIpLG89aShyKTtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBhKHQsZSxuLHIpe3JldHVybigwLG9bImRlZmF1bHQiXSkodCxlLG4scil9fSw5OTM0OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI2ZmNkIiksbz1uKCI0MWMzIiksaT1uKCIzMGM5Iik7ZnVuY3Rpb24gYSh0KXtyZXR1cm4gaSh0KT9yKHQsITApOm8odCl9dC5leHBvcnRzPWF9LCI5OWQzIjpmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKHQpe3ZhciByPW4oIjU4NWEiKSxvPWUmJiFlLm5vZGVUeXBlJiZlLGk9byYmIm9iamVjdCI9PXR5cGVvZiB0JiZ0JiYhdC5ub2RlVHlwZSYmdCxhPWkmJmkuZXhwb3J0cz09PW8scz1hJiZyLnByb2Nlc3MsdT1mdW5jdGlvbigpe3RyeXt2YXIgdD1pJiZpLnJlcXVpcmUmJmkucmVxdWlyZSgidXRpbCIpLnR5cGVzO3JldHVybiB0fHxzJiZzLmJpbmRpbmcmJnMuYmluZGluZygidXRpbCIpfWNhdGNoKGUpe319KCk7dC5leHBvcnRzPXV9KS5jYWxsKHRoaXMsbigiNjJlNCIpKHQpKX0sIjlhYTkiOmZ1bmN0aW9uKHQsZSl7ZS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LCI5YjU3IjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2UuX19lc01vZHVsZT0hMDt2YXIgcj1uKCJhZGY1Iiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWUuZGVmYXVsdD1mdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQpKXtmb3IodmFyIGU9MCxuPUFycmF5KHQubGVuZ3RoKTtlPHQubGVuZ3RoO2UrKyluW2VdPXRbZV07cmV0dXJuIG59cmV0dXJuKDAsby5kZWZhdWx0KSh0KX19LCI5ZTY5IjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMmIzZSIpLG89ci5TeW1ib2w7dC5leHBvcnRzPW99LGEwMjk6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjA4N2QiKSxvPW4oIjJkY2IiKSxpPW4oIjMyZjQiKSxhPW4oImQzMjciKSxzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsdT1zP2Z1bmN0aW9uKHQpe3ZhciBlPVtdO3doaWxlKHQpcihlLGkodCkpLHQ9byh0KTtyZXR1cm4gZX06YTt0LmV4cG9ydHM9dX0sYTE1OTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZTRhZSIpLG89bigiN2U5MCIpLGk9bigiMTY5MSIpLGE9bigiNTU1OSIpKCJJRV9QUk9UTyIpLHM9ZnVuY3Rpb24oKXt9LHU9InByb3RvdHlwZSIsYz1mdW5jdGlvbigpe3ZhciB0LGU9bigiMWVjOSIpKCJpZnJhbWUiKSxyPWkubGVuZ3RoLG89IjwiLGE9Ij4iO2Uuc3R5bGUuZGlzcGxheT0ibm9uZSIsbigiMzJmYyIpLmFwcGVuZENoaWxkKGUpLGUuc3JjPSJqYXZhc2NyaXB0OiIsdD1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsdC5vcGVuKCksdC53cml0ZShvKyJzY3JpcHQiK2ErImRvY3VtZW50LkY9T2JqZWN0IitvKyIvc2NyaXB0IithKSx0LmNsb3NlKCksYz10LkY7d2hpbGUoci0tKWRlbGV0ZSBjW3VdW2lbcl1dO3JldHVybiBjKCl9O3QuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbih0LGUpe3ZhciBuO3JldHVybiBudWxsIT09dD8oc1t1XT1yKHQpLG49bmV3IHMsc1t1XT1udWxsLG5bYV09dCk6bj1jKCksdm9pZCAwPT09ZT9uOm8obixlKX19LGEyZGI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjllNjkiKSxvPXI/ci5wcm90b3R5cGU6dm9pZCAwLGk9bz9vLnZhbHVlT2Y6dm9pZCAwO2Z1bmN0aW9uIGEodCl7cmV0dXJuIGk/T2JqZWN0KGkuY2FsbCh0KSk6e319dC5leHBvcnRzPWF9LGEzYzM6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjYzYjYiKTtyKHIuUytyLkYsIk9iamVjdCIse2Fzc2lnbjpuKCI5MzA2Iil9KX0sYTRiYjpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oIjhhYWUiKX0sYTUyNDpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNDI0NSIpO2Z1bmN0aW9uIG8odCl7cmV0dXJuIHIodGhpcyx0KS5oYXModCl9dC5leHBvcnRzPW99LGE3ZTI6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigiZTgzNCIpLG89aShyKTtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX12YXIgYT17fTtlWyJkZWZhdWx0Il09ZnVuY3Rpb24odCxlKXt0fHxhW2VdfHwoKDAsb1siZGVmYXVsdCJdKSghMSxlKSxhW2VdPSEwKX19LGE5OTQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjdkMWYiKSxvPW4oIjMyZjQiKSxpPW4oImVjNjkiKTtmdW5jdGlvbiBhKHQpe3JldHVybiByKHQsaSxvKX10LmV4cG9ydHM9YX0sYWM2OTpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXt2YXIgbj1lO3doaWxlKG4pe2lmKG49PT10KXJldHVybiEwO249bi5wYXJlbnROb2RlfXJldHVybiExfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlWyJkZWZhdWx0Il09cn0sYWRmNTpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oImQyZDUiKSxfX2VzTW9kdWxlOiEwfX0sYWViZDpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybntlbnVtZXJhYmxlOiEoMSZ0KSxjb25maWd1cmFibGU6ISgyJnQpLHdyaXRhYmxlOiEoNCZ0KSx2YWx1ZTplfX19LGIwNDc6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gdChlKX19dC5leHBvcnRzPW59LGIwZGM6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImU0YWUiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4sbyl7dHJ5e3JldHVybiBvP2UocihuKVswXSxuWzFdKTplKG4pfWNhdGNoKGEpe3ZhciBpPXRbInJldHVybiJdO3Rocm93IHZvaWQgMCE9PWkmJnIoaS5jYWxsKHQpKSxhfX19LGIyMTg6ZnVuY3Rpb24odCxlKXt2YXIgbj05MDA3MTk5MjU0NzQwOTkxO2Z1bmN0aW9uIHIodCl7cmV0dXJuIm51bWJlciI9PXR5cGVvZiB0JiZ0Pi0xJiZ0JTE9PTAmJnQ8PW59dC5leHBvcnRzPXJ9LGIyNGY6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtlLl9fZXNNb2R1bGU9ITA7dmFyIHI9bigiOTNmZiIpLG89cyhyKSxpPW4oIjE3MjciKSxhPXMoaSk7ZnVuY3Rpb24gcyh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZS5kZWZhdWx0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuPVtdLHI9ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBzLHU9KDAsYS5kZWZhdWx0KSh0KTshKHI9KHM9dS5uZXh0KCkpLmRvbmUpO3I9ITApaWYobi5wdXNoKHMudmFsdWUpLGUmJm4ubGVuZ3RoPT09ZSlicmVha31jYXRjaChjKXtvPSEwLGk9Y31maW5hbGx5e3RyeXshciYmdVsicmV0dXJuIl0mJnVbInJldHVybiJdKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiBufXJldHVybiBmdW5jdGlvbihlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGU7aWYoKDAsby5kZWZhdWx0KShPYmplY3QoZSkpKXJldHVybiB0KGUsbik7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpfX0oKX0sYjQ0NzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiM2EzOCIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/byhyKHQpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSxiNGMwOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJjYjVhIik7ZnVuY3Rpb24gbyh0KXt2YXIgZT10aGlzLl9fZGF0YV9fLG49cihlLHQpO3JldHVybiBuPDA/dm9pZCAwOmVbbl1bMV19dC5leHBvcnRzPW99LGI1YTc6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjBiMDciKSxvPW4oIjJiM2UiKSxpPXIobywiRGF0YVZpZXciKTt0LmV4cG9ydHM9aX0sYjhlMzpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0hMH0sYmI3ODpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLndhcm49ZS52YWxpZGF0ZVR5cGU9ZS50b1R5cGU9ZS53aXRoUmVxdWlyZWQ9ZS53aXRoRGVmYXVsdD1lLmlzRnVuY3Rpb249ZS5pc0FycmF5PWUuaXNJbnRlZ2VyPWUuaGFzPWUubm9vcD1lLmdldE5hdGl2ZVR5cGU9ZS5nZXRUeXBlPWUuaGFzT3duPXZvaWQgMDt2YXIgcj1uKCI2MGVkIiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fXZhciBhPU9iamVjdC5wcm90b3R5cGUscz1hLnRvU3RyaW5nLHU9ZS5oYXNPd249YS5oYXNPd25Qcm9wZXJ0eSxjPS9eXHMqZnVuY3Rpb24gKFx3KykvLGY9ZS5nZXRUeXBlPWZ1bmN0aW9uKHQpe3ZhciBlPW51bGwhPT10JiZ2b2lkIDAhPT10P3QudHlwZT90LnR5cGU6dDpudWxsLG49ZSYmZS50b1N0cmluZygpLm1hdGNoKGMpO3JldHVybiBuJiZuWzFdfSxsPWUuZ2V0TmF0aXZlVHlwZT1mdW5jdGlvbih0KXtpZihudWxsPT09dHx8dm9pZCAwPT09dClyZXR1cm4gbnVsbDt2YXIgZT10LmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkubWF0Y2goYyk7cmV0dXJuIGUmJmVbMV19LGQ9ZS5ub29wPWZ1bmN0aW9uKCl7fSxwPShlLmhhcz1mdW5jdGlvbih0LGUpe3JldHVybiB1LmNhbGwodCxlKX0sZS5pc0ludGVnZXI9TnVtYmVyLmlzSW50ZWdlcnx8ZnVuY3Rpb24odCl7cmV0dXJuIm51bWJlciI9PT10eXBlb2YgdCYmaXNGaW5pdGUodCkmJk1hdGguZmxvb3IodCk9PT10fSxlLmlzQXJyYXk9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24odCl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PXMuY2FsbCh0KX0pLGg9ZS5pc0Z1bmN0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiJbb2JqZWN0IEZ1bmN0aW9uXSI9PT1zLmNhbGwodCl9LHY9ZS53aXRoRGVmYXVsdD1mdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiZGVmIix7dmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJnZvaWQgMD09PXRoaXNbImRlZmF1bHQiXT8odGhpc1siZGVmYXVsdCJdPXZvaWQgMCx0aGlzKTpoKHQpfHx5KHRoaXMsdCk/KHRoaXNbImRlZmF1bHQiXT1wKHQpfHwoMCxvWyJkZWZhdWx0Il0pKHQpP2Z1bmN0aW9uKCl7cmV0dXJuIHR9OnQsdGhpcyk6KGIodGhpcy5fdnVlVHlwZXNfbmFtZSsnIC0gaW52YWxpZCBkZWZhdWx0IHZhbHVlOiAiJyt0KyciJyx0KSx0aGlzKX0sZW51bWVyYWJsZTohMSx3cml0YWJsZTohMX0pfSxtPWUud2l0aFJlcXVpcmVkPWZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJpc1JlcXVpcmVkIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWlyZWQ9ITAsdGhpc30sZW51bWVyYWJsZTohMX0pfSx5PShlLnRvVHlwZT1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX3Z1ZVR5cGVzX25hbWUiLHtlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiExLHZhbHVlOnR9KSxtKGUpLHYoZSksaChlLnZhbGlkYXRvcikmJihlLnZhbGlkYXRvcj1lLnZhbGlkYXRvci5iaW5kKGUpKSxlfSxlLnZhbGlkYXRlVHlwZT1mdW5jdGlvbiB0KGUsbil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxpPWUsYT0hMCxzPXZvaWQgMDsoMCxvWyJkZWZhdWx0Il0pKGUpfHwoaT17dHlwZTplfSk7dmFyIGM9aS5fdnVlVHlwZXNfbmFtZT9pLl92dWVUeXBlc19uYW1lKyIgLSAiOiIiO3JldHVybiB1LmNhbGwoaSwidHlwZSIpJiZudWxsIT09aS50eXBlJiYocChpLnR5cGUpPyhhPWkudHlwZS5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiB0KGUsbiwhMCl9KSxzPWkudHlwZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGYodCl9KS5qb2luKCIgb3IgIikpOihzPWYoaSksYT0iQXJyYXkiPT09cz9wKG4pOiJPYmplY3QiPT09cz8oMCxvWyJkZWZhdWx0Il0pKG4pOiJTdHJpbmciPT09c3x8Ik51bWJlciI9PT1zfHwiQm9vbGVhbiI9PT1zfHwiRnVuY3Rpb24iPT09cz9sKG4pPT09czpuIGluc3RhbmNlb2YgaS50eXBlKSksYT91LmNhbGwoaSwidmFsaWRhdG9yIikmJmgoaS52YWxpZGF0b3IpPyhhPWkudmFsaWRhdG9yKG4pLGF8fCExIT09cnx8YihjKyJjdXN0b20gdmFsaWRhdGlvbiBmYWlsZWQiKSxhKTphOighMT09PXImJmIoYysndmFsdWUgIicrbisnIiBzaG91bGQgYmUgb2YgdHlwZSAiJytzKyciJyksITEpfSksYj1kO2Uud2Fybj1ifSxiYmMwOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI2MDQ0Iiksbz0iX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyIsaT1PYmplY3QucHJvdG90eXBlLGE9aS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBzKHQpe3ZhciBlPXRoaXMuX19kYXRhX187aWYocil7dmFyIG49ZVt0XTtyZXR1cm4gbj09PW8/dm9pZCAwOm59cmV0dXJuIGEuY2FsbChlLHQpP2VbdF06dm9pZCAwfXQuZXhwb3J0cz1zfSxiZjBiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIzNTVkIiksbz1uKCJhZWJkIiksaT1uKCIzNmMzIiksYT1uKCIxYmMzIikscz1uKCIwN2UzIiksdT1uKCI3OTRiIiksYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2UuZj1uKCI4ZTYwIik/YzpmdW5jdGlvbih0LGUpe2lmKHQ9aSh0KSxlPWEoZSwhMCksdSl0cnl7cmV0dXJuIGModCxlKX1jYXRjaChuKXt9aWYocyh0LGUpKXJldHVybiBvKCFyLmYuY2FsbCh0LGUpLHRbZV0pfX0sYmY5MDpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMzZjMyIpLG89bigiYmYwYiIpLmY7bigiY2U3ZSIpKCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG8ocih0KSxlKX19KX0sYzA5ODpmdW5jdGlvbih0LGUpe3ZhciBuPTkwMDcxOTkyNTQ3NDA5OTEscj0vXig/OjB8WzEtOV1cZCopJC87ZnVuY3Rpb24gbyh0LGUpe3ZhciBvPXR5cGVvZiB0O3JldHVybiBlPW51bGw9PWU/bjplLCEhZSYmKCJudW1iZXIiPT1vfHwic3ltYm9sIiE9byYmci50ZXN0KHQpKSYmdD4tMSYmdCUxPT0wJiZ0PGV9dC5leHBvcnRzPW99LGMyMDc6ZnVuY3Rpb24odCxlKXt9LGMyNmU6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZVsiZGVmYXVsdCJdPW87dmFyIHI9dm9pZCAwO2Z1bmN0aW9uIG8odCl7aWYodHx8dm9pZCAwPT09cil7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7ZS5zdHlsZS53aWR0aD0iMTAwJSIsZS5zdHlsZS5oZWlnaHQ9IjIwMHB4Ijt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSxvPW4uc3R5bGU7by5wb3NpdGlvbj0iYWJzb2x1dGUiLG8udG9wPTAsby5sZWZ0PTAsby5wb2ludGVyRXZlbnRzPSJub25lIixvLnZpc2liaWxpdHk9ImhpZGRlbiIsby53aWR0aD0iMjAwcHgiLG8uaGVpZ2h0PSIxNTBweCIsby5vdmVyZmxvdz0iaGlkZGVuIixuLmFwcGVuZENoaWxkKGUpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobik7dmFyIGk9ZS5vZmZzZXRXaWR0aDtuLnN0eWxlLm92ZXJmbG93PSJzY3JvbGwiO3ZhciBhPWUub2Zmc2V0V2lkdGg7aT09PWEmJihhPW4uY2xpZW50V2lkdGgpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobikscj1pLWF9cmV0dXJuIHJ9fSxjMmI2OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJmOGFmIiksbz1uKCI1ZDg5IiksaT1uKCI2ZjZjIiksYT1uKCJhMmRiIikscz1uKCJjOGZlIiksdT0iW29iamVjdCBCb29sZWFuXSIsYz0iW29iamVjdCBEYXRlXSIsZj0iW29iamVjdCBNYXBdIixsPSJbb2JqZWN0IE51bWJlcl0iLGQ9IltvYmplY3QgUmVnRXhwXSIscD0iW29iamVjdCBTZXRdIixoPSJbb2JqZWN0IFN0cmluZ10iLHY9IltvYmplY3QgU3ltYm9sXSIsbT0iW29iamVjdCBBcnJheUJ1ZmZlcl0iLHk9IltvYmplY3QgRGF0YVZpZXddIixiPSJbb2JqZWN0IEZsb2F0MzJBcnJheV0iLGc9IltvYmplY3QgRmxvYXQ2NEFycmF5XSIsdz0iW29iamVjdCBJbnQ4QXJyYXldIix4PSJbb2JqZWN0IEludDE2QXJyYXldIixPPSJbb2JqZWN0IEludDMyQXJyYXldIixUPSJbb2JqZWN0IFVpbnQ4QXJyYXldIixqPSJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSIsXz0iW29iamVjdCBVaW50MTZBcnJheV0iLFA9IltvYmplY3QgVWludDMyQXJyYXldIjtmdW5jdGlvbiBDKHQsZSxuKXt2YXIgQz10LmNvbnN0cnVjdG9yO3N3aXRjaChlKXtjYXNlIG06cmV0dXJuIHIodCk7Y2FzZSB1OmNhc2UgYzpyZXR1cm4gbmV3IEMoK3QpO2Nhc2UgeTpyZXR1cm4gbyh0LG4pO2Nhc2UgYjpjYXNlIGc6Y2FzZSB3OmNhc2UgeDpjYXNlIE86Y2FzZSBUOmNhc2UgajpjYXNlIF86Y2FzZSBQOnJldHVybiBzKHQsbik7Y2FzZSBmOnJldHVybiBuZXcgQztjYXNlIGw6Y2FzZSBoOnJldHVybiBuZXcgQyh0KTtjYXNlIGQ6cmV0dXJuIGkodCk7Y2FzZSBwOnJldHVybiBuZXcgQztjYXNlIHY6cmV0dXJuIGEodCl9fXQuZXhwb3J0cz1DfSxjMzY3OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiODQzNiIpLG89bigiNTBlZCIpLGk9bigiNDgxYiIpLGE9bigiMzZjMyIpO3QuZXhwb3J0cz1uKCIzMGYxIikoQXJyYXksIkFycmF5IixmdW5jdGlvbih0LGUpe3RoaXMuX3Q9YSh0KSx0aGlzLl9pPTAsdGhpcy5faz1lfSxmdW5jdGlvbigpe3ZhciB0PXRoaXMuX3QsZT10aGlzLl9rLG49dGhpcy5faSsrO3JldHVybiF0fHxuPj10Lmxlbmd0aD8odGhpcy5fdD12b2lkIDAsbygxKSk6bygwLCJrZXlzIj09ZT9uOiJ2YWx1ZXMiPT1lP3Rbbl06W24sdFtuXV0pfSwidmFsdWVzIiksaS5Bcmd1bWVudHM9aS5BcnJheSxyKCJrZXlzIikscigidmFsdWVzIikscigiZW50cmllcyIpfSxjM2ExOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJlNmYzIiksbz1uKCIxNjkxIik7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbih0KXtyZXR1cm4gcih0LG8pfX0sYzNmYzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNDJhMiIpLG89bigiMTMxMCIpLGk9IltvYmplY3QgU2V0XSI7ZnVuY3Rpb24gYSh0KXtyZXR1cm4gbyh0KSYmcih0KT09aX10LmV4cG9ydHM9YX0sYzg2OTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiMGIwNyIpLG89bigiMmIzZSIpLGk9cihvLCJTZXQiKTt0LmV4cG9ydHM9aX0sYzg3YzpmdW5jdGlvbih0LGUpe3ZhciBuPU9iamVjdC5wcm90b3R5cGUscj1uLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIG8odCl7dmFyIGU9dC5sZW5ndGgsbj1uZXcgdC5jb25zdHJ1Y3RvcihlKTtyZXR1cm4gZSYmInN0cmluZyI9PXR5cGVvZiB0WzBdJiZyLmNhbGwodCwiaW5kZXgiKSYmKG4uaW5kZXg9dC5pbmRleCxuLmlucHV0PXQuaW5wdXQpLG59dC5leHBvcnRzPW99LGM4YmE6ZnVuY3Rpb24odCxlKXt2YXIgbjtuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e249bnx8bmV3IEZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCl9Y2F0Y2gocil7Im9iamVjdCI9PT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfXQuZXhwb3J0cz1ufSxjOGZlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJmOGFmIik7ZnVuY3Rpb24gbyh0LGUpe3ZhciBuPWU/cih0LmJ1ZmZlcik6dC5idWZmZXI7cmV0dXJuIG5ldyB0LmNvbnN0cnVjdG9yKG4sdC5ieXRlT2Zmc2V0LHQubGVuZ3RoKX10LmV4cG9ydHM9b30sY2I1YTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiOTYzOCIpO2Z1bmN0aW9uIG8odCxlKXt2YXIgbj10Lmxlbmd0aDt3aGlsZShuLS0paWYocih0W25dWzBdLGUpKXJldHVybiBuO3JldHVybi0xfXQuZXhwb3J0cz1vfSxjYzQ1OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIxYTJkIiksbz1uKCJiMDQ3IiksaT1uKCI5OWQzIiksYT1pJiZpLmlzTWFwLHM9YT9vKGEpOnI7dC5leHBvcnRzPXN9LGNjYjk6ZnVuY3Rpb24odCxlLG4pe2UuZj1uKCI1MTY4Iil9LGNlN2U6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjYzYjYiKSxvPW4oIjU4NGEiKSxpPW4oIjI5NGMiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbj0oby5PYmplY3R8fHt9KVt0XXx8T2JqZWN0W3RdLGE9e307YVt0XT1lKG4pLHIoci5TK3IuRippKGZ1bmN0aW9uKCl7bigxKX0pLCJPYmplY3QiLGEpfX0sY2VjZDpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKHQuaW5kZXhPZilyZXR1cm4gdC5pbmRleE9mKGUpO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7KytuKWlmKHRbbl09PT1lKXJldHVybiBuO3JldHVybi0xfX0sZDAyYzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNWUyZSIpLG89bigiNzliYyIpLGk9bigiN2I4MyIpLGE9MjAwO2Z1bmN0aW9uIHModCxlKXt2YXIgbj10aGlzLl9fZGF0YV9fO2lmKG4gaW5zdGFuY2VvZiByKXt2YXIgcz1uLl9fZGF0YV9fO2lmKCFvfHxzLmxlbmd0aDxhLTEpcmV0dXJuIHMucHVzaChbdCxlXSksdGhpcy5zaXplPSsrbi5zaXplLHRoaXM7bj10aGlzLl9fZGF0YV9fPW5ldyBpKHMpfXJldHVybiBuLnNldCh0LGUpLHRoaXMuc2l6ZT1uLnNpemUsdGhpc310LmV4cG9ydHM9c30sZDI3YzpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKCIxMDk4Iiksbz1nKHIpLGk9bigiNDFiMiIpLGE9ZyhpKSxzPW4oIjdiNDQiKSx1PWcocyksYz1uKCIxMThmIiksZj1nKGMpLGw9bigiODIwNyIpLGQ9ZyhsKSxwPW4oImVkNWMiKSxoPWcocCksdj1uKCI0MDFiIiksbT1nKHYpLHk9bigiNDhiYiIpLGI9Zyh5KTtmdW5jdGlvbiBnKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lWyJkZWZhdWx0Il09e21peGluczpbYlsiZGVmYXVsdCJdXSxwcm9wczp7dmlzaWJsZTp1WyJkZWZhdWx0Il0uYm9vbCxnZXRDbGFzc05hbWVGcm9tQWxpZ246dVsiZGVmYXVsdCJdLmZ1bmMsZ2V0Um9vdERvbU5vZGU6dVsiZGVmYXVsdCJdLmZ1bmMsYWxpZ246dVsiZGVmYXVsdCJdLmFueSxkZXN0cm95UG9wdXBPbkhpZGU6dVsiZGVmYXVsdCJdLmJvb2wscHJlZml4Q2xzOnVbImRlZmF1bHQiXS5zdHJpbmcsZ2V0Q29udGFpbmVyOnVbImRlZmF1bHQiXS5mdW5jLHRyYW5zaXRpb25OYW1lOnVbImRlZmF1bHQiXS5zdHJpbmcsYW5pbWF0aW9uOnVbImRlZmF1bHQiXS5hbnksbWFza0FuaW1hdGlvbjp1WyJkZWZhdWx0Il0uc3RyaW5nLG1hc2tUcmFuc2l0aW9uTmFtZTp1WyJkZWZhdWx0Il0uc3RyaW5nLG1hc2s6dVsiZGVmYXVsdCJdLmJvb2wsekluZGV4OnVbImRlZmF1bHQiXS5udW1iZXIscG9wdXBDbGFzc05hbWU6dVsiZGVmYXVsdCJdLmFueSxwb3B1cFN0eWxlOnVbImRlZmF1bHQiXS5vYmplY3QuZGVmKHt9KSxzdHJldGNoOnVbImRlZmF1bHQiXS5zdHJpbmcscG9pbnQ6dVsiZGVmYXVsdCJdLnNoYXBlKHtwYWdlWDp1WyJkZWZhdWx0Il0ubnVtYmVyLHBhZ2VZOnVbImRlZmF1bHQiXS5udW1iZXJ9KX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntzdHJldGNoQ2hlY2tlZDohMSx0YXJnZXRXaWR0aDp2b2lkIDAsdGFyZ2V0SGVpZ2h0OnZvaWQgMH19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dC5yb290Tm9kZT10LmdldFBvcHVwRG9tTm9kZSgpLHQuc2V0U3RyZXRjaFNpemUoKX0pfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3Quc2V0U3RyZXRjaFNpemUoKX0pfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy4kZWwucmVtb3ZlKCl9LG1ldGhvZHM6e29uQWxpZ246ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLiRwcm9wcyxyPW4uZ2V0Q2xhc3NOYW1lRnJvbUFsaWduKGUpO3RoaXMuY3VycmVudEFsaWduQ2xhc3NOYW1lIT09ciYmKHRoaXMuY3VycmVudEFsaWduQ2xhc3NOYW1lPXIsdC5jbGFzc05hbWU9dGhpcy5nZXRDbGFzc05hbWUocikpLHRoaXMuJGxpc3RlbmVycy5hbGlnbiYmdGhpcy4kbGlzdGVuZXJzLmFsaWduKHQsZSl9LHNldFN0cmV0Y2hTaXplOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kcHJvcHMsZT10LnN0cmV0Y2gsbj10LmdldFJvb3REb21Ob2RlLHI9dC52aXNpYmxlLG89dGhpcy4kZGF0YSxpPW8uc3RyZXRjaENoZWNrZWQsYT1vLnRhcmdldEhlaWdodCxzPW8udGFyZ2V0V2lkdGg7aWYoZSYmcil7dmFyIHU9bigpO2lmKHUpe3ZhciBjPXUub2Zmc2V0SGVpZ2h0LGY9dS5vZmZzZXRXaWR0aDthPT09YyYmcz09PWYmJml8fHRoaXMuc2V0U3RhdGUoe3N0cmV0Y2hDaGVja2VkOiEwLHRhcmdldEhlaWdodDpjLHRhcmdldFdpZHRoOmZ9KX19ZWxzZSBpJiZ0aGlzLnNldFN0YXRlKHtzdHJldGNoQ2hlY2tlZDohMX0pfSxnZXRQb3B1cERvbU5vZGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kcmVmcy5wb3B1cEluc3RhbmNlP3RoaXMuJHJlZnMucG9wdXBJbnN0YW5jZS4kZWw6bnVsbH0sZ2V0VGFyZ2V0RWxlbWVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRwcm9wcy5nZXRSb290RG9tTm9kZSgpfSxnZXRBbGlnblRhcmdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLnBvaW50O3JldHVybiB0fHx0aGlzLmdldFRhcmdldEVsZW1lbnR9LGdldE1hc2tUcmFuc2l0aW9uTmFtZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dC5tYXNrVHJhbnNpdGlvbk5hbWUsbj10Lm1hc2tBbmltYXRpb247cmV0dXJuIWUmJm4mJihlPXQucHJlZml4Q2xzKyItIituKSxlfSxnZXRUcmFuc2l0aW9uTmFtZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHByb3BzLGU9dC50cmFuc2l0aW9uTmFtZSxuPXQuYW5pbWF0aW9uO3JldHVybiBlfHwoInN0cmluZyI9PT10eXBlb2Ygbj9lPSIiK246biYmbi5wcm9wcyYmbi5wcm9wcy5uYW1lJiYoZT1uLnByb3BzLm5hbWUpKSxlfSxnZXRDbGFzc05hbWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuJHByb3BzLnByZWZpeENscysiICIrdGhpcy4kcHJvcHMucG9wdXBDbGFzc05hbWUrIiAiK3R9LGdldFBvcHVwRWxlbWVudDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLiRjcmVhdGVFbGVtZW50LG49dGhpcy4kcHJvcHMscj10aGlzLiRzbG90cyxpPXRoaXMuJGxpc3RlbmVycyxzPXRoaXMuZ2V0VHJhbnNpdGlvbk5hbWUsdT10aGlzLiRkYXRhLGM9dS5zdHJldGNoQ2hlY2tlZCxsPXUudGFyZ2V0SGVpZ2h0LHA9dS50YXJnZXRXaWR0aCxoPW4uYWxpZ24sdj1uLnZpc2libGUseT1uLnByZWZpeENscyxiPW4uYW5pbWF0aW9uLGc9bi5wb3B1cFN0eWxlLHc9bi5nZXRDbGFzc05hbWVGcm9tQWxpZ24seD1uLmRlc3Ryb3lQb3B1cE9uSGlkZSxPPW4uc3RyZXRjaCxUPXRoaXMuZ2V0Q2xhc3NOYW1lKHRoaXMuY3VycmVudEFsaWduQ2xhc3NOYW1lfHx3KGgpKTt2fHwodGhpcy5jdXJyZW50QWxpZ25DbGFzc05hbWU9bnVsbCk7dmFyIGo9e307TyYmKC0xIT09Ty5pbmRleE9mKCJoZWlnaHQiKT9qLmhlaWdodD0ibnVtYmVyIj09PXR5cGVvZiBsP2wrInB4IjpsOi0xIT09Ty5pbmRleE9mKCJtaW5IZWlnaHQiKSYmKGoubWluSGVpZ2h0PSJudW1iZXIiPT09dHlwZW9mIGw/bCsicHgiOmwpLC0xIT09Ty5pbmRleE9mKCJ3aWR0aCIpP2oud2lkdGg9Im51bWJlciI9PT10eXBlb2YgcD9wKyJweCI6cDotMSE9PU8uaW5kZXhPZigibWluV2lkdGgiKSYmKGoubWluV2lkdGg9Im51bWJlciI9PT10eXBlb2YgcD9wKyJweCI6cCksY3x8c2V0VGltZW91dChmdW5jdGlvbigpe3QuJHJlZnMuYWxpZ25JbnN0YW5jZSYmdC4kcmVmcy5hbGlnbkluc3RhbmNlLmZvcmNlQWxpZ24oKX0sMCkpO3ZhciBfPXtwcm9wczp7cHJlZml4Q2xzOnksdmlzaWJsZTp2fSxjbGFzczpULG9uOmkscmVmOiJwb3B1cEluc3RhbmNlIixzdHlsZTooMCxhWyJkZWZhdWx0Il0pKHt9LGosZyx0aGlzLmdldFpJbmRleFN0eWxlKCkpfSxQPXtwcm9wczooMCxhWyJkZWZhdWx0Il0pKHthcHBlYXI6ITAsY3NzOiExfSl9LEM9cygpLEU9ISFDLFM9e2JlZm9yZUVudGVyOmZ1bmN0aW9uKCl7fSxlbnRlcjpmdW5jdGlvbihlLG4pe3QuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dC4kcmVmcy5hbGlnbkluc3RhbmNlJiZ0LiRyZWZzLmFsaWduSW5zdGFuY2UuJG5leHRUaWNrKGZ1bmN0aW9uKCl7KDAsbVsiZGVmYXVsdCJdKShlLEMrIi1lbnRlciIsbil9KX0pfSxsZWF2ZTpmdW5jdGlvbih0LGUpeygwLG1bImRlZmF1bHQiXSkodCxDKyItbGVhdmUiLGUpfX07aWYoIm9iamVjdCI9PT0oInVuZGVmaW5lZCI9PT10eXBlb2YgYj8idW5kZWZpbmVkIjooMCxvWyJkZWZhdWx0Il0pKGIpKSl7RT0hMDt2YXIgQT1iLm9uLE09dm9pZCAwPT09QT97fTpBLGs9Yi5wcm9wcywkPXZvaWQgMD09PWs/e306aztQLnByb3BzPSgwLGFbImRlZmF1bHQiXSkoe30sUC5wcm9wcywkKSxQLm9uPSgwLGFbImRlZmF1bHQiXSkoe30sUyxNKX1lbHNlIFAub249UztyZXR1cm4gRXx8KFA9e30pLGUoInRyYW5zaXRpb24iLFAseD9bdj9lKGZbImRlZmF1bHQiXSx7YXR0cnM6e3RhcmdldDp0aGlzLmdldEFsaWduVGFyZ2V0KCksbW9uaXRvcldpbmRvd1Jlc2l6ZTohMCxhbGlnbjpofSxrZXk6InBvcHVwIixyZWY6ImFsaWduSW5zdGFuY2UiLG9uOnthbGlnbjp0aGlzLm9uQWxpZ259fSxbZShkWyJkZWZhdWx0Il0sXyxbclsiZGVmYXVsdCJdXSldKTpudWxsXTpbZShmWyJkZWZhdWx0Il0se2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93Iix2YWx1ZTp2fV0sYXR0cnM6e3RhcmdldDp0aGlzLmdldEFsaWduVGFyZ2V0KCksbW9uaXRvcldpbmRvd1Jlc2l6ZTohMCxkaXNhYmxlZDohdixhbGlnbjpofSxrZXk6InBvcHVwIixyZWY6ImFsaWduSW5zdGFuY2UiLG9uOnthbGlnbjp0aGlzLm9uQWxpZ259fSxbZShkWyJkZWZhdWx0Il0sXyxbclsiZGVmYXVsdCJdXSldKV0pfSxnZXRaSW5kZXhTdHlsZTpmdW5jdGlvbigpe3ZhciB0PXt9LGU9dGhpcy4kcHJvcHM7cmV0dXJuIHZvaWQgMCE9PWUuekluZGV4JiYodC56SW5kZXg9ZS56SW5kZXgpLHR9LGdldE1hc2tFbGVtZW50OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kY3JlYXRlRWxlbWVudCxlPXRoaXMuJHByb3BzLG49bnVsbDtpZihlLm1hc2spe3ZhciByPXRoaXMuZ2V0TWFza1RyYW5zaXRpb25OYW1lKCk7bj10KGhbImRlZmF1bHQiXSx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHZhbHVlOmUudmlzaWJsZX1dLHN0eWxlOnRoaXMuZ2V0WkluZGV4U3R5bGUoKSxrZXk6Im1hc2siLGNsYXNzOmUucHJlZml4Q2xzKyItbWFzayIsYXR0cnM6e3Zpc2libGU6ZS52aXNpYmxlfX0pLHImJihuPXQoInRyYW5zaXRpb24iLHthdHRyczp7YXBwZWFyOiEwLG5hbWU6cn19LFtuXSkpfXJldHVybiBufX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy5nZXRNYXNrRWxlbWVudCxuPXRoaXMuZ2V0UG9wdXBFbGVtZW50O3JldHVybiB0KCJkaXYiLFtlKCksbigpXSl9fX0sZDJkNTpmdW5jdGlvbih0LGUsbil7bigiMTY1NCIpLG4oIjU0OWIiKSx0LmV4cG9ydHM9bigiNTg0YSIpLkFycmF5LmZyb219LGQyZjk6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigiOWI1NyIpLG89dShyKSxpPW4oIjQxYjIiKSxhPXUoaSk7ZS5jbG9uZVZOb2RlPWMsZS5jbG9uZVZOb2Rlcz1mLGUuY2xvbmVFbGVtZW50PWw7dmFyIHM9bigiNzNjOCIpO2Z1bmN0aW9uIHUodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIGModCxlKXt2YXIgbj10LmNvbXBvbmVudE9wdGlvbnMscj10LmRhdGEsbz17fTtuJiZuLmxpc3RlbmVycyYmKG89KDAsYVsiZGVmYXVsdCJdKSh7fSxuLmxpc3RlbmVycykpO3ZhciBpPXt9O3ImJnIub24mJihpPSgwLGFbImRlZmF1bHQiXSkoe30sci5vbikpO3ZhciBzPW5ldyB0LmNvbnN0cnVjdG9yKHQudGFnLHI/KDAsYVsiZGVmYXVsdCJdKSh7fSxyLHtvbjppfSk6cix0LmNoaWxkcmVuLHQudGV4dCx0LmVsbSx0LmNvbnRleHQsbj8oMCxhWyJkZWZhdWx0Il0pKHt9LG4se2xpc3RlbmVyczpvfSk6bix0LmFzeW5jRmFjdG9yeSk7cmV0dXJuIHMubnM9dC5ucyxzLmlzU3RhdGljPXQuaXNTdGF0aWMscy5rZXk9dC5rZXkscy5pc0NvbW1lbnQ9dC5pc0NvbW1lbnQscy5mbkNvbnRleHQ9dC5mbkNvbnRleHQscy5mbk9wdGlvbnM9dC5mbk9wdGlvbnMscy5mblNjb3BlSWQ9dC5mblNjb3BlSWQscy5pc0Nsb25lZD0hMCxlJiYodC5jaGlsZHJlbiYmKHMuY2hpbGRyZW49Zih0LmNoaWxkcmVuLCEwKSksbiYmbi5jaGlsZHJlbiYmKG4uY2hpbGRyZW49ZihuLmNoaWxkcmVuLCEwKSkpLHN9ZnVuY3Rpb24gZih0LGUpe2Zvcih2YXIgbj10Lmxlbmd0aCxyPW5ldyBBcnJheShuKSxvPTA7bzxuO28rKylyW29dPWModFtvXSxlKTtyZXR1cm4gcn1mdW5jdGlvbiBsKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxuPWFyZ3VtZW50c1syXSxyPXQ7aWYoQXJyYXkuaXNBcnJheSh0KSYmKHI9KDAscy5maWx0ZXJFbXB0eSkodClbMF0pLCFyKXJldHVybiBudWxsO3ZhciBpPWMocixuKSx1PWUucHJvcHMsZj12b2lkIDA9PT11P3t9OnUsbD1lLmtleSxkPWUub24scD12b2lkIDA9PT1kP3t9OmQsaD1lLmNoaWxkcmVuLHY9ZS5kaXJlY3RpdmVzLG09dm9pZCAwPT09dj9bXTp2LHk9aS5kYXRhfHx7fSxiPXt9LGc9e30sdz1lLmF0dHJzLHg9dm9pZCAwPT09dz97fTp3LE89ZS5yZWYsVD1lLmRvbVByb3BzLGo9dm9pZCAwPT09VD97fTpULF89ZS5zdHlsZSxQPXZvaWQgMD09PV8/e306XyxDPWVbImNsYXNzIl0sRT12b2lkIDA9PT1DP3t9OkMsUz1lLnNjb3BlZFNsb3RzLEE9dm9pZCAwPT09Uz97fTpTO3JldHVybiBnPSJzdHJpbmciPT09dHlwZW9mIHkuc3R5bGU/KDAscy5wYXJzZVN0eWxlVGV4dCkoeS5zdHlsZSk6KDAsYVsiZGVmYXVsdCJdKSh7fSx5LnN0eWxlLGcpLGc9InN0cmluZyI9PT10eXBlb2YgUD8oMCxhWyJkZWZhdWx0Il0pKHt9LGcsKDAscy5wYXJzZVN0eWxlVGV4dCkoZykpOigwLGFbImRlZmF1bHQiXSkoe30sZyxQKSwic3RyaW5nIj09PXR5cGVvZiB5WyJjbGFzcyJdJiYiIiE9PXlbImNsYXNzIl0udHJpbSgpP3lbImNsYXNzIl0uc3BsaXQoIiAiKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2JbdC50cmltKCldPSEwfSk6Yj0oMCxhWyJkZWZhdWx0Il0pKHt9LHlbImNsYXNzIl0sYiksInN0cmluZyI9PT10eXBlb2YgRSYmIiIhPT1FLnRyaW0oKT9FLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbih0KXtiW3QudHJpbSgpXT0hMH0pOmI9KDAsYVsiZGVmYXVsdCJdKSh7fSxiLEUpLGkuZGF0YT0oMCxhWyJkZWZhdWx0Il0pKHt9LHkse3N0eWxlOmcsYXR0cnM6KDAsYVsiZGVmYXVsdCJdKSh7fSx5LmF0dHJzLHgpLGNsYXNzOmIsZG9tUHJvcHM6KDAsYVsiZGVmYXVsdCJdKSh7fSx5LmRvbVByb3BzLGopLHNjb3BlZFNsb3RzOigwLGFbImRlZmF1bHQiXSkoe30seS5zY29wZWRTbG90cyxBKSxkaXJlY3RpdmVzOltdLmNvbmNhdCgoMCxvWyJkZWZhdWx0Il0pKHkuZGlyZWN0aXZlc3x8W10pLCgwLG9bImRlZmF1bHQiXSkobSkpfSksaS5jb21wb25lbnRPcHRpb25zPyhpLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhPWkuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGF8fHt9LGkuY29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM9aS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVyc3x8e30saS5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YT0oMCxhWyJkZWZhdWx0Il0pKHt9LGkuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGEsZiksaS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVycz0oMCxhWyJkZWZhdWx0Il0pKHt9LGkuY29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnMscCksaCYmKGkuY29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbj1oKSk6aS5kYXRhLm9uPSgwLGFbImRlZmF1bHQiXSkoe30saS5kYXRhLm9ufHx7fSxwKSx2b2lkIDAhPT1sJiYoaS5rZXk9bCxpLmRhdGEua2V5PWwpLCJzdHJpbmciPT09dHlwZW9mIE8mJihpLmRhdGEucmVmPU8pLGl9fSxkMzI3OmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbigpe3JldHVybltdfXQuZXhwb3J0cz1ufSxkMzcwOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIyNTNjIiksbz1uKCIxMzEwIiksaT1PYmplY3QucHJvdG90eXBlLGE9aS5oYXNPd25Qcm9wZXJ0eSxzPWkucHJvcGVydHlJc0VudW1lcmFibGUsdT1yKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSk/cjpmdW5jdGlvbih0KXtyZXR1cm4gbyh0KSYmYS5jYWxsKHQsImNhbGxlZSIpJiYhcy5jYWxsKHQsImNhbGxlZSIpfTt0LmV4cG9ydHM9dX0sZDdlZTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiYzNmYyIpLG89bigiYjA0NyIpLGk9bigiOTlkMyIpLGE9aSYmaS5pc1NldCxzPWE/byhhKTpyO3QuZXhwb3J0cz1zfSxkODY0OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI3OWFhIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXtpZihyKHQpLHZvaWQgMD09PWUpcmV0dXJuIHQ7c3dpdGNoKG4pe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHQuY2FsbChlLG4pfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4scil7cmV0dXJuIHQuY2FsbChlLG4scil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24obixyLG8pe3JldHVybiB0LmNhbGwoZSxuLHIsbyl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19fSxkOGQ2OmZ1bmN0aW9uKHQsZSxuKXtuKCIxNjU0IiksbigiNmMxYyIpLHQuZXhwb3J0cz1uKCJjY2I5IikuZigiaXRlcmF0b3IiKX0sZDlmNjpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiZTRhZSIpLG89bigiNzk0YiIpLGk9bigiMWJjMyIpLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O2UuZj1uKCI4ZTYwIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSxuKXtpZihyKHQpLGU9aShlLCEwKSxyKG4pLG8pdHJ5e3JldHVybiBhKHQsZSxuKX1jYXRjaChzKXt9aWYoImdldCJpbiBufHwic2V0ImluIG4pdGhyb3cgVHlwZUVycm9yKCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEiKTtyZXR1cm4idmFsdWUiaW4gbiYmKHRbZV09bi52YWx1ZSksdH19LGRhMDM6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjJiM2UiKSxvPXJbIl9fY29yZS1qc19zaGFyZWRfXyJdO3QuZXhwb3J0cz1vfSxkYmRiOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI1ODRhIiksbz1uKCJlNTNkIiksaT0iX19jb3JlLWpzX3NoYXJlZF9fIixhPW9baV18fChvW2ldPXt9KTsodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGFbdF18fChhW3RdPXZvaWQgMCE9PWU/ZTp7fSl9KSgidmVyc2lvbnMiLFtdKS5wdXNoKHt2ZXJzaW9uOnIudmVyc2lvbixtb2RlOm4oImI4ZTMiKT8icHVyZSI6Imdsb2JhbCIsY29weXJpZ2h0OiLCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpIn0pfSxkYzU3OmZ1bmN0aW9uKHQsZSl7dmFyIG49RnVuY3Rpb24ucHJvdG90eXBlLHI9bi50b1N0cmluZztmdW5jdGlvbiBvKHQpe2lmKG51bGwhPXQpe3RyeXtyZXR1cm4gci5jYWxsKHQpfWNhdGNoKGUpe310cnl7cmV0dXJuIHQrIiJ9Y2F0Y2goZSl7fX1yZXR1cm4iIn10LmV4cG9ydHM9b30sZGQ0MjpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKCI0MWIyIiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIGEodCxlLG4pe3JldHVybiBuP3RbMF09PT1lWzBdOnRbMF09PT1lWzBdJiZ0WzFdPT09ZVsxXX1mdW5jdGlvbiBzKHQsZSxuKXt2YXIgcj10W2VdfHx7fTtyZXR1cm4oMCxvWyJkZWZhdWx0Il0pKHt9LHIsbil9ZnVuY3Rpb24gdSh0LGUsbixyKXt2YXIgbz1uLnBvaW50cztmb3IodmFyIGkgaW4gdClpZih0Lmhhc093blByb3BlcnR5KGkpJiZhKHRbaV0ucG9pbnRzLG8scikpcmV0dXJuIGUrIi1wbGFjZW1lbnQtIitpO3JldHVybiIifWZ1bmN0aW9uIGMoKXt9ZS5nZXRBbGlnbkZyb21QbGFjZW1lbnQ9cyxlLmdldEFsaWduUG9wdXBDbGFzc05hbWU9dSxlLm5vb3A9Y30sZGY0ZTpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKCIxMDk4Iiksbz1pKHIpO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIGEodCxlKXt2YXIgbj12b2lkIDA7ZnVuY3Rpb24gcigpe24mJihjbGVhclRpbWVvdXQobiksbj1udWxsKX1mdW5jdGlvbiBvKCl7cigpLG49c2V0VGltZW91dCh0LGUpfXJldHVybiBvLmNsZWFyPXIsb31mdW5jdGlvbiBzKHQsZSl7cmV0dXJuIHQ9PT1lfHwhKCF0fHwhZSkmJigicGFnZVgiaW4gZSYmInBhZ2VZImluIGU/dC5wYWdlWD09PWUucGFnZVgmJnQucGFnZVk9PT1lLnBhZ2VZOiJjbGllbnRYImluIGUmJiJjbGllbnRZImluIGUmJih0LmNsaWVudFg9PT1lLmNsaWVudFgmJnQuY2xpZW50WT09PWUuY2xpZW50WSkpfWZ1bmN0aW9uIHUodCl7cmV0dXJuIHQmJiJvYmplY3QiPT09KCJ1bmRlZmluZWQiPT09dHlwZW9mIHQ/InVuZGVmaW5lZCI6KDAsb1siZGVmYXVsdCJdKSh0KSkmJnQud2luZG93PT09dH1lLmJ1ZmZlcj1hLGUuaXNTYW1lUG9pbnQ9cyxlLmlzV2luZG93PXV9LGUwOTg6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9e3RyYW5zaXRpb25zdGFydDp7dHJhbnNpdGlvbjoidHJhbnNpdGlvbnN0YXJ0IixXZWJraXRUcmFuc2l0aW9uOiJ3ZWJraXRUcmFuc2l0aW9uU3RhcnQiLE1velRyYW5zaXRpb246Im1velRyYW5zaXRpb25TdGFydCIsT1RyYW5zaXRpb246Im9UcmFuc2l0aW9uU3RhcnQiLG1zVHJhbnNpdGlvbjoiTVNUcmFuc2l0aW9uU3RhcnQifSxhbmltYXRpb25zdGFydDp7YW5pbWF0aW9uOiJhbmltYXRpb25zdGFydCIsV2Via2l0QW5pbWF0aW9uOiJ3ZWJraXRBbmltYXRpb25TdGFydCIsTW96QW5pbWF0aW9uOiJtb3pBbmltYXRpb25TdGFydCIsT0FuaW1hdGlvbjoib0FuaW1hdGlvblN0YXJ0Iixtc0FuaW1hdGlvbjoiTVNBbmltYXRpb25TdGFydCJ9fSxvPXt0cmFuc2l0aW9uZW5kOnt0cmFuc2l0aW9uOiJ0cmFuc2l0aW9uZW5kIixXZWJraXRUcmFuc2l0aW9uOiJ3ZWJraXRUcmFuc2l0aW9uRW5kIixNb3pUcmFuc2l0aW9uOiJtb3pUcmFuc2l0aW9uRW5kIixPVHJhbnNpdGlvbjoib1RyYW5zaXRpb25FbmQiLG1zVHJhbnNpdGlvbjoiTVNUcmFuc2l0aW9uRW5kIn0sYW5pbWF0aW9uZW5kOnthbmltYXRpb246ImFuaW1hdGlvbmVuZCIsV2Via2l0QW5pbWF0aW9uOiJ3ZWJraXRBbmltYXRpb25FbmQiLE1vekFuaW1hdGlvbjoibW96QW5pbWF0aW9uRW5kIixPQW5pbWF0aW9uOiJvQW5pbWF0aW9uRW5kIixtc0FuaW1hdGlvbjoiTVNBbmltYXRpb25FbmQifX0saT1bXSxhPVtdO2Z1bmN0aW9uIHMoKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSxlPXQuc3R5bGU7ZnVuY3Rpb24gbih0LG4pe2Zvcih2YXIgciBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkocikpe3ZhciBvPXRbcl07Zm9yKHZhciBpIGluIG8paWYoaSBpbiBlKXtuLnB1c2gob1tpXSk7YnJlYWt9fX0iQW5pbWF0aW9uRXZlbnQiaW4gd2luZG93fHwoZGVsZXRlIHIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uLGRlbGV0ZSBvLmFuaW1hdGlvbmVuZC5hbmltYXRpb24pLCJUcmFuc2l0aW9uRXZlbnQiaW4gd2luZG93fHwoZGVsZXRlIHIudHJhbnNpdGlvbnN0YXJ0LnRyYW5zaXRpb24sZGVsZXRlIG8udHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKSxuKHIsaSksbihvLGEpfWZ1bmN0aW9uIHUodCxlLG4pe3QuYWRkRXZlbnRMaXN0ZW5lcihlLG4sITEpfWZ1bmN0aW9uIGModCxlLG4pe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLG4sITEpfSJ1bmRlZmluZWQiIT09dHlwZW9mIHdpbmRvdyYmInVuZGVmaW5lZCIhPT10eXBlb2YgZG9jdW1lbnQmJnMoKTt2YXIgZj17c3RhcnRFdmVudHM6aSxhZGRTdGFydEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24odCxlKXswIT09aS5sZW5ndGg/aS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3UodCxuLGUpfSk6d2luZG93LnNldFRpbWVvdXQoZSwwKX0scmVtb3ZlU3RhcnRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHQsZSl7MCE9PWkubGVuZ3RoJiZpLmZvckVhY2goZnVuY3Rpb24obil7Yyh0LG4sZSl9KX0sZW5kRXZlbnRzOmEsYWRkRW5kRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbih0LGUpezAhPT1hLmxlbmd0aD9hLmZvckVhY2goZnVuY3Rpb24obil7dSh0LG4sZSl9KTp3aW5kb3cuc2V0VGltZW91dChlLDApfSxyZW1vdmVFbmRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKHQsZSl7MCE9PWEubGVuZ3RoJiZhLmZvckVhY2goZnVuY3Rpb24obil7Yyh0LG4sZSl9KX19O2VbImRlZmF1bHQiXT1mfSxlMWJjOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjQxYjIiKSxvPXYociksaT1uKCI4ZThlIiksYT12KGkpLHM9bigiN2I0NCIpLHU9dihzKSxjPW4oIjJmNTIiKSxmPXYoYyksbD1uKCIzNDMyIiksZD1uKCIyNWQ3IikscD12KGQpLGg9bigiNzNjOCIpO2Z1bmN0aW9uIHYodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG0oKXt9ZVsiZGVmYXVsdCJdPXtwcm9wczp7dHJpZ2dlcjp1WyJkZWZhdWx0Il0uYW55LmRlZihbImhvdmVyIl0pLGRlZmF1bHRWaXNpYmxlOnVbImRlZmF1bHQiXS5ib29sLHZpc2libGU6dVsiZGVmYXVsdCJdLmJvb2wscGxhY2VtZW50OnVbImRlZmF1bHQiXS5zdHJpbmcuZGVmKCJyaWdodCIpLHRyYW5zaXRpb25OYW1lOnVbImRlZmF1bHQiXS5vbmVPZlR5cGUoW3VbImRlZmF1bHQiXS5zdHJpbmcsdVsiZGVmYXVsdCJdLm9iamVjdF0pLGFuaW1hdGlvbjp1WyJkZWZhdWx0Il0uYW55LGFmdGVyVmlzaWJsZUNoYW5nZTp1WyJkZWZhdWx0Il0uZnVuYy5kZWYoZnVuY3Rpb24oKXt9KSxvdmVybGF5OnVbImRlZmF1bHQiXS5hbnksb3ZlcmxheVN0eWxlOnVbImRlZmF1bHQiXS5vYmplY3Qsb3ZlcmxheUNsYXNzTmFtZTp1WyJkZWZhdWx0Il0uc3RyaW5nLHByZWZpeENsczp1WyJkZWZhdWx0Il0uc3RyaW5nLmRlZigicmMtdG9vbHRpcCIpLG1vdXNlRW50ZXJEZWxheTp1WyJkZWZhdWx0Il0ubnVtYmVyLmRlZigwKSxtb3VzZUxlYXZlRGVsYXk6dVsiZGVmYXVsdCJdLm51bWJlci5kZWYoLjEpLGdldFRvb2x0aXBDb250YWluZXI6dVsiZGVmYXVsdCJdLmZ1bmMsZGVzdHJveVRvb2x0aXBPbkhpZGU6dVsiZGVmYXVsdCJdLmJvb2wuZGVmKCExKSxhbGlnbjp1WyJkZWZhdWx0Il0ub2JqZWN0LmRlZih7fSksYXJyb3dDb250ZW50OnVbImRlZmF1bHQiXS5hbnkuZGVmKG51bGwpLHRpcElkOnVbImRlZmF1bHQiXS5zdHJpbmcsYnVpbHRpblBsYWNlbWVudHM6dVsiZGVmYXVsdCJdLm9iamVjdH0sbWV0aG9kczp7Z2V0UG9wdXBFbGVtZW50OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kY3JlYXRlRWxlbWVudCxlPXRoaXMuJHByb3BzLG49ZS5wcmVmaXhDbHMscj1lLnRpcElkO3JldHVyblt0KCJkaXYiLHtjbGFzczpuKyItYXJyb3ciLGtleToiYXJyb3cifSxbKDAsaC5nZXRDb21wb25lbnRGcm9tUHJvcCkodGhpcywiYXJyb3dDb250ZW50IildKSx0KHBbImRlZmF1bHQiXSx7a2V5OiJjb250ZW50IixhdHRyczp7dHJpZ2dlcjp0aGlzLiRyZWZzLnRyaWdnZXIscHJlZml4Q2xzOm4saWQ6cixvdmVybGF5OigwLGguZ2V0Q29tcG9uZW50RnJvbVByb3ApKHRoaXMsIm92ZXJsYXkiKX19KV19LGdldFBvcHVwRG9tTm9kZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRyZWZzLnRyaWdnZXIuZ2V0UG9wdXBEb21Ob2RlKCl9fSxyZW5kZXI6ZnVuY3Rpb24odCl7dmFyIGU9KDAsaC5nZXRPcHRpb25Qcm9wcykodGhpcyksbj1lLm92ZXJsYXlDbGFzc05hbWUscj1lLnRyaWdnZXIsaT1lLm1vdXNlRW50ZXJEZWxheSxzPWUubW91c2VMZWF2ZURlbGF5LHU9ZS5vdmVybGF5U3R5bGUsYz1lLnByZWZpeENscyxkPWUuYWZ0ZXJWaXNpYmxlQ2hhbmdlLHA9ZS50cmFuc2l0aW9uTmFtZSx2PWUuYW5pbWF0aW9uLHk9ZS5wbGFjZW1lbnQsYj1lLmFsaWduLGc9ZS5kZXN0cm95VG9vbHRpcE9uSGlkZSx3PWUuZGVmYXVsdFZpc2libGUseD1lLmdldFRvb2x0aXBDb250YWluZXIsTz0oMCxhWyJkZWZhdWx0Il0pKGUsWyJvdmVybGF5Q2xhc3NOYW1lIiwidHJpZ2dlciIsIm1vdXNlRW50ZXJEZWxheSIsIm1vdXNlTGVhdmVEZWxheSIsIm92ZXJsYXlTdHlsZSIsInByZWZpeENscyIsImFmdGVyVmlzaWJsZUNoYW5nZSIsInRyYW5zaXRpb25OYW1lIiwiYW5pbWF0aW9uIiwicGxhY2VtZW50IiwiYWxpZ24iLCJkZXN0cm95VG9vbHRpcE9uSGlkZSIsImRlZmF1bHRWaXNpYmxlIiwiZ2V0VG9vbHRpcENvbnRhaW5lciJdKSxUPSgwLG9bImRlZmF1bHQiXSkoe30sTyk7KDAsaC5oYXNQcm9wKSh0aGlzLCJ2aXNpYmxlIikmJihULnBvcHVwVmlzaWJsZT10aGlzLiRwcm9wcy52aXNpYmxlKTt2YXIgaj17cHJvcHM6KDAsb1siZGVmYXVsdCJdKSh7cG9wdXBDbGFzc05hbWU6bixwcmVmaXhDbHM6YyxhY3Rpb246cixidWlsdGluUGxhY2VtZW50czpsLnBsYWNlbWVudHMscG9wdXBQbGFjZW1lbnQ6eSxwb3B1cEFsaWduOmIsZ2V0UG9wdXBDb250YWluZXI6eCxhZnRlclBvcHVwVmlzaWJsZUNoYW5nZTpkLHBvcHVwVHJhbnNpdGlvbk5hbWU6cCxwb3B1cEFuaW1hdGlvbjp2LGRlZmF1bHRQb3B1cFZpc2libGU6dyxkZXN0cm95UG9wdXBPbkhpZGU6Zyxtb3VzZUxlYXZlRGVsYXk6cyxwb3B1cFN0eWxlOnUsbW91c2VFbnRlckRlbGF5Oml9LFQpLG9uOigwLG9bImRlZmF1bHQiXSkoe30sdGhpcy4kbGlzdGVuZXJzLHtwb3B1cFZpc2libGVDaGFuZ2U6dGhpcy4kbGlzdGVuZXJzLnZpc2libGVDaGFuZ2V8fG0scG9wdXBBbGlnbjp0aGlzLiRsaXN0ZW5lcnMucG9wdXBBbGlnbnx8bX0pLHJlZjoidHJpZ2dlciJ9O3JldHVybiB0KGZbImRlZmF1bHQiXSxqLFt0KCJ0ZW1wbGF0ZSIse3Nsb3Q6InBvcHVwIn0sW3RoaXMuZ2V0UG9wdXBFbGVtZW50KHQpXSksdGhpcy4kc2xvdHNbImRlZmF1bHQiXV0pfX19LGUyNGI6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjQ5ZjQiKSxvPW4oIjFlZmMiKSxpPW4oImJiYzAiKSxhPW4oIjdhNDgiKSxzPW4oIjI1MjQiKTtmdW5jdGlvbiB1KHQpe3ZhciBlPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoO3RoaXMuY2xlYXIoKTt3aGlsZSgrK2U8bil7dmFyIHI9dFtlXTt0aGlzLnNldChyWzBdLHJbMV0pfX11LnByb3RvdHlwZS5jbGVhcj1yLHUucHJvdG90eXBlWyJkZWxldGUiXT1vLHUucHJvdG90eXBlLmdldD1pLHUucHJvdG90eXBlLmhhcz1hLHUucHJvdG90eXBlLnNldD1zLHQuZXhwb3J0cz11fSxlMjY1OmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigiZWQzMyIpfSxlNGFlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCJmNzcyIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCFyKHQpKXRocm93IFR5cGVFcnJvcih0KyIgaXMgbm90IGFuIG9iamVjdCEiKTtyZXR1cm4gdH19LGU1Mzg6ZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbih0KXt2YXIgcj1uKCIyYjNlIiksbz1lJiYhZS5ub2RlVHlwZSYmZSxpPW8mJiJvYmplY3QiPT10eXBlb2YgdCYmdCYmIXQubm9kZVR5cGUmJnQsYT1pJiZpLmV4cG9ydHM9PT1vLHM9YT9yLkJ1ZmZlcjp2b2lkIDAsdT1zP3MuYWxsb2NVbnNhZmU6dm9pZCAwO2Z1bmN0aW9uIGModCxlKXtpZihlKXJldHVybiB0LnNsaWNlKCk7dmFyIG49dC5sZW5ndGgscj11P3Uobik6bmV3IHQuY29uc3RydWN0b3Iobik7cmV0dXJuIHQuY29weShyKSxyfXQuZXhwb3J0cz1jfSkuY2FsbCh0aGlzLG4oIjYyZTQiKSh0KSl9LGU1M2Q6ZnVuY3Rpb24odCxlKXt2YXIgbj10LmV4cG9ydHM9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCk7Im51bWJlciI9PXR5cGVvZiBfX2cmJihfX2c9bil9LGU2ZjM6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjA3ZTMiKSxvPW4oIjM2YzMiKSxpPW4oIjViNGUiKSghMSksYT1uKCI1NTU5IikoIklFX1BST1RPIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIG4scz1vKHQpLHU9MCxjPVtdO2ZvcihuIGluIHMpbiE9YSYmcihzLG4pJiZjLnB1c2gobik7d2hpbGUoZS5sZW5ndGg+dSlyKHMsbj1lW3UrK10pJiYofmkoYyxuKXx8Yy5wdXNoKG4pKTtyZXR1cm4gY319LGU4MzQ6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1mdW5jdGlvbigpe307dC5leHBvcnRzPXJ9LGVhYzU6ZnVuY3Rpb24odCxlKXt2YXIgbj1PYmplY3QucHJvdG90eXBlO2Z1bmN0aW9uIHIodCl7dmFyIGU9dCYmdC5jb25zdHJ1Y3RvcixyPSJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLnByb3RvdHlwZXx8bjtyZXR1cm4gdD09PXJ9dC5leHBvcnRzPXJ9LGViZmQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oIjYyYTAiKSgibWV0YSIpLG89bigiZjc3MiIpLGk9bigiMDdlMyIpLGE9bigiZDlmNiIpLmYscz0wLHU9T2JqZWN0LmlzRXh0ZW5zaWJsZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0sYz0hbigiMjk0YyIpKGZ1bmN0aW9uKCl7cmV0dXJuIHUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSxmPWZ1bmN0aW9uKHQpe2EodCxyLHt2YWx1ZTp7aToiTyIrICsrcyx3Ont9fX0pfSxsPWZ1bmN0aW9uKHQsZSl7aWYoIW8odCkpcmV0dXJuInN5bWJvbCI9PXR5cGVvZiB0P3Q6KCJzdHJpbmciPT10eXBlb2YgdD8iUyI6IlAiKSt0O2lmKCFpKHQscikpe2lmKCF1KHQpKXJldHVybiJGIjtpZighZSlyZXR1cm4iRSI7Zih0KX1yZXR1cm4gdFtyXS5pfSxkPWZ1bmN0aW9uKHQsZSl7aWYoIWkodCxyKSl7aWYoIXUodCkpcmV0dXJuITA7aWYoIWUpcmV0dXJuITE7Zih0KX1yZXR1cm4gdFtyXS53fSxwPWZ1bmN0aW9uKHQpe3JldHVybiBjJiZoLk5FRUQmJnUodCkmJiFpKHQscikmJmYodCksdH0saD10LmV4cG9ydHM9e0tFWTpyLE5FRUQ6ITEsZmFzdEtleTpsLGdldFdlYWs6ZCxvbkZyZWV6ZTpwfX0sZWM2OTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNmZjZCIpLG89bigiMDNkZCIpLGk9bigiMzBjOSIpO2Z1bmN0aW9uIGEodCl7cmV0dXJuIGkodCk/cih0KTpvKHQpfXQuZXhwb3J0cz1hfSxlYzhjOmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgZT1bXTtpZihudWxsIT10KWZvcih2YXIgbiBpbiBPYmplY3QodCkpZS5wdXNoKG4pO3JldHVybiBlfXQuZXhwb3J0cz1ufSxlZDMzOmZ1bmN0aW9uKHQsZSxuKXtuKCIwMTRiIiksdC5leHBvcnRzPW4oIjU4NGEiKS5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSxlZDVjOmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjdiNDQiKSxvPWkocik7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZVsiZGVmYXVsdCJdPXtwcm9wczp7dmlzaWJsZTpvWyJkZWZhdWx0Il0uYm9vbCxoaWRkZW5DbGFzc05hbWU6b1siZGVmYXVsdCJdLnN0cmluZ30scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9dGhpcy4kcHJvcHMsbj1lLmhpZGRlbkNsYXNzTmFtZSxyPShlLnZpc2libGUsbnVsbCk7aWYobnx8IXRoaXMuJHNsb3RzWyJkZWZhdWx0Il18fHRoaXMuJHNsb3RzWyJkZWZhdWx0Il0ubGVuZ3RoPjEpe3ZhciBvPSIiO3I9dCgiZGl2Iix7Y2xhc3M6b30sW3RoaXMuJHNsb3RzWyJkZWZhdWx0Il1dKX1lbHNlIHI9dGhpcy4kc2xvdHNbImRlZmF1bHQiXVswXTtyZXR1cm4gcn19fSxlZmI2OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCI1ZTJlIik7ZnVuY3Rpb24gbygpe3RoaXMuX19kYXRhX189bmV3IHIsdGhpcy5zaXplPTB9dC5leHBvcnRzPW99LGY2ZmQ6ZnVuY3Rpb24odCxlKXsoZnVuY3Rpb24odCl7dmFyIGU9ImN1cnJlbnRTY3JpcHQiLG49dC5nZXRFbGVtZW50c0J5VGFnTmFtZSgic2NyaXB0Iik7ZSBpbiB0fHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtnZXQ6ZnVuY3Rpb24oKXt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKHIpe3ZhciB0LGU9KC8uKmF0IFteXChdKlwoKC4qKTouKzouK1wpJC9naS5leGVjKHIuc3RhY2spfHxbITFdKVsxXTtmb3IodCBpbiBuKWlmKG5bdF0uc3JjPT1lfHwiaW50ZXJhY3RpdmUiPT1uW3RdLnJlYWR5U3RhdGUpcmV0dXJuIG5bdF07cmV0dXJuIG51bGx9fX0pfSkoZG9jdW1lbnQpfSxmNzcyOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiJvYmplY3QiPT09dHlwZW9mIHQ/bnVsbCE9PXQ6ImZ1bmN0aW9uIj09PXR5cGVvZiB0fX0sZjc3MmQ6ZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigiOGJiZiIpLG89cyhyKSxpPW4oIjdiNDQiKSxhPXMoaSk7ZnVuY3Rpb24gcyh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZVsiZGVmYXVsdCJdPXtwcm9wczp7YXV0b01vdW50OmFbImRlZmF1bHQiXS5ib29sLmRlZighMCksYXV0b0Rlc3Ryb3k6YVsiZGVmYXVsdCJdLmJvb2wuZGVmKCEwKSx2aXNpYmxlOmFbImRlZmF1bHQiXS5ib29sLGZvcmNlUmVuZGVyOmFbImRlZmF1bHQiXS5ib29sLmRlZighMSkscGFyZW50OmFbImRlZmF1bHQiXS5hbnksZ2V0Q29tcG9uZW50OmFbImRlZmF1bHQiXS5mdW5jLmlzUmVxdWlyZWQsZ2V0Q29udGFpbmVyOmFbImRlZmF1bHQiXS5mdW5jLmlzUmVxdWlyZWQsY2hpbGRyZW46YVsiZGVmYXVsdCJdLmZ1bmMuaXNSZXF1aXJlZH0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuYXV0b01vdW50JiZ0aGlzLnJlbmRlckNvbXBvbmVudCgpfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dGhpcy5hdXRvTW91bnQmJnRoaXMucmVuZGVyQ29tcG9uZW50KCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmF1dG9EZXN0cm95JiZ0aGlzLnJlbW92ZUNvbnRhaW5lcigpfSxtZXRob2RzOntyZW1vdmVDb250YWluZXI6ZnVuY3Rpb24oKXt0aGlzLmNvbnRhaW5lciYmKHRoaXMuX2NvbXBvbmVudCYmdGhpcy5fY29tcG9uZW50LiRkZXN0cm95KCksdGhpcy5jb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lciksdGhpcy5jb250YWluZXI9bnVsbCl9LHJlbmRlckNvbXBvbmVudDpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxlPWFyZ3VtZW50c1sxXSxuPXRoaXMudmlzaWJsZSxyPXRoaXMuZm9yY2VSZW5kZXIsaT10aGlzLmdldENvbnRhaW5lcixhPXRoaXMucGFyZW50LHM9dGhpcztpZihufHxhLiRyZWZzLl9jb21wb25lbnR8fHIpe3ZhciB1PXRoaXMuY29tcG9uZW50RWw7dGhpcy5jb250YWluZXJ8fCh0aGlzLmNvbnRhaW5lcj1pKCksdT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSx0aGlzLmNvbXBvbmVudEVsPXUsdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodSkpLHRoaXMuX2NvbXBvbmVudD90aGlzLl9jb21wb25lbnQuY29tUHJvcHM9dDp0aGlzLl9jb21wb25lbnQ9bmV3IG9bImRlZmF1bHQiXSh7ZWw6dSxwYXJlbnQ6cy5wYXJlbnQsZGF0YTp7Y29tUHJvcHM6dH0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZSYmZS5jYWxsKHMpfSl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe2UmJmUuY2FsbChzKX0pfSxyZW5kZXI6ZnVuY3Rpb24oKXtyZXR1cm4gcy5nZXRDb21wb25lbnQodGhpcy5jb21Qcm9wcyl9fSl9fX0scmVuZGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hpbGRyZW4oe3JlbmRlckNvbXBvbmVudDp0aGlzLnJlbmRlckNvbXBvbmVudCxyZW1vdmVDb250YWluZXI6dGhpcy5yZW1vdmVDb250YWluZXJ9KX19fSxmNzc3OmZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oIjkyZmEiKSxvPUUociksaT1uKCI2MDQyIiksYT1FKGkpLHM9bigiMTA5OCIpLHU9RShzKSxjPW4oIjQxYjIiKSxmPUUoYyksbD1uKCI0ZDI2IiksZD1FKGwpLHA9bigiOGJiZiIpLGg9RShwKSx2PW4oIjQ2Y2YiKSxtPUUodikseT1uKCI0OGJiIiksYj1FKHkpLGc9bigiNzNjOCIpLHc9bigiZDJmOSIpLHg9bigiZjc3MmQiKSxPPUUoeCksVD1uKCJjMjZlIiksaj1FKFQpLF89bigiNjIxOCIpLFA9RShfKSxDPW4oImY5ZDciKTtmdW5jdGlvbiBFKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBTKCl7fXZhciBBPXt9LE09ISgidW5kZWZpbmVkIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5kb2N1bWVudCYmd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2hbImRlZmF1bHQiXS51c2UobVsiZGVmYXVsdCJdLHtuYW1lOiJhbnQtcmVmIn0pO3ZhciBrPXttaXhpbnM6W2JbImRlZmF1bHQiXV0scHJvcHM6KDAsZy5pbml0RGVmYXVsdFByb3BzKShQWyJkZWZhdWx0Il0se3ByZWZpeENsczoiZHJhd2VyIixwbGFjZW1lbnQ6ImxlZnQiLGdldENvbnRhaW5lcjoiYm9keSIsbGV2ZWw6ImFsbCIsZHVyYXRpb246Ii4zcyIsZWFzZToiY3ViaWMtYmV6aWVyKDAuNzgsIDAuMTQsIDAuMTUsIDAuODYpIixmaXJzdEVudGVyOiExLHNob3dNYXNrOiEwLGhhbmRsZXI6ITAsbWFza1N0eWxlOnt9LHdyYXBwZXJDbGFzc05hbWU6IiIsY2xhc3NOYW1lOiIifSksZGF0YTpmdW5jdGlvbigpe3RoaXMubGV2ZWxEb209W10sdGhpcy5jb250ZW50RG9tPW51bGwsdGhpcy5tYXNrRG9tPW51bGwsdGhpcy5oYW5kbGVyZG9tPW51bGwsdGhpcy5tb3VzZVBvcz1udWxsLHRoaXMuc0ZpcnN0RW50ZXI9dGhpcy5maXJzdEVudGVyLHRoaXMudGltZW91dD1udWxsLHRoaXMuY2hpbGRyZW49bnVsbCx0aGlzLmRyYXdlcklkPU51bWJlcigoRGF0ZS5ub3coKStNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpLnJlcGxhY2UoIi4iLE1hdGgucm91bmQoOSpNYXRoLnJhbmRvbSgpKSkpLnRvU3RyaW5nKDE2KTt2YXIgdD12b2lkIDAhPT10aGlzLm9wZW4/dGhpcy5vcGVuOiEhdGhpcy5kZWZhdWx0T3BlbjtyZXR1cm4gQVt0aGlzLmRyYXdlcklkXT10LHRoaXMub3JpZ25hbE9wZW49dGhpcy5vcGVuLHRoaXMucHJlUHJvcHM9KDAsZlsiZGVmYXVsdCJdKSh7fSx0aGlzLiRwcm9wcykse3NPcGVuOnR9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe2lmKCFNKXt2YXIgZT0hMTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigidGVzdCIsbnVsbCxPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sInBhc3NpdmUiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZT0hMCxudWxsfX0pKSx0LnBhc3NpdmU9ISFlJiZ7cGFzc2l2ZTohMX19dmFyIG49dC5nZXRPcGVuKCk7KHQuaGFuZGxlcnx8bnx8dC5zRmlyc3RFbnRlcikmJih0LmdldERlZmF1bHQodC4kcHJvcHMpLG4mJih0LmlzT3BlbkNoYW5nZT0hMCksdC4kZm9yY2VVcGRhdGUoKSl9KX0sd2F0Y2g6e29wZW46ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdC50b1N0cmluZygpfSxlfShmdW5jdGlvbih0KXt2b2lkIDAhPT10JiZ0IT09dGhpcy5wcmVQcm9wcy5vcGVuJiYodGhpcy5pc09wZW5DaGFuZ2U9ITAsdGhpcy5jb250YWluZXJ8fHRoaXMuZ2V0RGVmYXVsdCh0aGlzLiRwcm9wcyksdGhpcy5zZXRTdGF0ZSh7c09wZW46b3Blbn0pKSx0aGlzLnByZVByb3BzLm9wZW49dH0pLHBsYWNlbWVudDpmdW5jdGlvbih0KXt0IT09dGhpcy5wcmVQcm9wcy5wbGFjZW1lbnQmJih0aGlzLmNvbnRlbnREb209bnVsbCksdGhpcy5wcmVQcm9wcy5wbGFjZW1lbnQ9dH0sbGV2ZWw6ZnVuY3Rpb24odCl7dGhpcy5wcmVQcm9wcy5sZXZlbCE9PXQmJnRoaXMuZ2V0UGFyZW50QW5kTGV2ZWxEb20odGhpcy4kcHJvcHMpLHRoaXMucHJlUHJvcHMubGV2ZWw9dH19LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7IXQuc0ZpcnN0RW50ZXImJnQuY29udGFpbmVyJiYodC4kZm9yY2VVcGRhdGUoKSx0LnNGaXJzdEVudGVyPSEwKX0pfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7ZGVsZXRlIEFbdGhpcy5kcmF3ZXJJZF0sZGVsZXRlIHRoaXMuaXNPcGVuQ2hhbmdlLHRoaXMuY29udGFpbmVyJiYodGhpcy5zT3BlbiYmdGhpcy5zZXRMZXZlbERvbVRyYW5zZm9ybSghMSwhMCksZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz0iIix0aGlzLmdldFNlbGZDb250YWluZXImJnRoaXMuY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jb250YWluZXIpKSx0aGlzLnNGaXJzdEVudGVyPSExLGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpLHRoaXMucmVuZGVyQ29tcG9uZW50JiZ0aGlzLnJlbmRlckNvbXBvbmVudCh7YWZ0ZXJDbG9zZTp0aGlzLnJlbW92ZUNvbnRhaW5lcixvbkNsb3NlOmZ1bmN0aW9uKCl7fSx2aXNpYmxlOiExfSl9LG1ldGhvZHM6e29uTWFza1RvdWNoRW5kOmZ1bmN0aW9uKHQpe3RoaXMuJGVtaXQoIm1hc2tDbGljayIsdCksdGhpcy5vblRvdWNoRW5kKHQsITApfSxvbkljb25Ub3VjaEVuZDpmdW5jdGlvbih0KXt0aGlzLiRlbWl0KCJoYW5kbGVDbGljayIsdCksdGhpcy5vblRvdWNoRW5kKHQpfSxvblRvdWNoRW5kOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dGhpcy5vcGVuKXt2YXIgbj1lfHx0aGlzLnNPcGVuO3RoaXMuaXNPcGVuQ2hhbmdlPSEwLHRoaXMuc2V0U3RhdGUoe3NPcGVuOiFufSl9fSxvbldyYXBwZXJUcmFuc2l0aW9uRW5kOmZ1bmN0aW9uKHQpe3QudGFyZ2V0PT09dGhpcy5jb250ZW50V3JhcHBlciYmKHRoaXMuZG9tLnN0eWxlLnRyYW5zaXRpb249IiIsIXRoaXMuc09wZW4mJnRoaXMuZ2V0Q3VycmVudERyYXdlclNvbWUoKSYmKGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3dYPSIiLHRoaXMubWFza0RvbSYmKHRoaXMubWFza0RvbS5zdHlsZS5sZWZ0PSIiLHRoaXMubWFza0RvbS5zdHlsZS53aWR0aD0iIikpKX0sZ2V0RGVmYXVsdDpmdW5jdGlvbih0KXt0aGlzLmdldFBhcmVudEFuZExldmVsRG9tKHQpLCh0LmdldENvbnRhaW5lcnx8dC5wYXJlbnQpJiYodGhpcy5jb250YWluZXI9dGhpcy5kZWZhdWx0R2V0Q29udGFpbmVyKCkpfSxnZXRDdXJyZW50RHJhd2VyU29tZTpmdW5jdGlvbigpe3JldHVybiFPYmplY3Qua2V5cyhBKS5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiBBW3RdfSl9LGdldFNlbGZDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250YWluZXJ9LGdldFBhcmVudEFuZExldmVsRG9tOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoIU0pe3ZhciBuPXQubGV2ZWwscj10LmdldENvbnRhaW5lcjtpZih0aGlzLmxldmVsRG9tPVtdLHIpe2lmKCJzdHJpbmciPT09dHlwZW9mIHIpe3ZhciBvPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocilbMF07dGhpcy5wYXJlbnQ9b30iZnVuY3Rpb24iPT09dHlwZW9mIHImJih0aGlzLnBhcmVudD1yKCkpLCJvYmplY3QiPT09KCJ1bmRlZmluZWQiPT09dHlwZW9mIHI/InVuZGVmaW5lZCI6KDAsdVsiZGVmYXVsdCJdKShyKSkmJnIgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQmJih0aGlzLnBhcmVudD1yKX1pZighciYmdGhpcy5jb250YWluZXImJih0aGlzLnBhcmVudD10aGlzLmNvbnRhaW5lci5wYXJlbnROb2RlKSwiYWxsIj09PW4pe3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMucGFyZW50LmNoaWxkcmVuKTtpLmZvckVhY2goZnVuY3Rpb24odCl7IlNDUklQVCIhPT10Lm5vZGVOYW1lJiYiU1RZTEUiIT09dC5ub2RlTmFtZSYmIkxJTksiIT09dC5ub2RlTmFtZSYmdCE9PWUuY29udGFpbmVyJiZlLmxldmVsRG9tLnB1c2godCl9KX1lbHNlIG4mJigwLEMuZGF0YVRvQXJyYXkpKG4pLmZvckVhY2goZnVuY3Rpb24odCl7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UubGV2ZWxEb20ucHVzaCh0KX0pfSl9fSxzZXRMZXZlbERvbVRyYW5zZm9ybTpmdW5jdGlvbih0LGUsbixyKXt2YXIgbz10aGlzLGk9dGhpcy4kcHJvcHMsYT1pLnBsYWNlbWVudCxzPWkubGV2ZWxNb3ZlLHU9aS5kdXJhdGlvbixjPWkuZWFzZSxmPWkuZ2V0Q29udGFpbmVyO2lmKCFNJiYodGhpcy5sZXZlbERvbS5mb3JFYWNoKGZ1bmN0aW9uKGkpe2lmKG8uaXNPcGVuQ2hhbmdlfHxlKXtpLnN0eWxlLnRyYW5zaXRpb249InRyYW5zZm9ybSAiK3UrIiAiK2MsKDAsQy5hZGRFdmVudExpc3RlbmVyKShpLEMudHJhbnNpdGlvbkVuZCxvLnRybmFzaXRpb25FbmQpO3ZhciBmPXQ/cjowO2lmKHMpe3ZhciBsPSgwLEMudHJhbnNmb3JtQXJndW1lbnRzKShzLHt0YXJnZXQ6aSxvcGVuOnR9KTtmPXQ/bFswXTpsWzFdfHwwfXZhciBkPSJudW1iZXIiPT09dHlwZW9mIGY/ZisicHgiOmYscD0ibGVmdCI9PT1hfHwidG9wIj09PWE/ZDoiLSIrZDtpLnN0eWxlLnRyYW5zZm9ybT1mP24rIigiK3ArIikiOiIiLGkuc3R5bGUubXNUcmFuc2Zvcm09Zj9uKyIoIitwKyIpIjoiIn19KSwiYm9keSI9PT1mKSl7dmFyIGw9WyJ0b3VjaHN0YXJ0Il0sZD1bZG9jdW1lbnQuYm9keSx0aGlzLm1hc2tEb20sdGhpcy5oYW5kbGVyZG9tLHRoaXMuY29udGVudERvbV0scD1kb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodD4od2luZG93LmlubmVySGVpZ2h0fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSYmd2luZG93LmlubmVyV2lkdGg+ZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aD8oMCxqWyJkZWZhdWx0Il0pKDEpOjAsaD0id2lkdGggIit1KyIgIitjLHY9InRyYW5zZm9ybSAiK3UrIiAiK2M7aWYodCYmImhpZGRlbiIhPT1kb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93KXtpZihkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PSJoaWRkZW4iLHApe3N3aXRjaChkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSIsZG9jdW1lbnQuYm9keS5zdHlsZS53aWR0aD0iY2FsYygxMDAlIC0gIitwKyJweCkiLHRoaXMuZG9tLnN0eWxlLnRyYW5zaXRpb249Im5vbmUiLGEpe2Nhc2UicmlnaHQiOnRoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybT0idHJhbnNsYXRlWCgtIitwKyJweCkiLHRoaXMuZG9tLnN0eWxlLm1zVHJhbnNmb3JtPSJ0cmFuc2xhdGVYKC0iK3ArInB4KSI7YnJlYWs7Y2FzZSJ0b3AiOmNhc2UiYm90dG9tIjp0aGlzLmRvbS5zdHlsZS53aWR0aD0iY2FsYygxMDAlIC0gIitwKyJweCkiLHRoaXMuZG9tLnN0eWxlLnRyYW5zZm9ybT0idHJhbnNsYXRlWigwKSI7YnJlYWs7ZGVmYXVsdDpicmVha31jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe28uZG9tLnN0eWxlLnRyYW5zaXRpb249disiLCIraCxvLmRvbS5zdHlsZS53aWR0aD0iIixvLmRvbS5zdHlsZS50cmFuc2Zvcm09IiIsby5kb20uc3R5bGUubXNUcmFuc2Zvcm09IiJ9KX1kLmZvckVhY2goZnVuY3Rpb24odCxlKXt0JiYoMCxDLmFkZEV2ZW50TGlzdGVuZXIpKHQsbFtlXXx8InRvdWNobW92ZSIsZT9vLnJlbW92ZU1vdmVIYW5kbGVyOm8ucmVtb3ZlU3RhcnRIYW5kbGVyLG8ucGFzc2l2ZSl9KX1lbHNlIGlmKHRoaXMuZ2V0Q3VycmVudERyYXdlclNvbWUoKSl7aWYoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz0iIiwodGhpcy5pc09wZW5DaGFuZ2V8fGUpJiZwKXtkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uPSIiLGRvY3VtZW50LmJvZHkuc3R5bGUud2lkdGg9IiIsQy50cmFuc2l0aW9uU3RyJiYoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvd1g9ImhpZGRlbiIpLHRoaXMuZG9tLnN0eWxlLnRyYW5zaXRpb249Im5vbmUiO3ZhciBtPXZvaWQgMDtzd2l0Y2goYSl7Y2FzZSJyaWdodCI6dGhpcy5kb20uc3R5bGUudHJhbnNmb3JtPSJ0cmFuc2xhdGVYKCIrcCsicHgpIix0aGlzLmRvbS5zdHlsZS5tc1RyYW5zZm9ybT0idHJhbnNsYXRlWCgiK3ArInB4KSIsdGhpcy5kb20uc3R5bGUud2lkdGg9IjEwMCUiLGg9IndpZHRoIDBzICIrYysiICIrdSx0aGlzLm1hc2tEb20mJih0aGlzLm1hc2tEb20uc3R5bGUubGVmdD0iLSIrcCsicHgiLHRoaXMubWFza0RvbS5zdHlsZS53aWR0aD0iY2FsYygxMDAlICsgIitwKyJweCkiKTticmVhaztjYXNlInRvcCI6Y2FzZSJib3R0b20iOnRoaXMuZG9tLnN0eWxlLndpZHRoPSJjYWxjKDEwMCUgKyAiK3ArInB4KSIsdGhpcy5kb20uc3R5bGUuaGVpZ2h0PSIxMDAlIix0aGlzLmRvbS5zdHlsZS50cmFuc2Zvcm09InRyYW5zbGF0ZVooMCkiLG09ImhlaWdodCAwcyAiK2MrIiAiK3U7YnJlYWs7ZGVmYXVsdDpicmVha31jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe28uZG9tLnN0eWxlLnRyYW5zaXRpb249disiLCIrKG0/bSsiLCI6IiIpK2gsby5kb20uc3R5bGUudHJhbnNmb3JtPSIiLG8uZG9tLnN0eWxlLm1zVHJhbnNmb3JtPSIiLG8uZG9tLnN0eWxlLndpZHRoPSIiLG8uZG9tLnN0eWxlLmhlaWdodD0iIn0pfWQuZm9yRWFjaChmdW5jdGlvbih0LGUpe3QmJigwLEMucmVtb3ZlRXZlbnRMaXN0ZW5lcikodCxsW2VdfHwidG91Y2htb3ZlIixlP28ucmVtb3ZlTW92ZUhhbmRsZXI6by5yZW1vdmVTdGFydEhhbmRsZXIsby5wYXNzaXZlKX0pfX12YXIgeT10aGlzLiRsaXN0ZW5lcnMuY2hhbmdlO3kmJnRoaXMuaXNPcGVuQ2hhbmdlJiZ0aGlzLnNGaXJzdEVudGVyJiYoeSh0KSx0aGlzLmlzT3BlbkNoYW5nZT0hMSl9LGdldENoaWxkVG9SZW5kZXI6ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLHI9dGhpcy4kY3JlYXRlRWxlbWVudCxpPXRoaXMuJHByb3BzLHM9aS5jbGFzc05hbWUsdT1pLnByZWZpeENscyxjPWkucGxhY2VtZW50LGY9aS5oYW5kbGVyLGw9aS5zaG93TWFzayxwPWkubWFza1N0eWxlLGg9aS53aWR0aCx2PWkuaGVpZ2h0LG09aS53cmFwU3R5bGUseT10aGlzLiRzbG90c1siZGVmYXVsdCJdLGI9KDAsZFsiZGVmYXVsdCJdKSh1LChlPXt9LCgwLGFbImRlZmF1bHQiXSkoZSx1KyItIitjLCEwKSwoMCxhWyJkZWZhdWx0Il0pKGUsdSsiLW9wZW4iLHQpLCgwLGFbImRlZmF1bHQiXSkoZSxzLCEhcyksZSkpLHg9dGhpcy5pc09wZW5DaGFuZ2UsTz0ibGVmdCI9PT1jfHwicmlnaHQiPT09YyxUPSJ0cmFuc2xhdGUiKyhPPyJYIjoiWSIpLGo9ImxlZnQiPT09Y3x8InRvcCI9PT1jPyItMTAwJSI6IjEwMCUiLF89dD8iIjpUKyIoIitqKyIpIjtpZih2b2lkIDA9PT14fHx4KXt2YXIgUD10aGlzLmNvbnRlbnREb20/dGhpcy5jb250ZW50RG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW08/IndpZHRoIjoiaGVpZ2h0Il06MCxFPShPP2g6dil8fFA7dGhpcy5zZXRMZXZlbERvbVRyYW5zZm9ybSh0LCExLFQsRSl9dmFyIEE9dm9pZCAwO2lmKCExIT09Zil7dmFyIE09cigiZGl2Iix7Y2xhc3M6ImRyYXdlci1oYW5kbGUifSxbcigiaSIse2NsYXNzOiJkcmF3ZXItaGFuZGxlLWljb24ifSldKSxrPXRoaXMuaGFuZGxlciwkPWsmJmtbMF18fE0sRD0oMCxnLmdldEV2ZW50cykoJCksTj1ELmNsaWNrO0E9KDAsdy5jbG9uZUVsZW1lbnQpKCQse29uOntjbGljazpmdW5jdGlvbih0KXtOJiZOKCksbi5vbkljb25Ub3VjaEVuZCh0KX19LGRpcmVjdGl2ZXM6W3tuYW1lOiJhbnQtcmVmIix2YWx1ZTpmdW5jdGlvbih0KXtuLmhhbmRsZXJkb209dH19XX0pfXZhciBMPXtjbGFzczpiLGRpcmVjdGl2ZXM6W3tuYW1lOiJhbnQtcmVmIix2YWx1ZTpmdW5jdGlvbih0KXtuLmRvbT10fX1dLG9uOnt0cmFuc2l0aW9uZW5kOnRoaXMub25XcmFwcGVyVHJhbnNpdGlvbkVuZH0sc3R5bGU6bX0sRj1be25hbWU6ImFudC1yZWYiLHZhbHVlOmZ1bmN0aW9uKHQpe24ubWFza0RvbT10fX1dLFY9W3tuYW1lOiJhbnQtcmVmIix2YWx1ZTpmdW5jdGlvbih0KXtuLmNvbnRlbnRXcmFwcGVyPXR9fV0sSD1be25hbWU6ImFudC1yZWYiLHZhbHVlOmZ1bmN0aW9uKHQpe24uY29udGVudERvbT10fX1dO3JldHVybiByKCJkaXYiLEwsW2wmJnIoImRpdiIsKDAsb1siZGVmYXVsdCJdKShbe2NsYXNzOnUrIi1tYXNrIixvbjp7Y2xpY2s6dGhpcy5vbk1hc2tUb3VjaEVuZH0sc3R5bGU6cH0se2RpcmVjdGl2ZXM6Rn1dKSkscigiZGl2IiwoMCxvWyJkZWZhdWx0Il0pKFt7Y2xhc3M6dSsiLWNvbnRlbnQtd3JhcHBlciIsc3R5bGU6e3RyYW5zZm9ybTpfLG1zVHJhbnNmb3JtOl8sd2lkdGg6KDAsQy5pc051bWVyaWMpKGgpP2grInB4IjpoLGhlaWdodDooMCxDLmlzTnVtZXJpYykodik/disicHgiOnZ9fSx7ZGlyZWN0aXZlczpWfV0pLFtyKCJkaXYiLCgwLG9bImRlZmF1bHQiXSkoW3tjbGFzczp1KyItY29udGVudCJ9LHtkaXJlY3RpdmVzOkh9LHtvbjp7dG91Y2hzdGFydDp0P3RoaXMucmVtb3ZlU3RhcnRIYW5kbGVyOlMsdG91Y2htb3ZlOnQ/dGhpcy5yZW1vdmVNb3ZlSGFuZGxlcjpTfX1dKSxbeV0pLEFdKV0pfSxnZXRPcGVuOmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMub3Blbj90aGlzLm9wZW46dGhpcy5zT3Blbn0sZ2V0VG91Y2hQYXJlbnRTY3JvbGw6ZnVuY3Rpb24odCxlLG4scil7aWYoIWV8fGU9PT1kb2N1bWVudClyZXR1cm4hMTtpZihlPT09dC5wYXJlbnROb2RlKXJldHVybiEwO3ZhciBvPU1hdGgubWF4KE1hdGguYWJzKG4pLE1hdGguYWJzKHIpKT09PU1hdGguYWJzKHIpLGk9TWF0aC5tYXgoTWF0aC5hYnMobiksTWF0aC5hYnMocikpPT09TWF0aC5hYnMobiksYT1lLnNjcm9sbEhlaWdodC1lLmNsaWVudEhlaWdodCxzPWUuc2Nyb2xsV2lkdGgtZS5jbGllbnRXaWR0aCx1PWUuc2Nyb2xsVG9wLGM9ZS5zY3JvbGxMZWZ0O2Uuc2Nyb2xsVG8mJmUuc2Nyb2xsVG8oZS5zY3JvbGxMZWZ0KzEsZS5zY3JvbGxUb3ArMSk7dmFyIGY9ZS5zY3JvbGxUb3AsbD1lLnNjcm9sbExlZnQ7cmV0dXJuIGUuc2Nyb2xsVG8mJmUuc2Nyb2xsVG8oZS5zY3JvbGxMZWZ0LTEsZS5zY3JvbGxUb3AtMSksISgoIW98fGEmJmYtdSYmKCFhfHwhKGUuc2Nyb2xsVG9wPj1hJiZyPDB8fGUuc2Nyb2xsVG9wPD0wJiZyPjApKSkmJighaXx8cyYmbC1jJiYoIXN8fCEoZS5zY3JvbGxMZWZ0Pj1zJiZuPDB8fGUuc2Nyb2xsTGVmdDw9MCYmbj4wKSkpKSYmdGhpcy5nZXRUb3VjaFBhcmVudFNjcm9sbCh0LGUucGFyZW50Tm9kZSxuLHIpfSxyZW1vdmVTdGFydEhhbmRsZXI6ZnVuY3Rpb24odCl7dC50b3VjaGVzLmxlbmd0aD4xfHwodGhpcy5zdGFydFBvcz17eDp0LnRvdWNoZXNbMF0uY2xpZW50WCx5OnQudG91Y2hlc1swXS5jbGllbnRZfSl9LHJlbW92ZU1vdmVIYW5kbGVyOmZ1bmN0aW9uKHQpe2lmKCEodC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg+MSkpe3ZhciBlPXQuY3VycmVudFRhcmdldCxuPXQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WC10aGlzLnN0YXJ0UG9zLngscj10LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFktdGhpcy5zdGFydFBvcy55OyhlPT09dGhpcy5tYXNrRG9tfHxlPT09dGhpcy5oYW5kbGVyZG9tfHxlPT09dGhpcy5jb250ZW50RG9tJiZ0aGlzLmdldFRvdWNoUGFyZW50U2Nyb2xsKGUsdC50YXJnZXQsbixyKSkmJnQucHJldmVudERlZmF1bHQoKX19LHRybmFzaXRpb25FbmQ6ZnVuY3Rpb24odCl7KDAsQy5yZW1vdmVFdmVudExpc3RlbmVyKSh0LnRhcmdldCxDLnRyYW5zaXRpb25FbmQsdGhpcy50cm5hc2l0aW9uRW5kKSx0LnRhcmdldC5zdHlsZS50cmFuc2l0aW9uPSIifSxkZWZhdWx0R2V0Q29udGFpbmVyOmZ1bmN0aW9uKCl7aWYoTSlyZXR1cm4gbnVsbDt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtyZXR1cm4gdGhpcy5wYXJlbnQuYXBwZW5kQ2hpbGQodCksdGhpcy53cmFwcGVyQ2xhc3NOYW1lJiYodC5jbGFzc05hbWU9dGhpcy53cmFwcGVyQ2xhc3NOYW1lKSx0fX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50c1swXSxuPXRoaXMuJHByb3BzLHI9bi5nZXRDb250YWluZXIsaT1uLndyYXBwZXJDbGFzc05hbWUsYT10aGlzLmdldE9wZW4oKTtBW3RoaXMuZHJhd2VySWRdPWE/dGhpcy5jb250YWluZXI6YTt2YXIgcz10aGlzLmdldENoaWxkVG9SZW5kZXIoISF0aGlzLnNGaXJzdEVudGVyJiZhKTtpZighcil7dmFyIHU9W3tuYW1lOiJhbnQtcmVmIix2YWx1ZTpmdW5jdGlvbihlKXt0LmNvbnRhaW5lcj1lfX1dO3JldHVybiBlKCJkaXYiLCgwLG9bImRlZmF1bHQiXSkoW3tjbGFzczppfSx7ZGlyZWN0aXZlczp1fV0pLFtzXSl9cmV0dXJuIHRoaXMuY29udGFpbmVyJiYoYXx8dGhpcy5zRmlyc3RFbnRlcik/ZShPWyJkZWZhdWx0Il0se2F0dHJzOntwYXJlbnQ6dGhpcyx2aXNpYmxlOiEwLGF1dG9Nb3VudDohMCxhdXRvRGVzdHJveTohMSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sZ2V0Q29udGFpbmVyOnRoaXMuZ2V0U2VsZkNvbnRhaW5lcixjaGlsZHJlbjpmdW5jdGlvbihlKXt2YXIgbj1lLnJlbmRlckNvbXBvbmVudCxyPWUucmVtb3ZlQ29udGFpbmVyO3JldHVybiB0LnJlbmRlckNvbXBvbmVudD1uLHQucmVtb3ZlQ29udGFpbmVyPXIsbnVsbH19fSk6bnVsbH19O2VbImRlZmF1bHQiXT1rfSxmODkzOmZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9e2RlZmF1bHQ6bigiZjkyMSIpLF9fZXNNb2R1bGU6ITB9fSxmOGFmOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uKCIyNDc0Iik7ZnVuY3Rpb24gbyh0KXt2YXIgZT1uZXcgdC5jb25zdHJ1Y3Rvcih0LmJ5dGVMZW5ndGgpO3JldHVybiBuZXcgcihlKS5zZXQobmV3IHIodCkpLGV9dC5leHBvcnRzPW99LGY5MjE6ZnVuY3Rpb24odCxlLG4pe24oIjAxNGIiKSxuKCJjMjA3IiksbigiNjlkMyIpLG4oIjc2NWQiKSx0LmV4cG9ydHM9bigiNTg0YSIpLlN5bWJvbH0sZjlkNzpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dDpbdF19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuZGF0YVRvQXJyYXk9cixlLmFkZEV2ZW50TGlzdGVuZXI9YSxlLnJlbW92ZUV2ZW50TGlzdGVuZXI9cyxlLnRyYW5zZm9ybUFyZ3VtZW50cz11O3ZhciBvPXt0cmFuc2l0aW9uOiJ0cmFuc2l0aW9uZW5kIixXZWJraXRUcmFuc2l0aW9uOiJ3ZWJraXRUcmFuc2l0aW9uRW5kIixNb3pUcmFuc2l0aW9uOiJ0cmFuc2l0aW9uZW5kIixPVHJhbnNpdGlvbjoib1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQifSxpPWUudHJhbnNpdGlvblN0cj1PYmplY3Qua2V5cyhvKS5maWx0ZXIoZnVuY3Rpb24odCl7aWYoInVuZGVmaW5lZCI9PT10eXBlb2YgZG9jdW1lbnQpcmV0dXJuITE7dmFyIGU9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImh0bWwiKVswXTtyZXR1cm4gdCBpbihlP2Uuc3R5bGU6e30pfSlbMF07ZS50cmFuc2l0aW9uRW5kPW9baV07ZnVuY3Rpb24gYSh0LGUsbixyKXt0LmFkZEV2ZW50TGlzdGVuZXI/dC5hZGRFdmVudExpc3RlbmVyKGUsbixyKTp0LmF0dGFjaEV2ZW50JiZ0LmF0dGFjaEV2ZW50KCJvbiIrZSxuKX1mdW5jdGlvbiBzKHQsZSxuLHIpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcj90LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxuLHIpOnQuYXR0YWNoRXZlbnQmJnQuZGV0YWNoRXZlbnQoIm9uIitlLG4pfWZ1bmN0aW9uIHUodCxlKXt2YXIgbj12b2lkIDA7cmV0dXJuIG49ImZ1bmN0aW9uIj09PXR5cGVvZiB0P3QoZSk6dCxBcnJheS5pc0FycmF5KG4pPzI9PT1uLmxlbmd0aD9uOltuWzBdLG5bMV1dOltuXX1lLmlzTnVtZXJpYz1mdW5jdGlvbih0KXtyZXR1cm4haXNOYU4ocGFyc2VGbG9hdCh0KSkmJmlzRmluaXRlKHQpfX0sZmEyMTpmdW5jdGlvbih0LGUsbil7dmFyIHI9bigiNzUzMCIpLG89bigiMmRjYiIpLGk9bigiZWFjNSIpO2Z1bmN0aW9uIGEodCl7cmV0dXJuImZ1bmN0aW9uIiE9dHlwZW9mIHQuY29uc3RydWN0b3J8fGkodCk/e306cihvKHQpKX10LmV4cG9ydHM9YX0sZmIxNTpmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByOyhuLnIoZSksInVuZGVmaW5lZCIhPT10eXBlb2Ygd2luZG93KSYmKG4oImY2ZmQiKSwocj13aW5kb3cuZG9jdW1lbnQuY3VycmVudFNjcmlwdCkmJihyPXIuc3JjLm1hdGNoKC8oLitcLylbXlwvXStcLmpzKFw/LiopPyQvKSkmJihuLnA9clsxXSkpO3ZhciBvPW4oIjI2MzgiKSxpPW4ubihvKSxhPW4oIjI2OGYiKSxzPW4ubihhKSx1PW4oImUyNjUiKSxjPW4ubih1KSxmPW4oImE0YmIiKSxsPW4ubihmKSxkPW4oIjg1ZjIiKSxwPW4ubihkKTtmdW5jdGlvbiBoKHQsZSxuKXtyZXR1cm4gZSBpbiB0P3AoKSh0LGUse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPW4sdH1mdW5jdGlvbiB2KHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPW51bGwhPWFyZ3VtZW50c1tlXT9hcmd1bWVudHNbZV06e30scj1sKCkobik7ImZ1bmN0aW9uIj09PXR5cGVvZiBjLmEmJihyPXIuY29uY2F0KGMoKShuKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHMoKShuLHQpLmVudW1lcmFibGV9KSkpLHIuZm9yRWFjaChmdW5jdGlvbihlKXtoKHQsZSxuW2VdKX0pfXJldHVybiB0fWZ1bmN0aW9uIG0odCxlKXtpZihudWxsPT10KXJldHVybnt9O3ZhciBuLHIsbz17fSxpPWwoKSh0KTtmb3Iocj0wO3I8aS5sZW5ndGg7cisrKW49aVtyXSxlLmluZGV4T2Yobik+PTB8fChvW25dPXRbbl0pO3JldHVybiBvfWZ1bmN0aW9uIHkodCxlKXtpZihudWxsPT10KXJldHVybnt9O3ZhciBuLHIsbz1tKHQsZSk7aWYoYy5hKXt2YXIgaT1jKCkodCk7Zm9yKHI9MDtyPGkubGVuZ3RoO3IrKyluPWlbcl0sZS5pbmRleE9mKG4pPj0wfHxPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodCxuKSYmKG9bbl09dFtuXSl9cmV0dXJuIG99dmFyIGI9bigiZjc3NyIpLGc9bi5uKGIpLHc9bigiNjIxOCIpLHg9bi5uKHcpLE89KG4oIjcxMGQiKSxuKCI3M2M4IikpLFQ9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0O2lmKCJhbGwiPT10KXJldHVybiAwO3ZhciByPXQ7QXJyYXkuaXNBcnJheSh0KXx8KHI9W3RdKTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIGk9cltvXS5zbGljZSgxKSxhPXIubGVuZ3RoLW87aWYobi5jbGFzc05hbWUuaW5kZXhPZihpKT49MCl7Zm9yKHZhciBzPVtdLHU9MDt1PGE7dSsrKXMucHVzaCgxMDAqKGEtdSkpO3JldHVybiAwPT1zLmxlbmd0aD9zWzBdOnN9fXJldHVybiAwfX0saj17bmFtZToiQnJhbkRyYXdlciIscHJvcHM6eC5hLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aXNWaXNpYmxlOnRoaXMuZGVmYXVsdE9wZW4saXNGaXJzdEVudGVyOnRoaXMuZmlyc3RFbnRlcixkZXN0cm95T25DbG9zZTohMSx0aW1lb3V0Om51bGx9fSxtZXRob2RzOntzaG93OmZ1bmN0aW9uKCl7dGhpcy5kZXN0cm95T25DbG9zZT0hMSx0aGlzLmlzVmlzaWJsZT0hMH0sY2xvc2U6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuaXNWaXNpYmxlPSExLHRoaXMuaXNGaXJzdEVudGVyPSExLGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpLHRoaXMudGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5kZXN0cm95T25DbG9zZT0hMCx0LiRmb3JjZVVwZGF0ZSgpfSwzMDApfSxvbk1hc2tDbGljazpmdW5jdGlvbih0KXt0aGlzLmNsb3NlKHQpfX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzWzBdLGU9T2JqZWN0KE9bImdldE9wdGlvblByb3BzIl0pKHRoaXMpLG49KGUub3BlbixlLmdldENvbnRhaW5lcixlLmhhbmRsZXIsZS5sZXZlbCkscj0oZS5sZXZlbE1vdmUsZS5maXJzdEVudGVyLHkoZSxbIm9wZW4iLCJnZXRDb250YWluZXIiLCJoYW5kbGVyIiwibGV2ZWwiLCJsZXZlbE1vdmUiLCJmaXJzdEVudGVyIl0pKSxvPSIjYXBwIixhPXtwcm9wczp2KHtvcGVuOnRoaXMuaXNWaXNpYmxlLGdldENvbnRhaW5lcjpvLGhhbmRsZXI6ITEsbGV2ZWxNb3ZlOlQobiksZmlyc3RFbnRlcjp0aGlzLmlzRmlyc3RFbnRlcixsZXZlbDpufSxyKSxvbjp2KHttYXNrQ2xpY2s6dGhpcy5vbk1hc2tDbGlja30sdGhpcy4kbGlzdGVuZXJzKX07cmV0dXJuIHQoImRpdiIse2NsYXNzOiJicmFuLWRyYXdlciJ9LFt0aGlzLiRzY29wZWRTbG90cy50cmlnZ2VyKHtwYXJlbnQ6dGhpc30pLCF0aGlzLmRlc3Ryb3lPbkNsb3NlJiZ0KGcuYSxpKCkoW3t9LGFdKSxbdGhpcy4kc2NvcGVkU2xvdHMuZHJhd2VyKHtwYXJlbnQ6dGhpc30pXSldKX19LF89bigiZTFiYyIpLFA9bi5uKF8pLEM9KG4oIjNiMTEiKSx7bmFtZToiQnJhblBvcG92ZXIiLHByb3BzOlAuYS5wcm9wcyxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2lzVmlzaWJsZTp0aGlzLmRlZmF1bHRWaXNpYmxlfX0sbWV0aG9kczp7fSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHNbMF0sZT1PYmplY3QoT1siZ2V0T3B0aW9uUHJvcHMiXSkodGhpcyksbj0oZS5kZXN0cm95VG9vbHRpcE9uSGlkZSxlLmdldFRvb2x0aXBDb250YWluZXIseShlLFsiZGVzdHJveVRvb2x0aXBPbkhpZGUiLCJnZXRUb29sdGlwQ29udGFpbmVyIl0pKSxyPWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhcHAiKX0sbz17cHJvcHM6dih7ZGVzdHJveVRvb2x0aXBPbkhpZGU6ITAsZ2V0VG9vbHRpcENvbnRhaW5lcjpyfSxuKSxvbjp2KHt9LHRoaXMuJGxpc3RlbmVycyl9LGE9dGhpcy4kc2NvcGVkU2xvdHMub3ZlcmxheTtyZXR1cm4gdChQLmEsaSgpKFt7fSxvXSksW2EmJnQoInRlbXBsYXRlIix7c2xvdDoib3ZlcmxheSJ9LFthKHtwYXJlbnQ6dGhpc30pXSksdCgidGVtcGxhdGUiLHtzbG90OiJkZWZhdWx0In0sW3RoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQoe3BhcmVudDp0aGlzfSldKV0pfX0pLEU9bigiOGJiZiIpLFM9bi5uKEUpO3dpbmRvdy5WdWV8fCh3aW5kb3cuVnVlPVMuYSksKHdpbmRvdy5fX2JyYW5WdWVDb21wb25lbnRSZWdpc3RlcnM9d2luZG93Ll9fYnJhblZ1ZUNvbXBvbmVudFJlZ2lzdGVyc3x8W10pLnB1c2goZnVuY3Rpb24odCl7dC5jb21wb25lbnQoImJyYW4tZHJhd2VyIixqKSx0LmNvbXBvbmVudCgiYnJhbi1wb3BvdmVyIixDKX0pO3ZhciBBPXtCcmFuRHJhd2VyOmosQnJhblBvcG92ZXI6Q307ZVsiZGVmYXVsdCJdPUF9LGZiYTU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oImNiNWEiKTtmdW5jdGlvbiBvKHQpe3JldHVybiByKHRoaXMuX19kYXRhX18sdCk+LTF9dC5leHBvcnRzPW99LGZkZTQ6ZnVuY3Rpb24odCxlLG4pe24oImJmOTAiKTt2YXIgcj1uKCI1ODRhIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiByLmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGUpfX19KVsiZGVmYXVsdCJdfSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyYW5vdmVybGF5LnVtZC5taW4uanMubWFw\"")
	packr.PackJSONBytes("./overlayjs/dist/", "branoverlay.umd.min.js.map", "\"\"")
}
