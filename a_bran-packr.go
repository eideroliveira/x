// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package bran

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./corejs/dist/", "index.html", "\"PCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD11dGYtOD48bWV0YSBodHRwLWVxdWl2PVgtVUEtQ29tcGF0aWJsZSBjb250ZW50PSJJRT1lZGdlIj48bWV0YSBuYW1lPXZpZXdwb3J0IGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiPjx0aXRsZT5WdWUgQXBwPC90aXRsZT48bGluayBocmVmPS9qcy9hcHAuanMgcmVsPXByZWxvYWQgYXM9c2NyaXB0PjxsaW5rIGhyZWY9L2pzL2NodW5rLXZlbmRvcnMuanMgcmVsPXByZWxvYWQgYXM9c2NyaXB0PjwvaGVhZD48Ym9keT48ZGl2IGlkPWFwcD48L2Rpdj48c2NyaXB0IHNyYz0vanMvY2h1bmstdmVuZG9ycy5qcz48L3NjcmlwdD48c2NyaXB0IHNyYz0vanMvYXBwLmpzPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+\"")
	packr.PackJSONBytes("./corejs/dist/", "js/app.js", "\"KGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7Zm9yKHZhciByLGksYz10WzBdLHU9dFsxXSxkPXRbMl0scz0wLGY9W107czxjLmxlbmd0aDtzKyspaT1jW3NdLG9baV0mJmYucHVzaChvW2ldWzBdKSxvW2ldPTA7Zm9yKHIgaW4gdSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodSxyKSYmKGVbcl09dVtyXSk7bCYmbCh0KTt3aGlsZShmLmxlbmd0aClmLnNoaWZ0KCkoKTtyZXR1cm4gYS5wdXNoLmFwcGx5KGEsZHx8W10pLG4oKX1mdW5jdGlvbiBuKCl7Zm9yKHZhciBlLHQ9MDt0PGEubGVuZ3RoO3QrKyl7Zm9yKHZhciBuPWFbdF0scj0hMCxjPTE7YzxuLmxlbmd0aDtjKyspe3ZhciB1PW5bY107MCE9PW9bdV0mJihyPSExKX1yJiYoYS5zcGxpY2UodC0tLDEpLGU9aShpLnM9blswXSkpfXJldHVybiBlfXZhciByPXt9LG89e2FwcDowfSxhPVtdO2Z1bmN0aW9uIGkodCl7aWYoclt0XSlyZXR1cm4gclt0XS5leHBvcnRzO3ZhciBuPXJbdF09e2k6dCxsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3RdLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLGkpLG4ubD0hMCxuLmV4cG9ydHN9aS5tPWUsaS5jPXIsaS5kPWZ1bmN0aW9uKGUsdCxuKXtpLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxpLnI9ZnVuY3Rpb24oZSl7InVuZGVmaW5lZCIhPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6Ik1vZHVsZSJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSl9LGkudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9aShlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmIm9iamVjdCI9PT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoaS5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJkZWZhdWx0Iix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiYic3RyaW5nIiE9dHlwZW9mIGUpZm9yKHZhciByIGluIGUpaS5kKG4scixmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLHIpKTtyZXR1cm4gbn0saS5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlWyJkZWZhdWx0Il19OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBpLmQodCwiYSIsdCksdH0saS5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxpLnA9Ii8iO3ZhciBjPXdpbmRvd1sid2VicGFja0pzb25wIl09d2luZG93WyJ3ZWJwYWNrSnNvbnAiXXx8W10sdT1jLnB1c2guYmluZChjKTtjLnB1c2g9dCxjPWMuc2xpY2UoKTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl0KGNbZF0pO3ZhciBsPXU7YS5wdXNoKFswLCJjaHVuay12ZW5kb3JzIl0pLG4oKX0pKHswOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9bigiY2Q0OSIpfSxjZDQ5OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7bi5yKHQpO24oIjZiNTQiKSxuKCJhNDgxIik7dmFyIHI9bigiY2ViYyIpLG89bigiYTRiYiIpLGE9bi5uKG8pLGk9KG4oIjM4NmQiKSxuKCJmNDk5IikpLGM9bi5uKGkpLHU9KG4oImNhZGYiKSxuKCI1NTFjIiksbigiZjc1MSIpLG4oIjA5N2QiKSxuKCJhMDI2IikpLGQ9bigiNWQ3MyIpLGw9bi5uKGQpO24oIjg1MTIiKTtmdW5jdGlvbiBzKGUpe3ZhciB0PW5ldyBGb3JtRGF0YTtyZXR1cm4gZT8oZih0LGUpLHQpOnR9ZnVuY3Rpb24gZihlLHQpe2lmKHQpZm9yKHZhciBuPTAscj1hKCkodCk7bjxyLmxlbmd0aDtuKyspe3ZhciBvPXJbbl07ZS5kZWxldGUobyk7dmFyIGk9ITAsYz0hMSx1PXZvaWQgMDt0cnl7Zm9yKHZhciBkLHM9bCgpKHRbb10pOyEoaT0oZD1zLm5leHQoKSkuZG9uZSk7aT0hMCl7dmFyIGY9ZC52YWx1ZTtlLmFwcGVuZChvLGYpfX1jYXRjaChwKXtjPSEwLHU9cH1maW5hbGx5e3RyeXtpfHxudWxsPT1zLnJldHVybnx8cy5yZXR1cm4oKX1maW5hbGx5e2lmKGMpdGhyb3cgdX19fX12YXIgcD1uKCJiMDQ3Iiksdj1uLm4ocCksaD0obigiNmQ5MyIpLG4oIjcyYmYiKSkseT1uLm4oaCk7dVsiYSJdLmNvbmZpZy5wcm9kdWN0aW9uVGlwPSEwO3ZhciBiPXMod2luZG93Ll9fc2VydmVyU2lkZURhdGFfXy5zdGF0ZXMpO2Z1bmN0aW9uIG0oZSx0KXt2YXIgbj1jKCkoe2V2ZW50RnVuY0lkOmUsZXZlbnQ6dH0pLG89d2luZG93LmxvY2F0aW9uLnNlYXJjaCxpPWUucHVzaFN0YXRlO2lmKGkpe3ZhciB1PSIiO2lmKGEoKShpKS5sZW5ndGg+MCl7dmFyIGQ9eS5hLnBhcnNlKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO3U9eS5hLnN0cmluZ2lmeShPYmplY3QoclsiYSJdKSh7fSxkLGkpKSx1Lmxlbmd0aD4wJiYodT0iPyIuY29uY2F0KHUpKX13aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoaSwiIix3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUrdSksbz11fXJldHVybiBiLnNldCgiX19ldmVudF9kYXRhX18iLG4pLGZldGNoKCJfX2V4ZWN1dGVfZXZlbnRfXy8iK2UuaWQrbyx7bWV0aG9kOiJQT1NUIixib2R5OmJ9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmpzb24oKX0pLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3RhdGVzJiZmKGIsZS5zdGF0ZXMpLGUucmVkaXJlY3RVUkwmJndpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGUucmVkaXJlY3RVUkwpLGUuc2NoZW1hJiZnKGUpLGV9KX1mdW5jdGlvbiBnKGUpe3ZhciB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNhcHAiKTtpZih0JiYodC5pbm5lckhUTUw9ZS5zY2hlbWEpLGUuc3R5bGVzKXt2YXIgbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjbWFpbl9zdHlsZXMiKTtuJiZuLnBhcmVudE5vZGUmJm4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIiksbi5zZXRBdHRyaWJ1dGUoInR5cGUiLCJ0ZXh0L2NzcyIpLG4uc2V0QXR0cmlidXRlKCJpZCIsIm1haW5fc3R5bGVzIiksbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlLnN0eWxlcykpLGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKG4sdCl9aWYoZS5zY3JpcHRzKXt2YXIgcj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjbWFpbl9zY3JpcHRzIik7ciYmci5wYXJlbnROb2RlJiZyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocikscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSxyLnNldEF0dHJpYnV0ZSgiaWQiLCJtYWluX3NjcmlwdHMiKSxyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUuc2NyaXB0cykpLGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKHIsdCl9eCgpfWZ1bmN0aW9uIHcoZSl7dmFyIHQ9e307cmV0dXJuIGUmJmUudGFyZ2V0PyhlLnRhcmdldC5jaGVja2VkJiYodC5jaGVja2VkPWUudGFyZ2V0LmNoZWNrZWQpLHZvaWQgMCE9PWUudGFyZ2V0LnZhbHVlJiYodC52YWx1ZT1lLnRhcmdldC52YWx1ZSksdCk6ZS5rZXk/KHQudmFsdWU9ZS5rZXksdCk6KCJzdHJpbmciIT09dHlwZW9mIGUmJiJudW1iZXIiIT09dHlwZW9mIGV8fCh0LnZhbHVlPWUudG9TdHJpbmcoKSksdCl9dmFyIF89digpKG0sODAwKTtmdW5jdGlvbiBTKGUsdCxuKXt0JiZiLnNldCh0LG4udGFyZ2V0LnZhbHVlKSxlJiZfKGUsdyhuKSl9ZnVuY3Rpb24geCgpe25ldyB1WyJhIl0oe2VsOiIjYXBwIixkYXRhOnt9LG1ldGhvZHM6e29uY2xpY2s6ZnVuY3Rpb24oZSx0KXttKGUsdyh0KSl9LG9uaW5wdXQ6U319KX14KCl9fSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC5qcy5tYXA=\"")
	packr.PackJSONBytes("./corejs/dist/", "js/app.js.map", "\"\"")
	packr.PackJSONBytes("./corejs/dist/", "js/chunk-vendors.js", "\"\"")
	packr.PackJSONBytes("./corejs/dist/", "js/chunk-vendors.js.map", "\"eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5LXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zvcm1kYXRhLXBvbHlmaWxsL2Zvcm1kYXRhLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NwbGl0LW9uLWZpcnN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyJdLCJuYW1lcyI6WyJTeW1ib2wiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwib2JqZWN0UHJvdG8iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwidW5kZWZpbmVkIiwiZ2V0UmF3VGFnIiwidmFsdWUiLCJpc093biIsImNhbGwiLCJ0YWciLCJ1bm1hc2tlZCIsImUiLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2xvYmFsIiwiaGFzIiwiREVTQ1JJUFRPUlMiLCIkZXhwb3J0IiwicmVkZWZpbmUiLCJNRVRBIiwiS0VZIiwiJGZhaWxzIiwic2hhcmVkIiwic2V0VG9TdHJpbmdUYWciLCJ1aWQiLCJ3a3MiLCJ3a3NFeHQiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsImlzQXJyYXkiLCJhbk9iamVjdCIsImlzT2JqZWN0IiwidG9JT2JqZWN0IiwidG9QcmltaXRpdmUiLCJjcmVhdGVEZXNjIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkR09QRCIsIiREUCIsIiRrZXlzIiwiZ09QRCIsImYiLCJkUCIsImdPUE4iLCIkU3ltYm9sIiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIlBST1RPVFlQRSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsImlzRW51bSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiT2JqZWN0UHJvdG8iLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJnZXQiLCJ0aGlzIiwiYSIsIml0Iiwia2V5IiwiRCIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJfayIsImlzU3ltYm9sIiwiaXRlcmF0b3IiLCIkZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiJGRlZmluZVByb3BlcnRpZXMiLCJQIiwia2V5cyIsImkiLCJsIiwibGVuZ3RoIiwiJGNyZWF0ZSIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJuYW1lcyIsInB1c2giLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJUeXBlRXJyb3IiLCJhcmd1bWVudHMiLCIkc2V0IiwiY29uZmlndXJhYmxlIiwic2V0IiwibmFtZSIsIkciLCJXIiwiRiIsImVzNlN5bWJvbHMiLCJzcGxpdCIsImoiLCJ3ZWxsS25vd25TeW1ib2xzIiwic3RvcmUiLCJrIiwiUyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydGllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsImFyZ3MiLCJhcHBseSIsInZhbHVlT2YiLCJNYXRoIiwiTElCUkFSWSIsImhpZGUiLCJJdGVyYXRvcnMiLCIkaXRlckNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiSVRFUkFUT1IiLCJCVUdHWSIsIkZGX0lURVJBVE9SIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJCYXNlIiwiTkFNRSIsIkNvbnN0cnVjdG9yIiwibmV4dCIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJtZXRob2RzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwicHJvdG8iLCJUQUciLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJ0b0ludGVnZXIiLCJkZWZpbmVkIiwiVE9fU1RSSU5HIiwidGhhdCIsInBvcyIsImIiLCJzIiwiU3RyaW5nIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsInNsaWNlIiwiYXQiLCJpbmRleCIsInVuaWNvZGUiLCJ3aW5kb3dOYW1lcyIsIndpbmRvdyIsImdldFdpbmRvd05hbWVzIiwiY29yZSIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInByb21pc2VSZXNvbHZlIiwiUiIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJDIiwiUHJvbWlzZSIsImlzRnVuY3Rpb24iLCJ0aGVuIiwieCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJzdGlja3kiLCJlbnVtQnVnS2V5cyIsIk8iLCJtYXgiLCJtaW4iLCJpc09iamVjdExpa2UiLCJnZXRLZXlzIiwiUHJvcGVydGllcyIsIiRhdCIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsInBvaW50IiwiZG9uZSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJjdHgiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJPTlJFQURZU1RBVEVDSEFOR0UiLCJydW4iLCJpZCIsImZuIiwibGlzdGVuZXIiLCJldmVudCIsImRhdGEiLCJGdW5jdGlvbiIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImNsZWFyIiwidHlwZSIsInZhbCIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwicmV0IiwiZmFpbHMiLCJyZWdleHBFeGVjIiwiU1BFQ0lFUyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJleGVjIiwiZ3JvdXBzIiwicmVwbGFjZSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJjb25zdHJ1Y3RvciIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIlJlZ0V4cCIsInN0cmluZyIsImFyZyIsImNvZiIsIkFSRyIsInRyeUdldCIsIlQiLCJCIiwiY2FsbGVlIiwiY2xhc3NvZiIsImdldEl0ZXJhdG9yTWV0aG9kIiwib2JqZWN0VG9TdHJpbmciLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImpvaW4iLCJkUHMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwibHQiLCJndCIsInN0eWxlIiwiZGlzcGxheSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiVVNFX1NZTUJPTCIsIiRleHBvcnRzIiwidW4iLCJ0b09iamVjdCIsIm9iamVjdCIsImRvY3VtZW50RWxlbWVudCIsIkFycmF5UHJvdG8iLCJBcnJheSIsIklPYmplY3QiLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwiYmFzZUdldFRhZyIsImZsYWdzIiwic2FtZVZhbHVlIiwicmVnRXhwRXhlYyIsIlNFQVJDSCIsIiRzZWFyY2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZXMiLCJyeCIsInByZXZpb3VzTGFzdEluZGV4IiwibGFzdEluZGV4IiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJEYXRlIiwiZGVzY3JpcHRvciIsIiRPYmplY3QiLCJkZXNjIiwiZGVmIiwic3RhdCIsImJpdG1hcCIsIndyaXRhYmxlIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJzeW1ib2xzIiwiaXNBcnJheUl0ZXIiLCJ0b0xlbmd0aCIsImdldEl0ZXJGbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJzdGVwIiwiaXRlckZuIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiTEFTVF9JTkRFWCIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsInJlMSIsInJlMiIsIk5QQ0dfSU5DTFVERUQiLCJQQVRDSCIsInJlQ29weSIsIm1hdGNoIiwic291cmNlIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJhRnVuY3Rpb24iLCJhbkluc3RhbmNlIiwiZm9yT2YiLCJ0YXNrIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwidXNlckFnZW50IiwiUFJPTUlTRSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlIiwicmVzb2x2ZSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaW5kZXhPZiIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3QiLCJkb21haW4iLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJjb25zb2xlIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJlcnJvciIsIl9hIiwidiIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfZCIsIl93IiwiJHJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsInIiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJpdGVyIiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJTSEFSRUQiLCJ2ZXJzaW9uIiwibW9kZSIsImNvcHlyaWdodCIsIl9fZSIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIklTX0dMT0JBTCIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsInRhcmdldCIsImV4cFByb3RvIiwiVSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwiZnJvbSIsInNraXBDbG9zaW5nIiwiYXJyIiwiYnVpbHRpbkV4ZWMiLCJweCIsInJhbmRvbSIsImNvbmNhdCIsIklTX1dSQVAiLCJjIiwidmlydHVhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsInRvVXBwZXJDYXNlIiwiaGlkZGVuS2V5cyIsIiRmbGFncyIsImRlZmluZSIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJDb2xsZWN0aW9uIiwic3VwcG9ydCIsInNlYXJjaFBhcmFtcyIsImJsb2IiLCJCbG9iIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsImlzRGF0YVZpZXciLCJvYmoiLCJEYXRhVmlldyIsImlzUHJvdG90eXBlT2YiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJub3JtYWxpemVOYW1lIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwic2hpZnQiLCJIZWFkZXJzIiwiaGVhZGVycyIsIm1hcCIsImZvckVhY2giLCJhcHBlbmQiLCJoZWFkZXIiLCJjb25zdW1lZCIsImJvZHkiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsIm9ubG9hZCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBc1RleHQiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJidWYiLCJ2aWV3IiwiVWludDhBcnJheSIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiYnVmZmVyQ2xvbmUiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsIkVycm9yIiwidGV4dCIsImRlY29kZSIsImpzb24iLCJwYXJzZSIsIm9sZFZhbHVlIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwibm9ybWFsaXplTWV0aG9kIiwibWV0aG9kIiwidXBjYXNlZCIsIlJlcXVlc3QiLCJpbnB1dCIsIm9wdGlvbnMiLCJ1cmwiLCJjcmVkZW50aWFscyIsInNpZ25hbCIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlSGVhZGVycyIsInJhd0hlYWRlcnMiLCJwcmVQcm9jZXNzZWRIZWFkZXJzIiwibGluZSIsInBhcnRzIiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJjbG9uZSIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImxvY2F0aW9uIiwiRE9NRXhjZXB0aW9uIiwibWVzc2FnZSIsInN0YWNrIiwiZmV0Y2giLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZW5kIiwicG9seWZpbGwiLCJzdHJpY3RVcmlFbmNvZGUiLCJkZWNvZGVDb21wb25lbnQiLCJzcGxpdE9uRmlyc3QiLCJlbmNvZGVyRm9yQXJyYXlGb3JtYXQiLCJhcnJheUZvcm1hdCIsImVuY29kZSIsInBhcnNlckZvckFycmF5Rm9ybWF0IiwiYWNjdW11bGF0b3IiLCJuZXdWYWx1ZSIsInN0cmljdCIsImtleXNTb3J0ZXIiLCJzb3J0IiwiTnVtYmVyIiwiZXh0cmFjdCIsInF1ZXJ5U3RhcnQiLCJhc3NpZ24iLCJmb3JtYXR0ZXIiLCJwYXJhbSIsInJlZHVjZSIsIkJvb2xlYW4iLCJmaWx0ZXIiLCJwYXJzZVVybCIsImhhc2hTdGFydCIsInF1ZXJ5IiwiJGFzc2lnbiIsIkEiLCJLIiwiYUxlbiIsIl9fZyIsImdldEl0ZXJhdG9yIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImhlYWQiLCJsYXN0IiwiZmx1c2giLCJwYXJlbnQiLCJuYXZpZ2F0b3IiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ5IiwibSIsIm4iLCJwIiwidSIsInNldFByb3RvdHlwZU9mIiwieiIsIl9fcHJvdG9fXyIsImgiLCJvIiwiZyIsInJldmVyc2UiLCJIIiwiSSIsIkoiLCJkIiwidyIsIkwiLCJNIiwicmV0dXJuIiwiTiIsIlEiLCJGaWxlIiwibGFzdE1vZGlmaWVkIiwiViIsInNlbmRCZWFjb24iLCJsYXN0TW9kaWZpZWREYXRlIiwiWCIsImVsZW1lbnRzIiwiZGlzYWJsZWQiLCJmaWxlcyIsInNlbGVjdGVkIiwiY2hlY2tlZCIsInEiLCJ0IiwicG9wIiwiZ2V0QWxsIiwiX2FzTmF0aXZlIiwiX2Jsb2IiLCJZIiwiSUU4X0RPTV9ERUZJTkUiLCJBdHRyaWJ1dGVzIiwiVU5TQ09QQUJMRVMiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzRmFsc2UiLCJpc1ByaW1pdGl2ZSIsIl90b1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidG9OdW1iZXIiLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImxpc3QiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwiaXRlbSIsInNwbGljZSIsImhhc093biIsImNhY2hlZCIsImNhY2hlIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiXyIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsInBvbHlmaWxsQmluZCIsImJvdW5kRm4iLCJfbGVuZ3RoIiwibmF0aXZlQmluZCIsImJpbmQiLCJ0b0FycmF5Iiwic3RhcnQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwibm9vcCIsIm5vIiwiaWRlbnRpdHkiLCJnZW5TdGF0aWNLZXlzIiwibW9kdWxlcyIsInN0YXRpY0tleXMiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlUmVnRXhwIiwiaXNSZXNlcnZlZCIsImJhaWxSRSIsInBhcnNlUGF0aCIsInBhdGgiLCJzZWdtZW50cyIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJTZXQiLCJhZGQiLCJ3YXJuIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwiY2hpbGRyZW4iLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJjcmVhdGVFbXB0eVZOb2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwib3JpZ2luYWwiLCJsZW4iLCJpbnNlcnRlZCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJkZWwiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiZGVkdXBlSG9va3MiLCJob29rcyIsIm1lcmdlQXNzZXRzIiwiaG9vayIsImtleSQxIiwicHJvcHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJkZWZhdWx0IiwiJG9wdGlvbnMiLCJfcHJvcHMiLCJnZXRUeXBlIiwiaXNTYW1lVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJoYW5kbGVFcnJvciIsImluZm8iLCJjdXIiLCIkcGFyZW50IiwiZXJyb3JDYXB0dXJlZCIsImNhcHR1cmUiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsInRpbWVyRnVuYyIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJvYnNlcnZlciIsInRleHROb2RlIiwiY2IiLCJfcmVzb2x2ZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjcmVhdGVGbkludm9rZXIiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiYXR0cnMiLCJhbHRLZXkiLCJjaGVja1Byb3AiLCJoYXNoIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwicmVuZGVyIiwicmVuZGVyU2xvdCIsImZhbGxiYWNrIiwiYmluZE9iamVjdCIsIm5vZGVzIiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwidHJlZSIsInN0YXRpY1JlbmRlckZucyIsIl9yZW5kZXJQcm94eSIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9sIiwiX3EiLCJfbSIsIl9mIiwiX2IiLCJfZSIsIl91IiwiX2ciLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIl9jb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiX3Njb3BlSWQiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJjaWQiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJmdW5jdGlvbmFsIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiX2NyZWF0ZUVsZW1lbnQiLCIkdm5vZGUiLCJwcmUiLCJhcHBseU5TIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJmb3JjZSIsImNsYXNzIiwiaW5pdFJlbmRlciIsIl92bm9kZSIsInBhcmVudFZub2RlIiwiX3JlbmRlckNoaWxkcmVuIiwicGFyZW50RGF0YSIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJNaXhpbiIsIlZ1ZSIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJlbnN1cmVDdG9yIiwiY29tcCIsImJhc2UiLCJfX2VzTW9kdWxlIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiaW5pdEV2ZW50cyIsIl9ldmVudHMiLCJfaGFzSG9va0V2ZW50IiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwib2xkTGlzdGVuZXJzIiwiZXZlbnRzTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsIiRlbWl0Iiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpbml0TGlmZWN5Y2xlIiwiJGNoaWxkcmVuIiwiJHJvb3QiLCIkcmVmcyIsIl93YXRjaGVyIiwiX2luYWN0aXZlIiwiX2RpcmVjdEluYWN0aXZlIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsIm1vdW50Q29tcG9uZW50IiwidXBkYXRlQ29tcG9uZW50IiwiV2F0Y2hlciIsImJlZm9yZSIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJoYW5kbGVycyIsImFjdGl2YXRlZENoaWxkcmVuIiwid2FpdGluZyIsImZsdXNoaW5nIiwicmVzZXRTY2hlZHVsZXJTdGF0ZSIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsImNhbGxVcGRhdGVkSG9va3MiLCJxdWV1ZVdhdGNoZXIiLCJ1aWQkMiIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJkZWVwIiwidXNlciIsImxhenkiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsImNsZWFudXBEZXBzIiwidG1wIiwiZXZhbHVhdGUiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJpbml0U3RhdGUiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsImluaXREYXRhIiwiaW5pdENvbXB1dGVkIiwiaW5pdFdhdGNoIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVpZCQzIiwiaW5pdE1peGluIiwiX2luaXQiLCJfdWlkIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsIm1peGluIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwiQ29tcCIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsInBhdHRlcm5UeXBlcyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJyZWYkMSIsInBhcnNlSW50IiwiYnVpbHRJbkNvbXBvbmVudHMiLCJpbml0R2xvYmFsQVBJIiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwiZGVsZXRlIiwib2JzZXJ2YWJsZSIsInNzckNvbnRleHQiLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsImlzRmFsc3lBdHRyVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsImlzUHJlVGFnIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiaXNUZXh0SW5wdXRUeXBlIiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZUVsZW1lbnQkMSIsInRhZ05hbWUiLCJtdWx0aXBsZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwibm9kZU9wcyIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJlbXB0eU5vZGVBdCIsImNyZWF0ZVJtQ2IiLCJjaGlsZEVsbSIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwicm0iLCJ1cGRhdGVDaGlsZHJlbiIsIm9sZENoIiwibmV3Q2giLCJyZW1vdmVPbmx5Iiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJwYXRjaFZub2RlIiwiZmluZElkeEluT2xkIiwiZW5kIiwiaHlkcmF0ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwicmF3TmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsImtsYXNzIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsInByZXYiLCJmaWx0ZXJzIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInB1c2hGaWx0ZXIiLCJ3cmFwRmlsdGVyIiwiYmFzZVdhcm4iLCJtc2ciLCJyYW5nZSIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwiZHluYW1pYyIsInJhbmdlU2V0SXRlbSIsInBsYWluIiwiYWRkQXR0ciIsImR5bmFtaWNBdHRycyIsImFkZFJhd0F0dHIiLCJhdHRyc01hcCIsImF0dHJzTGlzdCIsImFkZERpcmVjdGl2ZSIsImlzRHluYW1pY0FyZyIsInByZXBlbmRNb2RpZmllck1hcmtlciIsImFkZEhhbmRsZXIiLCJpbXBvcnRhbnQiLCJldmVudHMiLCJyaWdodCIsIm1pZGRsZSIsIm5hdGl2ZSIsIm5hdGl2ZUV2ZW50cyIsIm5ld0hhbmRsZXIiLCJnZXRSYXdCaW5kaW5nQXR0ciIsInJhd0F0dHJzTWFwIiwiZ2V0QmluZGluZ0F0dHIiLCJnZXRTdGF0aWMiLCJkeW5hbWljVmFsdWUiLCJnZXRBbmRSZW1vdmVBdHRyIiwic3RhdGljVmFsdWUiLCJyZW1vdmVGcm9tTWFwIiwiZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgiLCJnZW5Db21wb25lbnRNb2RlbCIsIm51bWJlciIsImJhc2VWYWx1ZUV4cHJlc3Npb24iLCJ2YWx1ZUV4cHJlc3Npb24iLCJhc3NpZ25tZW50IiwiZ2VuQXNzaWdubWVudENvZGUiLCJwYXJzZU1vZGVsIiwibGFzdEluZGV4T2YiLCJlb2YiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJpbkJyYWNrZXQiLCJzdHJpbmdRdW90ZSIsInRhcmdldCQxIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsIl93YXJuIiwiZ2VuU2VsZWN0IiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJnZW5EZWZhdWx0TW9kZWwiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJzZWxlY3RlZFZhbCIsImNvZGUiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsIm5vcm1hbGl6ZUV2ZW50cyIsImNoYW5nZSIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsImNoaWxkTm9kZXMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiX3ZNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJsaXN0RGVsaW1pdGVyIiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImdldFN0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwidG9nZ2xlRGlzcGxheSIsImNhbmNlbGxlZCIsIl9lbnRlckNiIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwbGF0Zm9ybU1vZHVsZXMiLCJwYXRjaCIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJzb21lIiwibmVlZFJlc2V0IiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsInVuYmluZCIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidXBkYXRlZCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwicGxhdGZvcm1Db21wb25lbnRzIiwiZGVmYXVsdFRhZ1JFIiwicmVnZXhFc2NhcGVSRSIsImJ1aWxkUmVnZXgiLCJkZWxpbWl0ZXJzIiwicGFyc2VUZXh0IiwidGFnUkUiLCJ0b2tlblZhbHVlIiwidG9rZW5zIiwicmF3VG9rZW5zIiwiQGJpbmRpbmciLCJ0cmFuc2Zvcm1Ob2RlIiwiY2xhc3NCaW5kaW5nIiwiZ2VuRGF0YSIsImtsYXNzJDEiLCJ0cmFuc2Zvcm1Ob2RlJDEiLCJzdHlsZUJpbmRpbmciLCJnZW5EYXRhJDEiLCJkZWNvZGVyIiwic3R5bGUkMSIsImhlIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYXR0cmlidXRlIiwiZHluYW1pY0FyZ0F0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJlbmRUYWciLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsImlzUGxhaW5UZXh0RWxlbWVudCIsInJlQ2FjaGUiLCJkZWNvZGluZ01hcCIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJmFtcDsiLCImIzEwOyIsIiYjOTsiLCImIzM5OyIsImVuY29kZWRBdHRyIiwiZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMiLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUiLCJkZWNvZGVBdHRyIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJwYXJzZUhUTUwiLCJsYXN0VGFnIiwiZXhwZWN0SFRNTCIsImlzVW5hcnlUYWckJDEiLCJjYW5CZUxlZnRPcGVuVGFnJCQxIiwiZW5kVGFnTGVuZ3RoIiwic3RhY2tlZFRhZyIsInJlU3RhY2tlZFRhZyIsInJlc3QkMSIsInBhcnNlRW5kVGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJzdGFydFRhZ01hdGNoIiwicGFyc2VTdGFydFRhZyIsImhhbmRsZVN0YXJ0VGFnIiwicmVzdCIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsImxvd2VyQ2FzZWRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsIndhcm4kMiIsInRyYW5zZm9ybXMiLCJwcmVUcmFuc2Zvcm1zIiwicG9zdFRyYW5zZm9ybXMiLCJwbGF0Zm9ybUlzUHJlVGFnIiwicGxhdGZvcm1NdXN0VXNlUHJvcCIsInBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlIiwib25SRSIsImRpclJFIiwiZm9yQWxpYXNSRSIsImZvckl0ZXJhdG9yUkUiLCJzdHJpcFBhcmVuc1JFIiwiZHluYW1pY0FyZ1JFIiwiYXJnUkUiLCJiaW5kUkUiLCJtb2RpZmllclJFIiwic2xvdFJFIiwibGluZUJyZWFrUkUiLCJ3aGl0ZXNwYWNlUkUkMSIsImRlY29kZUhUTUxDYWNoZWQiLCJlbXB0eVNsb3RTY29wZVRva2VuIiwiY3JlYXRlQVNURWxlbWVudCIsIm1ha2VBdHRyc01hcCIsInRlbXBsYXRlIiwiY3VycmVudFBhcmVudCIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJjbG9zZUVsZW1lbnQiLCJlbGVtZW50IiwidHJpbUVuZGluZ1doaXRlc3BhY2UiLCJwcm9jZXNzZWQiLCJwcm9jZXNzRWxlbWVudCIsImlmIiwiZWxzZWlmIiwiZWxzZSIsImFkZElmQ29uZGl0aW9uIiwiYmxvY2siLCJmb3JiaWRkZW4iLCJwcm9jZXNzSWZDb25kaXRpb25zIiwic2xvdFNjb3BlIiwic2xvdFRhcmdldCIsImxhc3ROb2RlIiwiY29tbWVudHMiLCJvdXRwdXRTb3VyY2VSYW5nZSIsInN0YXJ0JDEiLCJndWFyZElFU1ZHQnVnIiwiaXNGb3JiaWRkZW5UYWciLCJwcm9jZXNzUHJlIiwicHJvY2Vzc1Jhd0F0dHJzIiwicHJvY2Vzc0ZvciIsInByb2Nlc3NJZiIsInByb2Nlc3NPbmNlIiwiZW5kJDEiLCJpc1RleHRUYWciLCJwcm9jZXNzS2V5IiwicHJvY2Vzc1JlZiIsInByb2Nlc3NTbG90Q29udGVudCIsInByb2Nlc3NTbG90T3V0bGV0IiwicHJvY2Vzc0NvbXBvbmVudCIsInByb2Nlc3NBdHRycyIsImNoZWNrSW5Gb3IiLCJwYXJzZUZvciIsImluTWF0Y2giLCJhbGlhcyIsIml0ZXJhdG9yTWF0Y2giLCJpdGVyYXRvcjEiLCJpdGVyYXRvcjIiLCJmaW5kUHJldkVsZW1lbnQiLCJjb25kaXRpb24iLCJpZkNvbmRpdGlvbnMiLCJzbG90VGFyZ2V0RHluYW1pYyIsInNsb3RCaW5kaW5nIiwiZ2V0U2xvdE5hbWUiLCJzbG90QmluZGluZyQxIiwiZHluYW1pYyQxIiwic2xvdENvbnRhaW5lciIsInNsb3ROYW1lIiwic3luY0dlbiIsImlzRHluYW1pYyIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJjYW1lbCIsImFyZ01hdGNoIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJwcmVUcmFuc2Zvcm1Ob2RlIiwidHlwZUJpbmRpbmciLCJpZkNvbmRpdGlvbiIsImlmQ29uZGl0aW9uRXh0cmEiLCJoYXNFbHNlIiwiZWxzZUlmQ29uZGl0aW9uIiwiYnJhbmNoMCIsImNsb25lQVNURWxlbWVudCIsImJyYW5jaDEiLCJicmFuY2gyIiwibW9kZWwkMSIsIm1vZHVsZXMkMSIsImlzU3RhdGljS2V5IiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnIiwiZGlyZWN0aXZlcyQxIiwiYmFzZU9wdGlvbnMiLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwiZ2VuU3RhdGljS2V5cyQxIiwib3B0aW1pemUiLCJtYXJrU3RhdGljJDEiLCJtYXJrU3RhdGljUm9vdHMiLCJzdGF0aWMiLCJsJDEiLCJzdGF0aWNJbkZvciIsInN0YXRpY1Jvb3QiLCJpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciIsImZuRXhwUkUiLCJmbkludm9rZVJFIiwic2ltcGxlUGF0aFJFIiwiZXNjIiwidGFiIiwic3BhY2UiLCJ1cCIsImRvd24iLCJrZXlOYW1lcyIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwic3RvcCIsInByZXZlbnQiLCJjdHJsIiwiYWx0IiwibWV0YSIsImdlbkhhbmRsZXJzIiwicHJlZml4Iiwic3RhdGljSGFuZGxlcnMiLCJkeW5hbWljSGFuZGxlcnMiLCJoYW5kbGVyQ29kZSIsImdlbkhhbmRsZXIiLCJpc01ldGhvZFBhdGgiLCJpc0Z1bmN0aW9uRXhwcmVzc2lvbiIsImlzRnVuY3Rpb25JbnZvY2F0aW9uIiwiZ2VuTW9kaWZpZXJDb2RlIiwia2V5TW9kaWZpZXIiLCJnZW5LZXlGaWx0ZXIiLCJnZW5GaWx0ZXJDb2RlIiwia2V5VmFsIiwia2V5Q29kZSIsImtleU5hbWUiLCJ3cmFwTGlzdGVuZXJzIiwiYmluZCQxIiwid3JhcERhdGEiLCJiYXNlRGlyZWN0aXZlcyIsImNsb2FrIiwiQ29kZWdlblN0YXRlIiwiZGF0YUdlbkZucyIsIm1heWJlQ29tcG9uZW50Iiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJzdGF0ZSIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5TbG90IiwiZ2VuQ29tcG9uZW50IiwiZ2VuRGF0YSQyIiwiZ2VuQ2hpbGRyZW4iLCJvcmlnaW5hbFByZVN0YXRlIiwiYWx0R2VuIiwiYWx0RW1wdHkiLCJnZW5JZkNvbmRpdGlvbnMiLCJjb25kaXRpb25zIiwiZ2VuVGVybmFyeUV4cCIsImFsdEhlbHBlciIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJpbmxpbmVSZW5kZXJGbnMiLCJjb250YWluc1Nsb3RDaGlsZCIsIm5lZWRzS2V5IiwiZ2VuZXJhdGVkU2xvdHMiLCJnZW5TY29wZWRTbG90IiwiaXNMZWdhY3lTeW50YXgiLCJyZXZlcnNlUHJveHkiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJub3JtYWxpemF0aW9uVHlwZSQxIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2VuQ29tbWVudCIsImdlblRleHQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJiaW5kJCQxIiwiY29tcG9uZW50TmFtZSIsInN0YXRpY1Byb3BzIiwiZHluYW1pY1Byb3BzIiwiY3JlYXRlRnVuY3Rpb24iLCJlcnJvcnMiLCJjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIiwiY29tcGlsZSIsImNvbXBpbGVkIiwiZm5HZW5FcnJvcnMiLCJjcmVhdGVDb21waWxlckNyZWF0b3IiLCJiYXNlQ29tcGlsZSIsImZpbmFsT3B0aW9ucyIsInRpcHMiLCJ0aXAiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJkaXYiLCJjcmVhdGVDb21waWxlciIsImdldFNob3VsZERlY29kZSIsImhyZWYiLCJpZFRvVGVtcGxhdGUiLCJtb3VudCIsImdldE91dGVySFRNTCIsIm91dGVySFRNTCIsImNvbnRhaW5lciIsIl9fd2VicGFja19leHBvcnRzX18iLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwibWF5YmVUb1N0cmluZyIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInJlc3VsdHMiLCJtYXRjaFN0ciIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCJGVU5DX0VSUk9SX1RFWFQiLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwicmVtYWluaW5nV2FpdCIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZVNpbmNlTGFzdEludm9rZSIsInRpbWVXYWl0aW5nIiwic2hvdWxkSW52b2tlIiwidHJhaWxpbmdFZGdlIiwiY2FuY2VsIiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImZvcmNlZCIsIk5BTiIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50Iiwib3RoZXIiLCJpc0JpbmFyeSIsInByb21pc2VDYXBhYmlsaXR5IiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsImFycmF5SW5kZXhPZiIsIl9kZWZpbmVQcm9wZXJ0eSIsImRlZmluZV9wcm9wZXJ0eV9kZWZhdWx0IiwiX29iamVjdFNwcmVhZCIsImtleXNfZGVmYXVsdCIsImdldF9vd25fcHJvcGVydHlfc3ltYm9sc19kZWZhdWx0IiwiZ2V0X293bl9wcm9wZXJ0eV9kZXNjcmlwdG9yX2RlZmF1bHQiLCJzZXREZXNjIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIk5FRUQiLCJ0b2tlbiIsInNpbmdsZU1hdGNoZXIiLCJtdWx0aU1hdGNoZXIiLCJkZWNvZGVDb21wb25lbnRzIiwiY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZU1hcCIsIiVGRSVGRiIsIiVGRiVGRSIsImVuY29kZWRVUkkiLCJzZXBhcmF0b3IiLCJzZXBhcmF0b3JJbmRleCIsImZvcmJpZGRlbkZpZWxkIiwic3ltYm9sVGFnIl0sIm1hcHBpbmdzIjoib0dBQUEsSUFBQUEsRUFBYUMsRUFBUSxRQUdyQkMsRUFBQUMsT0FBQUMsVUFHQUMsRUFBQUgsRUFBQUcsZUFPQUMsRUFBQUosRUFBQUssU0FHQUMsRUFBQVIsSUFBQVMsaUJBQUFDLEVBU0EsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBUixFQUFBUyxLQUFBRixFQUFBSixHQUNBTyxFQUFBSCxFQUFBSixHQUVBLElBQ0FJLEVBQUFKLFFBQUFFLEVBQ0EsSUFBQU0sR0FBQSxFQUNHLE1BQUFDLElBRUgsSUFBQUMsRUFBQVosRUFBQVEsS0FBQUYsR0FRQSxPQVBBSSxJQUNBSCxFQUNBRCxFQUFBSixHQUFBTyxTQUVBSCxFQUFBSixJQUdBVSxFQUdBQyxFQUFBQyxRQUFBVCx1Q0MzQ0EsSUFBQVUsRUFBYXBCLEVBQVEsUUFDckJxQixFQUFVckIsRUFBUSxRQUNsQnNCLEVBQWtCdEIsRUFBUSxRQUMxQnVCLEVBQWN2QixFQUFRLFFBQ3RCd0IsRUFBZXhCLEVBQVEsUUFDdkJ5QixFQUFXekIsRUFBUSxRQUFTMEIsSUFDNUJDLEVBQWEzQixFQUFRLFFBQ3JCNEIsRUFBYTVCLEVBQVEsUUFDckI2QixFQUFxQjdCLEVBQVEsUUFDN0I4QixFQUFVOUIsRUFBUSxRQUNsQitCLEVBQVUvQixFQUFRLFFBQ2xCZ0MsRUFBYWhDLEVBQVEsUUFDckJpQyxFQUFnQmpDLEVBQVEsUUFDeEJrQyxFQUFlbEMsRUFBUSxRQUN2Qm1DLEVBQWNuQyxFQUFRLFFBQ3RCb0MsRUFBZXBDLEVBQVEsUUFDdkJxQyxFQUFlckMsRUFBUSxRQUN2QnNDLEVBQWdCdEMsRUFBUSxRQUN4QnVDLEVBQWtCdkMsRUFBUSxRQUMxQndDLEVBQWlCeEMsRUFBUSxRQUN6QnlDLEVBQWN6QyxFQUFRLFFBQ3RCMEMsRUFBYzFDLEVBQVEsUUFDdEIyQyxFQUFZM0MsRUFBUSxRQUNwQjRDLEVBQVU1QyxFQUFRLFFBQ2xCNkMsRUFBWTdDLEVBQVEsUUFDcEI4QyxFQUFBSCxFQUFBSSxFQUNBQyxFQUFBSixFQUFBRyxFQUNBRSxFQUFBUCxFQUFBSyxFQUNBRyxFQUFBOUIsRUFBQXJCLE9BQ0FvRCxFQUFBL0IsRUFBQWdDLEtBQ0FDLEVBQUFGLEtBQUFHLFVBQ0FDLEVBQUEsWUFDQUMsRUFBQXpCLEVBQUEsV0FDQTBCLEVBQUExQixFQUFBLGVBQ0EyQixFQUFBLEdBQWVDLHFCQUNmQyxFQUFBaEMsRUFBQSxtQkFDQWlDLEVBQUFqQyxFQUFBLFdBQ0FrQyxFQUFBbEMsRUFBQSxjQUNBbUMsRUFBQTdELE9BQUFxRCxHQUNBUyxFQUFBLG1CQUFBZCxFQUNBZSxFQUFBN0MsRUFBQTZDLFFBRUFDLEdBQUFELE1BQUFWLEtBQUFVLEVBQUFWLEdBQUFZLFVBR0FDLEVBQUE5QyxHQUFBSyxFQUFBLFdBQ0EsT0FFRyxHQUZIYyxFQUFBTyxFQUFBLEdBQXNCLEtBQ3RCcUIsSUFBQSxXQUFzQixPQUFBckIsRUFBQXNCLEtBQUEsS0FBdUIzRCxNQUFBLElBQVc0RCxNQUNyREEsSUFDRixTQUFBQyxFQUFBQyxFQUFBQyxHQUNELElBQUFDLEVBQUE3QixFQUFBaUIsRUFBQVUsR0FDQUUsVUFBQVosRUFBQVUsR0FDQXpCLEVBQUF3QixFQUFBQyxFQUFBQyxHQUNBQyxHQUFBSCxJQUFBVCxHQUFBZixFQUFBZSxFQUFBVSxFQUFBRSxJQUNDM0IsRUFFRDRCLEVBQUEsU0FBQTlELEdBQ0EsSUFBQStELEVBQUFoQixFQUFBL0MsR0FBQTJCLEVBQUFTLEVBQUFLLElBRUEsT0FEQXNCLEVBQUFDLEdBQUFoRSxFQUNBK0QsR0FHQUUsRUFBQWYsR0FBQSxpQkFBQWQsRUFBQThCLFNBQUEsU0FBQVIsR0FDQSx1QkFBQUEsR0FDQyxTQUFBQSxHQUNELE9BQUFBLGFBQUF0QixHQUdBK0IsRUFBQSxTQUFBVCxFQUFBQyxFQUFBQyxHQUtBLE9BSkFGLElBQUFULEdBQUFrQixFQUFBbkIsRUFBQVcsRUFBQUMsR0FDQXRDLEVBQUFvQyxHQUNBQyxFQUFBbEMsRUFBQWtDLEdBQUEsR0FDQXJDLEVBQUFzQyxHQUNBckQsRUFBQXdDLEVBQUFZLElBQ0FDLEVBQUFRLFlBSUE3RCxFQUFBbUQsRUFBQWhCLElBQUFnQixFQUFBaEIsR0FBQWlCLEtBQUFELEVBQUFoQixHQUFBaUIsSUFBQSxHQUNBQyxFQUFBakMsRUFBQWlDLEVBQUEsQ0FBc0JRLFdBQUExQyxFQUFBLFVBSnRCbkIsRUFBQW1ELEVBQUFoQixJQUFBUixFQUFBd0IsRUFBQWhCLEVBQUFoQixFQUFBLE9BQ0FnQyxFQUFBaEIsR0FBQWlCLElBQUEsR0FJS0wsRUFBQUksRUFBQUMsRUFBQUMsSUFDRjFCLEVBQUF3QixFQUFBQyxFQUFBQyxJQUVIUyxFQUFBLFNBQUFYLEVBQUFZLEdBQ0FoRCxFQUFBb0MsR0FDQSxJQUdBQyxFQUhBWSxFQUFBbkQsRUFBQWtELEVBQUE5QyxFQUFBOEMsSUFDQUUsRUFBQSxFQUNBQyxFQUFBRixFQUFBRyxPQUVBLE1BQUFELEVBQUFELEVBQUFMLEVBQUFULEVBQUFDLEVBQUFZLEVBQUFDLEtBQUFGLEVBQUFYLElBQ0EsT0FBQUQsR0FFQWlCLEVBQUEsU0FBQWpCLEVBQUFZLEdBQ0EsWUFBQTNFLElBQUEyRSxFQUFBM0MsRUFBQStCLEdBQUFXLEVBQUExQyxFQUFBK0IsR0FBQVksSUFFQU0sRUFBQSxTQUFBakIsR0FDQSxJQUFBa0IsRUFBQWpDLEVBQUE3QyxLQUFBeUQsS0FBQUcsRUFBQWxDLEVBQUFrQyxHQUFBLElBQ0EsUUFBQUgsT0FBQVAsR0FBQTFDLEVBQUF3QyxFQUFBWSxLQUFBcEQsRUFBQXlDLEVBQUFXLFFBQ0FrQixJQUFBdEUsRUFBQWlELEtBQUFHLEtBQUFwRCxFQUFBd0MsRUFBQVksSUFBQXBELEVBQUFpRCxLQUFBZCxJQUFBYyxLQUFBZCxHQUFBaUIsS0FBQWtCLElBRUFDLEVBQUEsU0FBQXBCLEVBQUFDLEdBR0EsR0FGQUQsRUFBQWxDLEVBQUFrQyxHQUNBQyxFQUFBbEMsRUFBQWtDLEdBQUEsR0FDQUQsSUFBQVQsSUFBQTFDLEVBQUF3QyxFQUFBWSxJQUFBcEQsRUFBQXlDLEVBQUFXLEdBQUEsQ0FDQSxJQUFBQyxFQUFBNUIsRUFBQTBCLEVBQUFDLEdBRUEsT0FEQUMsSUFBQXJELEVBQUF3QyxFQUFBWSxJQUFBcEQsRUFBQW1ELEVBQUFoQixJQUFBZ0IsRUFBQWhCLEdBQUFpQixLQUFBQyxFQUFBUSxZQUFBLEdBQ0FSLElBRUFtQixFQUFBLFNBQUFyQixHQUNBLElBR0FDLEVBSEFxQixFQUFBN0MsRUFBQVgsRUFBQWtDLElBQ0F2RCxFQUFBLEdBQ0FxRSxFQUFBLEVBRUEsTUFBQVEsRUFBQU4sT0FBQUYsRUFDQWpFLEVBQUF3QyxFQUFBWSxFQUFBcUIsRUFBQVIsT0FBQWIsR0FBQWpCLEdBQUFpQixHQUFBaEQsR0FBQVIsRUFBQThFLEtBQUF0QixHQUNHLE9BQUF4RCxHQUVIK0UsR0FBQSxTQUFBeEIsR0FDQSxJQUlBQyxFQUpBd0IsRUFBQXpCLElBQUFULEVBQ0ErQixFQUFBN0MsRUFBQWdELEVBQUFuQyxFQUFBeEIsRUFBQWtDLElBQ0F2RCxFQUFBLEdBQ0FxRSxFQUFBLEVBRUEsTUFBQVEsRUFBQU4sT0FBQUYsR0FDQWpFLEVBQUF3QyxFQUFBWSxFQUFBcUIsRUFBQVIsT0FBQVcsSUFBQTVFLEVBQUEwQyxFQUFBVSxJQUFBeEQsRUFBQThFLEtBQUFsQyxFQUFBWSxJQUNHLE9BQUF4RCxHQUlIK0MsSUFDQWQsRUFBQSxXQUNBLEdBQUFvQixnQkFBQXBCLEVBQUEsTUFBQWdELFVBQUEsZ0NBQ0EsSUFBQXBGLEVBQUFnQixFQUFBcUUsVUFBQVgsT0FBQSxFQUFBVyxVQUFBLFFBQUExRixHQUNBMkYsRUFBQSxTQUFBekYsR0FDQTJELE9BQUFQLEdBQUFxQyxFQUFBdkYsS0FBQWlELEVBQUFuRCxHQUNBVSxFQUFBaUQsS0FBQWQsSUFBQW5DLEVBQUFpRCxLQUFBZCxHQUFBMUMsS0FBQXdELEtBQUFkLEdBQUExQyxJQUFBLEdBQ0FzRCxFQUFBRSxLQUFBeEQsRUFBQTBCLEVBQUEsRUFBQTdCLEtBR0EsT0FEQVcsR0FBQTRDLEdBQUFFLEVBQUFMLEVBQUFqRCxFQUFBLENBQWdFdUYsY0FBQSxFQUFBQyxJQUFBRixJQUNoRXhCLEVBQUE5RCxJQUVBVSxFQUFBMEIsRUFBQUssR0FBQSxzQkFDQSxPQUFBZSxLQUFBUSxLQUdBbkMsRUFBQUksRUFBQTZDLEVBQ0FoRCxFQUFBRyxFQUFBa0MsRUFDRWpGLEVBQVEsUUFBZ0IrQyxFQUFBTCxFQUFBSyxFQUFBOEMsRUFDeEI3RixFQUFRLFFBQWUrQyxFQUFBMkMsRUFDdkIxRixFQUFRLFFBQWdCK0MsRUFBQWlELEdBRTFCMUUsSUFBc0J0QixFQUFRLFNBQzlCd0IsRUFBQXVDLEVBQUEsdUJBQUEyQixHQUFBLEdBR0ExRCxFQUFBZSxFQUFBLFNBQUF3RCxHQUNBLE9BQUEzQixFQUFBN0MsRUFBQXdFLE1BSUFoRixJQUFBaUYsRUFBQWpGLEVBQUFrRixFQUFBbEYsRUFBQW1GLEdBQUExQyxFQUFBLENBQTBEakUsT0FBQW1ELElBRTFELFFBQUF5RCxHQUFBLGlIQUdBQyxNQUFBLEtBQUFDLEdBQUEsRUFBb0JGLEdBQUFuQixPQUFBcUIsSUFBdUI5RSxFQUFBNEUsR0FBQUUsT0FFM0MsUUFBQUMsR0FBQWpFLEVBQUFkLEVBQUFnRixPQUFBQyxHQUFBLEVBQW9ERixHQUFBdEIsT0FBQXdCLElBQTZCL0UsRUFBQTZFLEdBQUFFLE9BRWpGekYsSUFBQTBGLEVBQUExRixFQUFBbUYsR0FBQTFDLEVBQUEsVUFFQWtELElBQUEsU0FBQXpDLEdBQ0EsT0FBQXBELEVBQUF1QyxFQUFBYSxHQUFBLElBQ0FiLEVBQUFhLEdBQ0FiLEVBQUFhLEdBQUF2QixFQUFBdUIsSUFHQTBDLE9BQUEsU0FBQXRDLEdBQ0EsSUFBQUUsRUFBQUYsR0FBQSxNQUFBcUIsVUFBQXJCLEVBQUEscUJBQ0EsUUFBQUosS0FBQWIsRUFBQSxHQUFBQSxFQUFBYSxLQUFBSSxFQUFBLE9BQUFKLEdBRUEyQyxVQUFBLFdBQTBCbEQsR0FBQSxHQUMxQm1ELFVBQUEsV0FBMEJuRCxHQUFBLEtBRzFCM0MsSUFBQTBGLEVBQUExRixFQUFBbUYsR0FBQTFDLEVBQUEsVUFFQXNELE9BQUE3QixFQUVBOEIsZUFBQXRDLEVBRUF1QyxpQkFBQXJDLEVBRUFzQyx5QkFBQTdCLEVBRUE4QixvQkFBQTdCLEVBRUE4QixzQkFBQTNCLEtBSUE3QyxHQUFBNUIsSUFBQTBGLEVBQUExRixFQUFBbUYsSUFBQTFDLEdBQUFyQyxFQUFBLFdBQ0EsSUFBQXNGLEVBQUEvRCxJQUlBLGdCQUFBRyxFQUFBLENBQUE0RCxLQUEyRCxNQUEzRDVELEVBQUEsQ0FBb0RrQixFQUFBMEMsS0FBZSxNQUFBNUQsRUFBQW5ELE9BQUErRyxPQUNsRSxRQUNEM0QsVUFBQSxTQUFBa0IsR0FDQSxJQUVBb0QsRUFBQUMsRUFGQUMsRUFBQSxDQUFBdEQsR0FDQWMsRUFBQSxFQUVBLE1BQUFhLFVBQUFYLE9BQUFGLEVBQUF3QyxFQUFBL0IsS0FBQUksVUFBQWIsTUFFQSxHQURBdUMsRUFBQUQsRUFBQUUsRUFBQSxJQUNBekYsRUFBQXVGLFNBQUFuSCxJQUFBK0QsS0FBQU8sRUFBQVAsR0FNQSxPQUxBckMsRUFBQXlGLE9BQUEsU0FBQW5ELEVBQUE5RCxHQUVBLEdBREEsbUJBQUFrSCxJQUFBbEgsRUFBQWtILEVBQUFoSCxLQUFBeUQsS0FBQUcsRUFBQTlELEtBQ0FvRSxFQUFBcEUsR0FBQSxPQUFBQSxJQUVBbUgsRUFBQSxHQUFBRixFQUNBdkUsRUFBQTBFLE1BQUE1RSxFQUFBMkUsTUFLQTVFLEVBQUFLLEdBQUFFLElBQW9DekQsRUFBUSxPQUFSQSxDQUFpQmtELEVBQUFLLEdBQUFFLEVBQUFQLEVBQUFLLEdBQUF5RSxTQUVyRG5HLEVBQUFxQixFQUFBLFVBRUFyQixFQUFBb0csS0FBQSxXQUVBcEcsRUFBQVQsRUFBQWdDLEtBQUEsZ0RDeE9BLElBQUE4RSxFQUFjbEksRUFBUSxRQUN0QnVCLEVBQWN2QixFQUFRLFFBQ3RCd0IsRUFBZXhCLEVBQVEsUUFDdkJtSSxFQUFXbkksRUFBUSxRQUNuQm9JLEVBQWdCcEksRUFBUSxRQUN4QnFJLEVBQWtCckksRUFBUSxRQUMxQjZCLEVBQXFCN0IsRUFBUSxRQUM3QnNJLEVBQXFCdEksRUFBUSxRQUM3QnVJLEVBQWV2SSxFQUFRLE9BQVJBLENBQWdCLFlBQy9Cd0ksSUFBQSxHQUFBbkQsTUFBQSxXQUFBQSxRQUNBb0QsRUFBQSxhQUNBQyxFQUFBLE9BQ0FDLEVBQUEsU0FFQUMsRUFBQSxXQUE4QixPQUFBdEUsTUFFOUJwRCxFQUFBQyxRQUFBLFNBQUEwSCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBZCxFQUFBVSxFQUFBRCxFQUFBRSxHQUNBLElBZUFJLEVBQUEzRSxFQUFBNEUsRUFmQUMsRUFBQSxTQUFBQyxHQUNBLElBQUFmLEdBQUFlLEtBQUFDLEVBQUEsT0FBQUEsRUFBQUQsR0FDQSxPQUFBQSxHQUNBLEtBQUFiLEVBQUEsa0JBQXlDLFdBQUFLLEVBQUF6RSxLQUFBaUYsSUFDekMsS0FBQVosRUFBQSxrQkFBNkMsV0FBQUksRUFBQXpFLEtBQUFpRixJQUN4QyxrQkFBNEIsV0FBQVIsRUFBQXpFLEtBQUFpRixLQUVqQ0UsRUFBQVgsRUFBQSxZQUNBWSxFQUFBVCxHQUFBTixFQUNBZ0IsR0FBQSxFQUNBSCxFQUFBWCxFQUFBMUksVUFDQXlKLEVBQUFKLEVBQUFqQixJQUFBaUIsRUFBQWYsSUFBQVEsR0FBQU8sRUFBQVAsR0FDQVksRUFBQUQsR0FBQU4sRUFBQUwsR0FDQWEsRUFBQWIsRUFBQVMsRUFBQUosRUFBQSxXQUFBTyxPQUFBcEosRUFDQXNKLEVBQUEsU0FBQWpCLEdBQUFVLEVBQUFRLFNBQUFKLEVBd0JBLEdBckJBRyxJQUNBVixFQUFBZixFQUFBeUIsRUFBQWxKLEtBQUEsSUFBQWdJLElBQ0FRLElBQUFuSixPQUFBQyxXQUFBa0osRUFBQUwsT0FFQW5ILEVBQUF3SCxFQUFBSSxHQUFBLEdBRUF2QixHQUFBLG1CQUFBbUIsRUFBQWQsSUFBQUosRUFBQWtCLEVBQUFkLEVBQUFLLEtBSUFjLEdBQUFFLEtBQUFyRCxPQUFBb0MsSUFDQWdCLEdBQUEsRUFDQUUsRUFBQSxXQUFrQyxPQUFBRCxFQUFBL0ksS0FBQXlELFFBR2xDNEQsSUFBQWlCLElBQUFYLElBQUFtQixHQUFBSCxFQUFBakIsSUFDQUosRUFBQXFCLEVBQUFqQixFQUFBc0IsR0FHQXpCLEVBQUFVLEdBQUFlLEVBQ0F6QixFQUFBcUIsR0FBQWIsRUFDQUssRUFNQSxHQUxBRyxFQUFBLENBQ0FhLE9BQUFQLEVBQUFHLEVBQUFQLEVBQUFYLEdBQ0F0RCxLQUFBNkQsRUFBQVcsRUFBQVAsRUFBQVosR0FDQXNCLFFBQUFGLEdBRUFYLEVBQUEsSUFBQTFFLEtBQUEyRSxFQUNBM0UsS0FBQStFLEdBQUFoSSxFQUFBZ0ksRUFBQS9FLEVBQUEyRSxFQUFBM0UsU0FDS2xELElBQUE2RCxFQUFBN0QsRUFBQW1GLEdBQUE4QixHQUFBbUIsR0FBQWIsRUFBQU0sR0FFTCxPQUFBQSwyQkNuRUEsSUFBQWMsRUFBZ0JsSyxFQUFRLFFBQ3hCbUssRUFBY25LLEVBQVEsUUFHdEJrQixFQUFBQyxRQUFBLFNBQUFpSixHQUNBLGdCQUFBQyxFQUFBQyxHQUNBLElBR0EvRixFQUFBZ0csRUFIQUMsRUFBQUMsT0FBQU4sRUFBQUUsSUFDQS9FLEVBQUE0RSxFQUFBSSxHQUNBL0UsRUFBQWlGLEVBQUFoRixPQUVBLE9BQUFGLEVBQUEsR0FBQUEsR0FBQUMsRUFBQTZFLEVBQUEsUUFBQTNKLEdBQ0E4RCxFQUFBaUcsRUFBQUUsV0FBQXBGLEdBQ0FmLEVBQUEsT0FBQUEsRUFBQSxPQUFBZSxFQUFBLElBQUFDLElBQUFnRixFQUFBQyxFQUFBRSxXQUFBcEYsRUFBQSxXQUFBaUYsRUFBQSxNQUNBSCxFQUFBSSxFQUFBRyxPQUFBckYsR0FBQWYsRUFDQTZGLEVBQUFJLEVBQUFJLE1BQUF0RixJQUFBLEdBQUFpRixFQUFBLE9BQUFoRyxFQUFBLHlEQ2JBLElBQUFzRyxFQUFTN0ssRUFBUSxPQUFSQSxFQUFzQixHQUkvQmtCLEVBQUFDLFFBQUEsU0FBQThGLEVBQUE2RCxFQUFBQyxHQUNBLE9BQUFELEdBQUFDLEVBQUFGLEVBQUE1RCxFQUFBNkQsR0FBQXRGLE9BQUEsNEJDTEEsSUFBQWxELEVBQWdCdEMsRUFBUSxRQUN4QmlELEVBQVdqRCxFQUFRLFFBQWdCK0MsRUFDbkN6QyxFQUFBLEdBQWlCQSxTQUVqQjBLLEVBQUEsaUJBQUFDLGdCQUFBL0ssT0FBQXdILG9CQUNBeEgsT0FBQXdILG9CQUFBdUQsUUFBQSxHQUVBQyxFQUFBLFNBQUExRyxHQUNBLElBQ0EsT0FBQXZCLEVBQUF1QixHQUNHLE1BQUF4RCxHQUNILE9BQUFnSyxFQUFBSixVQUlBMUosRUFBQUMsUUFBQTRCLEVBQUEsU0FBQXlCLEdBQ0EsT0FBQXdHLEdBQUEsbUJBQUExSyxFQUFBTyxLQUFBMkQsR0FBQTBHLEVBQUExRyxHQUFBdkIsRUFBQVgsRUFBQWtDLDJCQ2pCQSxJQUFBcEUsRUFBQSxHQUF1QkEsZUFDdkJjLEVBQUFDLFFBQUEsU0FBQXFELEVBQUFDLEdBQ0EsT0FBQXJFLEVBQUFTLEtBQUEyRCxFQUFBQyx5Q0NBQSxJQUFBbEQsRUFBY3ZCLEVBQVEsUUFDdEJtTCxFQUFXbkwsRUFBUSxRQUNuQm9CLEVBQWFwQixFQUFRLFFBQ3JCb0wsRUFBeUJwTCxFQUFRLFFBQ2pDcUwsRUFBcUJyTCxFQUFRLFFBRTdCdUIsSUFBQTZELEVBQUE3RCxFQUFBK0osRUFBQSxXQUEyQ0MsUUFBQSxTQUFBQyxHQUMzQyxJQUFBQyxFQUFBTCxFQUFBOUcsS0FBQTZHLEVBQUFPLFNBQUF0SyxFQUFBc0ssU0FDQUMsRUFBQSxtQkFBQUgsRUFDQSxPQUFBbEgsS0FBQXNILEtBQ0FELEVBQUEsU0FBQUUsR0FDQSxPQUFBUixFQUFBSSxFQUFBRCxLQUFBSSxLQUFBLFdBQThELE9BQUFDLEtBQ3pETCxFQUNMRyxFQUFBLFNBQUEzSyxHQUNBLE9BQUFxSyxFQUFBSSxFQUFBRCxLQUFBSSxLQUFBLFdBQThELE1BQUE1SyxLQUN6RHdLLDJDQ2ZMLElBQUFwSixFQUFlcEMsRUFBUSxRQUN2QmtCLEVBQUFDLFFBQUEsV0FDQSxJQUFBa0osRUFBQWpJLEVBQUFrQyxNQUNBckQsRUFBQSxHQU1BLE9BTEFvSixFQUFBakosU0FBQUgsR0FBQSxLQUNBb0osRUFBQXlCLGFBQUE3SyxHQUFBLEtBQ0FvSixFQUFBMEIsWUFBQTlLLEdBQUEsS0FDQW9KLEVBQUFVLFVBQUE5SixHQUFBLEtBQ0FvSixFQUFBMkIsU0FBQS9LLEdBQUEsS0FDQUEsMkJDVkEsSUFBQTRCLEVBQVk3QyxFQUFRLFFBQ3BCaU0sRUFBa0JqTSxFQUFRLFFBRTFCa0IsRUFBQUMsUUFBQWpCLE9BQUFtRixNQUFBLFNBQUE2RyxHQUNBLE9BQUFySixFQUFBcUosRUFBQUQsNEJDTEEsSUFBQS9CLEVBQWdCbEssRUFBUSxRQUN4Qm1NLEVBQUFsRSxLQUFBa0UsSUFDQUMsRUFBQW5FLEtBQUFtRSxJQUNBbEwsRUFBQUMsUUFBQSxTQUFBMkosRUFBQXRGLEdBRUEsT0FEQXNGLEVBQUFaLEVBQUFZLEdBQ0FBLEVBQUEsRUFBQXFCLEVBQUFyQixFQUFBdEYsRUFBQSxHQUFBNEcsRUFBQXRCLEVBQUF0Rix3QkNtQkEsU0FBQTZHLEVBQUExTCxHQUNBLGFBQUFBLEdBQUEsaUJBQUFBLEVBR0FPLEVBQUFDLFFBQUFrTCx3QkM1QkEsSUFBQXJKLEVBQVNoRCxFQUFRLFFBQ2pCb0MsRUFBZXBDLEVBQVEsUUFDdkJzTSxFQUFjdE0sRUFBUSxRQUV0QmtCLEVBQUFDLFFBQWlCbkIsRUFBUSxRQUFnQkUsT0FBQXNILGlCQUFBLFNBQUEwRSxFQUFBSyxHQUN6Q25LLEVBQUE4SixHQUNBLElBR0E5RyxFQUhBQyxFQUFBaUgsRUFBQUMsR0FDQS9HLEVBQUFILEVBQUFHLE9BQ0FGLEVBQUEsRUFFQSxNQUFBRSxFQUFBRixFQUFBdEMsRUFBQUQsRUFBQW1KLEVBQUE5RyxFQUFBQyxFQUFBQyxLQUFBaUgsRUFBQW5ILElBQ0EsT0FBQThHLHNDQ1ZBLElBQUFNLEVBQVV4TSxFQUFRLE9BQVJBLEVBQXNCLEdBR2hDQSxFQUFRLE9BQVJBLENBQXdCeUssT0FBQSxrQkFBQWdDLEdBQ3hCbkksS0FBQW9JLEdBQUFqQyxPQUFBZ0MsR0FDQW5JLEtBQUFxSSxHQUFBLEdBRUMsV0FDRCxJQUVBQyxFQUZBVixFQUFBNUgsS0FBQW9JLEdBQ0E1QixFQUFBeEcsS0FBQXFJLEdBRUEsT0FBQTdCLEdBQUFvQixFQUFBMUcsT0FBQSxDQUFpQzdFLFdBQUFGLEVBQUFvTSxNQUFBLElBQ2pDRCxFQUFBSixFQUFBTixFQUFBcEIsR0FDQXhHLEtBQUFxSSxJQUFBQyxFQUFBcEgsT0FDQSxDQUFVN0UsTUFBQWlNLEVBQUFDLE1BQUEsMEJDZFYzTCxFQUFBQyxRQUFBLGdHQUVBeUYsTUFBQSwyQkNIQSxJQWFBa0csRUFBQUMsRUFBQUMsRUFiQUMsRUFBVWpOLEVBQVEsUUFDbEJrTixFQUFhbE4sRUFBUSxRQUNyQm1OLEVBQVduTixFQUFRLFFBQ25Cb04sRUFBVXBOLEVBQVEsUUFDbEJvQixFQUFhcEIsRUFBUSxRQUNyQnFOLEVBQUFqTSxFQUFBaU0sUUFDQUMsRUFBQWxNLEVBQUFtTSxhQUNBQyxFQUFBcE0sRUFBQXFNLGVBQ0FDLEVBQUF0TSxFQUFBc00sZUFDQUMsRUFBQXZNLEVBQUF1TSxTQUNBQyxFQUFBLEVBQ0FDLEVBQUEsR0FDQUMsRUFBQSxxQkFFQUMsRUFBQSxXQUNBLElBQUFDLEdBQUExSixLQUVBLEdBQUF1SixFQUFBek4sZUFBQTROLEdBQUEsQ0FDQSxJQUFBQyxFQUFBSixFQUFBRyxVQUNBSCxFQUFBRyxHQUNBQyxNQUdBQyxFQUFBLFNBQUFDLEdBQ0FKLEVBQUFsTixLQUFBc04sRUFBQUMsT0FHQWQsR0FBQUUsSUFDQUYsRUFBQSxTQUFBVyxHQUNBLElBQUFuRyxFQUFBLEdBQ0F4QyxFQUFBLEVBQ0EsTUFBQWEsVUFBQVgsT0FBQUYsRUFBQXdDLEVBQUEvQixLQUFBSSxVQUFBYixNQU1BLE9BTEF1SSxJQUFBRCxHQUFBLFdBRUFWLEVBQUEsbUJBQUFlLElBQUFJLFNBQUFKLEdBQUFuRyxJQUVBZ0YsRUFBQWMsR0FDQUEsR0FFQUosRUFBQSxTQUFBUSxVQUNBSCxFQUFBRyxJQUdzQixXQUFoQmhPLEVBQVEsT0FBUkEsQ0FBZ0JxTixHQUN0QlAsRUFBQSxTQUFBa0IsR0FDQVgsRUFBQWlCLFNBQUFyQixFQUFBYyxFQUFBQyxFQUFBLEtBR0dMLEtBQUFZLElBQ0h6QixFQUFBLFNBQUFrQixHQUNBTCxFQUFBWSxJQUFBdEIsRUFBQWMsRUFBQUMsRUFBQSxLQUdHTixHQUNIWCxFQUFBLElBQUFXLEVBQ0FWLEVBQUFELEVBQUF5QixNQUNBekIsRUFBQTBCLE1BQUFDLFVBQUFSLEVBQ0FwQixFQUFBRyxFQUFBRCxFQUFBMkIsWUFBQTNCLEVBQUEsSUFHRzVMLEVBQUF3TixrQkFBQSxtQkFBQUQsY0FBQXZOLEVBQUF5TixlQUNIL0IsRUFBQSxTQUFBa0IsR0FDQTVNLEVBQUF1TixZQUFBWCxFQUFBLFNBRUE1TSxFQUFBd04saUJBQUEsVUFBQVYsR0FBQSxJQUdBcEIsRUFER2dCLEtBQUFWLEVBQUEsVUFDSCxTQUFBWSxHQUNBYixFQUFBMkIsWUFBQTFCLEVBQUEsV0FBQVUsR0FBQSxXQUNBWCxFQUFBNEIsWUFBQXpLLE1BQ0F5SixFQUFBbE4sS0FBQW1OLEtBS0EsU0FBQUEsR0FDQWdCLFdBQUEvQixFQUFBYyxFQUFBQyxFQUFBLFFBSUE5TSxFQUFBQyxRQUFBLENBQ0FtRixJQUFBZ0gsRUFDQTJCLE1BQUF6Qix5QkN6REEsU0FBQW5MLEVBQUExQixHQUNBLElBQUF1TyxTQUFBdk8sRUFDQSxhQUFBQSxJQUFBLFVBQUF1TyxHQUFBLFlBQUFBLEdBR0FoTyxFQUFBQyxRQUFBa0IsMEJDN0JBLElBQUFBLEVBQWVyQyxFQUFRLFFBR3ZCa0IsRUFBQUMsUUFBQSxTQUFBcUQsRUFBQXlDLEdBQ0EsSUFBQTVFLEVBQUFtQyxHQUFBLE9BQUFBLEVBQ0EsSUFBQXlKLEVBQUFrQixFQUNBLEdBQUFsSSxHQUFBLG1CQUFBZ0gsRUFBQXpKLEVBQUFsRSxZQUFBK0IsRUFBQThNLEVBQUFsQixFQUFBcE4sS0FBQTJELElBQUEsT0FBQTJLLEVBQ0Esc0JBQUFsQixFQUFBekosRUFBQXdELFdBQUEzRixFQUFBOE0sRUFBQWxCLEVBQUFwTixLQUFBMkQsSUFBQSxPQUFBMkssRUFDQSxJQUFBbEksR0FBQSxtQkFBQWdILEVBQUF6SixFQUFBbEUsWUFBQStCLEVBQUE4TSxFQUFBbEIsRUFBQXBOLEtBQUEyRCxJQUFBLE9BQUEySyxFQUNBLE1BQUFqSixVQUFBLG9FQ1ZBLElBQUE3RCxFQUFlckMsRUFBUSxRQUN2Qm9QLEVBQWVwUCxFQUFRLFFBQVdvUCxTQUVsQ0MsRUFBQWhOLEVBQUErTSxJQUFBL00sRUFBQStNLEVBQUFFLGVBQ0FwTyxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLE9BQUE2SyxFQUFBRCxFQUFBRSxjQUFBOUssR0FBQSw0QkNKQSxJQUFBcEMsRUFBZXBDLEVBQVEsUUFDdkJrQixFQUFBQyxRQUFBLFNBQUE2RCxFQUFBaUosRUFBQXROLEVBQUFxSixHQUNBLElBQ0EsT0FBQUEsRUFBQWlFLEVBQUE3TCxFQUFBekIsR0FBQSxHQUFBQSxFQUFBLElBQUFzTixFQUFBdE4sR0FFRyxNQUFBSyxHQUNILElBQUF1TyxFQUFBdkssRUFBQSxVQUVBLFdBREF2RSxJQUFBOE8sR0FBQW5OLEVBQUFtTixFQUFBMU8sS0FBQW1FLElBQ0FoRSx5Q0NSQWhCLEVBQVEsUUFDUixJQUFBd0IsRUFBZXhCLEVBQVEsUUFDdkJtSSxFQUFXbkksRUFBUSxRQUNuQndQLEVBQVl4UCxFQUFRLFFBQ3BCbUssRUFBY25LLEVBQVEsUUFDdEIrQixFQUFVL0IsRUFBUSxRQUNsQnlQLEVBQWlCelAsRUFBUSxRQUV6QjBQLEVBQUEzTixFQUFBLFdBRUE0TixHQUFBSCxFQUFBLFdBSUEsSUFBQUksRUFBQSxJQU1BLE9BTEFBLEVBQUFDLEtBQUEsV0FDQSxJQUFBNU8sRUFBQSxHQUVBLE9BREFBLEVBQUE2TyxPQUFBLENBQXFCdkwsRUFBQSxLQUNyQnRELEdBRUEsU0FBQThPLFFBQUFILEVBQUEsVUFHQUksRUFBQSxXQUVBLElBQUFKLEVBQUEsT0FDQUssRUFBQUwsRUFBQUMsS0FDQUQsRUFBQUMsS0FBQSxXQUF5QixPQUFBSSxFQUFBbEksTUFBQXpELEtBQUE2QixZQUN6QixJQUFBbEYsRUFBQSxLQUFBMkYsTUFBQWdKLEdBQ0EsV0FBQTNPLEVBQUF1RSxRQUFBLE1BQUF2RSxFQUFBLFVBQUFBLEVBQUEsR0FOQSxHQVNBQyxFQUFBQyxRQUFBLFNBQUFPLEVBQUE4RCxFQUFBcUssR0FDQSxJQUFBSyxFQUFBbk8sRUFBQUwsR0FFQXlPLEdBQUFYLEVBQUEsV0FFQSxJQUFBdEQsRUFBQSxHQUVBLE9BREFBLEVBQUFnRSxHQUFBLFdBQTZCLFVBQzdCLE1BQUF4TyxHQUFBd0ssS0FHQWtFLEVBQUFELEdBQUFYLEVBQUEsV0FFQSxJQUFBYSxHQUFBLEVBQ0FULEVBQUEsSUFTQSxPQVJBQSxFQUFBQyxLQUFBLFdBQThDLE9BQW5CUSxHQUFBLEVBQW1CLE1BQzlDLFVBQUEzTyxJQUdBa08sRUFBQVUsWUFBQSxHQUNBVixFQUFBVSxZQUFBWixHQUFBLFdBQTZDLE9BQUFFLElBRTdDQSxFQUFBTSxHQUFBLEtBQ0FHLFNBQ0c1UCxFQUVILElBQ0EwUCxJQUNBQyxHQUNBLFlBQUExTyxJQUFBaU8sR0FDQSxVQUFBak8sSUFBQXNPLEVBQ0EsQ0FDQSxJQUFBTyxFQUFBLElBQUFMLEdBQ0FNLEVBQUFYLEVBQ0ExRixFQUNBK0YsRUFDQSxHQUFBeE8sR0FDQSxTQUFBK08sRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBSCxFQUFBYixPQUFBSixFQUNBVSxJQUFBVSxFQUlBLENBQW9CaEUsTUFBQSxFQUFBbE0sTUFBQTRQLEVBQUExUCxLQUFBNlAsRUFBQUMsRUFBQUMsSUFFcEIsQ0FBa0IvRCxNQUFBLEVBQUFsTSxNQUFBOFAsRUFBQTVQLEtBQUE4UCxFQUFBRCxFQUFBRSxJQUVsQixDQUFnQi9ELE1BQUEsS0FHaEJpRSxFQUFBTixFQUFBLEdBQ0FPLEVBQUFQLEVBQUEsR0FFQWhQLEVBQUFpSixPQUFBdEssVUFBQXVCLEVBQUFvUCxHQUNBM0ksRUFBQTZJLE9BQUE3USxVQUFBK1AsRUFBQSxHQUFBMUssRUFHQSxTQUFBeUwsRUFBQUMsR0FBZ0MsT0FBQUgsRUFBQWxRLEtBQUFvUSxFQUFBM00sS0FBQTRNLElBR2hDLFNBQUFELEdBQTJCLE9BQUFGLEVBQUFsUSxLQUFBb1EsRUFBQTNNLGtDQzVGM0IsSUFBQWpDLEVBQWVyQyxFQUFRLFFBQ3ZCb1AsRUFBZXBQLEVBQVEsUUFBV29QLFNBRWxDQyxFQUFBaE4sRUFBQStNLElBQUEvTSxFQUFBK00sRUFBQUUsZUFDQXBPLEVBQUFDLFFBQUEsU0FBQXFELEdBQ0EsT0FBQTZLLEVBQUFELEVBQUFFLGNBQUE5SyxHQUFBLDRCQ0pBLElBQUEyTSxFQUFVblIsRUFBUSxRQUNsQnlKLEVBQVV6SixFQUFRLE9BQVJBLENBQWdCLGVBRTFCb1IsRUFBK0MsYUFBL0NELEVBQUEsV0FBMkIsT0FBQWhMLFVBQTNCLElBR0FrTCxFQUFBLFNBQUE3TSxFQUFBQyxHQUNBLElBQ0EsT0FBQUQsRUFBQUMsR0FDRyxNQUFBekQsTUFHSEUsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxJQUFBMEgsRUFBQW9GLEVBQUFDLEVBQ0EsWUFBQTlRLElBQUErRCxFQUFBLG1CQUFBQSxFQUFBLE9BRUEsaUJBQUE4TSxFQUFBRCxFQUFBbkYsRUFBQWhNLE9BQUFzRSxHQUFBaUYsSUFBQTZILEVBRUFGLEVBQUFELEVBQUFqRixHQUVBLFdBQUFxRixFQUFBSixFQUFBakYsS0FBQSxtQkFBQUEsRUFBQXNGLE9BQUEsWUFBQUQsMkJDcEJBLElBQUFwSCxFQUFjbkssRUFBUSxRQUN0QmtCLEVBQUFDLFFBQUEsU0FBQXFELEdBQ0EsT0FBQXRFLE9BQUFpSyxFQUFBM0YsMkJDRkF0RCxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLFFBQUEvRCxHQUFBK0QsRUFBQSxNQUFBMEIsVUFBQSx5QkFBQTFCLEdBQ0EsT0FBQUEsdUJDSEFyRCxFQUFBNEIsRUFBQTdDLE9BQUF5SCw4Q0NBQXpHLEVBQUFDLFFBQWlCbkIsRUFBUSxnQ0NBekIsSUFBQXlSLEVBQWN6UixFQUFRLFFBQ3RCdUksRUFBZXZJLEVBQVEsT0FBUkEsQ0FBZ0IsWUFDL0JvSSxFQUFnQnBJLEVBQVEsUUFDeEJrQixFQUFBQyxRQUFpQm5CLEVBQVEsUUFBUzBSLGtCQUFBLFNBQUFsTixHQUNsQyxRQUFBL0QsR0FBQStELEVBQUEsT0FBQUEsRUFBQStELElBQ0EvRCxFQUFBLGVBQ0E0RCxFQUFBcUosRUFBQWpOLDJCQ05BdEQsRUFBQUMsUUFBQSxTQUFBME8sR0FDQSxJQUNBLFFBQUFBLElBQ0csTUFBQTdPLEdBQ0gsaUNDSEEsSUFBQWYsRUFBQUMsT0FBQUMsVUFPQUUsRUFBQUosRUFBQUssU0FTQSxTQUFBcVIsRUFBQWhSLEdBQ0EsT0FBQU4sRUFBQVEsS0FBQUYsR0FHQU8sRUFBQUMsUUFBQXdRLDBCQ3JCQSxJQUFBdlEsRUFBYXBCLEVBQVEsUUFDckJtSSxFQUFXbkksRUFBUSxRQUNuQnFCLEVBQVVyQixFQUFRLFFBQ2xCNFIsRUFBVTVSLEVBQVEsT0FBUkEsQ0FBZ0IsT0FDMUI2UixFQUFnQjdSLEVBQVEsUUFDeEJvSyxFQUFBLFdBQ0EwSCxHQUFBLEdBQUFELEdBQUFqTCxNQUFBd0QsR0FFQXBLLEVBQVEsUUFBUytSLGNBQUEsU0FBQXZOLEdBQ2pCLE9BQUFxTixFQUFBaFIsS0FBQTJELEtBR0F0RCxFQUFBQyxRQUFBLFNBQUErSyxFQUFBekgsRUFBQTBLLEVBQUE2QyxHQUNBLElBQUFyRyxFQUFBLG1CQUFBd0QsRUFDQXhELElBQUF0SyxFQUFBOE4sRUFBQSxTQUFBaEgsRUFBQWdILEVBQUEsT0FBQTFLLElBQ0F5SCxFQUFBekgsS0FBQTBLLElBQ0F4RCxJQUFBdEssRUFBQThOLEVBQUF5QyxJQUFBekosRUFBQWdILEVBQUF5QyxFQUFBMUYsRUFBQXpILEdBQUEsR0FBQXlILEVBQUF6SCxHQUFBcU4sRUFBQUcsS0FBQXhILE9BQUFoRyxNQUNBeUgsSUFBQTlLLEVBQ0E4SyxFQUFBekgsR0FBQTBLLEVBQ0c2QyxFQUdBOUYsRUFBQXpILEdBQ0h5SCxFQUFBekgsR0FBQTBLLEVBRUFoSCxFQUFBK0QsRUFBQXpILEVBQUEwSyxXQUxBakQsRUFBQXpILEdBQ0EwRCxFQUFBK0QsRUFBQXpILEVBQUEwSyxPQU9DZCxTQUFBbE8sVUFBQWlLLEVBQUEsV0FDRCx5QkFBQTlGLFdBQUFzTixJQUFBQyxFQUFBaFIsS0FBQXlELGdDQzVCQSxJQUFBbEMsRUFBZXBDLEVBQVEsUUFDdkJrUyxFQUFVbFMsRUFBUSxRQUNsQmlNLEVBQWtCak0sRUFBUSxRQUMxQm1TLEVBQWVuUyxFQUFRLE9BQVJBLENBQXVCLFlBQ3RDb1MsRUFBQSxhQUNBN08sRUFBQSxZQUdBOE8sRUFBQSxXQUVBLElBSUFDLEVBSkFDLEVBQWV2UyxFQUFRLE9BQVJBLENBQXVCLFVBQ3RDc0YsRUFBQTJHLEVBQUF6RyxPQUNBZ04sRUFBQSxJQUNBQyxFQUFBLElBRUFGLEVBQUFHLE1BQUFDLFFBQUEsT0FDRTNTLEVBQVEsUUFBUzhPLFlBQUF5RCxHQUNuQkEsRUFBQUssSUFBQSxjQUdBTixFQUFBQyxFQUFBTSxjQUFBekQsU0FDQWtELEVBQUFRLE9BQ0FSLEVBQUFTLE1BQUFQLEVBQUEsU0FBQUMsRUFBQSxvQkFBQUQsRUFBQSxVQUFBQyxHQUNBSCxFQUFBVSxRQUNBWCxFQUFBQyxFQUFBNUwsRUFDQSxNQUFBcEIsV0FBQStNLEVBQUE5TyxHQUFBMEksRUFBQTNHLElBQ0EsT0FBQStNLEtBR0FuUixFQUFBQyxRQUFBakIsT0FBQW9ILFFBQUEsU0FBQTRFLEVBQUFLLEdBQ0EsSUFBQXRMLEVBUUEsT0FQQSxPQUFBaUwsR0FDQWtHLEVBQUE3TyxHQUFBbkIsRUFBQThKLEdBQ0FqTCxFQUFBLElBQUFtUixFQUNBQSxFQUFBN08sR0FBQSxLQUVBdEMsRUFBQWtSLEdBQUFqRyxHQUNHakwsRUFBQW9SLFNBQ0g1UixJQUFBOEwsRUFBQXRMLEVBQUFpUixFQUFBalIsRUFBQXNMLDRCQ3ZDQSxJQUFBMEcsRUFBaUJqVCxFQUFRLFFBR3pCa1QsRUFBQSxpQkFBQUMsaUJBQUFqVCxpQkFBQWlULEtBR0FDLEVBQUFILEdBQUFDLEdBQUE3RSxTQUFBLGNBQUFBLEdBRUFuTixFQUFBQyxRQUFBaVMsMEJDUkEsSUFBQXJNLEVBQVkvRyxFQUFRLE9BQVJBLENBQW1CLE9BQy9COEIsRUFBVTlCLEVBQVEsUUFDbEJELEVBQWFDLEVBQVEsUUFBV0QsT0FDaENzVCxFQUFBLG1CQUFBdFQsRUFFQXVULEVBQUFwUyxFQUFBQyxRQUFBLFNBQUFvRixHQUNBLE9BQUFRLEVBQUFSLEtBQUFRLEVBQUFSLEdBQ0E4TSxHQUFBdFQsRUFBQXdHLEtBQUE4TSxFQUFBdFQsRUFBQStCLEdBQUEsVUFBQXlFLEtBR0ErTSxFQUFBdk0sOEJDVkE3RixFQUFBQyxTQUFBLHdCQ0FBLElBQUFiLEVBQUEsR0FBaUJBLFNBRWpCWSxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLE9BQUFsRSxFQUFBTyxLQUFBMkQsR0FBQW9HLE1BQUEsNENDRkEsSUFBQTFDLEVBQWNsSSxFQUFRLFFBQ3RCdUIsRUFBY3ZCLEVBQVEsUUFDdEJ3QixFQUFleEIsRUFBUSxRQUN2Qm1JLEVBQVduSSxFQUFRLFFBQ25Cb0ksRUFBZ0JwSSxFQUFRLFFBQ3hCcUksRUFBa0JySSxFQUFRLFFBQzFCNkIsRUFBcUI3QixFQUFRLFFBQzdCc0ksRUFBcUJ0SSxFQUFRLFFBQzdCdUksRUFBZXZJLEVBQVEsT0FBUkEsQ0FBZ0IsWUFDL0J3SSxJQUFBLEdBQUFuRCxNQUFBLFdBQUFBLFFBQ0FvRCxFQUFBLGFBQ0FDLEVBQUEsT0FDQUMsRUFBQSxTQUVBQyxFQUFBLFdBQThCLE9BQUF0RSxNQUU5QnBELEVBQUFDLFFBQUEsU0FBQTBILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FkLEVBQUFVLEVBQUFELEVBQUFFLEdBQ0EsSUFlQUksRUFBQTNFLEVBQUE0RSxFQWZBQyxFQUFBLFNBQUFDLEdBQ0EsSUFBQWYsR0FBQWUsS0FBQUMsRUFBQSxPQUFBQSxFQUFBRCxHQUNBLE9BQUFBLEdBQ0EsS0FBQWIsRUFBQSxrQkFBeUMsV0FBQUssRUFBQXpFLEtBQUFpRixJQUN6QyxLQUFBWixFQUFBLGtCQUE2QyxXQUFBSSxFQUFBekUsS0FBQWlGLElBQ3hDLGtCQUE0QixXQUFBUixFQUFBekUsS0FBQWlGLEtBRWpDRSxFQUFBWCxFQUFBLFlBQ0FZLEVBQUFULEdBQUFOLEVBQ0FnQixHQUFBLEVBQ0FILEVBQUFYLEVBQUExSSxVQUNBeUosRUFBQUosRUFBQWpCLElBQUFpQixFQUFBZixJQUFBUSxHQUFBTyxFQUFBUCxHQUNBWSxFQUFBRCxHQUFBTixFQUFBTCxHQUNBYSxFQUFBYixFQUFBUyxFQUFBSixFQUFBLFdBQUFPLE9BQUFwSixFQUNBc0osRUFBQSxTQUFBakIsR0FBQVUsRUFBQVEsU0FBQUosRUF3QkEsR0FyQkFHLElBQ0FWLEVBQUFmLEVBQUF5QixFQUFBbEosS0FBQSxJQUFBZ0ksSUFDQVEsSUFBQW5KLE9BQUFDLFdBQUFrSixFQUFBTCxPQUVBbkgsRUFBQXdILEVBQUFJLEdBQUEsR0FFQXZCLEdBQUEsbUJBQUFtQixFQUFBZCxJQUFBSixFQUFBa0IsRUFBQWQsRUFBQUssS0FJQWMsR0FBQUUsS0FBQXJELE9BQUFvQyxJQUNBZ0IsR0FBQSxFQUNBRSxFQUFBLFdBQWtDLE9BQUFELEVBQUEvSSxLQUFBeUQsUUFHbEM0RCxJQUFBaUIsSUFBQVgsSUFBQW1CLEdBQUFILEVBQUFqQixJQUNBSixFQUFBcUIsRUFBQWpCLEVBQUFzQixHQUdBekIsRUFBQVUsR0FBQWUsRUFDQXpCLEVBQUFxQixHQUFBYixFQUNBSyxFQU1BLEdBTEFHLEVBQUEsQ0FDQWEsT0FBQVAsRUFBQUcsRUFBQVAsRUFBQVgsR0FDQXRELEtBQUE2RCxFQUFBVyxFQUFBUCxFQUFBWixHQUNBc0IsUUFBQUYsR0FFQVgsRUFBQSxJQUFBMUUsS0FBQTJFLEVBQ0EzRSxLQUFBK0UsR0FBQWhJLEVBQUFnSSxFQUFBL0UsRUFBQTJFLEVBQUEzRSxTQUNLbEQsSUFBQTZELEVBQUE3RCxFQUFBbUYsR0FBQThCLEdBQUFtQixHQUFBYixFQUFBTSxHQUVMLE9BQUFBLHlCQ2xFQWxJLEVBQUFDLFFBQUEsU0FBQThNLEVBQUFuRyxFQUFBdUMsR0FDQSxJQUFBa0osT0FBQTlTLElBQUE0SixFQUNBLE9BQUF2QyxFQUFBdEMsUUFDQSxjQUFBK04sRUFBQXRGLElBQ0FBLEVBQUFwTixLQUFBd0osR0FDQSxjQUFBa0osRUFBQXRGLEVBQUFuRyxFQUFBLElBQ0FtRyxFQUFBcE4sS0FBQXdKLEVBQUF2QyxFQUFBLElBQ0EsY0FBQXlMLEVBQUF0RixFQUFBbkcsRUFBQSxHQUFBQSxFQUFBLElBQ0FtRyxFQUFBcE4sS0FBQXdKLEVBQUF2QyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxjQUFBeUwsRUFBQXRGLEVBQUFuRyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBbUcsRUFBQXBOLEtBQUF3SixFQUFBdkMsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxjQUFBeUwsRUFBQXRGLEVBQUFuRyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0FtRyxFQUFBcE4sS0FBQXdKLEVBQUF2QyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0csT0FBQW1HLEVBQUFsRyxNQUFBc0MsRUFBQXZDLDRCQ2JILElBQUEwTCxFQUFleFQsRUFBUSxRQUN2QjZDLEVBQVk3QyxFQUFRLFFBRXBCQSxFQUFRLE9BQVJBLENBQXVCLGtCQUN2QixnQkFBQXdFLEdBQ0EsT0FBQTNCLEVBQUEyUSxFQUFBaFAsK0JDTkEsSUFBQXhCLEVBQVNoRCxFQUFRLFFBQ2pCd0MsRUFBaUJ4QyxFQUFRLFFBQ3pCa0IsRUFBQUMsUUFBaUJuQixFQUFRLFFBQWdCLFNBQUF5VCxFQUFBaFAsRUFBQTlELEdBQ3pDLE9BQUFxQyxFQUFBRCxFQUFBMFEsRUFBQWhQLEVBQUFqQyxFQUFBLEVBQUE3QixLQUNDLFNBQUE4UyxFQUFBaFAsRUFBQTlELEdBRUQsT0FEQThTLEVBQUFoUCxHQUFBOUQsRUFDQThTLDJCQ05BLElBQUFyRSxFQUFlcFAsRUFBUSxRQUFXb1AsU0FDbENsTyxFQUFBQyxRQUFBaU8sS0FBQXNFLHdDQ0FBLElBQUF2QyxFQUFVblIsRUFBUSxRQUVsQmtCLEVBQUFDLFFBQUFqQixPQUFBLEtBQUF5RCxxQkFBQSxHQUFBekQsT0FBQSxTQUFBc0UsR0FDQSxnQkFBQTJNLEVBQUEzTSxLQUFBb0MsTUFBQSxJQUFBMUcsT0FBQXNFLDRCQ0hBLElBQUE0RCxFQUFnQnBJLEVBQVEsUUFDeEJ1SSxFQUFldkksRUFBUSxPQUFSQSxDQUFnQixZQUMvQjJULEVBQUFDLE1BQUF6VCxVQUVBZSxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLFlBQUEvRCxJQUFBK0QsSUFBQTRELEVBQUF3TCxRQUFBcFAsR0FBQW1QLEVBQUFwTCxLQUFBL0QsMEJDTkFyRCxFQUFBNEIsRUFBQSxHQUFjWSw2Q0NBZCxJQUFBWCxFQUFTaEQsRUFBUSxRQUNqQndDLEVBQWlCeEMsRUFBUSxRQUN6QmtCLEVBQUFDLFFBQWlCbkIsRUFBUSxRQUFnQixTQUFBeVQsRUFBQWhQLEVBQUE5RCxHQUN6QyxPQUFBcUMsRUFBQUQsRUFBQTBRLEVBQUFoUCxFQUFBakMsRUFBQSxFQUFBN0IsS0FDQyxTQUFBOFMsRUFBQWhQLEVBQUE5RCxHQUVELE9BREE4UyxFQUFBaFAsR0FBQTlELEVBQ0E4UywyQkNMQSxJQUFBSSxFQUFjN1QsRUFBUSxRQUN0Qm1LLEVBQWNuSyxFQUFRLFFBQ3RCa0IsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxPQUFBcVAsRUFBQTFKLEVBQUEzRiwyQkNKQSxJQUFBekUsRUFBYUMsRUFBUSxRQUNyQlUsRUFBZ0JWLEVBQVEsUUFDeEIyUixFQUFxQjNSLEVBQVEsUUFHN0I4VCxFQUFBLGdCQUNBQyxFQUFBLHFCQUdBeFQsRUFBQVIsSUFBQVMsaUJBQUFDLEVBU0EsU0FBQXVULEVBQUFyVCxHQUNBLGFBQUFBLE9BQ0FGLElBQUFFLEVBQUFvVCxFQUFBRCxFQUVBdlQsUUFBQUwsT0FBQVMsR0FDQUQsRUFBQUMsR0FDQWdSLEVBQUFoUixHQUdBTyxFQUFBQyxRQUFBNlMsd0JDMUJJaFUsRUFBUSxTQUFnQixVQUFBaVUsT0FBd0JqVSxFQUFRLFFBQWMrQyxFQUFBaU8sT0FBQTdRLFVBQUEsU0FDMUVrRyxjQUFBLEVBQ0FoQyxJQUFPckUsRUFBUSwrQ0NEZixJQUFBb0MsRUFBZXBDLEVBQVEsUUFDdkJrVSxFQUFnQmxVLEVBQVEsUUFDeEJtVSxFQUFpQm5VLEVBQVEsUUFHekJBLEVBQVEsT0FBUkEsQ0FBdUIsb0JBQUFtSyxFQUFBaUssRUFBQUMsRUFBQUMsR0FDdkIsT0FHQSxTQUFBNUQsR0FDQSxJQUFBeEUsRUFBQS9CLEVBQUE3RixNQUNBMkosT0FBQXhOLEdBQUFpUSxPQUFBalEsRUFBQWlRLEVBQUEwRCxHQUNBLFlBQUEzVCxJQUFBd04sSUFBQXBOLEtBQUE2UCxFQUFBeEUsR0FBQSxJQUFBOEUsT0FBQU4sR0FBQTBELEdBQUEzSixPQUFBeUIsS0FJQSxTQUFBd0UsR0FDQSxJQUFBNkQsRUFBQUQsRUFBQUQsRUFBQTNELEVBQUFwTSxNQUNBLEdBQUFpUSxFQUFBMUgsS0FBQSxPQUFBMEgsRUFBQTVULE1BQ0EsSUFBQTZULEVBQUFwUyxFQUFBc08sR0FDQXpKLEVBQUF3RCxPQUFBbkcsTUFDQW1RLEVBQUFELEVBQUFFLFVBQ0FSLEVBQUFPLEVBQUEsS0FBQUQsRUFBQUUsVUFBQSxHQUNBLElBQUF6VCxFQUFBa1QsRUFBQUssRUFBQXZOLEdBRUEsT0FEQWlOLEVBQUFNLEVBQUFFLFVBQUFELEtBQUFELEVBQUFFLFVBQUFELEdBQ0EsT0FBQXhULEdBQUEsRUFBQUEsRUFBQTZKLGtDQzFCQSxJQUFBekosRUFBVXJCLEVBQVEsUUFDbEJ3VCxFQUFleFQsRUFBUSxRQUN2Qm1TLEVBQWVuUyxFQUFRLE9BQVJBLENBQXVCLFlBQ3RDK0QsRUFBQTdELE9BQUFDLFVBRUFlLEVBQUFDLFFBQUFqQixPQUFBb0ksZ0JBQUEsU0FBQTRELEdBRUEsT0FEQUEsRUFBQXNILEVBQUF0SCxHQUNBN0ssRUFBQTZLLEVBQUFpRyxHQUFBakcsRUFBQWlHLEdBQ0EsbUJBQUFqRyxFQUFBb0UsYUFBQXBFLGVBQUFvRSxZQUNBcEUsRUFBQW9FLFlBQUFuUSxVQUNHK0wsYUFBQWhNLE9BQUE2RCxFQUFBLDRCQ1ZILElBQUE0USxFQUFBMU0sS0FBQTBNLEtBQ0FDLEVBQUEzTSxLQUFBMk0sTUFDQTFULEVBQUFDLFFBQUEsU0FBQXFELEdBQ0EsT0FBQXFRLE1BQUFyUSxNQUFBLEdBQUFBLEVBQUEsRUFBQW9RLEVBQUFELEdBQUFuUSw0QkNKQSxJQUFBNE8sRUFBV3BULEVBQVEsUUFrQm5CdU8sRUFBQSxXQUNBLE9BQUE2RSxFQUFBMEIsS0FBQXZHLE9BR0FyTixFQUFBQyxRQUFBb04sMEJDckJBLElBQUE0QyxFQUFVblIsRUFBUSxRQUNsQnlKLEVBQVV6SixFQUFRLE9BQVJBLENBQWdCLGVBRTFCb1IsRUFBK0MsYUFBL0NELEVBQUEsV0FBMkIsT0FBQWhMLFVBQTNCLElBR0FrTCxFQUFBLFNBQUE3TSxFQUFBQyxHQUNBLElBQ0EsT0FBQUQsRUFBQUMsR0FDRyxNQUFBekQsTUFHSEUsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxJQUFBMEgsRUFBQW9GLEVBQUFDLEVBQ0EsWUFBQTlRLElBQUErRCxFQUFBLG1CQUFBQSxFQUFBLE9BRUEsaUJBQUE4TSxFQUFBRCxFQUFBbkYsRUFBQWhNLE9BQUFzRSxHQUFBaUYsSUFBQTZILEVBRUFGLEVBQUFELEVBQUFqRixHQUVBLFdBQUFxRixFQUFBSixFQUFBakYsS0FBQSxtQkFBQUEsRUFBQXNGLE9BQUEsWUFBQUQsd0NDcEJBLElBQUFqSyxFQUFhdEgsRUFBUSxRQUNyQitVLEVBQWlCL1UsRUFBUSxRQUN6QjZCLEVBQXFCN0IsRUFBUSxRQUM3QnFKLEVBQUEsR0FHQXJKLEVBQVEsT0FBUkEsQ0FBaUJxSixFQUFxQnJKLEVBQVEsT0FBUkEsQ0FBZ0IsdUJBQTRCLE9BQUFzRSxPQUVsRnBELEVBQUFDLFFBQUEsU0FBQTRILEVBQUFELEVBQUFFLEdBQ0FELEVBQUE1SSxVQUFBbUgsRUFBQStCLEVBQUEsQ0FBcURMLEtBQUErTCxFQUFBLEVBQUEvTCxLQUNyRG5ILEVBQUFrSCxFQUFBRCxFQUFBLHNDQ1hBOUksRUFBUSxRQUNSLElBQUFnVixFQUFjaFYsRUFBUSxRQUFxQkUsT0FDM0NnQixFQUFBQyxRQUFBLFNBQUFxRCxFQUFBQyxFQUFBd1EsR0FDQSxPQUFBRCxFQUFBek4sZUFBQS9DLEVBQUFDLEVBQUF3USx3QkNGQSxJQUFBTixFQUFBMU0sS0FBQTBNLEtBQ0FDLEVBQUEzTSxLQUFBMk0sTUFDQTFULEVBQUFDLFFBQUEsU0FBQXFELEdBQ0EsT0FBQXFRLE1BQUFyUSxNQUFBLEdBQUFBLEVBQUEsRUFBQW9RLEVBQUFELEdBQUFuUSw0QkNKQSxJQUFBMFEsRUFBVWxWLEVBQVEsUUFBYytDLEVBQ2hDMUIsRUFBVXJCLEVBQVEsUUFDbEJ5SixFQUFVekosRUFBUSxPQUFSQSxDQUFnQixlQUUxQmtCLEVBQUFDLFFBQUEsU0FBQXFELEVBQUExRCxFQUFBcVUsR0FDQTNRLElBQUFuRCxFQUFBbUQsRUFBQTJRLEVBQUEzUSxJQUFBckUsVUFBQXNKLElBQUF5TCxFQUFBMVEsRUFBQWlGLEVBQUEsQ0FBb0VwRCxjQUFBLEVBQUExRixNQUFBRyx5QkNMcEVJLEVBQUFDLFFBQUEsU0FBQWlVLEVBQUF6VSxHQUNBLE9BQ0F1RSxhQUFBLEVBQUFrUSxHQUNBL08sZUFBQSxFQUFBK08sR0FDQUMsV0FBQSxFQUFBRCxHQUNBelUsa0NDTEFYLEVBQVEsUUFDUkEsRUFBUSxRQUNSa0IsRUFBQUMsUUFBaUJuQixFQUFRLGdDQ0Z6QixJQUFBdUIsRUFBY3ZCLEVBQVEsUUFFdEJ1QixJQUFBMEYsRUFBQTFGLEVBQUFtRixHQUFpQzFHLEVBQVEsUUFBZ0IsVUFBY3VILGVBQWlCdkgsRUFBUSxRQUFjK0MsNEJDRDlHLElBQUF1SixFQUFjdE0sRUFBUSxRQUN0QnNWLEVBQVd0VixFQUFRLFFBQ25CdVYsRUFBVXZWLEVBQVEsUUFDbEJrQixFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLElBQUF2RCxFQUFBcUwsRUFBQTlILEdBQ0FnUixFQUFBRixFQUFBdlMsRUFDQSxHQUFBeVMsRUFBQSxDQUNBLElBR0EvUSxFQUhBZ1IsRUFBQUQsRUFBQWhSLEdBQ0FkLEVBQUE2UixFQUFBeFMsRUFDQXVDLEVBQUEsRUFFQSxNQUFBbVEsRUFBQWpRLE9BQUFGLEVBQUE1QixFQUFBN0MsS0FBQTJELEVBQUFDLEVBQUFnUixFQUFBblEsT0FBQXJFLEVBQUE4RSxLQUFBdEIsR0FDRyxPQUFBeEQseUJDYkhDLEVBQUFDLFFBQUEsMkJDQUEsSUFBQThMLEVBQVVqTixFQUFRLFFBQ2xCYSxFQUFXYixFQUFRLFFBQ25CMFYsRUFBa0IxVixFQUFRLFFBQzFCb0MsRUFBZXBDLEVBQVEsUUFDdkIyVixFQUFlM1YsRUFBUSxRQUN2QjRWLEVBQWdCNVYsRUFBUSxRQUN4QjZWLEVBQUEsR0FDQUMsRUFBQSxHQUNBM1UsRUFBQUQsRUFBQUMsUUFBQSxTQUFBNFUsRUFBQS9MLEVBQUFpRSxFQUFBNUQsRUFBQTlCLEdBQ0EsSUFHQS9DLEVBQUF3USxFQUFBaFIsRUFBQS9ELEVBSEFnVixFQUFBMU4sRUFBQSxXQUF1QyxPQUFBd04sR0FBbUJILEVBQUFHLEdBQzFEaFQsRUFBQWtLLEVBQUFnQixFQUFBNUQsRUFBQUwsRUFBQSxLQUNBYyxFQUFBLEVBRUEsc0JBQUFtTCxFQUFBLE1BQUEvUCxVQUFBNlAsRUFBQSxxQkFFQSxHQUFBTCxFQUFBTyxJQUFBLElBQUF6USxFQUFBbVEsRUFBQUksRUFBQXZRLFFBQW1FQSxFQUFBc0YsRUFBZ0JBLElBRW5GLEdBREE3SixFQUFBK0ksRUFBQWpILEVBQUFYLEVBQUE0VCxFQUFBRCxFQUFBakwsSUFBQSxHQUFBa0wsRUFBQSxJQUFBalQsRUFBQWdULEVBQUFqTCxJQUNBN0osSUFBQTRVLEdBQUE1VSxJQUFBNlUsRUFBQSxPQUFBN1UsT0FDRyxJQUFBK0QsRUFBQWlSLEVBQUFwVixLQUFBa1YsS0FBNENDLEVBQUFoUixFQUFBZ0UsUUFBQTZELE1BRS9DLEdBREE1TCxFQUFBSixFQUFBbUUsRUFBQWpDLEVBQUFpVCxFQUFBclYsTUFBQXFKLEdBQ0EvSSxJQUFBNFUsR0FBQTVVLElBQUE2VSxFQUFBLE9BQUE3VSxHQUdBRSxFQUFBMFUsUUFDQTFVLEVBQUEyVSxpQ0N2QkEsSUFBQTNMLEVBQWNuSyxFQUFRLFFBQ3RCa0IsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxPQUFBdEUsT0FBQWlLLEVBQUEzRiwyQkNIQXRELEVBQUFDLFFBQUEsU0FBQTBMLEVBQUFsTSxHQUNBLE9BQVVBLFFBQUFrTSxpQ0NEVixJQUFBOUYsRUFBWS9HLEVBQVEsT0FBUkEsQ0FBbUIsT0FDL0I4QixFQUFVOUIsRUFBUSxRQUNsQkQsRUFBYUMsRUFBUSxRQUFXRCxPQUNoQ3NULEVBQUEsbUJBQUF0VCxFQUVBdVQsRUFBQXBTLEVBQUFDLFFBQUEsU0FBQW9GLEdBQ0EsT0FBQVEsRUFBQVIsS0FBQVEsRUFBQVIsR0FDQThNLEdBQUF0VCxFQUFBd0csS0FBQThNLEVBQUF0VCxFQUFBK0IsR0FBQSxVQUFBeUUsS0FHQStNLEVBQUF2TSw2Q0NSQSxJQUFBbVAsRUFBa0JsVyxFQUFRLFFBRTFCbVcsRUFBQW5GLE9BQUE3USxVQUFBMFAsS0FJQXVHLEVBQUEzTCxPQUFBdEssVUFBQTRQLFFBRUFzRyxFQUFBRixFQUVBRyxFQUFBLFlBRUFDLEVBQUEsV0FDQSxJQUFBQyxFQUFBLElBQ0FDLEVBQUEsTUFHQSxPQUZBTixFQUFBdFYsS0FBQTJWLEVBQUEsS0FDQUwsRUFBQXRWLEtBQUE0VixFQUFBLEtBQ0EsSUFBQUQsRUFBQUYsSUFBQSxJQUFBRyxFQUFBSCxHQUxBLEdBU0FJLE9BQUFqVyxJQUFBLE9BQUFvUCxLQUFBLE9BRUE4RyxFQUFBSixHQUFBRyxFQUVBQyxJQUNBTixFQUFBLFNBQUExRixHQUNBLElBQ0ErRCxFQUFBa0MsRUFBQUMsRUFBQXZSLEVBREFzSyxFQUFBdEwsS0F3QkEsT0FyQkFvUyxJQUNBRSxFQUFBLElBQUE1RixPQUFBLElBQUFwQixFQUFBa0gsT0FBQSxXQUFBWixFQUFBclYsS0FBQStPLEtBRUEyRyxJQUFBN0IsRUFBQTlFLEVBQUEwRyxJQUVBTyxFQUFBVixFQUFBdFYsS0FBQStPLEVBQUFlLEdBRUE0RixHQUFBTSxJQUNBakgsRUFBQTBHLEdBQUExRyxFQUFBeE8sT0FBQXlWLEVBQUEvTCxNQUFBK0wsRUFBQSxHQUFBclIsT0FBQWtQLEdBRUFnQyxHQUFBRyxLQUFBclIsT0FBQSxHQUlBNFEsRUFBQXZWLEtBQUFnVyxFQUFBLEdBQUFELEVBQUEsV0FDQSxJQUFBdFIsRUFBQSxFQUFtQkEsRUFBQWEsVUFBQVgsT0FBQSxFQUEwQkYsU0FDN0M3RSxJQUFBMEYsVUFBQWIsS0FBQXVSLEVBQUF2UixRQUFBN0UsS0FLQW9XLElBSUEzVixFQUFBQyxRQUFBa1Ysd0JDekRBbFYsRUFBQTRCLEVBQUEsR0FBY1ksNkNDQ2QsSUFBQXRDLEVBQVVyQixFQUFRLFFBQ2xCd1QsRUFBZXhULEVBQVEsUUFDdkJtUyxFQUFlblMsRUFBUSxPQUFSQSxDQUF1QixZQUN0QytELEVBQUE3RCxPQUFBQyxVQUVBZSxFQUFBQyxRQUFBakIsT0FBQW9JLGdCQUFBLFNBQUE0RCxHQUVBLE9BREFBLEVBQUFzSCxFQUFBdEgsR0FDQTdLLEVBQUE2SyxFQUFBaUcsR0FBQWpHLEVBQUFpRyxHQUNBLG1CQUFBakcsRUFBQW9FLGFBQUFwRSxlQUFBb0UsWUFDQXBFLEVBQUFvRSxZQUFBblEsVUFDRytMLGFBQUFoTSxPQUFBNkQsRUFBQSwyQ0NWSCxJQXdCQWdULEVBQUFDLEVBQUFDLEVBQUFDLEVBeEJBaFAsRUFBY2xJLEVBQVEsUUFDdEJvQixFQUFhcEIsRUFBUSxRQUNyQmlOLEVBQVVqTixFQUFRLFFBQ2xCeVIsRUFBY3pSLEVBQVEsUUFDdEJ1QixFQUFjdkIsRUFBUSxRQUN0QnFDLEVBQWVyQyxFQUFRLFFBQ3ZCbVgsRUFBZ0JuWCxFQUFRLFFBQ3hCb1gsRUFBaUJwWCxFQUFRLFFBQ3pCcVgsRUFBWXJYLEVBQVEsUUFDcEJvTCxFQUF5QnBMLEVBQVEsUUFDakNzWCxFQUFXdFgsRUFBUSxRQUFTc0csSUFDNUJpUixFQUFnQnZYLEVBQVEsT0FBUkEsR0FDaEJ3WCxFQUFpQ3hYLEVBQVEsUUFDekN5WCxFQUFjelgsRUFBUSxRQUN0QjBYLEVBQWdCMVgsRUFBUSxRQUN4QnFMLEVBQXFCckwsRUFBUSxRQUM3QjJYLEVBQUEsVUFDQXpSLEVBQUE5RSxFQUFBOEUsVUFDQW1ILEVBQUFqTSxFQUFBaU0sUUFDQXVLLEVBQUF2SyxLQUFBdUssU0FDQUMsRUFBQUQsS0FBQUMsSUFBQSxHQUNBQyxFQUFBMVcsRUFBQXVXLEdBQ0FJLEVBQUEsV0FBQXRHLEVBQUFwRSxHQUNBMkssRUFBQSxhQUVBQyxFQUFBakIsRUFBQVEsRUFBQXpVLEVBRUFpQixJQUFBLFdBQ0EsSUFFQSxJQUFBa1UsRUFBQUosRUFBQUssUUFBQSxHQUNBQyxHQUFBRixFQUFBNUgsWUFBQSxJQUFpRHRRLEVBQVEsT0FBUkEsQ0FBZ0IscUJBQUE2UCxHQUNqRUEsRUFBQW1JLE1BR0EsT0FBQUQsR0FBQSxtQkFBQU0sd0JBQ0FILEVBQUF0TSxLQUFBb00sYUFBQUksR0FJQSxJQUFBUCxFQUFBUyxRQUFBLFNBQ0EsSUFBQVosRUFBQVksUUFBQSxhQUNHLE1BQUF0WCxLQWZILEdBbUJBdVgsRUFBQSxTQUFBL1QsR0FDQSxJQUFBb0gsRUFDQSxTQUFBdkosRUFBQW1DLElBQUEsbUJBQUFvSCxFQUFBcEgsRUFBQW9ILFdBRUE0TSxFQUFBLFNBQUFOLEVBQUFPLEdBQ0EsSUFBQVAsRUFBQVEsR0FBQSxDQUNBUixFQUFBUSxJQUFBLEVBQ0EsSUFBQUMsRUFBQVQsRUFBQVUsR0FDQXJCLEVBQUEsV0FDQSxJQUFBNVcsRUFBQXVYLEVBQUFXLEdBQ0FDLEVBQUEsR0FBQVosRUFBQWEsR0FDQXpULEVBQUEsRUFDQXlJLEVBQUEsU0FBQWlMLEdBQ0EsSUFJQS9YLEVBQUEySyxFQUFBcU4sRUFKQUMsRUFBQUosRUFBQUUsRUFBQUYsR0FBQUUsRUFBQUcsS0FDQWhCLEVBQUFhLEVBQUFiLFFBQ0FpQixFQUFBSixFQUFBSSxPQUNBQyxFQUFBTCxFQUFBSyxPQUVBLElBQ0FILEdBQ0FKLElBQ0EsR0FBQVosRUFBQW9CLElBQUFDLEVBQUFyQixHQUNBQSxFQUFBb0IsR0FBQSxJQUVBLElBQUFKLEVBQUFqWSxFQUFBTixHQUVBMFksS0FBQUcsUUFDQXZZLEVBQUFpWSxFQUFBdlksR0FDQTBZLElBQ0FBLEVBQUFJLE9BQ0FSLEdBQUEsSUFHQWhZLElBQUErWCxFQUFBZCxRQUNBa0IsRUFBQWxULEVBQUEseUJBQ1cwRixFQUFBMk0sRUFBQXRYLElBQ1gySyxFQUFBL0ssS0FBQUksRUFBQWtYLEVBQUFpQixHQUNXakIsRUFBQWxYLElBQ0ZtWSxFQUFBelksR0FDRixNQUFBSyxHQUNQcVksSUFBQUosR0FBQUksRUFBQUksT0FDQUwsRUFBQXBZLEtBR0EsTUFBQTJYLEVBQUFuVCxPQUFBRixFQUFBeUksRUFBQTRLLEVBQUFyVCxNQUNBNFMsRUFBQVUsR0FBQSxHQUNBVixFQUFBUSxJQUFBLEVBQ0FELElBQUFQLEVBQUFvQixJQUFBSSxFQUFBeEIsT0FHQXdCLEVBQUEsU0FBQXhCLEdBQ0FaLEVBQUF6VyxLQUFBTyxFQUFBLFdBQ0EsSUFFQUgsRUFBQWlZLEVBQUFTLEVBRkFoWixFQUFBdVgsRUFBQVcsR0FDQWUsRUFBQUMsRUFBQTNCLEdBZUEsR0FiQTBCLElBQ0EzWSxFQUFBd1csRUFBQSxXQUNBTSxFQUNBMUssRUFBQXlNLEtBQUEscUJBQUFuWixFQUFBdVgsSUFDU2dCLEVBQUE5WCxFQUFBMlksc0JBQ1RiLEVBQUEsQ0FBbUJoQixVQUFBOEIsT0FBQXJaLEtBQ1ZnWixFQUFBdlksRUFBQXVZLFlBQUFNLE9BQ1ROLEVBQUFNLE1BQUEsOEJBQUF0WixLQUlBdVgsRUFBQW9CLEdBQUF2QixHQUFBOEIsRUFBQTNCLEdBQUEsS0FDS0EsRUFBQWdDLFFBQUF6WixFQUNMbVosR0FBQTNZLEVBQUFELEVBQUEsTUFBQUMsRUFBQWtaLEtBR0FOLEVBQUEsU0FBQTNCLEdBQ0EsV0FBQUEsRUFBQW9CLElBQUEsS0FBQXBCLEVBQUFnQyxJQUFBaEMsRUFBQVUsSUFBQXBULFFBRUErVCxFQUFBLFNBQUFyQixHQUNBWixFQUFBelcsS0FBQU8sRUFBQSxXQUNBLElBQUE4WCxFQUNBbkIsRUFDQTFLLEVBQUF5TSxLQUFBLG1CQUFBNUIsSUFDS2dCLEVBQUE5WCxFQUFBZ1oscUJBQ0xsQixFQUFBLENBQWVoQixVQUFBOEIsT0FBQTlCLEVBQUFXLFFBSWZ3QixFQUFBLFNBQUExWixHQUNBLElBQUF1WCxFQUFBNVQsS0FDQTRULEVBQUFvQyxLQUNBcEMsRUFBQW9DLElBQUEsRUFDQXBDLElBQUFxQyxJQUFBckMsRUFDQUEsRUFBQVcsR0FBQWxZLEVBQ0F1WCxFQUFBYSxHQUFBLEVBQ0FiLEVBQUFnQyxLQUFBaEMsRUFBQWdDLEdBQUFoQyxFQUFBVSxHQUFBaE8sU0FDQTROLEVBQUFOLEdBQUEsS0FFQXNDLEVBQUEsU0FBQTdaLEdBQ0EsSUFDQWlMLEVBREFzTSxFQUFBNVQsS0FFQSxJQUFBNFQsRUFBQW9DLEdBQUEsQ0FDQXBDLEVBQUFvQyxJQUFBLEVBQ0FwQyxJQUFBcUMsSUFBQXJDLEVBQ0EsSUFDQSxHQUFBQSxJQUFBdlgsRUFBQSxNQUFBdUYsRUFBQSxxQ0FDQTBGLEVBQUEyTSxFQUFBNVgsSUFDQTRXLEVBQUEsV0FDQSxJQUFBa0QsRUFBQSxDQUF1QkYsR0FBQXJDLEVBQUFvQyxJQUFBLEdBQ3ZCLElBQ0ExTyxFQUFBL0ssS0FBQUYsRUFBQXNNLEVBQUF1TixFQUFBQyxFQUFBLEdBQUF4TixFQUFBb04sRUFBQUksRUFBQSxJQUNTLE1BQUF6WixHQUNUcVosRUFBQXhaLEtBQUE0WixFQUFBelosT0FJQWtYLEVBQUFXLEdBQUFsWSxFQUNBdVgsRUFBQWEsR0FBQSxFQUNBUCxFQUFBTixHQUFBLElBRUcsTUFBQWxYLEdBQ0hxWixFQUFBeFosS0FBQSxDQUFrQjBaLEdBQUFyQyxFQUFBb0MsSUFBQSxHQUF5QnRaLE1BSzNDZ0QsSUFFQThULEVBQUEsU0FBQTRDLEdBQ0F0RCxFQUFBOVMsS0FBQXdULEVBQUFILEVBQUEsTUFDQVIsRUFBQXVELEdBQ0EzRCxFQUFBbFcsS0FBQXlELE1BQ0EsSUFDQW9XLEVBQUF6TixFQUFBdU4sRUFBQWxXLEtBQUEsR0FBQTJJLEVBQUFvTixFQUFBL1YsS0FBQSxJQUNLLE1BQUFxVyxHQUNMTixFQUFBeFosS0FBQXlELEtBQUFxVyxLQUlBNUQsRUFBQSxTQUFBMkQsR0FDQXBXLEtBQUFzVSxHQUFBLEdBQ0F0VSxLQUFBNFYsUUFBQXpaLEVBQ0E2RCxLQUFBeVUsR0FBQSxFQUNBelUsS0FBQWdXLElBQUEsRUFDQWhXLEtBQUF1VSxRQUFBcFksRUFDQTZELEtBQUFnVixHQUFBLEVBQ0FoVixLQUFBb1UsSUFBQSxHQUVBM0IsRUFBQTVXLFVBQXVCSCxFQUFRLE9BQVJBLENBQXlCOFgsRUFBQTNYLFVBQUEsQ0FFaER5TCxLQUFBLFNBQUFnUCxFQUFBQyxHQUNBLElBQUE3QixFQUFBZixFQUFBN00sRUFBQTlHLEtBQUF3VCxJQU9BLE9BTkFrQixFQUFBRixHQUFBLG1CQUFBOEIsS0FDQTVCLEVBQUFHLEtBQUEsbUJBQUEwQixLQUNBN0IsRUFBQUssT0FBQXRCLEVBQUExSyxFQUFBZ00sWUFBQTVZLEVBQ0E2RCxLQUFBc1UsR0FBQTdTLEtBQUFpVCxHQUNBMVUsS0FBQTRWLElBQUE1VixLQUFBNFYsR0FBQW5VLEtBQUFpVCxHQUNBMVUsS0FBQXlVLElBQUFQLEVBQUFsVSxNQUFBLEdBQ0EwVSxFQUFBZCxTQUdBNEMsTUFBQSxTQUFBRCxHQUNBLE9BQUF2VyxLQUFBc0gsVUFBQW5MLEVBQUFvYSxNQUdBNUQsRUFBQSxXQUNBLElBQUFpQixFQUFBLElBQUFuQixFQUNBelMsS0FBQTRULFVBQ0E1VCxLQUFBNlQsUUFBQWxMLEVBQUF1TixFQUFBdEMsRUFBQSxHQUNBNVQsS0FBQThVLE9BQUFuTSxFQUFBb04sRUFBQW5DLEVBQUEsSUFFQVYsRUFBQXpVLEVBQUFrVixFQUFBLFNBQUF4TSxHQUNBLE9BQUFBLElBQUFxTSxHQUFBck0sSUFBQXlMLEVBQ0EsSUFBQUQsRUFBQXhMLEdBQ0F1TCxFQUFBdkwsS0FJQWxLLElBQUFpRixFQUFBakYsRUFBQWtGLEVBQUFsRixFQUFBbUYsR0FBQTFDLEVBQUEsQ0FBMEQwSCxRQUFBb00sSUFDMUQ5WCxFQUFRLE9BQVJBLENBQThCOFgsRUFBQUgsR0FDOUIzWCxFQUFRLE9BQVJBLENBQXdCMlgsR0FDeEJULEVBQVVsWCxFQUFRLFFBQVMyWCxHQUczQnBXLElBQUEwRixFQUFBMUYsRUFBQW1GLEdBQUExQyxFQUFBMlQsRUFBQSxDQUVBeUIsT0FBQSxTQUFBMkIsR0FDQSxJQUFBQyxFQUFBL0MsRUFBQTNULE1BQ0EyVyxFQUFBRCxFQUFBNUIsT0FFQSxPQURBNkIsRUFBQUYsR0FDQUMsRUFBQTlDLFdBR0EzVyxJQUFBMEYsRUFBQTFGLEVBQUFtRixHQUFBd0IsSUFBQWxFLEdBQUEyVCxFQUFBLENBRUFRLFFBQUEsU0FBQXRNLEdBQ0EsT0FBQVIsRUFBQW5ELEdBQUE1RCxPQUFBNFMsRUFBQVksRUFBQXhULEtBQUF1SCxNQUdBdEssSUFBQTBGLEVBQUExRixFQUFBbUYsSUFBQTFDLEdBQWdEaEUsRUFBUSxPQUFSQSxDQUF3QixTQUFBa2IsR0FDeEVwRCxFQUFBcUQsSUFBQUQsR0FBQSxTQUFBbEQsTUFDQ0wsRUFBQSxDQUVEd0QsSUFBQSxTQUFBcEYsR0FDQSxJQUFBdEssRUFBQW5ILEtBQ0EwVyxFQUFBL0MsRUFBQXhNLEdBQ0EwTSxFQUFBNkMsRUFBQTdDLFFBQ0FpQixFQUFBNEIsRUFBQTVCLE9BQ0FuWSxFQUFBd1csRUFBQSxXQUNBLElBQUF4TixFQUFBLEdBQ0FhLEVBQUEsRUFDQXNRLEVBQUEsRUFDQS9ELEVBQUF0QixHQUFBLFdBQUFtQyxHQUNBLElBQUFtRCxFQUFBdlEsSUFDQXdRLEdBQUEsRUFDQXJSLEVBQUFsRSxVQUFBdEYsR0FDQTJhLElBQ0EzUCxFQUFBME0sUUFBQUQsR0FBQXRNLEtBQUEsU0FBQWpMLEdBQ0EyYSxJQUNBQSxHQUFBLEVBQ0FyUixFQUFBb1IsR0FBQTFhLElBQ0F5YSxHQUFBakQsRUFBQWxPLEtBQ1NtUCxPQUVUZ0MsR0FBQWpELEVBQUFsTyxLQUdBLE9BREFoSixFQUFBRCxHQUFBb1ksRUFBQW5ZLEVBQUFrWixHQUNBYSxFQUFBOUMsU0FHQXFELEtBQUEsU0FBQXhGLEdBQ0EsSUFBQXRLLEVBQUFuSCxLQUNBMFcsRUFBQS9DLEVBQUF4TSxHQUNBMk4sRUFBQTRCLEVBQUE1QixPQUNBblksRUFBQXdXLEVBQUEsV0FDQUosRUFBQXRCLEdBQUEsV0FBQW1DLEdBQ0F6TSxFQUFBME0sUUFBQUQsR0FBQXRNLEtBQUFvUCxFQUFBN0MsUUFBQWlCLE9BSUEsT0FEQW5ZLEVBQUFELEdBQUFvWSxFQUFBblksRUFBQWtaLEdBQ0FhLEVBQUE5QyxpQ0MzUkEsSUFBQS9NLEVBQVduTCxFQUFRLFFBQ25Cb0IsRUFBYXBCLEVBQVEsUUFDckJ3YixFQUFBLHFCQUNBelUsRUFBQTNGLEVBQUFvYSxLQUFBcGEsRUFBQW9hLEdBQUEsS0FFQXRhLEVBQUFDLFFBQUEsU0FBQXNELEVBQUE5RCxHQUNBLE9BQUFvRyxFQUFBdEMsS0FBQXNDLEVBQUF0QyxRQUFBaEUsSUFBQUUsSUFBQSxNQUNDLGVBQUFvRixLQUFBLENBQ0QwVixRQUFBdFEsRUFBQXNRLFFBQ0FDLEtBQVExYixFQUFRLFFBQVksZ0JBQzVCMmIsVUFBQSwrRENWQSxJQUFBL1osRUFBYTVCLEVBQVEsT0FBUkEsQ0FBbUIsUUFDaEM4QixFQUFVOUIsRUFBUSxRQUNsQmtCLEVBQUFDLFFBQUEsU0FBQXNELEdBQ0EsT0FBQTdDLEVBQUE2QyxLQUFBN0MsRUFBQTZDLEdBQUEzQyxFQUFBMkMsMkJDSEEsSUFBQTBHLEVBQUFqSyxFQUFBQyxRQUFBLENBQTZCc2EsUUFBQSxTQUM3QixpQkFBQUcsVUFBQXpRLDRCQ0RBLFNBQUEvSixHQUNBLElBQUE2UixFQUFBLGlCQUFBN1IsUUFBQWxCLGlCQUFBa0IsRUFFQUYsRUFBQUMsUUFBQThSLGlEQ0RBLElBQUEzUSxFQUFnQnRDLEVBQVEsUUFDeEIyVixFQUFlM1YsRUFBUSxRQUN2QjZiLEVBQXNCN2IsRUFBUSxRQUM5QmtCLEVBQUFDLFFBQUEsU0FBQTJhLEdBQ0EsZ0JBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFHQXRiLEVBSEF1TCxFQUFBNUosRUFBQXlaLEdBQ0F2VyxFQUFBbVEsRUFBQXpKLEVBQUExRyxRQUNBc0YsRUFBQStRLEVBQUFJLEVBQUF6VyxHQUlBLEdBQUFzVyxHQUFBRSxNQUFBLE1BQUF4VyxFQUFBc0YsRUFHQSxHQUZBbkssRUFBQXVMLEVBQUFwQixLQUVBbkssS0FBQSxjQUVLLEtBQVk2RSxFQUFBc0YsRUFBZUEsSUFBQSxJQUFBZ1IsR0FBQWhSLEtBQUFvQixJQUNoQ0EsRUFBQXBCLEtBQUFrUixFQUFBLE9BQUFGLEdBQUFoUixHQUFBLEVBQ0ssT0FBQWdSLElBQUEsNEJDcEJMLElBQUExYSxFQUFhcEIsRUFBUSxRQUNyQm1MLEVBQVduTCxFQUFRLFFBQ25CbUksRUFBV25JLEVBQVEsUUFDbkJ3QixFQUFleEIsRUFBUSxRQUN2QmlOLEVBQVVqTixFQUFRLFFBQ2xCdUQsRUFBQSxZQUVBaEMsRUFBQSxTQUFBMk4sRUFBQTNJLEVBQUF1USxHQUNBLElBUUFyUyxFQUFBeVgsRUFBQUMsRUFBQUMsRUFSQUMsRUFBQW5OLEVBQUEzTixFQUFBbUYsRUFDQTRWLEVBQUFwTixFQUFBM04sRUFBQWlGLEVBQ0ErVixFQUFBck4sRUFBQTNOLEVBQUEwRixFQUNBdVYsRUFBQXROLEVBQUEzTixFQUFBNkQsRUFDQXFYLEVBQUF2TixFQUFBM04sRUFBQWdRLEVBQ0FtTCxFQUFBSixFQUFBbGIsRUFBQW1iLEVBQUFuYixFQUFBbUYsS0FBQW5GLEVBQUFtRixHQUFBLEtBQWtGbkYsRUFBQW1GLElBQUEsSUFBdUJoRCxHQUN6R3BDLEVBQUFtYixFQUFBblIsSUFBQTVFLEtBQUE0RSxFQUFBNUUsR0FBQSxJQUNBb1csRUFBQXhiLEVBQUFvQyxLQUFBcEMsRUFBQW9DLEdBQUEsSUFHQSxJQUFBa0IsS0FEQTZYLElBQUF4RixFQUFBdlEsR0FDQXVRLEVBRUFvRixHQUFBRyxHQUFBSyxRQUFBamMsSUFBQWljLEVBQUFqWSxHQUVBMFgsR0FBQUQsRUFBQVEsRUFBQTVGLEdBQUFyUyxHQUVBMlgsRUFBQUssR0FBQVAsRUFBQWpQLEVBQUFrUCxFQUFBL2EsR0FBQW9iLEdBQUEsbUJBQUFMLEVBQUFsUCxFQUFBb0IsU0FBQXhOLEtBQUFzYixLQUVBTyxHQUFBbGIsRUFBQWtiLEVBQUFqWSxFQUFBMFgsRUFBQWpOLEVBQUEzTixFQUFBcWIsR0FFQXpiLEVBQUFzRCxJQUFBMFgsR0FBQWhVLEVBQUFoSCxFQUFBc0QsRUFBQTJYLEdBQ0FJLEdBQUFHLEVBQUFsWSxJQUFBMFgsSUFBQVEsRUFBQWxZLEdBQUEwWCxJQUdBL2EsRUFBQStKLE9BRUE1SixFQUFBbUYsRUFBQSxFQUNBbkYsRUFBQWlGLEVBQUEsRUFDQWpGLEVBQUEwRixFQUFBLEVBQ0ExRixFQUFBNkQsRUFBQSxFQUNBN0QsRUFBQWdRLEVBQUEsR0FDQWhRLEVBQUFrRixFQUFBLEdBQ0FsRixFQUFBcWIsRUFBQSxHQUNBcmIsRUFBQStKLEVBQUEsSUFDQXBLLEVBQUFDLFFBQUFJLDBCQzFDQSxJQUFBZ0gsRUFBZXZJLEVBQVEsT0FBUkEsQ0FBZ0IsWUFDL0I2YyxHQUFBLEVBRUEsSUFDQSxJQUFBQyxFQUFBLElBQUF2VSxLQUNBdVUsRUFBQSxxQkFBaUNELEdBQUEsR0FFakNqSixNQUFBbUosS0FBQUQsRUFBQSxXQUFpQyxVQUNoQyxNQUFBOWIsSUFFREUsRUFBQUMsUUFBQSxTQUFBME8sRUFBQW1OLEdBQ0EsSUFBQUEsSUFBQUgsRUFBQSxTQUNBLElBQUE3SyxHQUFBLEVBQ0EsSUFDQSxJQUFBaUwsRUFBQSxJQUNBL0IsRUFBQStCLEVBQUExVSxLQUNBMlMsRUFBQWxTLEtBQUEsV0FBNkIsT0FBUzZELEtBQUFtRixHQUFBLElBQ3RDaUwsRUFBQTFVLEdBQUEsV0FBaUMsT0FBQTJTLEdBQ2pDckwsRUFBQW9OLEdBQ0csTUFBQWpjLElBQ0gsT0FBQWdSLDJCQ3BCQTlRLEVBQUFDLFFBQWlCbkIsRUFBUSw2Q0NFekIsSUFBQXlSLEVBQWN6UixFQUFRLFFBQ3RCa2QsRUFBQWxNLE9BQUE3USxVQUFBMFAsS0FJQTNPLEVBQUFDLFFBQUEsU0FBQW1LLEVBQUFyRSxHQUNBLElBQUE0SSxFQUFBdkUsRUFBQXVFLEtBQ0EsdUJBQUFBLEVBQUEsQ0FDQSxJQUFBNU8sRUFBQTRPLEVBQUFoUCxLQUFBeUssRUFBQXJFLEdBQ0EscUJBQUFoRyxFQUNBLFVBQUFpRixVQUFBLHNFQUVBLE9BQUFqRixFQUVBLGNBQUF3USxFQUFBbkcsR0FDQSxVQUFBcEYsVUFBQSwrQ0FFQSxPQUFBZ1gsRUFBQXJjLEtBQUF5SyxFQUFBckUsNEJDbkJBLElBQUFyRixFQUFhNUIsRUFBUSxPQUFSQSxDQUFtQixRQUNoQzhCLEVBQVU5QixFQUFRLFFBQ2xCa0IsRUFBQUMsUUFBQSxTQUFBc0QsR0FDQSxPQUFBN0MsRUFBQTZDLEtBQUE3QyxFQUFBNkMsR0FBQTNDLEVBQUEyQyw2QkNGQSxJQUFBME0sRUFBVW5SLEVBQVEsUUFFbEJrQixFQUFBQyxRQUFBakIsT0FBQSxLQUFBeUQscUJBQUEsR0FBQXpELE9BQUEsU0FBQXNFLEdBQ0EsZ0JBQUEyTSxFQUFBM00sS0FBQW9DLE1BQUEsSUFBQTFHLE9BQUFzRSwwQkNKQSxJQUFBd0osRUFBQSxFQUNBbVAsRUFBQWxWLEtBQUFtVixTQUNBbGMsRUFBQUMsUUFBQSxTQUFBc0QsR0FDQSxnQkFBQTRZLFlBQUE1YyxJQUFBZ0UsRUFBQSxHQUFBQSxFQUFBLFFBQUF1SixFQUFBbVAsR0FBQTdjLFNBQUEsOEJDSEEsSUFBQWMsRUFBYXBCLEVBQVEsUUFDckJtTCxFQUFXbkwsRUFBUSxRQUNuQmlOLEVBQVVqTixFQUFRLFFBQ2xCbUksRUFBV25JLEVBQVEsUUFDbkJxQixFQUFVckIsRUFBUSxRQUNsQnVELEVBQUEsWUFFQWhDLEVBQUEsU0FBQTJOLEVBQUEzSSxFQUFBdVEsR0FDQSxJQVNBclMsRUFBQXlYLEVBQUFDLEVBVEFFLEVBQUFuTixFQUFBM04sRUFBQW1GLEVBQ0E0VixFQUFBcE4sRUFBQTNOLEVBQUFpRixFQUNBK1YsRUFBQXJOLEVBQUEzTixFQUFBMEYsRUFDQXVWLEVBQUF0TixFQUFBM04sRUFBQTZELEVBQ0FxWCxFQUFBdk4sRUFBQTNOLEVBQUFnUSxFQUNBK0wsRUFBQXBPLEVBQUEzTixFQUFBa0YsRUFDQXRGLEVBQUFtYixFQUFBblIsSUFBQTVFLEtBQUE0RSxFQUFBNUUsR0FBQSxJQUNBb1csRUFBQXhiLEVBQUFvQyxHQUNBbVosRUFBQUosRUFBQWxiLEVBQUFtYixFQUFBbmIsRUFBQW1GLElBQUFuRixFQUFBbUYsSUFBQSxJQUFrRmhELEdBR2xGLElBQUFrQixLQURBNlgsSUFBQXhGLEVBQUF2USxHQUNBdVEsRUFFQW9GLEdBQUFHLEdBQUFLLFFBQUFqYyxJQUFBaWMsRUFBQWpZLEdBQ0F5WCxHQUFBN2EsRUFBQUYsRUFBQXNELEtBRUEwWCxFQUFBRCxFQUFBUSxFQUFBalksR0FBQXFTLEVBQUFyUyxHQUVBdEQsRUFBQXNELEdBQUE2WCxHQUFBLG1CQUFBSSxFQUFBalksR0FBQXFTLEVBQUFyUyxHQUVBZ1ksR0FBQVAsRUFBQWpQLEVBQUFrUCxFQUFBL2EsR0FFQWtjLEdBQUFaLEVBQUFqWSxJQUFBMFgsRUFBQSxTQUFBMVEsR0FDQSxJQUFBL0UsRUFBQSxTQUFBbkMsRUFBQWdHLEVBQUFnVCxHQUNBLEdBQUFqWixnQkFBQW1ILEVBQUEsQ0FDQSxPQUFBdEYsVUFBQVgsUUFDQSxrQkFBQWlHLEVBQ0Esa0JBQUFBLEVBQUFsSCxHQUNBLGtCQUFBa0gsRUFBQWxILEVBQUFnRyxHQUNXLFdBQUFrQixFQUFBbEgsRUFBQWdHLEVBQUFnVCxHQUNGLE9BQUE5UixFQUFBMUQsTUFBQXpELEtBQUE2QixZQUdULE9BREFPLEVBQUFuRCxHQUFBa0ksRUFBQWxJLEdBQ0FtRCxFQVhBLENBYUt5VixHQUFBSyxHQUFBLG1CQUFBTCxFQUFBbFAsRUFBQW9CLFNBQUF4TixLQUFBc2IsS0FFTEssS0FDQXJiLEVBQUFxYyxVQUFBcmMsRUFBQXFjLFFBQUEsS0FBK0MvWSxHQUFBMFgsRUFFL0NqTixFQUFBM04sRUFBQStKLEdBQUFxUixNQUFBbFksSUFBQTBELEVBQUF3VSxFQUFBbFksRUFBQTBYLE1BS0E1YSxFQUFBbUYsRUFBQSxFQUNBbkYsRUFBQWlGLEVBQUEsRUFDQWpGLEVBQUEwRixFQUFBLEVBQ0ExRixFQUFBNkQsRUFBQSxFQUNBN0QsRUFBQWdRLEVBQUEsR0FDQWhRLEVBQUFrRixFQUFBLEdBQ0FsRixFQUFBcWIsRUFBQSxHQUNBcmIsRUFBQStKLEVBQUEsSUFDQXBLLEVBQUFDLFFBQUFJLHFDQzVEQUwsRUFBQUMsUUFBQXdQLElBQUE4TSxtQkFBQTlNLEdBQUFaLFFBQUEsV0FBQWxFLE9BQTZFQSxFQUFBbkIsV0FBQSxHQUFBcEssU0FBQSxJQUFBb2Qsd0NDRDdFLElBQUF0YyxFQUFhcEIsRUFBUSxRQUNyQm1MLEVBQVduTCxFQUFRLFFBQ25Ca0ksRUFBY2xJLEVBQVEsUUFDdEJnQyxFQUFhaEMsRUFBUSxRQUNyQnVILEVBQXFCdkgsRUFBUSxRQUFjK0MsRUFDM0M3QixFQUFBQyxRQUFBLFNBQUFvRixHQUNBLElBQUFyRCxFQUFBaUksRUFBQXBMLFNBQUFvTCxFQUFBcEwsT0FBQW1JLEVBQUEsR0FBMEQ5RyxFQUFBckIsUUFBQSxJQUMxRCxLQUFBd0csRUFBQW9FLE9BQUEsSUFBQXBFLEtBQUFyRCxHQUFBcUUsRUFBQXJFLEVBQUFxRCxFQUFBLENBQWtGNUYsTUFBQXFCLEVBQUFlLEVBQUF3RCw0QkNObEYsSUFBQXNOLEVBQWM3VCxFQUFRLFFBQ3RCbUssRUFBY25LLEVBQVEsUUFDdEJrQixFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLE9BQUFxUCxFQUFBMUosRUFBQTNGLDJCQ0pBLElBQUFwRSxFQUFBLEdBQXVCQSxlQUN2QmMsRUFBQUMsUUFBQSxTQUFBcUQsRUFBQUMsR0FDQSxPQUFBckUsRUFBQVMsS0FBQTJELEVBQUFDLDRCQ0RBLElBQUFwQyxFQUFlckMsRUFBUSxRQUd2QmtCLEVBQUFDLFFBQUEsU0FBQXFELEVBQUF5QyxHQUNBLElBQUE1RSxFQUFBbUMsR0FBQSxPQUFBQSxFQUNBLElBQUF5SixFQUFBa0IsRUFDQSxHQUFBbEksR0FBQSxtQkFBQWdILEVBQUF6SixFQUFBbEUsWUFBQStCLEVBQUE4TSxFQUFBbEIsRUFBQXBOLEtBQUEyRCxJQUFBLE9BQUEySyxFQUNBLHNCQUFBbEIsRUFBQXpKLEVBQUF3RCxXQUFBM0YsRUFBQThNLEVBQUFsQixFQUFBcE4sS0FBQTJELElBQUEsT0FBQTJLLEVBQ0EsSUFBQWxJLEdBQUEsbUJBQUFnSCxFQUFBekosRUFBQWxFLFlBQUErQixFQUFBOE0sRUFBQWxCLEVBQUFwTixLQUFBMkQsSUFBQSxPQUFBMkssRUFDQSxNQUFBakosVUFBQSxvRUNUQSxJQUFBckQsRUFBWTdDLEVBQVEsUUFDcEIyZCxFQUFpQjNkLEVBQVEsUUFBa0JxZCxPQUFBLHNCQUUzQ2xjLEVBQUE0QixFQUFBN0MsT0FBQXdILHFCQUFBLFNBQUF3RSxHQUNBLE9BQUFySixFQUFBcUosRUFBQXlSLDBCQ0xBLElBQUFyZCxFQUFBLEdBQWlCQSxTQUVqQlksRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxPQUFBbEUsRUFBQU8sS0FBQTJELEdBQUFvRyxNQUFBLDRDQ0ZBNUssRUFBUSxRQUNSLElBQUFvQyxFQUFlcEMsRUFBUSxRQUN2QjRkLEVBQWE1ZCxFQUFRLFFBQ3JCc0IsRUFBa0J0QixFQUFRLFFBQzFCb0ssRUFBQSxXQUNBeUgsRUFBQSxJQUFBekgsR0FFQXlULEVBQUEsU0FBQTVQLEdBQ0VqTyxFQUFRLE9BQVJBLENBQXFCZ1IsT0FBQTdRLFVBQUFpSyxFQUFBNkQsR0FBQSxJQUluQmpPLEVBQVEsT0FBUkEsQ0FBa0IsV0FBZSxNQUFrRCxRQUFsRDZSLEVBQUFoUixLQUFBLENBQXdCaVcsT0FBQSxJQUFBN0MsTUFBQSxRQUM3RDRKLEVBQUEsV0FDQSxJQUFBdlMsRUFBQWxKLEVBQUFrQyxNQUNBLFVBQUErWSxPQUFBL1IsRUFBQXdMLE9BQUEsSUFDQSxVQUFBeEwsSUFBQTJJLE9BQUEzUyxHQUFBZ0ssYUFBQTBGLE9BQUE0TSxFQUFBL2MsS0FBQXlLLFFBQUE3SyxLQUdDb1IsRUFBQXRMLE1BQUE2RCxHQUNEeVQsRUFBQSxXQUNBLE9BQUFoTSxFQUFBaFIsS0FBQXlELGdDQ3RCQXRFLEVBQVEsUUFZUixJQVhBLElBQUFvQixFQUFhcEIsRUFBUSxRQUNyQm1JLEVBQVduSSxFQUFRLFFBQ25Cb0ksRUFBZ0JwSSxFQUFRLFFBQ3hCOGQsRUFBb0I5ZCxFQUFRLE9BQVJBLENBQWdCLGVBRXBDK2QsRUFBQSx3YkFJQW5YLE1BQUEsS0FFQXRCLEVBQUEsRUFBZUEsRUFBQXlZLEVBQUF2WSxPQUF5QkYsSUFBQSxDQUN4QyxJQUFBd0QsRUFBQWlWLEVBQUF6WSxHQUNBMFksRUFBQTVjLEVBQUEwSCxHQUNBVSxFQUFBd1UsS0FBQTdkLFVBQ0FxSixNQUFBc1UsSUFBQTNWLEVBQUFxQixFQUFBc1UsRUFBQWhWLEdBQ0FWLEVBQUFVLEdBQUFWLEVBQUF3TCw0Q0NqQkEsSUFBQXFLLEVBQUEsQ0FDQUMsYUFBQSxvQkFBQS9LLEtBQ0E0QyxTQUFBLFdBQUE1QyxNQUFBLGFBQUFwVCxPQUNBb2UsS0FDQSxlQUFBaEwsTUFDQSxTQUFBQSxNQUNBLFdBQ0EsSUFFQSxPQURBLElBQUFpTCxNQUNBLEVBQ08sTUFBQXBkLEdBQ1AsVUFMQSxHQVFBcWQsU0FBQSxhQUFBbEwsS0FDQW1MLFlBQUEsZ0JBQUFuTCxNQUdBLFNBQUFvTCxFQUFBQyxHQUNBLE9BQUFBLEdBQUFDLFNBQUF0ZSxVQUFBdWUsY0FBQUYsR0FHQSxHQUFBUCxFQUFBSyxZQUNBLElBQUFLLEVBQUEsQ0FDQSxxQkFDQSxzQkFDQSw2QkFDQSxzQkFDQSx1QkFDQSxzQkFDQSx1QkFDQSx3QkFDQSx5QkFHQUMsRUFDQUMsWUFBQUMsUUFDQSxTQUFBTixHQUNBLE9BQUFBLEdBQUFHLEVBQUFyRyxRQUFBcFksT0FBQUMsVUFBQUcsU0FBQU8sS0FBQTJkLEtBQUEsR0FJQSxTQUFBTyxFQUFBeFksR0FJQSxHQUhBLGtCQUFBQSxJQUNBQSxFQUFBa0UsT0FBQWxFLElBRUEsNEJBQUF5WSxLQUFBelksR0FDQSxVQUFBTCxVQUFBLDBDQUVBLE9BQUFLLEVBQUEwWSxjQUdBLFNBQUFDLEVBQUF2ZSxHQUlBLE1BSEEsa0JBQUFBLElBQ0FBLEVBQUE4SixPQUFBOUosSUFFQUEsRUFJQSxTQUFBd2UsRUFBQUMsR0FDQSxJQUFBcGEsRUFBQSxDQUNBZ0UsS0FBQSxXQUNBLElBQUFySSxFQUFBeWUsRUFBQUMsUUFDQSxPQUFjeFMsVUFBQXBNLElBQUFFLGFBVWQsT0FOQXNkLEVBQUFsSSxXQUNBL1EsRUFBQWpGLE9BQUFpRixVQUFBLFdBQ0EsT0FBQUEsSUFJQUEsRUFHTyxTQUFBc2EsRUFBQUMsR0FDUGpiLEtBQUFrYixJQUFBLEdBRUFELGFBQUFELEVBQ0FDLEVBQUFFLFFBQUEsU0FBQTllLEVBQUE0RixHQUNBakMsS0FBQW9iLE9BQUFuWixFQUFBNUYsSUFDSzJELE1BQ0ZzUCxNQUFBelIsUUFBQW9kLEdBQ0hBLEVBQUFFLFFBQUEsU0FBQUUsR0FDQXJiLEtBQUFvYixPQUFBQyxFQUFBLEdBQUFBLEVBQUEsS0FDS3JiLE1BQ0ZpYixHQUNIcmYsT0FBQXdILG9CQUFBNlgsR0FBQUUsUUFBQSxTQUFBbFosR0FDQWpDLEtBQUFvYixPQUFBblosRUFBQWdaLEVBQUFoWixLQUNLakMsTUFnRUwsU0FBQXNiLEVBQUFDLEdBQ0EsR0FBQUEsRUFBQUMsU0FDQSxPQUFBcFUsUUFBQTBOLE9BQUEsSUFBQWxULFVBQUEsaUJBRUEyWixFQUFBQyxVQUFBLEVBR0EsU0FBQUMsRUFBQUMsR0FDQSxXQUFBdFUsUUFBQSxTQUFBeU0sRUFBQWlCLEdBQ0E0RyxFQUFBQyxPQUFBLFdBQ0E5SCxFQUFBNkgsRUFBQS9lLFNBRUErZSxFQUFBRSxRQUFBLFdBQ0E5RyxFQUFBNEcsRUFBQS9GLFVBS0EsU0FBQWtHLEVBQUFoQyxHQUNBLElBQUE2QixFQUFBLElBQUFJLFdBQ0FsSSxFQUFBNkgsRUFBQUMsR0FFQSxPQURBQSxFQUFBSyxrQkFBQWxDLEdBQ0FqRyxFQUdBLFNBQUFvSSxFQUFBbkMsR0FDQSxJQUFBNkIsRUFBQSxJQUFBSSxXQUNBbEksRUFBQTZILEVBQUFDLEdBRUEsT0FEQUEsRUFBQU8sV0FBQXBDLEdBQ0FqRyxFQUdBLFNBQUFzSSxFQUFBQyxHQUlBLElBSEEsSUFBQUMsRUFBQSxJQUFBQyxXQUFBRixHQUNBRyxFQUFBLElBQUFoTixNQUFBOE0sRUFBQWxiLFFBRUFGLEVBQUEsRUFBaUJBLEVBQUFvYixFQUFBbGIsT0FBaUJGLElBQ2xDc2IsRUFBQXRiLEdBQUFtRixPQUFBb1csYUFBQUgsRUFBQXBiLElBRUEsT0FBQXNiLEVBQUEzTyxLQUFBLElBR0EsU0FBQTZPLEVBQUFMLEdBQ0EsR0FBQUEsRUFBQTdWLE1BQ0EsT0FBQTZWLEVBQUE3VixNQUFBLEdBRUEsSUFBQThWLEVBQUEsSUFBQUMsV0FBQUYsRUFBQU0sWUFFQSxPQURBTCxFQUFBcGEsSUFBQSxJQUFBcWEsV0FBQUYsSUFDQUMsRUFBQU0sT0FJQSxTQUFBQyxJQTBGQSxPQXpGQTNjLEtBQUF3YixVQUFBLEVBRUF4YixLQUFBNGMsVUFBQSxTQUFBckIsR0FDQXZiLEtBQUE2YyxVQUFBdEIsRUFDQUEsRUFFSyxrQkFBQUEsRUFDTHZiLEtBQUE4YyxVQUFBdkIsRUFDSzVCLEVBQUFFLE1BQUFDLEtBQUFqZSxVQUFBdWUsY0FBQW1CLEdBQ0x2YixLQUFBK2MsVUFBQXhCLEVBQ0s1QixFQUFBSSxVQUFBaUQsU0FBQW5oQixVQUFBdWUsY0FBQW1CLEdBQ0x2YixLQUFBaWQsY0FBQTFCLEVBQ0s1QixFQUFBQyxjQUFBc0QsZ0JBQUFyaEIsVUFBQXVlLGNBQUFtQixHQUNMdmIsS0FBQThjLFVBQUF2QixFQUFBdmYsV0FDSzJkLEVBQUFLLGFBQUFMLEVBQUFFLE1BQUFJLEVBQUFzQixJQUNMdmIsS0FBQW1kLGlCQUFBWCxFQUFBakIsRUFBQW1CLFFBRUExYyxLQUFBNmMsVUFBQSxJQUFBL0MsS0FBQSxDQUFBOVosS0FBQW1kLG9CQUNLeEQsRUFBQUssY0FBQU8sWUFBQTFlLFVBQUF1ZSxjQUFBbUIsSUFBQWpCLEVBQUFpQixJQUNMdmIsS0FBQW1kLGlCQUFBWCxFQUFBakIsR0FFQXZiLEtBQUE4YyxVQUFBdkIsRUFBQTNmLE9BQUFDLFVBQUFHLFNBQUFPLEtBQUFnZixHQWhCQXZiLEtBQUE4YyxVQUFBLEdBbUJBOWMsS0FBQWliLFFBQUFsYixJQUFBLGtCQUNBLGtCQUFBd2IsRUFDQXZiLEtBQUFpYixRQUFBalosSUFBQSwyQ0FDT2hDLEtBQUErYyxXQUFBL2MsS0FBQStjLFVBQUFuUyxLQUNQNUssS0FBQWliLFFBQUFqWixJQUFBLGVBQUFoQyxLQUFBK2MsVUFBQW5TLE1BQ08rTyxFQUFBQyxjQUFBc0QsZ0JBQUFyaEIsVUFBQXVlLGNBQUFtQixJQUNQdmIsS0FBQWliLFFBQUFqWixJQUFBLG9FQUtBMlgsRUFBQUUsT0FDQTdaLEtBQUE2WixLQUFBLFdBQ0EsSUFBQXVELEVBQUE5QixFQUFBdGIsTUFDQSxHQUFBb2QsRUFDQSxPQUFBQSxFQUdBLEdBQUFwZCxLQUFBK2MsVUFDQSxPQUFBM1YsUUFBQXlNLFFBQUE3VCxLQUFBK2MsV0FDTyxHQUFBL2MsS0FBQW1kLGlCQUNQLE9BQUEvVixRQUFBeU0sUUFBQSxJQUFBaUcsS0FBQSxDQUFBOVosS0FBQW1kLG9CQUNPLEdBQUFuZCxLQUFBaWQsY0FDUCxVQUFBSSxNQUFBLHdDQUVBLE9BQUFqVyxRQUFBeU0sUUFBQSxJQUFBaUcsS0FBQSxDQUFBOVosS0FBQThjLGNBSUE5YyxLQUFBZ2EsWUFBQSxXQUNBLE9BQUFoYSxLQUFBbWQsaUJBQ0E3QixFQUFBdGIsT0FBQW9ILFFBQUF5TSxRQUFBN1QsS0FBQW1kLGtCQUVBbmQsS0FBQTZaLE9BQUF2UyxLQUFBdVUsS0FLQTdiLEtBQUFzZCxLQUFBLFdBQ0EsSUFBQUYsRUFBQTlCLEVBQUF0YixNQUNBLEdBQUFvZCxFQUNBLE9BQUFBLEVBR0EsR0FBQXBkLEtBQUErYyxVQUNBLE9BQUFmLEVBQUFoYyxLQUFBK2MsV0FDSyxHQUFBL2MsS0FBQW1kLGlCQUNMLE9BQUEvVixRQUFBeU0sUUFBQXFJLEVBQUFsYyxLQUFBbWQsbUJBQ0ssR0FBQW5kLEtBQUFpZCxjQUNMLFVBQUFJLE1BQUEsd0NBRUEsT0FBQWpXLFFBQUF5TSxRQUFBN1QsS0FBQThjLFlBSUFuRCxFQUFBSSxXQUNBL1osS0FBQStaLFNBQUEsV0FDQSxPQUFBL1osS0FBQXNkLE9BQUFoVyxLQUFBaVcsS0FJQXZkLEtBQUF3ZCxLQUFBLFdBQ0EsT0FBQXhkLEtBQUFzZCxPQUFBaFcsS0FBQXhJLEtBQUEyZSxRQUdBemQsS0ExTUFnYixFQUFBbmYsVUFBQXVmLE9BQUEsU0FBQW5aLEVBQUE1RixHQUNBNEYsRUFBQXdZLEVBQUF4WSxHQUNBNUYsRUFBQXVlLEVBQUF2ZSxHQUNBLElBQUFxaEIsRUFBQTFkLEtBQUFrYixJQUFBalosR0FDQWpDLEtBQUFrYixJQUFBalosR0FBQXliLElBQUEsS0FBQXJoQixLQUdBMmUsRUFBQW5mLFVBQUEsbUJBQUFvRyxVQUNBakMsS0FBQWtiLElBQUFULEVBQUF4WSxLQUdBK1ksRUFBQW5mLFVBQUFrRSxJQUFBLFNBQUFrQyxHQUVBLE9BREFBLEVBQUF3WSxFQUFBeFksR0FDQWpDLEtBQUFqRCxJQUFBa0YsR0FBQWpDLEtBQUFrYixJQUFBalosR0FBQSxNQUdBK1ksRUFBQW5mLFVBQUFrQixJQUFBLFNBQUFrRixHQUNBLE9BQUFqQyxLQUFBa2IsSUFBQXBmLGVBQUEyZSxFQUFBeFksS0FHQStZLEVBQUFuZixVQUFBbUcsSUFBQSxTQUFBQyxFQUFBNUYsR0FDQTJELEtBQUFrYixJQUFBVCxFQUFBeFksSUFBQTJZLEVBQUF2ZSxJQUdBMmUsRUFBQW5mLFVBQUFzZixRQUFBLFNBQUF3QyxFQUFBQyxHQUNBLFFBQUEzYixLQUFBakMsS0FBQWtiLElBQ0FsYixLQUFBa2IsSUFBQXBmLGVBQUFtRyxJQUNBMGIsRUFBQXBoQixLQUFBcWhCLEVBQUE1ZCxLQUFBa2IsSUFBQWpaLEtBQUFqQyxPQUtBZ2IsRUFBQW5mLFVBQUFrRixLQUFBLFdBQ0EsSUFBQStaLEVBQUEsR0FJQSxPQUhBOWEsS0FBQW1iLFFBQUEsU0FBQTllLEVBQUE0RixHQUNBNlksRUFBQXJaLEtBQUFRLEtBRUE0WSxFQUFBQyxJQUdBRSxFQUFBbmYsVUFBQThKLE9BQUEsV0FDQSxJQUFBbVYsRUFBQSxHQUlBLE9BSEE5YSxLQUFBbWIsUUFBQSxTQUFBOWUsR0FDQXllLEVBQUFyWixLQUFBcEYsS0FFQXdlLEVBQUFDLElBR0FFLEVBQUFuZixVQUFBNkosUUFBQSxXQUNBLElBQUFvVixFQUFBLEdBSUEsT0FIQTlhLEtBQUFtYixRQUFBLFNBQUE5ZSxFQUFBNEYsR0FDQTZZLEVBQUFyWixLQUFBLENBQUFRLEVBQUE1RixNQUVBd2UsRUFBQUMsSUFHQW5CLEVBQUFsSSxXQUNBdUosRUFBQW5mLFVBQUFKLE9BQUFpRixVQUFBc2EsRUFBQW5mLFVBQUE2SixTQXFKQSxJQUFBWixFQUFBLCtDQUVBLFNBQUErWSxFQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQUExRSxjQUNBLE9BQUF0VSxFQUFBa1AsUUFBQStKLElBQUEsRUFBQUEsRUFBQUQsRUFHTyxTQUFBRSxFQUFBQyxFQUFBQyxHQUNQQSxLQUFBLEdBQ0EsSUFBQTNDLEVBQUEyQyxFQUFBM0MsS0FFQSxHQUFBMEMsYUFBQUQsRUFBQSxDQUNBLEdBQUFDLEVBQUF6QyxTQUNBLFVBQUE1WixVQUFBLGdCQUVBNUIsS0FBQW1lLElBQUFGLEVBQUFFLElBQ0FuZSxLQUFBb2UsWUFBQUgsRUFBQUcsWUFDQUYsRUFBQWpELFVBQ0FqYixLQUFBaWIsUUFBQSxJQUFBRCxFQUFBaUQsRUFBQWhELFVBRUFqYixLQUFBOGQsT0FBQUcsRUFBQUgsT0FDQTlkLEtBQUFvWCxLQUFBNkcsRUFBQTdHLEtBQ0FwWCxLQUFBcWUsT0FBQUosRUFBQUksT0FDQTlDLEdBQUEsTUFBQTBDLEVBQUFwQixZQUNBdEIsRUFBQTBDLEVBQUFwQixVQUNBb0IsRUFBQXpDLFVBQUEsUUFHQXhiLEtBQUFtZSxJQUFBaFksT0FBQThYLEdBWUEsR0FUQWplLEtBQUFvZSxZQUFBRixFQUFBRSxhQUFBcGUsS0FBQW9lLGFBQUEsZUFDQUYsRUFBQWpELFNBQUFqYixLQUFBaWIsVUFDQWpiLEtBQUFpYixRQUFBLElBQUFELEVBQUFrRCxFQUFBakQsVUFFQWpiLEtBQUE4ZCxPQUFBRCxFQUFBSyxFQUFBSixRQUFBOWQsS0FBQThkLFFBQUEsT0FDQTlkLEtBQUFvWCxLQUFBOEcsRUFBQTlHLE1BQUFwWCxLQUFBb1gsTUFBQSxLQUNBcFgsS0FBQXFlLE9BQUFILEVBQUFHLFFBQUFyZSxLQUFBcWUsT0FDQXJlLEtBQUFzZSxTQUFBLE1BRUEsUUFBQXRlLEtBQUE4ZCxRQUFBLFNBQUE5ZCxLQUFBOGQsU0FBQXZDLEVBQ0EsVUFBQTNaLFVBQUEsNkNBRUE1QixLQUFBNGMsVUFBQXJCLEdBT0EsU0FBQWdDLEVBQUFoQyxHQUNBLElBQUFnRCxFQUFBLElBQUF2QixTQVlBLE9BWEF6QixFQUNBaUQsT0FDQWxjLE1BQUEsS0FDQTZZLFFBQUEsU0FBQXNELEdBQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUFuYyxFQUFBbWMsRUFBQW5jLE1BQUEsS0FDQUwsRUFBQUssRUFBQXlZLFFBQUF0UCxRQUFBLFdBQ0FwUCxFQUFBaUcsRUFBQXFMLEtBQUEsS0FBQWxDLFFBQUEsV0FDQThTLEVBQUFuRCxPQUFBc0QsbUJBQUF6YyxHQUFBeWMsbUJBQUFyaUIsT0FHQWtpQixFQUdBLFNBQUFJLEVBQUFDLEdBQ0EsSUFBQTNELEVBQUEsSUFBQUQsRUFHQTZELEVBQUFELEVBQUFuVCxRQUFBLG9CQVNBLE9BUkFvVCxFQUFBdmMsTUFBQSxTQUFBNlksUUFBQSxTQUFBMkQsR0FDQSxJQUFBQyxFQUFBRCxFQUFBeGMsTUFBQSxLQUNBbkMsRUFBQTRlLEVBQUFoRSxRQUFBeUQsT0FDQSxHQUFBcmUsRUFBQSxDQUNBLElBQUE5RCxFQUFBMGlCLEVBQUFwUixLQUFBLEtBQUE2USxPQUNBdkQsRUFBQUcsT0FBQWpiLEVBQUE5RCxNQUdBNGUsRUFLTyxTQUFBK0QsRUFBQUMsRUFBQWYsR0FDUEEsSUFDQUEsRUFBQSxJQUdBbGUsS0FBQTRLLEtBQUEsVUFDQTVLLEtBQUFrZixZQUFBL2lCLElBQUEraEIsRUFBQWdCLE9BQUEsSUFBQWhCLEVBQUFnQixPQUNBbGYsS0FBQXdVLEdBQUF4VSxLQUFBa2YsUUFBQSxLQUFBbGYsS0FBQWtmLE9BQUEsSUFDQWxmLEtBQUFtZixXQUFBLGVBQUFqQixJQUFBaUIsV0FBQSxLQUNBbmYsS0FBQWliLFFBQUEsSUFBQUQsRUFBQWtELEVBQUFqRCxTQUNBamIsS0FBQW1lLElBQUFELEVBQUFDLEtBQUEsR0FDQW5lLEtBQUE0YyxVQUFBcUMsR0FqREFqQixFQUFBbmlCLFVBQUF1akIsTUFBQSxXQUNBLFdBQUFwQixFQUFBaGUsS0FBQSxDQUE0QnViLEtBQUF2YixLQUFBNmMsYUFtQzVCRixFQUFBcGdCLEtBQUF5aEIsRUFBQW5pQixXQWdCQThnQixFQUFBcGdCLEtBQUF5aUIsRUFBQW5qQixXQUVBbWpCLEVBQUFuakIsVUFBQXVqQixNQUFBLFdBQ0EsV0FBQUosRUFBQWhmLEtBQUE2YyxVQUFBLENBQ0FxQyxPQUFBbGYsS0FBQWtmLE9BQ0FDLFdBQUFuZixLQUFBbWYsV0FDQWxFLFFBQUEsSUFBQUQsRUFBQWhiLEtBQUFpYixTQUNBa0QsSUFBQW5lLEtBQUFtZSxPQUlBYSxFQUFBckosTUFBQSxXQUNBLElBQUEwSixFQUFBLElBQUFMLEVBQUEsTUFBcUNFLE9BQUEsRUFBQUMsV0FBQSxLQUVyQyxPQURBRSxFQUFBelUsS0FBQSxRQUNBeVUsR0FHQSxJQUFBQyxFQUFBLHNCQUVBTixFQUFBTyxTQUFBLFNBQUFwQixFQUFBZSxHQUNBLFFBQUFJLEVBQUF0TCxRQUFBa0wsR0FDQSxVQUFBTSxXQUFBLHVCQUdBLFdBQUFSLEVBQUEsTUFBNkJFLFNBQUFqRSxRQUFBLENBQTBCd0UsU0FBQXRCLE1BR2hELElBQUF1QixFQUFBN1EsS0FBQTZRLGFBQ1AsSUFDQSxJQUFBQSxFQUNDLE1BQUFySixHQUNEcUosRUFBQSxTQUFBQyxFQUFBMWQsR0FDQWpDLEtBQUEyZixVQUNBM2YsS0FBQWlDLE9BQ0EsSUFBQTBULEVBQUEwSCxNQUFBc0MsR0FDQTNmLEtBQUE0ZixNQUFBakssRUFBQWlLLE9BRUFGLEVBQUE3akIsVUFBQUQsT0FBQW9ILE9BQUFxYSxNQUFBeGhCLFdBQ0E2akIsRUFBQTdqQixVQUFBbVEsWUFBQTBULEVBR08sU0FBQUcsRUFBQTVCLEVBQUE2QixHQUNQLFdBQUExWSxRQUFBLFNBQUF5TSxFQUFBaUIsR0FDQSxJQUFBaUwsRUFBQSxJQUFBL0IsRUFBQUMsRUFBQTZCLEdBRUEsR0FBQUMsRUFBQTFCLFFBQUEwQixFQUFBMUIsT0FBQTJCLFFBQ0EsT0FBQWxMLEVBQUEsSUFBQTRLLEVBQUEseUJBR0EsSUFBQU8sRUFBQSxJQUFBQyxlQUVBLFNBQUFDLElBQ0FGLEVBQUFHLFFBR0FILEVBQUF0RSxPQUFBLFdBQ0EsSUFBQXVDLEVBQUEsQ0FDQWdCLE9BQUFlLEVBQUFmLE9BQ0FDLFdBQUFjLEVBQUFkLFdBQ0FsRSxRQUFBMEQsRUFBQXNCLEVBQUFJLHlCQUFBLEtBRUFuQyxFQUFBQyxJQUFBLGdCQUFBOEIsSUFBQUssWUFBQXBDLEVBQUFqRCxRQUFBbGIsSUFBQSxpQkFDQSxJQUFBd2IsRUFBQSxhQUFBMEUsSUFBQVosU0FBQVksRUFBQU0sYUFDQTFNLEVBQUEsSUFBQW1MLEVBQUF6RCxFQUFBMkMsS0FHQStCLEVBQUFyRSxRQUFBLFdBQ0E5RyxFQUFBLElBQUFsVCxVQUFBLDRCQUdBcWUsRUFBQU8sVUFBQSxXQUNBMUwsRUFBQSxJQUFBbFQsVUFBQSw0QkFHQXFlLEVBQUFRLFFBQUEsV0FDQTNMLEVBQUEsSUFBQTRLLEVBQUEsMEJBR0FPLEVBQUF6UixLQUFBdVIsRUFBQWpDLE9BQUFpQyxFQUFBNUIsS0FBQSxHQUVBLFlBQUE0QixFQUFBM0IsWUFDQTZCLEVBQUFTLGlCQUFBLEVBQ0ssU0FBQVgsRUFBQTNCLGNBQ0w2QixFQUFBUyxpQkFBQSxHQUdBLGlCQUFBVCxHQUFBdEcsRUFBQUUsT0FDQW9HLEVBQUFVLGFBQUEsUUFHQVosRUFBQTlFLFFBQUFFLFFBQUEsU0FBQTllLEVBQUE0RixHQUNBZ2UsRUFBQVcsaUJBQUEzZSxFQUFBNUYsS0FHQTBqQixFQUFBMUIsU0FDQTBCLEVBQUExQixPQUFBL1QsaUJBQUEsUUFBQTZWLEdBRUFGLEVBQUFZLG1CQUFBLFdBRUEsSUFBQVosRUFBQWEsWUFDQWYsRUFBQTFCLE9BQUEwQyxvQkFBQSxRQUFBWixLQUtBRixFQUFBZSxLQUFBLHFCQUFBakIsRUFBQWxELFVBQUEsS0FBQWtELEVBQUFsRCxhQUlBZ0QsRUFBQW9CLFVBQUEsRUFFQXBTLEtBQUFnUixRQUNBaFIsS0FBQWdSLFFBQ0FoUixLQUFBbU0sVUFDQW5NLEtBQUFtUCxVQUNBblAsS0FBQW1RLG9DQ2xnQkEsSUFBQXBaLEVBQWdCbEssRUFBUSxRQUN4Qm1LLEVBQWNuSyxFQUFRLFFBR3RCa0IsRUFBQUMsUUFBQSxTQUFBaUosR0FDQSxnQkFBQUMsRUFBQUMsR0FDQSxJQUdBL0YsRUFBQWdHLEVBSEFDLEVBQUFDLE9BQUFOLEVBQUFFLElBQ0EvRSxFQUFBNEUsRUFBQUksR0FDQS9FLEVBQUFpRixFQUFBaEYsT0FFQSxPQUFBRixFQUFBLEdBQUFBLEdBQUFDLEVBQUE2RSxFQUFBLFFBQUEzSixHQUNBOEQsRUFBQWlHLEVBQUFFLFdBQUFwRixHQUNBZixFQUFBLE9BQUFBLEVBQUEsT0FBQWUsRUFBQSxJQUFBQyxJQUFBZ0YsRUFBQUMsRUFBQUUsV0FBQXBGLEVBQUEsV0FBQWlGLEVBQUEsTUFDQUgsRUFBQUksRUFBQUcsT0FBQXJGLEdBQUFmLEVBQ0E2RixFQUFBSSxFQUFBSSxNQUFBdEYsSUFBQSxHQUFBaUYsRUFBQSxPQUFBaEcsRUFBQSx5RENiQSxNQUFBaWhCLEVBQXdCeGxCLEVBQVEsUUFDaEN5bEIsRUFBd0J6bEIsRUFBUSxRQUNoQzBsQixFQUFxQjFsQixFQUFRLFFBRTdCLFNBQUEybEIsRUFBQW5ELEdBQ0EsT0FBQUEsRUFBQW9ELGFBQ0EsWUFDQSxPQUFBbmhCLEdBQUEsQ0FBQXhELEVBQUFOLEtBQ0EsTUFBQW1LLEVBQUE3SixFQUFBdUUsT0FDQSxZQUFBL0UsSUFBQUUsRUFDQU0sRUFHQSxPQUFBTixFQUNBLElBQUFNLEVBQUEsQ0FBQTRrQixFQUFBcGhCLEVBQUErZCxHQUFBLElBQUExWCxFQUFBLEtBQUFtSCxLQUFBLEtBR0EsSUFDQWhSLEVBQ0EsQ0FBQTRrQixFQUFBcGhCLEVBQUErZCxHQUFBLElBQUFxRCxFQUFBL2EsRUFBQTBYLEdBQUEsS0FBQXFELEVBQUFsbEIsRUFBQTZoQixJQUFBdlEsS0FBQSxNQUlBLGNBQ0EsT0FBQXhOLEdBQUEsQ0FBQXhELEVBQUFOLEtBQ0EsWUFBQUYsSUFBQUUsRUFDQU0sRUFHQSxPQUFBTixFQUNBLElBQUFNLEVBQUEsQ0FBQTRrQixFQUFBcGhCLEVBQUErZCxHQUFBLE1BQUF2USxLQUFBLEtBR0EsSUFBQWhSLEVBQUEsQ0FBQTRrQixFQUFBcGhCLEVBQUErZCxHQUFBLE1BQUFxRCxFQUFBbGxCLEVBQUE2aEIsSUFBQXZRLEtBQUEsTUFHQSxZQUNBLE9BQUF4TixHQUFBLENBQUF4RCxFQUFBTixFQUFBbUssS0FDQSxPQUFBbkssRUFJQSxJQUFBbUssRUFDQSxFQUFBK2EsRUFBQXBoQixFQUFBK2QsR0FBQSxJQUFBcUQsRUFBQWxsQixFQUFBNmhCLElBQUF2USxLQUFBLEtBR0EsRUFBQWhSLEVBQUE0a0IsRUFBQWxsQixFQUFBNmhCLElBQUF2USxLQUFBLE1BUEFoUixHQVVBLFFBQ0EsT0FBQXdELEdBQUEsQ0FBQXhELEVBQUFOLEtBQ0EsWUFBQUYsSUFBQUUsRUFDQU0sRUFHQSxPQUFBTixFQUNBLElBQUFNLEVBQUE0a0IsRUFBQXBoQixFQUFBK2QsSUFHQSxJQUFBdmhCLEVBQUEsQ0FBQTRrQixFQUFBcGhCLEVBQUErZCxHQUFBLElBQUFxRCxFQUFBbGxCLEVBQUE2aEIsSUFBQXZRLEtBQUEsT0FLQSxTQUFBNlQsRUFBQXRELEdBQ0EsSUFBQXZoQixFQUVBLE9BQUF1aEIsRUFBQW9ELGFBQ0EsWUFDQSxPQUFBbmhCLEVBQUE5RCxFQUFBb2xCLEtBQ0E5a0IsRUFBQSxhQUFBNE8sS0FBQXBMLEdBRUFBLElBQUFzTCxRQUFBLGVBRUE5TyxRQUtBUixJQUFBc2xCLEVBQUF0aEIsS0FDQXNoQixFQUFBdGhCLEdBQUEsSUFHQXNoQixFQUFBdGhCLEdBQUF4RCxFQUFBLElBQUFOLEdBUkFvbEIsRUFBQXRoQixHQUFBOUQsR0FXQSxjQUNBLE9BQUE4RCxFQUFBOUQsRUFBQW9sQixLQUNBOWtCLEVBQUEsVUFBQTRPLEtBQUFwTCxHQUNBQSxJQUFBc0wsUUFBQSxZQUVBOU8sT0FLQVIsSUFBQXNsQixFQUFBdGhCLEdBS0FzaEIsRUFBQXRoQixHQUFBLEdBQUE0WSxPQUFBMEksRUFBQXRoQixHQUFBOUQsR0FKQW9sQixFQUFBdGhCLEdBQUEsQ0FBQTlELEdBTEFvbEIsRUFBQXRoQixHQUFBOUQsR0FZQSxZQUNBLE9BQUE4RCxFQUFBOUQsRUFBQW9sQixLQUNBLE1BQUE1akIsRUFBQSxrQkFBQXhCLEtBQUFpRyxNQUFBLElBQUEwUixRQUFBLFFBQ0EwTixFQUFBN2pCLEVBQUF4QixFQUFBaUcsTUFBQSxLQUFBakcsRUFDQW9sQixFQUFBdGhCLEdBQUF1aEIsR0FHQSxRQUNBLE9BQUF2aEIsRUFBQTlELEVBQUFvbEIsVUFDQXRsQixJQUFBc2xCLEVBQUF0aEIsR0FLQXNoQixFQUFBdGhCLEdBQUEsR0FBQTRZLE9BQUEwSSxFQUFBdGhCLEdBQUE5RCxHQUpBb2xCLEVBQUF0aEIsR0FBQTlELElBU0EsU0FBQWtsQixFQUFBbGxCLEVBQUE2aEIsR0FDQSxPQUFBQSxFQUFBcUQsT0FDQXJELEVBQUF5RCxPQUFBVCxFQUFBN2tCLEdBQUE4YyxtQkFBQTljLEdBR0FBLEVBR0EsU0FBQWtoQixFQUFBbGhCLEVBQUE2aEIsR0FDQSxPQUFBQSxFQUFBWCxPQUNBNEQsRUFBQTlrQixHQUdBQSxFQUdBLFNBQUF1bEIsRUFBQTNELEdBQ0EsT0FBQTNPLE1BQUF6UixRQUFBb2dCLEdBQ0FBLEVBQUE0RCxPQUdBLGtCQUFBNUQsRUFDQTJELEVBQUFobUIsT0FBQW1GLEtBQUFrZCxJQUNBNEQsS0FBQSxDQUFBNWhCLEVBQUFnRyxJQUFBNmIsT0FBQTdoQixHQUFBNmhCLE9BQUE3YixJQUNBaVYsSUFBQS9hLEdBQUE4ZCxFQUFBOWQsSUFHQThkLEVBR0EsU0FBQThELEVBQUE5RCxHQUNBLE1BQUErRCxFQUFBL0QsRUFBQWpLLFFBQUEsS0FDQSxXQUFBZ08sRUFDQSxHQUdBL0QsRUFBQTNYLE1BQUEwYixFQUFBLEdBR0EsU0FBQXZFLEVBQUFRLEVBQUFDLEdBQ0FBLEVBQUF0aUIsT0FBQXFtQixPQUFBLENBQ0ExRSxRQUFBLEVBQ0ErRCxZQUFBLFFBQ0VwRCxHQUVGLE1BQUFnRSxFQUFBVixFQUFBdEQsR0FHQWpULEVBQUFyUCxPQUFBb0gsT0FBQSxNQUVBLHFCQUFBaWIsRUFDQSxPQUFBaFQsRUFLQSxHQUZBZ1QsSUFBQU8sT0FBQS9TLFFBQUEsY0FFQXdTLEVBQ0EsT0FBQWhULEVBR0EsVUFBQWtYLEtBQUFsRSxFQUFBM2IsTUFBQSxNQUNBLElBQUFuQyxFQUFBOUQsR0FBQStrQixFQUFBZSxFQUFBMVcsUUFBQSxnQkFJQXBQLE9BQUFGLElBQUFFLEVBQUEsS0FBQWtoQixFQUFBbGhCLEVBQUE2aEIsR0FFQWdFLEVBQUEzRSxFQUFBcGQsRUFBQStkLEdBQUE3aEIsRUFBQTRPLEdBR0EsT0FBQXJQLE9BQUFtRixLQUFBa0ssR0FBQTRXLE9BQUFPLE9BQUEsQ0FBQXpsQixFQUFBd0QsS0FDQSxNQUFBOUQsRUFBQTRPLEVBQUE5SyxHQVFBLE9BUEFraUIsUUFBQWhtQixJQUFBLGtCQUFBQSxJQUFBaVQsTUFBQXpSLFFBQUF4QixHQUVBTSxFQUFBd0QsR0FBQXloQixFQUFBdmxCLEdBRUFNLEVBQUF3RCxHQUFBOUQsRUFHQU0sR0FDRWYsT0FBQW9ILE9BQUEsT0FHRm5HLEVBQUFrbEIsVUFDQWxsQixFQUFBNGdCLFFBRUE1Z0IsRUFBQW1DLFVBQUEsRUFBQW1RLEVBQUErTyxLQUNBLElBQUEvTyxFQUNBLFNBR0ErTyxFQUFBdGlCLE9BQUFxbUIsT0FBQSxDQUNBVixRQUFBLEVBQ0FJLFFBQUEsRUFDQUwsWUFBQSxRQUNFcEQsR0FFRixNQUFBZ0UsRUFBQWIsRUFBQW5ELEdBQ0FuZCxFQUFBbkYsT0FBQW1GLEtBQUFvTyxHQU1BLE9BSkEsSUFBQStPLEVBQUEyRCxNQUNBOWdCLEVBQUE4Z0IsS0FBQTNELEVBQUEyRCxNQUdBOWdCLEVBQUFtYSxJQUFBL2EsSUFDQSxNQUFBOUQsRUFBQThTLEVBQUFoUCxHQUVBLFlBQUFoRSxJQUFBRSxFQUNBLEdBR0EsT0FBQUEsRUFDQWtsQixFQUFBcGhCLEVBQUErZCxHQUdBNU8sTUFBQXpSLFFBQUF4QixHQUNBQSxFQUNBK2xCLE9BQUFGLEVBQUEvaEIsR0FBQSxJQUNBd04sS0FBQSxLQUdBNFQsRUFBQXBoQixFQUFBK2QsR0FBQSxJQUFBcUQsRUFBQWxsQixFQUFBNmhCLEtBQ0VvRSxPQUFBL2EsS0FBQXJHLE9BQUEsR0FBQXlNLEtBQUEsT0FHRjlRLEVBQUEwbEIsU0FBQSxFQUFBdEUsRUFBQUMsS0FDQSxNQUFBc0UsRUFBQXZFLEVBQUFqSyxRQUFBLEtBS0EsT0FKQSxJQUFBd08sSUFDQXZFLElBQUEzWCxNQUFBLEVBQUFrYyxJQUdBLENBQ0FyRSxJQUFBRixFQUFBM2IsTUFBQSxZQUNBbWdCLE1BQUFoRixFQUFBc0UsRUFBQTlELEdBQUFDLHlDQy9QQSxJQUFBbFcsRUFBY3RNLEVBQVEsUUFDdEJzVixFQUFXdFYsRUFBUSxRQUNuQnVWLEVBQVV2VixFQUFRLFFBQ2xCd1QsRUFBZXhULEVBQVEsUUFDdkI2VCxFQUFjN1QsRUFBUSxRQUN0QmduQixFQUFBOW1CLE9BQUFxbUIsT0FHQXJsQixFQUFBQyxTQUFBNmxCLEdBQTZCaG5CLEVBQVEsT0FBUkEsQ0FBa0IsV0FDL0MsSUFBQWluQixFQUFBLEdBQ0ExVixFQUFBLEdBRUF0SyxFQUFBbEgsU0FDQW1uQixFQUFBLHVCQUdBLE9BRkFELEVBQUFoZ0IsR0FBQSxFQUNBaWdCLEVBQUF0Z0IsTUFBQSxJQUFBNlksUUFBQSxTQUFBelksR0FBb0N1SyxFQUFBdkssT0FDakIsR0FBbkJnZ0IsRUFBQSxHQUFtQkMsR0FBQWhnQixJQUFBL0csT0FBQW1GLEtBQUEyaEIsRUFBQSxHQUFzQ3pWLElBQUFVLEtBQUEsS0FBQWlWLElBQ3hELFNBQUF4SyxFQUFBNUYsR0FDRCxJQUFBeEYsRUFBQWtDLEVBQUFrSixHQUNBeUssRUFBQWhoQixVQUFBWCxPQUNBc0YsRUFBQSxFQUNBMEssRUFBQUYsRUFBQXZTLEVBQ0FXLEVBQUE2UixFQUFBeFMsRUFDQSxNQUFBb2tCLEVBQUFyYyxFQUFBLENBQ0EsSUFJQXJHLEVBSkF3QyxFQUFBNE0sRUFBQTFOLFVBQUEyRSxNQUNBekYsRUFBQW1RLEVBQUFsSixFQUFBckYsR0FBQW9XLE9BQUE3SCxFQUFBdk8sSUFBQXFGLEVBQUFyRixHQUNBekIsRUFBQUgsRUFBQUcsT0FDQXFCLEVBQUEsRUFFQSxNQUFBckIsRUFBQXFCLEVBQUFuRCxFQUFBN0MsS0FBQW9HLEVBQUF4QyxFQUFBWSxFQUFBd0IsUUFBQXlLLEVBQUE3TSxHQUFBd0MsRUFBQXhDLElBQ0csT0FBQTZNLEdBQ0YwVixzQkNoQ0QsSUFBQTVsQixFQUFBRixFQUFBQyxRQUFBLG9CQUFBOEosZUFBQWhELFdBQ0FnRCxPQUFBLG9CQUFBa0ksV0FBQWxMLFdBQUFrTCxLQUVBOUUsU0FBQSxjQUFBQSxHQUNBLGlCQUFBK1ksVUFBQWhtQiwyQkNMQSxJQUFBOEksRUFBZ0JsSyxFQUFRLFFBQ3hCbU0sRUFBQWxFLEtBQUFrRSxJQUNBQyxFQUFBbkUsS0FBQW1FLElBQ0FsTCxFQUFBQyxRQUFBLFNBQUEySixFQUFBdEYsR0FFQSxPQURBc0YsRUFBQVosRUFBQVksR0FDQUEsRUFBQSxFQUFBcUIsRUFBQXJCLEVBQUF0RixFQUFBLEdBQUE0RyxFQUFBdEIsRUFBQXRGLDRCQ0xBdEUsRUFBQUMsU0FBa0JuQixFQUFRLFVBQXNCQSxFQUFRLE9BQVJBLENBQWtCLFdBQ2xFLE9BQXVHLEdBQXZHRSxPQUFBcUgsZUFBK0J2SCxFQUFRLE9BQVJBLENBQXVCLFlBQWdCcUUsSUFBQSxXQUFtQixZQUFjRSwwQkNEdkdyRCxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLHNCQUFBQSxFQUFBLE1BQUEwQixVQUFBMUIsRUFBQSx1QkFDQSxPQUFBQSx5QkNGQXRELEVBQUFDLFFBQUEsU0FBQTBPLEdBQ0EsSUFDQSxRQUFBQSxJQUNHLE1BQUE3TyxHQUNILGdEQ0hBLElBQUFJLEVBQWFwQixFQUFRLFFBQ3JCZ0QsRUFBU2hELEVBQVEsUUFDakJzQixFQUFrQnRCLEVBQVEsUUFDMUIwUCxFQUFjMVAsRUFBUSxPQUFSQSxDQUFnQixXQUU5QmtCLEVBQUFDLFFBQUEsU0FBQU8sR0FDQSxJQUFBK0osRUFBQXJLLEVBQUFNLEdBQ0FKLEdBQUFtSyxNQUFBaUUsSUFBQTFNLEVBQUFELEVBQUEwSSxFQUFBaUUsRUFBQSxDQUNBckosY0FBQSxFQUNBaEMsSUFBQSxXQUFzQixPQUFBQyxpQ0NWdEIsSUFBQW1OLEVBQWN6UixFQUFRLFFBQ3RCdUksRUFBZXZJLEVBQVEsT0FBUkEsQ0FBZ0IsWUFDL0JvSSxFQUFnQnBJLEVBQVEsUUFDeEJrQixFQUFBQyxRQUFpQm5CLEVBQVEsUUFBUzBSLGtCQUFBLFNBQUFsTixHQUNsQyxRQUFBL0QsR0FBQStELEVBQUEsT0FBQUEsRUFBQStELElBQ0EvRCxFQUFBLGVBQ0E0RCxFQUFBcUosRUFBQWpOLDZCQ05BLElBQUFwQyxFQUFlcEMsRUFBUSxRQUN2QnFFLEVBQVVyRSxFQUFRLFFBQ2xCa0IsRUFBQUMsUUFBaUJuQixFQUFRLFFBQVNxbkIsWUFBQSxTQUFBN2lCLEdBQ2xDLElBQUF5UixFQUFBNVIsRUFBQUcsR0FDQSxzQkFBQXlSLEVBQUEsTUFBQS9QLFVBQUExQixFQUFBLHFCQUNBLE9BQUFwQyxFQUFBNlQsRUFBQXBWLEtBQUEyRCw2QkNMQSxJQUFBeEIsRUFBU2hELEVBQVEsUUFDakJvQyxFQUFlcEMsRUFBUSxRQUN2QnNNLEVBQWN0TSxFQUFRLFFBRXRCa0IsRUFBQUMsUUFBaUJuQixFQUFRLFFBQWdCRSxPQUFBc0gsaUJBQUEsU0FBQTBFLEVBQUFLLEdBQ3pDbkssRUFBQThKLEdBQ0EsSUFHQTlHLEVBSEFDLEVBQUFpSCxFQUFBQyxHQUNBL0csRUFBQUgsRUFBQUcsT0FDQUYsRUFBQSxFQUVBLE1BQUFFLEVBQUFGLEVBQUF0QyxFQUFBRCxFQUFBbUosRUFBQTlHLEVBQUFDLEVBQUFDLEtBQUFpSCxFQUFBbkgsSUFDQSxPQUFBOEcsMkJDWEEsSUFBQWdKLEVBQVVsVixFQUFRLFFBQWMrQyxFQUNoQzFCLEVBQVVyQixFQUFRLFFBQ2xCeUosRUFBVXpKLEVBQVEsT0FBUkEsQ0FBZ0IsZUFFMUJrQixFQUFBQyxRQUFBLFNBQUFxRCxFQUFBMUQsRUFBQXFVLEdBQ0EzUSxJQUFBbkQsRUFBQW1ELEVBQUEyUSxFQUFBM1EsSUFBQXJFLFVBQUFzSixJQUFBeUwsRUFBQTFRLEVBQUFpRixFQUFBLENBQW9FcEQsY0FBQSxFQUFBMUYsTUFBQUcsMkJDTHBFLElBQUFNLEVBQWFwQixFQUFRLFFBQ3JCc25CLEVBQWdCdG5CLEVBQVEsUUFBU3NHLElBQ2pDaWhCLEVBQUFubUIsRUFBQW9tQixrQkFBQXBtQixFQUFBcW1CLHVCQUNBcGEsRUFBQWpNLEVBQUFpTSxRQUNBM0IsRUFBQXRLLEVBQUFzSyxRQUNBcU0sRUFBNkIsV0FBaEIvWCxFQUFRLE9BQVJBLENBQWdCcU4sR0FFN0JuTSxFQUFBQyxRQUFBLFdBQ0EsSUFBQXVtQixFQUFBQyxFQUFBblAsRUFFQW9QLEVBQUEsV0FDQSxJQUFBQyxFQUFBNVosRUFDQThKLElBQUE4UCxFQUFBeGEsRUFBQWdNLFNBQUF3TyxFQUFBcE8sT0FDQSxNQUFBaU8sRUFBQSxDQUNBelosRUFBQXlaLEVBQUF6WixHQUNBeVosSUFBQTFlLEtBQ0EsSUFDQWlGLElBQ08sTUFBQWpOLEdBR1AsTUFGQTBtQixFQUFBbFAsSUFDQW1QLE9BQUFsbkIsRUFDQU8sR0FFSzJtQixPQUFBbG5CLEVBQ0xvbkIsS0FBQXJPLFNBSUEsR0FBQXpCLEVBQ0FTLEVBQUEsV0FDQW5MLEVBQUFpQixTQUFBc1osU0FHRyxJQUFBTCxHQUFBbm1CLEVBQUEwbUIsV0FBQTFtQixFQUFBMG1CLFVBQUFDLFdBUUEsR0FBQXJjLEtBQUF5TSxRQUFBLENBRUgsSUFBQUQsRUFBQXhNLEVBQUF5TSxhQUFBMVgsR0FDQStYLEVBQUEsV0FDQU4sRUFBQXRNLEtBQUFnYyxTQVNBcFAsRUFBQSxXQUVBOE8sRUFBQXptQixLQUFBTyxFQUFBd21CLFFBdkJHLENBQ0gsSUFBQUksR0FBQSxFQUNBQyxFQUFBN1ksU0FBQThZLGVBQUEsSUFDQSxJQUFBWCxFQUFBSyxHQUFBTyxRQUFBRixFQUFBLENBQXVDRyxlQUFBLElBQ3ZDNVAsRUFBQSxXQUNBeVAsRUFBQTdaLEtBQUE0WixNQXNCQSxnQkFBQS9aLEdBQ0EsSUFBQXFKLEVBQUEsQ0FBZ0JySixLQUFBakYsVUFBQXZJLEdBQ2hCa25CLE1BQUEzZSxLQUFBc08sR0FDQW9RLElBQ0FBLEVBQUFwUSxFQUNBa0IsS0FDS21QLEVBQUFyUSx3QkNsRUwsSUFBQW5NLEVBQUFqSyxFQUFBQyxRQUFBLENBQTZCc2EsUUFBQSxTQUM3QixpQkFBQUcsVUFBQXpRLHlCQ0FBakssRUFBQUMsUUFBQWpCLE9BQUFtUCxJQUFBLFNBQUF4RCxFQUFBd2MsR0FFQSxPQUFBeGMsSUFBQXdjLEVBQUEsSUFBQXhjLEdBQUEsRUFBQUEsSUFBQSxFQUFBd2MsRUFBQXhjLE1BQUF3YywwQkNIQW5uQixFQUFBQyxRQUFBLG1DQ0FBRCxFQUFBQyxRQUFBLDBCQ0FBLFNBQUFDLElBQUMsV0FBWSxJQUFBNEYsRUFBTSxTQUFBekIsRUFBQWhCLEdBQWMsSUFBQWdHLEVBQUEsRUFBUSxrQkFBa0IsT0FBQUEsRUFBQWhHLEVBQUFpQixPQUFBLENBQW1CcUgsTUFBQSxFQUFBbE0sTUFBQTRELEVBQUFnRyxNQUFxQixDQUFFc0MsTUFBQSxJQUFVLElBQUF5YixFQUFBLG1CQUFBcG9CLE9BQUFzSCxpQkFBQXRILE9BQUFxSCxlQUFBLFNBQUFoRCxFQUFBZ0csRUFBQXZKLEdBQXVGdUQsR0FBQXFQLE1BQUF6VCxXQUFBb0UsR0FBQXJFLE9BQUFDLFlBQUFvRSxFQUFBZ0csR0FBQXZKLEVBQUFMLFFBQXdENG5CLEVBQUEsb0JBQUF0ZCxpQkFBQTNHLFVBQUEsb0JBQUFsRCxHQUFBLE1BQUFBLElBQUFrRCxLQUF1RyxTQUFBa2tCLElBQWFBLEVBQUEsYUFBZUQsRUFBQXhvQixTQUFBd29CLEVBQUF4b0IsT0FBQWdiLEdBQXVCLElBQ2tCc04sRUFEbEJ0TixFQUFBLFdBQWlCLElBQUF4VyxFQUFBLEVBQVEsZ0JBQUFnRyxHQUFtQix3QkFBQUEsR0FBQSxJQUFBaEcsS0FBNUMsR0FDeFosU0FBQWtrQixJQUFhRCxJQUFJLElBQUFqa0IsRUFBQWdrQixFQUFBeG9CLE9BQUFpRixTQUF3QlQsTUFBQWdrQixFQUFBeG9CLE9BQUFpRixTQUFBdWpCLEVBQUF4b0IsT0FBQSxhQUE4QyxtQkFBQTZULE1BQUF6VCxVQUFBb0UsSUFBQStqQixFQUFBMVUsTUFBQXpULFVBQUFvRSxFQUFBLENBQTREOEIsY0FBQSxFQUFBZ1AsVUFBQSxFQUFBMVUsTUFBQSxXQUE2QyxPQUFBd1osRUFBQTVVLEVBQUFqQixVQUFxQm1rQixFQUFBLGFBQWUsU0FBQXRPLEVBQUE1VixHQUEwRSxPQUE1RGtrQixJQUFJbGtCLEVBQUEsQ0FBR3lFLEtBQUF6RSxHQUFRQSxFQUFBZ2tCLEVBQUF4b0IsT0FBQWlGLFVBQUEsV0FBZ0MsT0FBQVYsTUFBYUMsRUFBUyxTQUFBc0gsRUFBQXRILEdBQWMsSUFBQWdHLEVBQUEsb0JBQUF4SyxlQUFBaUYsVUFBQVQsRUFBQXhFLE9BQUFpRixVQUFzRSxPQUFBdUYsSUFBQTFKLEtBQUEwRCxHQUFBLENBQW9CeUUsS0FBQXpELEVBQUFoQixJQUMvWixzQkFBQXJFLE9BQUF3b0IsZUFBQUwsRUFBQW5vQixPQUFBd29CLG1CQUFvRSxDQUFLLElBQUFDLEVBQU1wa0IsRUFBQSxDQUFHLElBQUEwaUIsRUFBQSxDQUFPemMsR0FBQSxHQUFLK0csRUFBQSxHQUFNLElBQUlBLEVBQUFxWCxVQUFBM0IsRUFBYzBCLEVBQUFwWCxFQUFBL0csRUFBTSxNQUFBakcsRUFBUSxNQUFBQSxJQUFVb2tCLEdBQUEsRUFBS04sRUFBQU0sRUFBQSxTQUFBcGtCLEVBQUFnRyxHQUFnQyxHQUFkaEcsRUFBQXFrQixVQUFBcmUsRUFBY2hHLEVBQUFxa0IsWUFBQXJlLEVBQUEsVUFBQXJFLFVBQUEzQixFQUFBLHNCQUErRCxPQUFBQSxHQUFTLEtBQU0sSUFBQWtILEVBQUE0YyxFQUFRLFNBQUEzakIsSUFBYUosS0FBQXVrQixHQUFBLEVBQVV2a0IsS0FBQWlaLEVBQUEsS0FBWWpaLEtBQUF3a0IsT0FBQSxFQUFjeGtCLEtBQUFpRyxFQUFBLEVBQVNqRyxLQUFBZ2tCLEVBQUFoa0IsS0FBQW1rQixFQUFBLEVBQWdCbmtCLEtBQUF5a0IsRUFBQSxLQUFZLFNBQUFwakIsRUFBQXBCLEdBQWMsR0FBQUEsRUFBQXNrQixFQUFBLFVBQUEzaUIsVUFBQSxnQ0FBMkQzQixFQUFBc2tCLEdBQUEsRUFDaFMsU0FBQW5pQixFQUFBbkMsRUFBQWdHLEVBQUF2SixHQUF3QixPQUFOdUQsRUFBQWdHLEVBQUF2SixFQUFNLENBQU9MLE1BQUE0SixHQUFTLFNBQUEvRCxFQUFBakMsR0FBaUMsUUFBQWdHLEtBQW5CakcsS0FBQTJpQixFQUFBMWlCLEVBQVNELEtBQUFpQixFQUFBLEdBQVVoQixFQUFBRCxLQUFBaUIsRUFBQVEsS0FBQXdFLEdBQThCakcsS0FBQWlCLEVBQUF5akIsVUFBaUIsU0FBQUMsRUFBQTFrQixHQUFjRCxLQUFBQyxFQUFBLElBQUFHLEVBQWFKLEtBQUFpTixFQUFBaE4sRUFDM1IsU0FBQTJpQixFQUFBM2lCLEVBQUFnRyxHQUFnQjVFLEVBQUFwQixLQUFPLElBQUF2RCxFQUFBdUQsSUFBQWdaLEVBQVksT0FBQXZjLEVBQUFrb0IsRUFBQTNrQixFQUFBLFdBQUF2RCxJQUFBLG1CQUFBdUQsR0FBcUQsT0FBTzVELE1BQUE0RCxFQUFBc0ksTUFBQSxJQUFpQnRDLEVBQUFoRyxJQUFBLFlBQWtCQSxJQUFBLFVBQUFnRyxHQUFpQjRlLEVBQUE1a0IsSUFDbkosU0FBQTJrQixFQUFBM2tCLEVBQUFnRyxFQUFBdkosRUFBQXVjLEdBQW9CLElBQUksSUFBQTZMLEVBQUE3ZSxFQUFBMUosS0FBQTBELElBQUFnWixFQUFBdmMsR0FBc0IsS0FBQW9vQixhQUFBbHBCLFFBQUEsVUFBQWdHLFVBQUEsbUJBQUFrakIsRUFBQSxxQkFBd0YsSUFBQUEsRUFBQXZjLEtBQUEsT0FBQXRJLElBQUFza0IsR0FBQSxFQUFBTyxFQUE2QixJQUFBcm1CLEVBQUFxbUIsRUFBQXpvQixNQUFjLE1BQUFvb0IsR0FBUyxPQUFBeGtCLElBQUFnWixFQUFBLEtBQUFoWixJQUFBc0MsRUFBQWtpQixHQUFBSSxFQUFBNWtCLEdBQXlELE9BQXpCQSxJQUFBZ1osRUFBQSxLQUFXQSxFQUFBMWMsS0FBQTBELElBQUF4QixHQUFjb21CLEVBQUE1a0IsR0FBWSxTQUFBNGtCLEVBQUE1a0IsR0FBYyxLQUFLQSxJQUFBZ0csR0FBTSxJQUFLLElBQUFBLEVBQUFoRyxFQUFBZ04sRUFBQWhOLEtBQWUsR0FBQWdHLEVBQUEsT0FBQWhHLElBQUFza0IsR0FBQSxHQUFzQmxvQixNQUFBNEosRUFBQTVKLE1BQUFrTSxNQUFBLEdBQXVCLE1BQUE3TCxHQUFTdUQsSUFBQXVrQixPQUFBLEVBQUF2a0IsSUFBQXNDLEVBQUE3RixHQUErQixHQUFUdUQsSUFBQXNrQixHQUFBLEVBQVN0a0IsSUFBQXdrQixFQUFBLENBQTZCLEdBQW5CeGUsRUFBQWhHLElBQUF3a0IsRUFBUXhrQixJQUFBd2tCLEVBQUEsS0FBV3hlLEVBQUE4ZSxFQUFBLE1BQUE5ZSxFQUFBNFAsRUFBaUIsT0FBT3haLE1BQUE0SixFQUFBLFVBQUFzQyxNQUFBLEdBQTJCLE9BQU9sTSxXQUFBLEVBQUFrTSxNQUFBLEdBQ3hkLFNBQUF5YyxFQUFBL2tCLEdBQWNELEtBQUEwRSxLQUFBLFNBQUF1QixHQUFzQixPQUFBaEcsRUFBQWUsRUFBQWlGLElBQWVqRyxLQUFBLGtCQUFBaUcsR0FBMEIsT0FBQWhHLEVBQUFzQyxFQUFBMEQsSUFBZWpHLEtBQUEsbUJBQUFpRyxHQUEyQixPQUFBMmMsRUFBQTNpQixFQUFBZ0csSUFBZWtlLElBQUlua0IsS0FBQXZFLE9BQUFpRixVQUFBLFdBQWlDLE9BQUFWLE1BQWEsU0FBQWlsQixFQUFBaGxCLEVBQUFnRyxHQUFnQixJQUFBdkosRUFBQSxJQUFBc29CLEVBQUEsSUFBQUwsRUFBQTFlLElBQTBDLE9BQXBCa0IsS0FBQXpLLEVBQUF1RCxFQUFBcEUsV0FBb0JhLEVBQ2xQLEdBTCthMEQsRUFBQXZFLFVBQUFtRixFQUFBLFNBQUFmLEdBQTBCRCxLQUFBd2tCLEVBQUF2a0IsR0FDemNHLEVBQUF2RSxVQUFBMEcsRUFBQSxTQUFBdEMsR0FBMEJELEtBQUF5a0IsRUFBQSxDQUFRNU8sRUFBQTVWLEVBQUE4a0IsR0FBQSxHQUFVL2tCLEtBQUFpRyxFQUFBakcsS0FBQW1rQixHQUFBbmtCLEtBQUFna0IsR0FBdUI1akIsRUFBQXZFLFVBQUEsbUJBQUFvRSxHQUFrQ0QsS0FBQXlrQixFQUFBLENBQVFTLE9BQUFqbEIsR0FBWUQsS0FBQWlHLEVBQUFqRyxLQUFBZ2tCLEdBQTJLVyxFQUFBOW9CLFVBQUFtRixFQUFBLFNBQUFmLEdBQW9DLE9BQVZvQixFQUFBckIsS0FBQUMsR0FBVUQsS0FBQUMsRUFBQWdaLEVBQUEyTCxFQUFBNWtCLFVBQUFDLEVBQUFnWixFQUFBdlUsS0FBQXpFLEVBQUFELEtBQUFDLEVBQUFlLElBQW9EaEIsS0FBQUMsRUFBQWUsRUFBQWYsR0FBWTRrQixFQUFBN2tCLFFBQ3pPMmtCLEVBQUE5b0IsVUFBQTBHLEVBQUEsU0FBQXRDLEdBQW9DLE9BQVZvQixFQUFBckIsS0FBQUMsR0FBVUQsS0FBQUMsRUFBQWdaLEVBQUEyTCxFQUFBNWtCLFVBQUFDLEVBQUFnWixFQUFBLFNBQUFoWixFQUFBRCxLQUFBQyxFQUFBZSxJQUF3RGhCLEtBQUFDLEVBQUFzQyxFQUFBdEMsR0FBWTRrQixFQUFBN2tCLFFBR3ZRLG9CQUFBOFosT0FBQSxxQkFBQWtELG9CQUFBbmhCLFVBQUFrRixNQUFBLENBQXdGLElBQUFva0IsRUFBQSxTQUFBbGxCLEVBQUFnRyxHQUFvQixRQUFBdkosRUFBQSxFQUFZQSxFQUFBdUQsRUFBQWlCLE9BQVd4RSxJQUFBdUosRUFBQWhHLEVBQUF2RCxLQUFZa0wsRUFBQSxTQUFBM0gsRUFBQWdHLEVBQUF2SixHQUFtQixPQUFBdUosYUFBQTZULEtBQUEsQ0FBQTNULE9BQUFsRyxHQUFBZ0csT0FBQSxJQUFBdkosSUFBQSxxQkFBQXVKLEVBQUFoRSxLQUFBZ0UsRUFBQWhFLEtBQUEsU0FBQWtFLE9BQUFsRyxHQUFBa0csT0FBQUYsS0FBb0huRixFQUFBLFNBQUFiLEVBQUFnRyxHQUFpQixHQUFBaEcsRUFBQWlCLE9BQUErRSxFQUFBLFVBQUFyRSxVQUFBcUUsRUFBQSxnQ0FBQWhHLEVBQUFpQixPQUFBLGNBQTJGa2tCLEVBQUEsU0FBQW5sQixHQUFlLElBQUFnRyxFQUFBc0IsRUFBQXRILEdBQ2paLE9BRDRaQSxFQUFBZ0csRUFBQXZCLE9BQUFySSxNQUFpQjRKLElBQUF2QixPQUFBckksTUFBaUI0RCxhQUFBNlosT0FBQTdaLEVBQUEsSUFBQW9sQixLQUFBLENBQUFwbEIsR0FBQWdHLEVBQUEsQ0FBc0MyRSxLQUFBM0ssRUFBQTJLLEtBQUEwYSxhQUFBcmxCLEVBQUFxbEIsZ0JBQ3BlcmxCLEdBQVMrRyxFQUFBLGtCQUFBTCxjQUFBLGtCQUFBa0ksVUFBQTdPLEtBQUEyQyxFQUFBcUUsRUFBQWdXLFNBQUFoUSxFQUFBaEcsRUFBQWtaLGdCQUFBbFosRUFBQWtaLGVBQUFya0IsVUFBQW1sQixLQUFBMUksRUFBQXRSLEVBQUFnWCxTQUFBaFgsRUFBQTZZLE1BQUEwRixFQUFBdmUsRUFBQXdjLFdBQUF4YyxFQUFBd2MsVUFBQWdDLFdBQWdNdEIsSUFBSSxJQUFBL2hCLEVBQUE2RSxFQUFBdkwsZUFBQVMsWUFBbUNpRyxJQUFBMlgsS0FBQWplLFVBQUFzRyxLQUFBMlgsS0FBQWplLFVBQUFzRyxHQUFBLGlCQUFBNkUsSUFBQXFlLEtBQUF4cEIsVUFBQXNHLEtBQUFrakIsS0FBQXhwQixVQUFBc0csR0FBQSxTQUE4RyxJQUFJLElBQUFrakIsS0FBQSxPQUFnQixNQUFBcGxCLEdBQVMrRyxFQUFBcWUsS0FBQSxTQUFBcGYsRUFBQXZKLEVBQUF1YyxHQUN0TixPQUQ2T2hULEVBQUEsSUFBQTZULEtBQUE3VCxFQUFBZ1QsR0FBZ0JBLFVBQUEsSUFBQUEsRUFBQXFNLGFBQUEsSUFBQTlVLEtBQUF5SSxFQUFBcU0sY0FBQSxJQUFBOVUsS0FBK0Q1VSxPQUFBc0gsaUJBQUErQyxFQUNqZSxDQUFDaEUsS0FBQSxDQUFNNUYsTUFBQUssR0FBUStvQixpQkFBQSxDQUFtQnBwQixNQUFBNGMsR0FBUXFNLGFBQUEsQ0FBZWpwQixPQUFBNGMsR0FBU2pkLFNBQUEsQ0FBV0ssTUFBQSxXQUFpQiwwQkFBMEI4RixHQUFBdkcsT0FBQXFILGVBQUFnRCxFQUFBOUQsRUFBQSxDQUE4QjlGLE1BQUEsU0FBZTRKLEdBQVVpZSxJQUFJQyxJQUFJLElBQUF1QixFQUFBLFNBQUF6bEIsR0FBNkMsR0FBM0JELEtBQUF2QixFQUFBN0MsT0FBQW9ILE9BQUEsT0FBMkIvQyxFQUFBLE9BQUFELEtBQWtCLElBQUFpRyxFQUFBakcsS0FBV21sQixFQUFBbGxCLEVBQUEwbEIsU0FBQSxTQUFBMWxCLEdBQXlCLEdBQUFBLEVBQUFnQyxPQUFBaEMsRUFBQTJsQixVQUFBLFdBQUEzbEIsRUFBQTJLLE1BQUEsV0FBQTNLLEVBQUEySyxLQUFBLFlBQUEzSyxFQUFBMkssS0FBQSxDQUFpRixJQUFBcU8sRUFBQWhaLEVBQUE0bEIsT0FBQTVsQixFQUFBNGxCLE1BQUEza0IsT0FBQWpCLEVBQUE0bEIsTUFBQSxLQUFBUixLQUFBLE9BQXVEemEsS0FBQSw4QkFBbUN1YSxFQUFBbE0sRUFBQSxTQUFBQSxHQUFnQmhULEVBQUFtVixPQUFBbmIsRUFBQWdDLEtBQUFnWCxTQUFxQixvQkFDMWVoWixFQUFBMkssTUFBQSxlQUFBM0ssRUFBQTJLLEtBQUF1YSxFQUFBbGxCLEVBQUFpZSxRQUFBLFNBQUFqRixJQUFzREEsRUFBQTJNLFVBQUEzTSxFQUFBNk0sVUFBQTdmLEVBQUFtVixPQUFBbmIsRUFBQWdDLEtBQUFnWCxFQUFBNWMsU0FBa0QsYUFBQTRELEVBQUEySyxNQUFBLFVBQUEzSyxFQUFBMkssS0FBQTNLLEVBQUE4bEIsU0FBQTlmLEVBQUFtVixPQUFBbmIsRUFBQWdDLEtBQUFoQyxFQUFBNUQsUUFBQTRjLEVBQUEsYUFBQWhaLEVBQUEySyxLQUFBM0ssRUFBQTVELE1BQUFvUCxRQUFBLGNBQUFBLFFBQUEsY0FBQXhMLEVBQUE1RCxNQUFBNEosRUFBQW1WLE9BQUFuYixFQUFBZ0MsS0FBQWdYLE9BS2lGLEdBTHFHdlcsRUFBQWdqQixFQUFBN3BCLFVBQWM2RyxFQUFBMFksT0FBQSxTQUFBbmIsRUFBQWdHLEVBQUF2SixHQUF5Qm9FLEVBQUFlLFVBQUEsR0FBZSxJQUFBb1gsRUFBQTFSLEVBQUFLLEVBQUFuRSxNQUFBLEtBQUE1QixZQUFpQzVCLEVBQUFnWixFQUFBdlUsT0FBQXJJLE1BQWlCNEosRUFBQWdULEVBQUF2VSxPQUFBckksTUFBaUJLLEVBQUF1YyxFQUFBdlUsT0FBQXJJLE1BQWlCNGMsRUFBQWpaLEtBQUF2QixFQUFTd2EsRUFBQWhaLEtBQUFnWixFQUFBaFosR0FBQSxJQUFnQmdaLEVBQUFoWixHQUFBd0IsS0FBQSxDQUFBd0UsRUFBQXZKLEtBQWtCZ0csRUFBQSxtQkFBQXpDLEdBQXdCYSxFQUFBZSxVQUMzZSxVQUFHN0IsS0FBQXZCLEVBQUEwSCxPQUFBbEcsS0FBMEJ5QyxFQUFBZ0QsUUFBQSxTQUFBTyxJQUF1QixJQUFBZ1QsRUFBQTZMLEVBQUFybUIsRUFBQWdtQixFQUFBRixFQUFBeUIsRUFBQXRwQixFQUFBc0QsS0FBdUIsT0FBQWlsQixFQUFBaGYsRUFBQSxTQUFBQSxHQUF1QixPQUFBQSxLQUFZLE9BQUFnVCxFQUFBdmMsRUFBQStCLElBQUEsSUFBQXlELEVBQUErVyxHQUF3QixXQUFBZ04sRUFBYWhtQixFQUFBLENBQUcsSUFBQWdtQixFQUFBeG5CLEVBQVEsRUFBQXduQixFQUFBaGxCLEVBQUFDLFFBQWEsQ0FBRSxJQUFBNmpCLEVBQUFrQixFQUFBaGxCLEVBQUFpbEIsTUFBZ0IsR0FBQW5CLEtBQUFrQixFQUFBdEQsRUFBQSxDQUFhc0QsRUFBQWxCLEVBQUksTUFBQTlrQixHQUFTZ21CLEVBQUEsS0FBTyxVQUFBbkIsRUFBQW1CLEdBQUEsQ0FBZ0JoZ0IsSUFBQSxFQUFNLE1BQU13ZSxFQUFBbGQsRUFBQTBSLEVBQUE2TCxJQUFVUCxFQUFBRSxFQUFBL2YsT0FBVyxVQUFBNmYsRUFBQWhjLEtBQUEsQ0FBa0J0QyxJQUFBLEVBQU0sTUFBZ0IsT0FBVitmLEVBQUF6QixFQUFBbG9CLE1BQVUrRixFQUFBNkQsRUFBQSxDQUFBNmUsRUFBQU0sRUFBQVksSUFBQSxHQUF1QixPQUFBekIsRUFBQUUsRUFBQS9mLE9BQUF1QixJQUFBLE1BQTRCdkQsRUFBQXlZLFFBQUEsU0FBQWxWLEVBQUF2SixHQUF3Qm9FLEVBQUFlLFVBQUEsR0FBZSxRQUFBb1gsRUFBQTFSLEVBQUF2SCxNQUFBOGtCLEVBQUE3TCxFQUFBdlUsUUFBNkJvZ0IsRUFBQXZjLEtBQVF1YyxFQUFBN0wsRUFBQXZVLE9BQUEsQ0FBWSxJQUFBakcsRUFBQThJLEVBQUF1ZCxFQUFBem9CLE9BQWlCeW9CLEVBQUFybUIsRUFBQWlHLE9BQUFySSxNQUFpQm9DLElBQUFpRyxPQUFBckksTUFDcGU0SixFQUFBMUosS0FBQUcsRUFBQStCLEVBQUFxbUIsRUFBQTlrQixRQUFxQjBDLEVBQUEzQyxJQUFBLFNBQUFrRyxHQUFrQm5GLEVBQUFlLFVBQUEsR0FBZSxJQUFBbkYsRUFBQXNELEtBQUF2QixFQUF5QixPQUFad0gsRUFBQUUsT0FBQUYsR0FBWXZKLEVBQUF1SixHQUFBbWYsRUFBQTFvQixFQUFBdUosR0FBQSxVQUE2QnZELEVBQUF5akIsT0FBQSxTQUFBbGdCLEdBQW9DLE9BQWZuRixFQUFBZSxVQUFBLElBQWU3QixLQUFBdkIsRUFBQTBILE9BQUFGLEtBQUEsSUFBQWlWLElBQUFrSyxJQUFzQzFpQixFQUFBM0YsSUFBQSxTQUFBa0osR0FBaUMsT0FBZm5GLEVBQUFlLFVBQUEsR0FBZXNFLE9BQUFGLEtBQUFqRyxLQUFBdkIsR0FBMkJpRSxFQUFBM0IsS0FBQSxTQUFBckUsSUFBb0IsSUFBQW9vQixFQUFBcm1CLEVBQUFnbUIsRUFBQUYsRUFBQXlCLEVBQUEvTSxFQUFBalosS0FBcUIsT0FBQWlsQixFQUFBdm9CLEVBQUEsU0FBQUEsR0FBbUQsR0FBNUIsR0FBQUEsRUFBQXVKLElBQUE2ZSxFQUFBdmQsRUFBQTBSLEdBQUF4YSxFQUFBcW1CLEVBQUFwZ0IsUUFBNEIsR0FBQWhJLEVBQUF1SixFQUFXLE9BQUF4SCxFQUFBOEosVUFBVzdMLEVBQUF1SixFQUFBLElBQWF3ZSxFQUFBaG1CLEVBQUFwQyxNQUFVa29CLEVBQUFoZCxFQUFBa2QsR0FBT3VCLEVBQUF6QixFQUFBN2YsT0FBQXJJLE1BQWlCK0YsRUFBQTFGLEVBQUFzcEIsRUFBQSxJQUFnQnZuQixFQUFBcW1CLEVBQUFwZ0IsT0FBV2hJLEVBQUF1SixFQUFBLEtBQVN2RCxFQUFBVixJQUFBLFNBQUF0RixFQUFBdWMsRUFBQTZMLEdBQXNCaGtCLEVBQUFlLFVBQUEsR0FBZSxJQUFBcEQsRUFBQW1KLEVBQUFuRSxNQUFBLEtBQUE1QixXQUM1ZDdCLEtBQUF2QixJQUFBLE1BQUFBLEVBQUEsR0FBQUEsRUFBQSxNQUE0QmlFLEVBQUFpRCxPQUFBLFNBQUFzVCxJQUFzQixJQUFBeGEsRUFBQWdtQixFQUFBRixFQUFBeUIsRUFBQWpCLEVBQUFELEVBQUE5a0IsS0FBcUIsT0FBQWlsQixFQUFBaE0sRUFBQSxTQUFBQSxHQUFtRCxHQUE1QixHQUFBQSxFQUFBaFQsSUFBQXhILEVBQUE4SSxFQUFBdWQsR0FBQUwsRUFBQWhtQixFQUFBaUcsUUFBNEIsR0FBQXVVLEVBQUFoVCxFQUFXLE9BQUF3ZSxFQUFBbGMsVUFBVzBRLEVBQUFoVCxFQUFBLElBQWFzZSxFQUFBRSxFQUFBcG9CLE1BQVUycEIsRUFBQXplLEVBQUFnZCxHQUFPeUIsRUFBQXRoQixPQUFTcWdCLEVBQUFpQixFQUFBdGhCLE9BQUFySSxNQUFpQitGLEVBQUE2VyxFQUFBOEwsRUFBQSxJQUFnQk4sRUFBQWhtQixFQUFBaUcsT0FBV3VVLEVBQUFoVCxFQUFBLEtBQVN5ZixFQUFBN3BCLFVBQUF1cUIsVUFBQSxXQUFpQyxRQUFBbk4sRUFBQSxJQUFBdFcsRUFBQW1pQixFQUFBdmQsRUFBQXZILE1BQUF2QixFQUFBcW1CLEVBQUFwZ0IsUUFBcUNqRyxFQUFBOEosS0FBUTlKLEVBQUFxbUIsRUFBQXBnQixPQUFBLENBQVksSUFBQStmLEVBQUFsZCxFQUFBOUksRUFBQXBDLE9BQWlCb0MsRUFBQWdtQixFQUFBL2YsT0FBQXJJLE1BQWlCb29CLElBQUEvZixPQUFBckksTUFBaUI0YyxFQUFBbUMsT0FBQTNjLEVBQUFnbUIsR0FBYyxPQUFBeEwsR0FBVXlNLEVBQUE3cEIsVUFBQXdxQixNQUFBLFdBQTZCLFFBQUFwTixFQUFBLHlCQUFBdFYsS0FBQW1WLFNBQUFnTSxFQUFBLEdBQUFybUIsRUFBQThJLEVBQUF2SCxNQUFBeWtCLEVBQUFobUIsRUFBQWlHLFFBQTJFK2YsRUFBQWxjLEtBQVFrYyxFQUNqZ0JobUIsRUFBQWlHLE9BQUEsQ0FBVSxJQUFBNmYsRUFBQWhkLEVBQUFrZCxFQUFBcG9CLE9BQWlCb29CLEVBQUFGLEVBQUE3ZixPQUFBckksTUFBaUJrb0IsSUFBQTdmLE9BQUFySSxNQUFpQnlvQixFQUFBcmpCLEtBQUEsS0FBQXdYLEVBQUEsUUFBc0JzTCxhQUFBekssS0FBQWdMLEVBQUFyakIsS0FBQSx5Q0FBeURnakIsRUFBQSxnQkFBY0YsRUFBQXRpQixLQUFBLDBCQUFBc2lCLEVBQUEzWixNQUFBLHVDQUFBMlosRUFBQSxRQUFBTyxFQUFBcmpCLEtBQUEseUNBQThJZ2pCLEVBQUEsWUFBQUYsRUFBQSxRQUFxRCxPQUFwQk8sRUFBQXJqQixLQUFBLEtBQUF3WCxFQUFBLE1BQW9CLElBQUFhLEtBQUFnTCxFQUFBLENBQW1CbGEsS0FBQSxpQ0FBMEJxTyxLQUFpQnlNLEVBQUE3cEIsVUFBQUosT0FBQWlGLFVBQUEsV0FBd0MsT0FBQVYsS0FBQTBGLFdBQXVCZ2dCLEVBQUE3cEIsVUFBQUcsU0FBQSxXQUFnQywyQkFDMWZtRyxJQUFBdWpCLEVBQUE3cEIsVUFBQXNHLEdBQUEsWUFBK0I2SyxJQUFBaEcsRUFBQWtaLGVBQUFya0IsVUFBQW1sQixLQUFBLFNBQUEvSCxHQUFnREEsYUFBQXlNLEdBQUF6TSxJQUFBb04sUUFBQXJtQixLQUFBNGdCLGlCQUFBLGVBQUEzSCxFQUFBck8sTUFBQW9DLEVBQUF6USxLQUFBeUQsS0FBQWlaLElBQUFqTSxFQUFBelEsS0FBQXlELEtBQUFpWixLQUEwR1gsRUFBQSxDQUFNLElBQUFnTyxFQUFBdGYsRUFBQTZZLE1BQWM3WSxFQUFBNlksTUFBQSxTQUFBNUcsRUFBQTZMLEdBQThFLE9BQXhEQSxLQUFBdkosTUFBQXVKLEVBQUF2SixnQkFBQW1LLElBQUFaLEVBQUF2SixLQUFBdUosRUFBQXZKLEtBQUE4SyxTQUF3REMsRUFBQS9wQixLQUFBeUQsS0FBQWlaLEVBQUE2TCxJQUF5QlMsSUFBQXZlLEVBQUF3YyxVQUFBZ0MsV0FBQSxTQUFBdk0sRUFBQTZMLEdBQTJFLE9BQWxDQSxhQUFBWSxJQUFBWixJQUFBc0IsYUFBa0NiLEVBQUFocEIsS0FBQXlELEtBQUFpWixFQUFBNkwsS0FBMEI5ZCxFQUFBZ1csU0FBQTBJLElBZnhaLGtEQ0FEOW9CLEVBQUFDLFFBQWlCbkIsRUFBUSxnQ0NBekIsSUFBQW9DLEVBQWVwQyxFQUFRLFFBQ3ZCNnFCLEVBQXFCN3FCLEVBQVEsUUFDN0J1QyxFQUFrQnZDLEVBQVEsUUFDMUJnRCxFQUFBOUMsT0FBQXFILGVBRUFwRyxFQUFBNEIsRUFBWS9DLEVBQVEsUUFBZ0JFLE9BQUFxSCxlQUFBLFNBQUEyRSxFQUFBOUcsRUFBQTBsQixHQUlwQyxHQUhBMW9CLEVBQUE4SixHQUNBOUcsRUFBQTdDLEVBQUE2QyxHQUFBLEdBQ0FoRCxFQUFBMG9CLEdBQ0FELEVBQUEsSUFDQSxPQUFBN25CLEVBQUFrSixFQUFBOUcsRUFBQTBsQixHQUNHLE1BQUE5cEIsSUFDSCxXQUFBOHBCLEdBQUEsUUFBQUEsRUFBQSxNQUFBNWtCLFVBQUEsNEJBRUEsTUFEQSxVQUFBNGtCLElBQUE1ZSxFQUFBOUcsR0FBQTBsQixFQUFBbnFCLE9BQ0F1TCwyQkNkQWxNLEVBQVEsUUFDUmtCLEVBQUFDLFFBQWlCbkIsRUFBUSxRQUFxQkUsT0FBQW1GLDZCQ0E5Q25FLEVBQUFDLFNBQWtCbkIsRUFBUSxPQUFSQSxDQUFrQixXQUNwQyxPQUEwRSxHQUExRUUsT0FBQXFILGVBQUEsR0FBaUMsS0FBUWxELElBQUEsV0FBbUIsWUFBY0UseUNDRDFFLElBQUErQyxFQUFhdEgsRUFBUSxRQUNyQitVLEVBQWlCL1UsRUFBUSxRQUN6QjZCLEVBQXFCN0IsRUFBUSxRQUM3QnFKLEVBQUEsR0FHQXJKLEVBQVEsT0FBUkEsQ0FBaUJxSixFQUFxQnJKLEVBQVEsT0FBUkEsQ0FBZ0IsdUJBQTRCLE9BQUFzRSxPQUVsRnBELEVBQUFDLFFBQUEsU0FBQTRILEVBQUFELEVBQUFFLEdBQ0FELEVBQUE1SSxVQUFBbUgsRUFBQStCLEVBQUEsQ0FBcURMLEtBQUErTCxFQUFBLEVBQUEvTCxLQUNyRG5ILEVBQUFrSCxFQUFBRCxFQUFBLG9DQ1ZBLElBQUFxSSxFQUFVblIsRUFBUSxRQUNsQmtCLEVBQUFDLFFBQUF5UyxNQUFBelIsU0FBQSxTQUFBK08sR0FDQSxlQUFBQyxFQUFBRCwwQkNIQWhRLEVBQUFDLFFBQWlCbkIsRUFBUSw4QkNBekJtQixFQUFBNEIsRUFBQTdDLE9BQUF5SCw4Q0NDQSxJQUFBd1AsRUFBZ0JuWCxFQUFRLFFBQ3hCa0IsRUFBQUMsUUFBQSxTQUFBOE0sRUFBQTVELEVBQUE3RSxHQUVBLEdBREEyUixFQUFBbEosUUFDQXhOLElBQUE0SixFQUFBLE9BQUE0RCxFQUNBLE9BQUF6SSxHQUNBLHVCQUFBakIsR0FDQSxPQUFBMEosRUFBQXBOLEtBQUF3SixFQUFBOUYsSUFFQSx1QkFBQUEsRUFBQWdHLEdBQ0EsT0FBQTBELEVBQUFwTixLQUFBd0osRUFBQTlGLEVBQUFnRyxJQUVBLHVCQUFBaEcsRUFBQWdHLEVBQUFnVCxHQUNBLE9BQUF0UCxFQUFBcE4sS0FBQXdKLEVBQUE5RixFQUFBZ0csRUFBQWdULElBR0Esa0JBQ0EsT0FBQXRQLEVBQUFsRyxNQUFBc0MsRUFBQWxFLHFDQ2hCQSxJQUFBNGtCLEVBQWtCL3FCLEVBQVEsT0FBUkEsQ0FBZ0IsZUFDbEMyVCxFQUFBQyxNQUFBelQsZUFDQU0sR0FBQWtULEVBQUFvWCxJQUEwQy9xQixFQUFRLE9BQVJBLENBQWlCMlQsRUFBQW9YLEVBQUEsSUFDM0Q3cEIsRUFBQUMsUUFBQSxTQUFBc0QsR0FDQWtQLEVBQUFvWCxHQUFBdG1CLElBQUEseUJDTEF2RCxFQUFBQyxRQUFBLFNBQUEwTyxHQUNBLElBQ0EsT0FBWTdPLEdBQUEsRUFBQW1aLEVBQUF0SyxLQUNULE1BQUE3TyxHQUNILE9BQVlBLEdBQUEsRUFBQW1aLEVBQUFuWiw2QkNIWixJQUFBa0osRUFBZ0JsSyxFQUFRLFFBQ3hCb00sRUFBQW5FLEtBQUFtRSxJQUNBbEwsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxPQUFBQSxFQUFBLEVBQUE0SCxFQUFBbEMsRUFBQTFGLEdBQUEsNkNDSEF0RCxFQUFBQyxTQUFrQm5CLEVBQVEsT0FBUkEsQ0FBa0IsV0FDcEMsT0FBMEUsR0FBMUVFLE9BQUFxSCxlQUFBLEdBQWlDLEtBQVFsRCxJQUFBLFdBQW1CLFlBQWNFLDRCQ0YxRSxJQUFBNk8sRUFBV3BULEVBQVEsUUFHbkJELEVBQUFxVCxFQUFBclQsT0FFQW1CLEVBQUFDLFFBQUFwQixzQ0NMQSxTQUFBcUI7Ozs7OztBQU9BLElBQUE0cEIsRUFBQTlxQixPQUFBK3FCLE9BQUEsSUFJQSxTQUFBQyxFQUFBL1EsR0FDQSxZQUFBMVosSUFBQTBaLEdBQUEsT0FBQUEsRUFHQSxTQUFBZ1IsRUFBQWhSLEdBQ0EsWUFBQTFaLElBQUEwWixHQUFBLE9BQUFBLEVBR0EsU0FBQWlSLEVBQUFqUixHQUNBLFdBQUFBLEVBR0EsU0FBQWtSLEVBQUFsUixHQUNBLFdBQUFBLEVBTUEsU0FBQW1SLEVBQUEzcUIsR0FDQSxNQUNBLGtCQUFBQSxHQUNBLGtCQUFBQSxHQUVBLGtCQUFBQSxHQUNBLG1CQUFBQSxFQVNBLFNBQUEwQixFQUFBbWMsR0FDQSxjQUFBQSxHQUFBLGtCQUFBQSxFQU1BLElBQUErTSxFQUFBcnJCLE9BQUFDLFVBQUFHLFNBVUEsU0FBQWtyQixFQUFBaE4sR0FDQSwwQkFBQStNLEVBQUExcUIsS0FBQTJkLEdBR0EsU0FBQWlOLEVBQUF0UixHQUNBLDBCQUFBb1IsRUFBQTFxQixLQUFBc1osR0FNQSxTQUFBdVIsRUFBQXZjLEdBQ0EsSUFBQW9aLEVBQUFvRCxXQUFBbGhCLE9BQUEwRSxJQUNBLE9BQUFvWixHQUFBLEdBQUF0Z0IsS0FBQTJNLE1BQUEyVCxRQUFBcUQsU0FBQXpjLEdBR0EsU0FBQTBjLEVBQUExYyxHQUNBLE9BQ0FnYyxFQUFBaGMsSUFDQSxvQkFBQUEsRUFBQXZELE1BQ0Esb0JBQUF1RCxFQUFBMkwsTUFPQSxTQUFBeGEsRUFBQTZPLEdBQ0EsYUFBQUEsRUFDQSxHQUNBeUUsTUFBQXpSLFFBQUFnTixJQUFBcWMsRUFBQXJjLE1BQUE3TyxXQUFBaXJCLEVBQ0Fub0IsS0FBQUUsVUFBQTZMLEVBQUEsUUFDQTFFLE9BQUEwRSxHQU9BLFNBQUEyYyxFQUFBM2MsR0FDQSxJQUFBb1osRUFBQW9ELFdBQUF4YyxHQUNBLE9BQUEwRixNQUFBMFQsR0FBQXBaLEVBQUFvWixFQU9BLFNBQUF3RCxFQUNBcGIsRUFDQXFiLEdBSUEsSUFGQSxJQUFBeE0sRUFBQXRmLE9BQUFvSCxPQUFBLE1BQ0Eya0IsRUFBQXRiLEVBQUEvSixNQUFBLEtBQ0F0QixFQUFBLEVBQWlCQSxFQUFBMm1CLEVBQUF6bUIsT0FBaUJGLElBQ2xDa2EsRUFBQXlNLEVBQUEzbUIsS0FBQSxFQUVBLE9BQUEwbUIsRUFDQSxTQUFBN2MsR0FBc0IsT0FBQXFRLEVBQUFyUSxFQUFBOFAsZ0JBQ3RCLFNBQUE5UCxHQUFzQixPQUFBcVEsRUFBQXJRLElBTXRCLElBQUErYyxFQUFBSCxFQUFBLHFCQUtBSSxFQUFBSixFQUFBLDhCQUtBLFNBQUFLLEVBQUFuUCxFQUFBb1AsR0FDQSxHQUFBcFAsRUFBQXpYLE9BQUEsQ0FDQSxJQUFBc0YsRUFBQW1TLEVBQUEzRSxRQUFBK1QsR0FDQSxHQUFBdmhCLEdBQUEsRUFDQSxPQUFBbVMsRUFBQXFQLE9BQUF4aEIsRUFBQSxJQVFBLElBQUExSyxFQUFBRixPQUFBQyxVQUFBQyxlQUNBLFNBQUFtc0IsRUFBQS9OLEVBQUEvWixHQUNBLE9BQUFyRSxFQUFBUyxLQUFBMmQsRUFBQS9aLEdBTUEsU0FBQStuQixFQUFBdmUsR0FDQSxJQUFBd2UsRUFBQXZzQixPQUFBb0gsT0FBQSxNQUNBLGdCQUFBcUosR0FDQSxJQUFBK2IsRUFBQUQsRUFBQTliLEdBQ0EsT0FBQStiLElBQUFELEVBQUE5YixHQUFBMUMsRUFBQTBDLEtBT0EsSUFBQWdjLEVBQUEsU0FDQUMsRUFBQUosRUFBQSxTQUFBN2IsR0FDQSxPQUFBQSxFQUFBWixRQUFBNGMsRUFBQSxTQUFBRSxFQUFBdFAsR0FBa0QsT0FBQUEsSUFBQUcsY0FBQSxPQU1sRG9QLEVBQUFOLEVBQUEsU0FBQTdiLEdBQ0EsT0FBQUEsRUFBQWhHLE9BQUEsR0FBQStTLGNBQUEvTSxFQUFBL0YsTUFBQSxLQU1BbWlCLEVBQUEsYUFDQUMsRUFBQVIsRUFBQSxTQUFBN2IsR0FDQSxPQUFBQSxFQUFBWixRQUFBZ2QsRUFBQSxPQUFBOU4sZ0JBWUEsU0FBQWdPLEVBQUFoZixFQUFBaEIsR0FDQSxTQUFBaWdCLEVBQUEzb0IsR0FDQSxJQUFBZ0IsRUFBQVksVUFBQVgsT0FDQSxPQUFBRCxFQUNBQSxFQUFBLEVBQ0EwSSxFQUFBbEcsTUFBQWtGLEVBQUE5RyxXQUNBOEgsRUFBQXBOLEtBQUFvTSxFQUFBMUksR0FDQTBKLEVBQUFwTixLQUFBb00sR0FJQSxPQURBaWdCLEVBQUFDLFFBQUFsZixFQUFBekksT0FDQTBuQixFQUdBLFNBQUFFLEVBQUFuZixFQUFBaEIsR0FDQSxPQUFBZ0IsRUFBQW9mLEtBQUFwZ0IsR0FHQSxJQUFBb2dCLEVBQUFoZixTQUFBbE8sVUFBQWt0QixLQUNBRCxFQUNBSCxFQUtBLFNBQUFLLEVBQUFyQixFQUFBc0IsR0FDQUEsS0FBQSxFQUNBLElBQUFqb0IsRUFBQTJtQixFQUFBem1CLE9BQUErbkIsRUFDQWhlLEVBQUEsSUFBQXFFLE1BQUF0TyxHQUNBLE1BQUFBLElBQ0FpSyxFQUFBakssR0FBQTJtQixFQUFBM21CLEVBQUFpb0IsR0FFQSxPQUFBaGUsRUFNQSxTQUFBaWUsRUFBQUMsRUFBQUMsR0FDQSxRQUFBanBCLEtBQUFpcEIsRUFDQUQsRUFBQWhwQixHQUFBaXBCLEVBQUFqcEIsR0FFQSxPQUFBZ3BCLEVBTUEsU0FBQWphLEVBQUF5SixHQUVBLElBREEsSUFBQTFJLEVBQUEsR0FDQWpQLEVBQUEsRUFBaUJBLEVBQUEyWCxFQUFBelgsT0FBZ0JGLElBQ2pDMlgsRUFBQTNYLElBQ0Frb0IsRUFBQWpaLEVBQUEwSSxFQUFBM1gsSUFHQSxPQUFBaVAsRUFVQSxTQUFBb1osRUFBQXBwQixFQUFBZ0csRUFBQWdULElBS0EsSUFBQXFRLEVBQUEsU0FBQXJwQixFQUFBZ0csRUFBQWdULEdBQTZCLFVBTzdCc1EsRUFBQSxTQUFBaEIsR0FBNkIsT0FBQUEsR0FLN0IsU0FBQWlCLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQXJILE9BQUEsU0FBQXJoQixFQUFBaWpCLEdBQ0EsT0FBQWpqQixFQUFBZ1ksT0FBQWlMLEVBQUEwRixZQUFBLEtBQ0csSUFBQS9iLEtBQUEsS0FPSCxTQUFBZ2MsRUFBQTFwQixFQUFBZ0csR0FDQSxHQUFBaEcsSUFBQWdHLEVBQWdCLFNBQ2hCLElBQUEyakIsRUFBQTdyQixFQUFBa0MsR0FDQTRwQixFQUFBOXJCLEVBQUFrSSxHQUNBLElBQUEyakIsSUFBQUMsRUF3QkcsT0FBQUQsSUFBQUMsR0FDSDFqQixPQUFBbEcsS0FBQWtHLE9BQUFGLEdBeEJBLElBQ0EsSUFBQTZqQixFQUFBeGEsTUFBQXpSLFFBQUFvQyxHQUNBOHBCLEVBQUF6YSxNQUFBelIsUUFBQW9JLEdBQ0EsR0FBQTZqQixHQUFBQyxFQUNBLE9BQUE5cEIsRUFBQWlCLFNBQUErRSxFQUFBL0UsUUFBQWpCLEVBQUErcEIsTUFBQSxTQUFBdHRCLEVBQUFzRSxHQUNBLE9BQUEyb0IsRUFBQWp0QixFQUFBdUosRUFBQWpGLE1BRU8sR0FBQWYsYUFBQXVRLE1BQUF2SyxhQUFBdUssS0FDUCxPQUFBdlEsRUFBQWdxQixZQUFBaGtCLEVBQUFna0IsVUFDTyxHQUFBSCxHQUFBQyxFQVFQLFNBUEEsSUFBQUcsRUFBQXR1QixPQUFBbUYsS0FBQWQsR0FDQWtxQixFQUFBdnVCLE9BQUFtRixLQUFBa0YsR0FDQSxPQUFBaWtCLEVBQUFocEIsU0FBQWlwQixFQUFBanBCLFFBQUFncEIsRUFBQUYsTUFBQSxTQUFBN3BCLEdBQ0EsT0FBQXdwQixFQUFBMXBCLEVBQUFFLEdBQUE4RixFQUFBOUYsTUFNSyxNQUFBekQsR0FFTCxVQWNBLFNBQUEwdEIsRUFBQXpSLEVBQUE5TixHQUNBLFFBQUE3SixFQUFBLEVBQWlCQSxFQUFBMlgsRUFBQXpYLE9BQWdCRixJQUNqQyxHQUFBMm9CLEVBQUFoUixFQUFBM1gsR0FBQTZKLEdBQWtDLE9BQUE3SixFQUVsQyxTQU1BLFNBQUFxcEIsRUFBQTFnQixHQUNBLElBQUEyZ0IsR0FBQSxFQUNBLGtCQUNBQSxJQUNBQSxHQUFBLEVBQ0EzZ0IsRUFBQWxHLE1BQUF6RCxLQUFBNkIsYUFLQSxJQUFBMG9CLEVBQUEsdUJBRUFDLEVBQUEsQ0FDQSxZQUNBLFlBQ0EsVUFHQUMsRUFBQSxDQUNBLGVBQ0EsVUFDQSxjQUNBLFVBQ0EsZUFDQSxVQUNBLGdCQUNBLFlBQ0EsWUFDQSxjQUNBLGdCQUNBLGtCQU9BQyxFQUFBLENBS0FDLHNCQUFBL3VCLE9BQUFvSCxPQUFBLE1BS0E0bkIsUUFBQSxFQUtBQyxlQUFpQixFQUtqQkMsVUFBWSxFQUtaQyxhQUFBLEVBS0FDLGFBQUEsS0FLQUMsWUFBQSxLQUtBQyxnQkFBQSxHQU1BQyxTQUFBdnZCLE9BQUFvSCxPQUFBLE1BTUFvb0IsY0FBQTlCLEVBTUErQixlQUFBL0IsRUFNQWdDLGlCQUFBaEMsRUFLQWlDLGdCQUFBbEMsRUFLQW1DLHFCQUFBakMsRUFNQWtDLFlBQUFuQyxFQU1Bb0MsT0FBQSxFQUtBQyxnQkFBQWxCLEdBVUFtQixFQUFBLDhKQUtBLFNBQUFDLEVBQUF4ZixHQUNBLElBQUE0TSxHQUFBNU0sRUFBQSxJQUFBakcsV0FBQSxHQUNBLFlBQUE2UyxHQUFBLEtBQUFBLEVBTUEsU0FBQXJJLEVBQUFzSixFQUFBL1osRUFBQTBLLEVBQUFqSyxHQUNBaEYsT0FBQXFILGVBQUFpWCxFQUFBL1osRUFBQSxDQUNBOUQsTUFBQXdPLEVBQ0FqSyxlQUNBbVEsVUFBQSxFQUNBaFAsY0FBQSxJQU9BLElBQUErcEIsRUFBQSxJQUFBcGYsT0FBQSxLQUFBa2YsRUFBQSxrQkFDQSxTQUFBRyxFQUFBQyxHQUNBLElBQUFGLEVBQUFwUixLQUFBc1IsR0FBQSxDQUdBLElBQUFDLEVBQUFELEVBQUExcEIsTUFBQSxLQUNBLGdCQUFBNFgsR0FDQSxRQUFBbFosRUFBQSxFQUFtQkEsRUFBQWlyQixFQUFBL3FCLE9BQXFCRixJQUFBLENBQ3hDLElBQUFrWixFQUFpQixPQUNqQkEsSUFBQStSLEVBQUFqckIsSUFFQSxPQUFBa1osSUFPQSxJQW1DQWdTLEVBbkNBQyxFQUFBLGdCQUdBQyxFQUFBLHFCQUFBemxCLE9BQ0EwbEIsRUFBQSxxQkFBQUMsK0JBQUFDLFNBQ0FDLEdBQUFILEdBQUFDLGNBQUFDLFNBQUE1UixjQUNBOFIsR0FBQUwsR0FBQXpsQixPQUFBNmMsVUFBQXBRLFVBQUF1SCxjQUNBK1IsR0FBQUQsSUFBQSxlQUFBL1IsS0FBQStSLElBQ0FFLEdBQUFGLE9BQUF6WSxRQUFBLGNBQ0E0WSxHQUFBSCxPQUFBelksUUFBQSxXQUVBNlksSUFEQUosT0FBQXpZLFFBQUEsV0FDQXlZLElBQUEsdUJBQUEvUixLQUFBK1IsS0FBQSxRQUFBRCxJQUdBTSxJQUZBTCxJQUFBLGNBQUEvUixLQUFBK1IsSUFDQUEsSUFBQSxZQUFBL1IsS0FBQStSLElBQ0FBLE9BQUFsYSxNQUFBLG1CQUdBd2EsR0FBQSxHQUFxQkMsTUFFckJDLElBQUEsRUFDQSxHQUFBYixFQUNBLElBQ0EsSUFBQWMsR0FBQSxHQUNBdHhCLE9BQUFxSCxlQUFBaXFCLEdBQUEsV0FDQW50QixJQUFBLFdBRUFrdEIsSUFBQSxLQUdBdG1CLE9BQUEyRCxpQkFBQSxvQkFBQTRpQixJQUNHLE1BQUF4d0IsS0FNSCxJQUFBeXdCLEdBQUEsV0FXQSxZQVZBaHhCLElBQUErdkIsSUFPQUEsR0FMQUUsSUFBQUMsR0FBQSxxQkFBQXZ2QixJQUdBQSxFQUFBLHVCQUFBQSxFQUFBLFdBQUFzd0IsSUFBQUMsVUFLQW5CLEdBSUFwQixHQUFBc0IsR0FBQXpsQixPQUFBMm1CLDZCQUdBLFNBQUFDLEdBQUFDLEdBQ0EsMEJBQUFBLEdBQUEsY0FBQTlTLEtBQUE4UyxFQUFBeHhCLFlBR0EsSUFJQXl4QixHQUpBQyxHQUNBLHFCQUFBanlCLFFBQUE4eEIsR0FBQTl4QixTQUNBLHFCQUFBa3lCLFNBQUFKLEdBQUFJLFFBQUFDLFNBTUFILEdBRkEscUJBQUFJLEtBQUFOLEdBQUFNLEtBRUFBLElBR0EsV0FDQSxTQUFBQSxJQUNBN3RCLEtBQUFnQyxJQUFBcEcsT0FBQW9ILE9BQUEsTUFZQSxPQVZBNnFCLEVBQUFoeUIsVUFBQWtCLElBQUEsU0FBQW9ELEdBQ0EsV0FBQUgsS0FBQWdDLElBQUE3QixJQUVBMHRCLEVBQUFoeUIsVUFBQWl5QixJQUFBLFNBQUEzdEIsR0FDQUgsS0FBQWdDLElBQUE3QixJQUFBLEdBRUEwdEIsRUFBQWh5QixVQUFBOE8sTUFBQSxXQUNBM0ssS0FBQWdDLElBQUFwRyxPQUFBb0gsT0FBQSxPQUdBNnFCLEVBZEEsR0FvQkEsSUFBQUUsR0FBQTFFLEVBOEZBN3JCLEdBQUEsRUFNQXd3QixHQUFBLFdBQ0FodUIsS0FBQTBKLEdBQUFsTSxLQUNBd0MsS0FBQWl1QixLQUFBLElBR0FELEdBQUFueUIsVUFBQXF5QixPQUFBLFNBQUFDLEdBQ0FudUIsS0FBQWl1QixLQUFBeHNCLEtBQUEwc0IsSUFHQUgsR0FBQW55QixVQUFBdXlCLFVBQUEsU0FBQUQsR0FDQXJHLEVBQUE5bkIsS0FBQWl1QixLQUFBRSxJQUdBSCxHQUFBbnlCLFVBQUF3eUIsT0FBQSxXQUNBTCxHQUFBNVYsUUFDQTRWLEdBQUE1VixPQUFBa1csT0FBQXR1QixPQUlBZ3VCLEdBQUFueUIsVUFBQXFZLE9BQUEsV0FFQSxJQUFBK1osRUFBQWp1QixLQUFBaXVCLEtBQUEzbkIsUUFPQSxRQUFBdEYsRUFBQSxFQUFBQyxFQUFBZ3RCLEVBQUEvc0IsT0FBa0NGLEVBQUFDLEVBQU9ELElBQ3pDaXRCLEVBQUFqdEIsR0FBQXV0QixVQU9BUCxHQUFBNVYsT0FBQSxLQUNBLElBQUFvVyxHQUFBLEdBRUEsU0FBQUMsR0FBQXJXLEdBQ0FvVyxHQUFBL3NCLEtBQUEyVyxHQUNBNFYsR0FBQTVWLFNBR0EsU0FBQXNXLEtBQ0FGLEdBQUF0SSxNQUNBOEgsR0FBQTVWLE9BQUFvVyxNQUFBdHRCLE9BQUEsR0FLQSxJQUFBeXRCLEdBQUEsU0FDQW55QixFQUNBc04sRUFDQThrQixFQUNBdFIsRUFDQXVSLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRUFodkIsS0FBQXhELE1BQ0F3RCxLQUFBOEosT0FDQTlKLEtBQUE0dUIsV0FDQTV1QixLQUFBc2QsT0FDQXRkLEtBQUE2dUIsTUFDQTd1QixLQUFBaXZCLFFBQUE5eUIsRUFDQTZELEtBQUE4dUIsVUFDQTl1QixLQUFBa3ZCLGVBQUEveUIsRUFDQTZELEtBQUFtdkIsZUFBQWh6QixFQUNBNkQsS0FBQW92QixlQUFBanpCLEVBQ0E2RCxLQUFBRyxJQUFBMkosS0FBQTNKLElBQ0FILEtBQUErdUIsbUJBQ0EvdUIsS0FBQXF2Qix1QkFBQWx6QixFQUNBNkQsS0FBQXVqQixZQUFBcG5CLEVBQ0E2RCxLQUFBc3ZCLEtBQUEsRUFDQXR2QixLQUFBdXZCLFVBQUEsRUFDQXZ2QixLQUFBd3ZCLGNBQUEsRUFDQXh2QixLQUFBeXZCLFdBQUEsRUFDQXp2QixLQUFBMHZCLFVBQUEsRUFDQTF2QixLQUFBMnZCLFFBQUEsRUFDQTN2QixLQUFBZ3ZCLGVBQ0FodkIsS0FBQTR2QixlQUFBenpCLEVBQ0E2RCxLQUFBNnZCLG9CQUFBLEdBR0FDLEdBQUEsQ0FBMEJDLE1BQUEsQ0FBU2h1QixjQUFBLElBSW5DK3RCLEdBQUFDLE1BQUFod0IsSUFBQSxXQUNBLE9BQUFDLEtBQUFxdkIsbUJBR0F6ekIsT0FBQXNILGlCQUFBeXJCLEdBQUE5eUIsVUFBQWkwQixJQUVBLElBQUFFLEdBQUEsU0FBQTFTLFFBQ0EsSUFBQUEsTUFBQSxJQUVBLElBQUFxRyxFQUFBLElBQUFnTCxHQUdBLE9BRkFoTCxFQUFBckcsT0FDQXFHLEVBQUE4TCxXQUFBLEVBQ0E5TCxHQUdBLFNBQUFzTSxHQUFBcGxCLEdBQ0EsV0FBQThqQixRQUFBeHlCLGdCQUFBZ0ssT0FBQTBFLElBT0EsU0FBQXFsQixHQUFBQyxHQUNBLElBQUFDLEVBQUEsSUFBQXpCLEdBQ0F3QixFQUFBM3pCLElBQ0EyekIsRUFBQXJtQixLQUlBcW1CLEVBQUF2QixVQUFBdUIsRUFBQXZCLFNBQUF0b0IsUUFDQTZwQixFQUFBN1MsS0FDQTZTLEVBQUF0QixJQUNBc0IsRUFBQXJCLFFBQ0FxQixFQUFBcEIsaUJBQ0FvQixFQUFBbkIsY0FXQSxPQVRBb0IsRUFBQW5CLEdBQUFrQixFQUFBbEIsR0FDQW1CLEVBQUFiLFNBQUFZLEVBQUFaLFNBQ0FhLEVBQUFqd0IsSUFBQWd3QixFQUFBaHdCLElBQ0Fpd0IsRUFBQVgsVUFBQVUsRUFBQVYsVUFDQVcsRUFBQWxCLFVBQUFpQixFQUFBakIsVUFDQWtCLEVBQUFqQixVQUFBZ0IsRUFBQWhCLFVBQ0FpQixFQUFBaEIsVUFBQWUsRUFBQWYsVUFDQWdCLEVBQUFSLFVBQUFPLEVBQUFQLFVBQ0FRLEVBQUFWLFVBQUEsRUFDQVUsRUFRQSxJQUFBQyxHQUFBL2dCLE1BQUF6VCxVQUNBeTBCLEdBQUExMEIsT0FBQW9ILE9BQUFxdEIsSUFFQUUsR0FBQSxDQUNBLE9BQ0EsTUFDQSxRQUNBLFVBQ0EsU0FDQSxPQUNBLFdBTUFBLEdBQUFwVixRQUFBLFNBQUEyQyxHQUVBLElBQUEwUyxFQUFBSCxHQUFBdlMsR0FDQWxOLEVBQUEwZixHQUFBeFMsRUFBQSxXQUNBLElBQUF0YSxFQUFBLEdBQUFpdEIsRUFBQTV1QixVQUFBWCxPQUNBLE1BQUF1dkIsSUFBQWp0QixFQUFBaXRCLEdBQUE1dUIsVUFBQTR1QixHQUVBLElBRUFDLEVBRkEvekIsRUFBQTZ6QixFQUFBL3NCLE1BQUF6RCxLQUFBd0QsR0FDQW10QixFQUFBM3dCLEtBQUE0d0IsT0FFQSxPQUFBOVMsR0FDQSxXQUNBLGNBQ0E0UyxFQUFBbHRCLEVBQ0EsTUFDQSxhQUNBa3RCLEVBQUFsdEIsRUFBQThDLE1BQUEsR0FDQSxNQUtBLE9BSEFvcUIsR0FBbUJDLEVBQUFFLGFBQUFILEdBRW5CQyxFQUFBRyxJQUFBNWMsU0FDQXZYLE1BTUEsSUFBQW8wQixHQUFBbjFCLE9BQUF3SCxvQkFBQWt0QixJQU1BVSxJQUFBLEVBRUEsU0FBQUMsR0FBQTUwQixHQUNBMjBCLEdBQUEzMEIsRUFTQSxJQUFBNG1CLEdBQUEsU0FBQTVtQixHQUNBMkQsS0FBQTNELFFBQ0EyRCxLQUFBOHdCLElBQUEsSUFBQTlDLEdBQ0FodUIsS0FBQWt4QixRQUFBLEVBQ0F0Z0IsRUFBQXZVLEVBQUEsU0FBQTJELE1BQ0FzUCxNQUFBelIsUUFBQXhCLElBQ0E4dkIsRUFDQWdGLEdBQUE5MEIsRUFBQWkwQixJQUVBYyxHQUFBLzBCLEVBQUFpMEIsR0FBQVMsSUFFQS93QixLQUFBNndCLGFBQUF4MEIsSUFFQTJELEtBQUFxeEIsS0FBQWgxQixJQStCQSxTQUFBODBCLEdBQUEvWSxFQUFBOUosR0FFQThKLEVBQUFrTSxVQUFBaFcsRUFTQSxTQUFBOGlCLEdBQUFoWixFQUFBOUosRUFBQXZOLEdBQ0EsUUFBQUMsRUFBQSxFQUFBQyxFQUFBRixFQUFBRyxPQUFrQ0YsRUFBQUMsRUFBT0QsSUFBQSxDQUN6QyxJQUFBYixFQUFBWSxFQUFBQyxHQUNBNFAsRUFBQXdILEVBQUFqWSxFQUFBbU8sRUFBQW5PLEtBU0EsU0FBQTBqQixHQUFBeG5CLEVBQUFpMUIsR0FJQSxJQUFBWCxFQUhBLEdBQUE1eUIsRUFBQTFCLG1CQUFBc3lCLElBa0JBLE9BZEExRyxFQUFBNXJCLEVBQUEsV0FBQUEsRUFBQXUwQixrQkFBQTNOLEdBQ0EwTixFQUFBdDBCLEVBQUF1MEIsT0FFQUksS0FDQTdELE9BQ0E3ZCxNQUFBelIsUUFBQXhCLElBQUE2cUIsRUFBQTdxQixLQUNBVCxPQUFBMjFCLGFBQUFsMUIsS0FDQUEsRUFBQW0xQixTQUVBYixFQUFBLElBQUExTixHQUFBNW1CLElBRUFpMUIsR0FBQVgsR0FDQUEsRUFBQU8sVUFFQVAsRUFNQSxTQUFBYyxHQUNBdlgsRUFDQS9aLEVBQ0EwSyxFQUNBNm1CLEVBQ0FDLEdBRUEsSUFBQWIsRUFBQSxJQUFBOUMsR0FFQTRELEVBQUFoMkIsT0FBQXVILHlCQUFBK1csRUFBQS9aLEdBQ0EsSUFBQXl4QixJQUFBLElBQUFBLEVBQUE3dkIsYUFBQSxDQUtBLElBQUE4dkIsRUFBQUQsS0FBQTd4QixJQUNBSCxFQUFBZ3lCLEtBQUE1dkIsSUFDQTZ2QixJQUFBanlCLEdBQUEsSUFBQWlDLFVBQUFYLFNBQ0EySixFQUFBcVAsRUFBQS9aLElBR0EsSUFBQTJ4QixHQUFBSCxHQUFBOU4sR0FBQWhaLEdBQ0FqUCxPQUFBcUgsZUFBQWlYLEVBQUEvWixFQUFBLENBQ0FTLFlBQUEsRUFDQW1CLGNBQUEsRUFDQWhDLElBQUEsV0FDQSxJQUFBMUQsRUFBQXcxQixJQUFBdDFCLEtBQUEyZCxHQUFBclAsRUFVQSxPQVRBbWpCLEdBQUE1VixTQUNBMFksRUFBQXpDLFNBQ0F5RCxJQUNBQSxFQUFBaEIsSUFBQXpDLFNBQ0EvZSxNQUFBelIsUUFBQXhCLElBQ0EwMUIsR0FBQTExQixLQUlBQSxHQUVBMkYsSUFBQSxTQUFBZ3dCLEdBQ0EsSUFBQTMxQixFQUFBdzFCLElBQUF0MUIsS0FBQTJkLEdBQUFyUCxFQUVBbW5CLElBQUEzMUIsR0FBQTIxQixPQUFBMzFCLE9BUUF3MUIsSUFBQWp5QixJQUNBQSxFQUNBQSxFQUFBckQsS0FBQTJkLEVBQUE4WCxHQUVBbm5CLEVBQUFtbkIsRUFFQUYsR0FBQUgsR0FBQTlOLEdBQUFtTyxHQUNBbEIsRUFBQTVjLGNBVUEsU0FBQWxTLEdBQUFvVyxFQUFBalksRUFBQTBLLEdBTUEsR0FBQXlFLE1BQUF6UixRQUFBdWEsSUFBQWdQLEVBQUFqbkIsR0FHQSxPQUZBaVksRUFBQWxYLE9BQUF5QyxLQUFBa0UsSUFBQXVRLEVBQUFsWCxPQUFBZixHQUNBaVksRUFBQTRQLE9BQUE3bkIsRUFBQSxFQUFBMEssR0FDQUEsRUFFQSxHQUFBMUssS0FBQWlZLEtBQUFqWSxLQUFBdkUsT0FBQUMsV0FFQSxPQURBdWMsRUFBQWpZLEdBQUEwSyxFQUNBQSxFQUVBLElBQUE4bEIsRUFBQSxFQUFBQyxPQUNBLE9BQUF4WSxFQUFBb1osUUFBQWIsS0FBQU8sUUFLQXJtQixFQUVBOGxCLEdBSUFjLEdBQUFkLEVBQUF0MEIsTUFBQThELEVBQUEwSyxHQUNBOGxCLEVBQUFHLElBQUE1YyxTQUNBckosSUFMQXVOLEVBQUFqWSxHQUFBMEssRUFDQUEsR0FVQSxTQUFBb25CLEdBQUE3WixFQUFBalksR0FNQSxHQUFBbVAsTUFBQXpSLFFBQUF1YSxJQUFBZ1AsRUFBQWpuQixHQUNBaVksRUFBQTRQLE9BQUE3bkIsRUFBQSxPQURBLENBSUEsSUFBQXd3QixFQUFBLEVBQUFDLE9BQ0F4WSxFQUFBb1osUUFBQWIsS0FBQU8sU0FPQWpKLEVBQUE3UCxFQUFBalksWUFHQWlZLEVBQUFqWSxHQUNBd3dCLEdBR0FBLEVBQUFHLElBQUE1YyxXQU9BLFNBQUE2ZCxHQUFBMTFCLEdBQ0EsUUFBQUssT0FBQSxFQUFBc0UsRUFBQSxFQUFBQyxFQUFBNUUsRUFBQTZFLE9BQWlERixFQUFBQyxFQUFPRCxJQUN4RHRFLEVBQUFMLEVBQUEyRSxHQUNBdEUsS0FBQWswQixRQUFBbDBCLEVBQUFrMEIsT0FBQUUsSUFBQXpDLFNBQ0EvZSxNQUFBelIsUUFBQW5CLElBQ0FxMUIsR0FBQXIxQixHQWhOQXVtQixHQUFBcG5CLFVBQUF3MUIsS0FBQSxTQUFBblgsR0FFQSxJQURBLElBQUFuWixFQUFBbkYsT0FBQW1GLEtBQUFtWixHQUNBbFosRUFBQSxFQUFpQkEsRUFBQUQsRUFBQUcsT0FBaUJGLElBQ2xDeXdCLEdBQUF2WCxFQUFBblosRUFBQUMsS0FPQWlpQixHQUFBcG5CLFVBQUFnMUIsYUFBQSxTQUFBL1YsR0FDQSxRQUFBOVosRUFBQSxFQUFBQyxFQUFBNlosRUFBQTVaLE9BQW1DRixFQUFBQyxFQUFPRCxJQUMxQzZpQixHQUFBL0ksRUFBQTlaLEtBZ05BLElBQUFreEIsR0FBQXhILEVBQUFDLHNCQW9CQSxTQUFBd0gsR0FBQWhKLEVBQUExUSxHQUNBLElBQUFBLEVBQWMsT0FBQTBRLEVBT2QsSUFOQSxJQUFBaHBCLEVBQUFpeUIsRUFBQUMsRUFFQXR4QixFQUFBMnNCLEdBQ0FDLFFBQUFDLFFBQUFuVixHQUNBN2MsT0FBQW1GLEtBQUEwWCxHQUVBelgsRUFBQSxFQUFpQkEsRUFBQUQsRUFBQUcsT0FBaUJGLElBQ2xDYixFQUFBWSxFQUFBQyxHQUVBLFdBQUFiLElBQ0FpeUIsRUFBQWpKLEVBQUFocEIsR0FDQWt5QixFQUFBNVosRUFBQXRZLEdBQ0E4bkIsRUFBQWtCLEVBQUFocEIsR0FHQWl5QixJQUFBQyxHQUNBbkwsRUFBQWtMLElBQ0FsTCxFQUFBbUwsSUFFQUYsR0FBQUMsRUFBQUMsR0FOQXJ3QixHQUFBbW5CLEVBQUFocEIsRUFBQWt5QixJQVNBLE9BQUFsSixFQU1BLFNBQUFtSixHQUNBQyxFQUNBQyxFQUNBQyxHQUVBLE9BQUFBLEVBb0JBLFdBRUEsSUFBQUMsRUFBQSxvQkFBQUYsRUFDQUEsRUFBQWoyQixLQUFBazJCLEtBQ0FELEVBQ0FHLEVBQUEsb0JBQUFKLEVBQ0FBLEVBQUFoMkIsS0FBQWsyQixLQUNBRixFQUNBLE9BQUFHLEVBQ0FQLEdBQUFPLEVBQUFDLEdBRUFBLEdBN0JBSCxFQUdBRCxFQVFBLFdBQ0EsT0FBQUosR0FDQSxvQkFBQUssSUFBQWoyQixLQUFBeUQsV0FBQXd5QixFQUNBLG9CQUFBRCxJQUFBaDJCLEtBQUF5RCxXQUFBdXlCLElBVkFDLEVBSEFELEVBMkRBLFNBQUFLLEdBQ0FMLEVBQ0FDLEdBRUEsSUFBQXZpQixFQUFBdWlCLEVBQ0FELEVBQ0FBLEVBQUF4WixPQUFBeVosR0FDQWxqQixNQUFBelIsUUFBQTIwQixHQUNBQSxFQUNBLENBQUFBLEdBQ0FELEVBQ0EsT0FBQXRpQixFQUNBNGlCLEdBQUE1aUIsR0FDQUEsRUFHQSxTQUFBNGlCLEdBQUFDLEdBRUEsSUFEQSxJQUFBN2lCLEVBQUEsR0FDQWpQLEVBQUEsRUFBaUJBLEVBQUE4eEIsRUFBQTV4QixPQUFrQkYsS0FDbkMsSUFBQWlQLEVBQUErRCxRQUFBOGUsRUFBQTl4QixLQUNBaVAsRUFBQXhPLEtBQUFxeEIsRUFBQTl4QixJQUdBLE9BQUFpUCxFQWNBLFNBQUE4aUIsR0FDQVIsRUFDQUMsRUFDQUMsRUFDQXR5QixHQUVBLElBQUE4UCxFQUFBclUsT0FBQW9ILE9BQUF1dkIsR0FBQSxNQUNBLE9BQUFDLEVBRUF0SixFQUFBalosRUFBQXVpQixHQUVBdmlCLEVBekVBaWlCLEdBQUFwb0IsS0FBQSxTQUNBeW9CLEVBQ0FDLEVBQ0FDLEdBRUEsT0FBQUEsRUFjQUgsR0FBQUMsRUFBQUMsRUFBQUMsR0FiQUQsR0FBQSxvQkFBQUEsRUFRQUQsRUFFQUQsR0FBQUMsRUFBQUMsSUFtQ0EvSCxFQUFBdFAsUUFBQSxTQUFBNlgsR0FDQWQsR0FBQWMsR0FBQUosS0F5QkFwSSxFQUFBclAsUUFBQSxTQUFBdlEsR0FDQXNuQixHQUFBdG5CLEVBQUEsS0FBQW1vQixLQVNBYixHQUFBbEYsTUFBQSxTQUNBdUYsRUFDQUMsRUFDQUMsRUFDQXR5QixHQU1BLEdBSEFveUIsSUFBQXhGLEtBQWtDd0YsT0FBQXAyQixHQUNsQ3EyQixJQUFBekYsS0FBaUN5RixPQUFBcjJCLElBRWpDcTJCLEVBQWtCLE9BQUE1MkIsT0FBQW9ILE9BQUF1dkIsR0FBQSxNQUlsQixJQUFBQSxFQUFtQixPQUFBQyxFQUNuQixJQUFBdm5CLEVBQUEsR0FFQSxRQUFBZ29CLEtBREEvSixFQUFBamUsRUFBQXNuQixHQUNBQyxFQUFBLENBQ0EsSUFBQWpQLEVBQUF0WSxFQUFBZ29CLEdBQ0FsRCxFQUFBeUMsRUFBQVMsR0FDQTFQLElBQUFqVSxNQUFBelIsUUFBQTBsQixLQUNBQSxFQUFBLENBQUFBLElBRUF0WSxFQUFBZ29CLEdBQUExUCxFQUNBQSxFQUFBeEssT0FBQWdYLEdBQ0F6Z0IsTUFBQXpSLFFBQUFreUIsS0FBQSxDQUFBQSxHQUVBLE9BQUE5a0IsR0FNQWluQixHQUFBZ0IsTUFDQWhCLEdBQUFwdEIsUUFDQW90QixHQUFBaUIsT0FDQWpCLEdBQUFrQixTQUFBLFNBQ0FiLEVBQ0FDLEVBQ0FDLEVBQ0F0eUIsR0FLQSxJQUFBb3lCLEVBQW1CLE9BQUFDLEVBQ25CLElBQUF2bkIsRUFBQXJQLE9BQUFvSCxPQUFBLE1BR0EsT0FGQWttQixFQUFBamUsRUFBQXNuQixHQUNBQyxHQUFpQnRKLEVBQUFqZSxFQUFBdW5CLEdBQ2pCdm5CLEdBRUFpbkIsR0FBQW1CLFFBQUFmLEdBS0EsSUFBQWdCLEdBQUEsU0FBQWYsRUFBQUMsR0FDQSxZQUFBcjJCLElBQUFxMkIsRUFDQUQsRUFDQUMsR0ErQkEsU0FBQWUsR0FBQXJWLEVBQUF1VSxHQUNBLElBQUFTLEVBQUFoVixFQUFBZ1YsTUFDQSxHQUFBQSxFQUFBLENBQ0EsSUFDQWx5QixFQUFBNkosRUFBQTVJLEVBREFnTyxFQUFBLEdBRUEsR0FBQVgsTUFBQXpSLFFBQUFxMUIsR0FBQSxDQUNBbHlCLEVBQUFreUIsRUFBQWh5QixPQUNBLE1BQUFGLElBQ0E2SixFQUFBcW9CLEVBQUFseUIsR0FDQSxrQkFBQTZKLElBQ0E1SSxFQUFBcW1CLEVBQUF6ZCxHQUNBb0YsRUFBQWhPLEdBQUEsQ0FBcUIySSxLQUFBLFlBS2xCLEdBQUFzYyxFQUFBZ00sR0FDSCxRQUFBL3lCLEtBQUEreUIsRUFDQXJvQixFQUFBcW9CLEVBQUEveUIsR0FDQThCLEVBQUFxbUIsRUFBQW5vQixHQUNBOFAsRUFBQWhPLEdBQUFpbEIsRUFBQXJjLEdBQ0FBLEVBQ0EsQ0FBV0QsS0FBQUMsUUFFRSxFQU9icVQsRUFBQWdWLE1BQUFqakIsR0FNQSxTQUFBdWpCLEdBQUF0VixFQUFBdVUsR0FDQSxJQUFBVSxFQUFBalYsRUFBQWlWLE9BQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUFNLEVBQUF2VixFQUFBaVYsT0FBQSxHQUNBLEdBQUE3akIsTUFBQXpSLFFBQUFzMUIsR0FDQSxRQUFBbnlCLEVBQUEsRUFBbUJBLEVBQUFteUIsRUFBQWp5QixPQUFtQkYsSUFDdEN5eUIsRUFBQU4sRUFBQW55QixJQUFBLENBQStCeVgsS0FBQTBhLEVBQUFueUIsU0FFNUIsR0FBQWttQixFQUFBaU0sR0FDSCxRQUFBaHpCLEtBQUFnekIsRUFBQSxDQUNBLElBQUF0b0IsRUFBQXNvQixFQUFBaHpCLEdBQ0FzekIsRUFBQXR6QixHQUFBK21CLEVBQUFyYyxHQUNBcWUsRUFBQSxDQUFrQnpRLEtBQUF0WSxHQUFZMEssR0FDOUIsQ0FBVzROLEtBQUE1TixRQUVFLEdBWWIsU0FBQTZvQixHQUFBeFYsR0FDQSxJQUFBeVYsRUFBQXpWLEVBQUEwVixXQUNBLEdBQUFELEVBQ0EsUUFBQXh6QixLQUFBd3pCLEVBQUEsQ0FDQSxJQUFBRSxFQUFBRixFQUFBeHpCLEdBQ0Esb0JBQUEwekIsSUFDQUYsRUFBQXh6QixHQUFBLENBQXFCNG9CLEtBQUE4SyxFQUFBdEYsT0FBQXNGLEtBb0JyQixTQUFBQyxHQUNBdlEsRUFDQXdNLEVBQ0EwQyxHQWtCQSxHQVpBLG9CQUFBMUMsSUFDQUEsSUFBQTdSLFNBR0FxVixHQUFBeEQsRUFBQTBDLEdBQ0FlLEdBQUF6RCxFQUFBMEMsR0FDQWlCLEdBQUEzRCxJQU1BQSxFQUFBZ0UsUUFDQWhFLEVBQUFpRSxVQUNBelEsRUFBQXVRLEdBQUF2USxFQUFBd00sRUFBQWlFLFFBQUF2QixJQUVBMUMsRUFBQWtFLFFBQ0EsUUFBQWp6QixFQUFBLEVBQUFDLEVBQUE4dUIsRUFBQWtFLE9BQUEveUIsT0FBOENGLEVBQUFDLEVBQU9ELElBQ3JEdWlCLEVBQUF1USxHQUFBdlEsRUFBQXdNLEVBQUFrRSxPQUFBanpCLEdBQUF5eEIsR0FLQSxJQUNBdHlCLEVBREErZCxFQUFBLEdBRUEsSUFBQS9kLEtBQUFvakIsRUFDQTJRLEVBQUEvekIsR0FFQSxJQUFBQSxLQUFBNHZCLEVBQ0E5SCxFQUFBMUUsRUFBQXBqQixJQUNBK3pCLEVBQUEvekIsR0FHQSxTQUFBK3pCLEVBQUEvekIsR0FDQSxJQUFBZzBCLEVBQUFqQyxHQUFBL3hCLElBQUFtekIsR0FDQXBWLEVBQUEvZCxHQUFBZzBCLEVBQUE1USxFQUFBcGpCLEdBQUE0dkIsRUFBQTV2QixHQUFBc3lCLEVBQUF0eUIsR0FFQSxPQUFBK2QsRUFRQSxTQUFBa1csR0FDQWxXLEVBQ0F0VCxFQUNBbEIsRUFDQTJxQixHQUdBLHFCQUFBM3FCLEVBQUEsQ0FHQSxJQUFBNHFCLEVBQUFwVyxFQUFBdFQsR0FFQSxHQUFBcWQsRUFBQXFNLEVBQUE1cUIsR0FBMkIsT0FBQTRxQixFQUFBNXFCLEdBQzNCLElBQUE2cUIsRUFBQWpNLEVBQUE1ZSxHQUNBLEdBQUF1ZSxFQUFBcU0sRUFBQUMsR0FBb0MsT0FBQUQsRUFBQUMsR0FDcEMsSUFBQUMsRUFBQWhNLEVBQUErTCxHQUNBLEdBQUF0TSxFQUFBcU0sRUFBQUUsR0FBcUMsT0FBQUYsRUFBQUUsR0FFckMsSUFBQXZrQixFQUFBcWtCLEVBQUE1cUIsSUFBQTRxQixFQUFBQyxJQUFBRCxFQUFBRSxHQU9BLE9BQUF2a0IsR0FPQSxTQUFBd2tCLEdBQ0F0MEIsRUFDQXUwQixFQUNBQyxFQUNBbEMsR0FFQSxJQUFBbUMsRUFBQUYsRUFBQXYwQixHQUNBMDBCLEdBQUE1TSxFQUFBME0sRUFBQXgwQixHQUNBOUQsRUFBQXM0QixFQUFBeDBCLEdBRUEyMEIsRUFBQUMsR0FBQTFTLFFBQUF1UyxFQUFBaHFCLE1BQ0EsR0FBQWtxQixHQUFBLEVBQ0EsR0FBQUQsSUFBQTVNLEVBQUEyTSxFQUFBLFdBQ0F2NEIsR0FBQSxPQUNLLFFBQUFBLE9BQUFxc0IsRUFBQXZvQixHQUFBLENBR0wsSUFBQTYwQixFQUFBRCxHQUFBNXVCLE9BQUF5dUIsRUFBQWhxQixPQUNBb3FCLEVBQUEsR0FBQUYsRUFBQUUsS0FDQTM0QixHQUFBLEdBS0EsUUFBQUYsSUFBQUUsRUFBQSxDQUNBQSxFQUFBNDRCLEdBQUF4QyxFQUFBbUMsRUFBQXowQixHQUdBLElBQUErMEIsRUFBQWxFLEdBQ0FDLElBQUEsR0FDQXBOLEdBQUF4bkIsR0FDQTQwQixHQUFBaUUsR0FTQSxPQUFBNzRCLEVBTUEsU0FBQTQ0QixHQUFBeEMsRUFBQW1DLEVBQUF6MEIsR0FFQSxHQUFBOG5CLEVBQUEyTSxFQUFBLFlBR0EsSUFBQWhrQixFQUFBZ2tCLEVBQUFPLFFBWUEsT0FBQTFDLEtBQUEyQyxTQUFBVCxnQkFDQXg0QixJQUFBczJCLEVBQUEyQyxTQUFBVCxVQUFBeDBCLFNBQ0FoRSxJQUFBczJCLEVBQUE0QyxPQUFBbDFCLEdBRUFzeUIsRUFBQTRDLE9BQUFsMUIsR0FJQSxvQkFBQXlRLEdBQUEsYUFBQTBrQixHQUFBVixFQUFBaHFCLE1BQ0FnRyxFQUFBclUsS0FBQWsyQixHQUNBN2hCLEdBcUZBLFNBQUEwa0IsR0FBQTNyQixHQUNBLElBQUE0SSxFQUFBNUksS0FBQTNOLFdBQUF1VyxNQUFBLHNCQUNBLE9BQUFBLElBQUEsTUFHQSxTQUFBZ2pCLEdBQUF0MUIsRUFBQWdHLEdBQ0EsT0FBQXF2QixHQUFBcjFCLEtBQUFxMUIsR0FBQXJ2QixHQUdBLFNBQUE4dUIsR0FBQW5xQixFQUFBNHFCLEdBQ0EsSUFBQWxtQixNQUFBelIsUUFBQTIzQixHQUNBLE9BQUFELEdBQUFDLEVBQUE1cUIsR0FBQSxLQUVBLFFBQUE1SixFQUFBLEVBQUF5dkIsRUFBQStFLEVBQUF0MEIsT0FBNkNGLEVBQUF5dkIsRUFBU3p2QixJQUN0RCxHQUFBdTBCLEdBQUFDLEVBQUF4MEIsR0FBQTRKLEdBQ0EsT0FBQTVKLEVBR0EsU0FnREEsU0FBQXkwQixHQUFBcGYsRUFBQW9jLEVBQUFpRCxHQUdBakgsS0FDQSxJQUNBLEdBQUFnRSxFQUFBLENBQ0EsSUFBQWtELEVBQUFsRCxFQUNBLE1BQUFrRCxJQUFBQyxRQUFBLENBQ0EsSUFBQTlDLEVBQUE2QyxFQUFBUCxTQUFBUyxjQUNBLEdBQUEvQyxFQUNBLFFBQUE5eEIsRUFBQSxFQUF5QkEsRUFBQTh4QixFQUFBNXhCLE9BQWtCRixJQUMzQyxJQUNBLElBQUE4MEIsR0FBQSxJQUFBaEQsRUFBQTl4QixHQUFBekUsS0FBQW81QixFQUFBdGYsRUFBQW9jLEVBQUFpRCxHQUNBLEdBQUFJLEVBQTRCLE9BQ2YsTUFBQXA1QixJQUNicTVCLEdBQUFyNUIsR0FBQWk1QixFQUFBLHdCQU1BSSxHQUFBMWYsRUFBQW9jLEVBQUFpRCxHQUNHLFFBQ0hoSCxNQUlBLFNBQUFzSCxHQUNBcGhCLEVBQ0FrYSxFQUNBdHJCLEVBQ0FpdkIsRUFDQWlELEdBRUEsSUFBQXpsQixFQUNBLElBQ0FBLEVBQUF6TSxFQUFBb1IsRUFBQW5SLE1BQUFxckIsRUFBQXRyQixHQUFBb1IsRUFBQXJZLEtBQUF1eUIsR0FDQTdlLE1BQUF1aEIsUUFBQWpLLEVBQUF0WCxPQUFBZ21CLFdBQ0FobUIsRUFBQXVHLE1BQUEsU0FBQTlaLEdBQThCLE9BQUErNEIsR0FBQS80QixFQUFBKzFCLEVBQUFpRCxFQUFBLHNCQUc5QnpsQixFQUFBZ21CLFVBQUEsR0FFRyxNQUFBdjVCLElBQ0grNEIsR0FBQS80QixHQUFBKzFCLEVBQUFpRCxHQUVBLE9BQUF6bEIsRUFHQSxTQUFBOGxCLEdBQUExZixFQUFBb2MsRUFBQWlELEdBQ0EsR0FBQWhMLEVBQUFNLGFBQ0EsSUFDQSxPQUFBTixFQUFBTSxhQUFBenVCLEtBQUEsS0FBQThaLEVBQUFvYyxFQUFBaUQsR0FDSyxNQUFBaDVCLElBR0xBLEtBQUEyWixHQUNBNmYsR0FBQXg1QixHQUFBLDRCQUlBdzVCLEdBQUE3ZixFQUFBb2MsRUFBQWlELEdBR0EsU0FBQVEsR0FBQTdmLEVBQUFvYyxFQUFBaUQsR0FLQSxJQUFBdEosSUFBQUMsR0FBQSxxQkFBQWhYLFFBR0EsTUFBQWdCLEVBRkFoQixRQUFBTSxNQUFBVSxHQVFBLElBeUJBOGYsR0F6QkFDLElBQUEsRUFFQUMsR0FBQSxHQUNBQyxJQUFBLEVBRUEsU0FBQUMsS0FDQUQsSUFBQSxFQUNBLElBQUFFLEVBQUFILEdBQUEvdkIsTUFBQSxHQUNBK3ZCLEdBQUFuMUIsT0FBQSxFQUNBLFFBQUFGLEVBQUEsRUFBaUJBLEVBQUF3MUIsRUFBQXQxQixPQUFtQkYsSUFDcEN3MUIsRUFBQXgxQixLQXdCQSx3QkFBQW9HLFNBQUFtbUIsR0FBQW5tQixTQUFBLENBQ0EsSUFBQThjLEdBQUE5YyxRQUFBeU0sVUFDQXNpQixHQUFBLFdBQ0FqUyxHQUFBNWMsS0FBQWl2QixJQU1BMUosSUFBZ0JuaUIsV0FBQTJlLElBRWhCK00sSUFBQSxPQUNDLEdBQUExSixJQUFBLHFCQUFBeEosbUJBQ0RxSyxHQUFBckssbUJBRUEseUNBQUFBLGlCQUFBbG5CLFdBb0JBbTZCLEdBSkMscUJBQUFsdEIsY0FBQXNrQixHQUFBdGtCLGNBSUQsV0FDQUEsYUFBQXN0QixLQUlBLFdBQ0E3ckIsV0FBQTZyQixHQUFBLFFBekJBLENBSUEsSUFBQWp0QixHQUFBLEVBQ0FtdEIsR0FBQSxJQUFBdlQsaUJBQUFxVCxJQUNBRyxHQUFBNXJCLFNBQUE4WSxlQUFBemQsT0FBQW1ELEtBQ0FtdEIsR0FBQTVTLFFBQUE2UyxHQUFBLENBQ0E1UyxlQUFBLElBRUFxUyxHQUFBLFdBQ0E3c0IsT0FBQSxLQUNBb3RCLEdBQUE1c0IsS0FBQTNELE9BQUFtRCxLQUVBOHNCLElBQUEsRUFlQSxTQUFBcHNCLEdBQUEyc0IsRUFBQWh1QixHQUNBLElBQUFpdUIsRUFpQkEsR0FoQkFQLEdBQUE1MEIsS0FBQSxXQUNBLEdBQUFrMUIsRUFDQSxJQUNBQSxFQUFBcDZCLEtBQUFvTSxHQUNPLE1BQUFqTSxJQUNQKzRCLEdBQUEvNEIsR0FBQWlNLEVBQUEsaUJBRUtpdUIsR0FDTEEsRUFBQWp1QixLQUdBMnRCLEtBQ0FBLElBQUEsRUFDQUgsT0FHQVEsR0FBQSxxQkFBQXZ2QixRQUNBLFdBQUFBLFFBQUEsU0FBQXlNLEdBQ0EraUIsRUFBQS9pQixJQXdIQSxJQUFBZ2pCLEdBQUEsSUFBQXBKLEdBT0EsU0FBQXFKLEdBQUFqc0IsR0FDQWtzQixHQUFBbHNCLEVBQUFnc0IsSUFDQUEsR0FBQWxzQixRQUdBLFNBQUFvc0IsR0FBQWxzQixFQUFBbXNCLEdBQ0EsSUFBQWgyQixFQUFBRCxFQUNBazJCLEVBQUEzbkIsTUFBQXpSLFFBQUFnTixHQUNBLE1BQUFvc0IsSUFBQWw1QixFQUFBOE0sSUFBQWpQLE9BQUFzN0IsU0FBQXJzQixpQkFBQThqQixJQUFBLENBR0EsR0FBQTlqQixFQUFBK2xCLE9BQUEsQ0FDQSxJQUFBdUcsRUFBQXRzQixFQUFBK2xCLE9BQUFFLElBQUFwbkIsR0FDQSxHQUFBc3RCLEVBQUFqNkIsSUFBQW82QixHQUNBLE9BRUFILEVBQUFsSixJQUFBcUosR0FFQSxHQUFBRixFQUFBLENBQ0FqMkIsRUFBQTZKLEVBQUEzSixPQUNBLE1BQUFGLElBQWlCKzFCLEdBQUFsc0IsRUFBQTdKLEdBQUFnMkIsT0FDZCxDQUNIajJCLEVBQUFuRixPQUFBbUYsS0FBQThKLEdBQ0E3SixFQUFBRCxFQUFBRyxPQUNBLE1BQUFGLElBQWlCKzFCLEdBQUFsc0IsRUFBQTlKLEVBQUFDLElBQUFnMkIsS0FNakIsSUFBQUksR0FBQWxQLEVBQUEsU0FBQWptQixHQUNBLElBQUFvMUIsRUFBQSxNQUFBcDFCLEVBQUFvRSxPQUFBLEdBQ0FwRSxFQUFBbzFCLEVBQUFwMUIsRUFBQXFFLE1BQUEsR0FBQXJFLEVBQ0EsSUFBQXExQixFQUFBLE1BQUFyMUIsRUFBQW9FLE9BQUEsR0FDQXBFLEVBQUFxMUIsRUFBQXIxQixFQUFBcUUsTUFBQSxHQUFBckUsRUFDQSxJQUFBNnpCLEVBQUEsTUFBQTd6QixFQUFBb0UsT0FBQSxHQUVBLE9BREFwRSxFQUFBNnpCLEVBQUE3ekIsRUFBQXFFLE1BQUEsR0FBQXJFLEVBQ0EsQ0FDQUEsT0FDQW9vQixLQUFBaU4sRUFDQXhCLFVBQ0F1QixhQUlBLFNBQUFFLEdBQUFyckIsRUFBQXVtQixHQUNBLFNBQUErRSxJQUNBLElBQUFDLEVBQUE1MUIsVUFFQXFLLEVBQUFzckIsRUFBQXRyQixJQUNBLElBQUFvRCxNQUFBelIsUUFBQXFPLEdBT0EsT0FBQThwQixHQUFBOXBCLEVBQUEsS0FBQXJLLFVBQUE0d0IsRUFBQSxnQkFMQSxJQURBLElBQUFyQyxFQUFBbGtCLEVBQUE1RixRQUNBdEYsRUFBQSxFQUFxQkEsRUFBQW92QixFQUFBbHZCLE9BQW1CRixJQUN4Q2cxQixHQUFBNUYsRUFBQXB2QixHQUFBLEtBQUF5MkIsRUFBQWhGLEVBQUEsZ0JBUUEsT0FEQStFLEVBQUF0ckIsTUFDQXNyQixFQUdBLFNBQUFFLEdBQ0FDLEVBQ0FDLEVBQ0E5SixFQUNBK0osRUFDQUMsRUFDQXJGLEdBRUEsSUFBQXh3QixFQUFBMHpCLEVBQUFvQyxFQUFBbHVCLEVBQ0EsSUFBQTVILEtBQUEwMUIsRUFDQWhDLEVBQUFnQyxFQUFBMTFCLEdBQ0E4MUIsRUFBQUgsRUFBQTMxQixHQUNBNEgsRUFBQXV0QixHQUFBbjFCLEdBQ0Eya0IsRUFBQStPLEtBS0svTyxFQUFBbVIsSUFDTG5SLEVBQUErTyxFQUFBenBCLE9BQ0F5cEIsRUFBQWdDLEVBQUExMUIsR0FBQXMxQixHQUFBNUIsRUFBQWxELElBRUEzTCxFQUFBamQsRUFBQXdnQixRQUNBc0wsRUFBQWdDLEVBQUExMUIsR0FBQTYxQixFQUFBanVCLEVBQUE1SCxLQUFBMHpCLEVBQUE5ckIsRUFBQWlzQixVQUVBaEksRUFBQWprQixFQUFBNUgsS0FBQTB6QixFQUFBOXJCLEVBQUFpc0IsUUFBQWpzQixFQUFBd3RCLFFBQUF4dEIsRUFBQW11QixTQUNLckMsSUFBQW9DLElBQ0xBLEVBQUE3ckIsSUFBQXlwQixFQUNBZ0MsRUFBQTExQixHQUFBODFCLElBR0EsSUFBQTkxQixLQUFBMjFCLEVBQ0FoUixFQUFBK1EsRUFBQTExQixNQUNBNEgsRUFBQXV0QixHQUFBbjFCLEdBQ0E0MUIsRUFBQWh1QixFQUFBNUgsS0FBQTIxQixFQUFBMzFCLEdBQUE0SCxFQUFBaXNCLFVBT0EsU0FBQW1DLEdBQUFybkIsRUFBQXNuQixFQUFBbEYsR0FJQSxJQUFBd0UsRUFIQTVtQixhQUFBK2QsS0FDQS9kLElBQUE5RyxLQUFBa3BCLE9BQUFwaUIsRUFBQTlHLEtBQUFrcEIsS0FBQSxLQUdBLElBQUFtRixFQUFBdm5CLEVBQUFzbkIsR0FFQSxTQUFBRSxJQUNBcEYsRUFBQXZ2QixNQUFBekQsS0FBQTZCLFdBR0FpbUIsRUFBQTBQLEVBQUF0ckIsSUFBQWtzQixHQUdBeFIsRUFBQXVSLEdBRUFYLEVBQUFELEdBQUEsQ0FBQWEsSUFHQXZSLEVBQUFzUixFQUFBanNCLE1BQUE0YSxFQUFBcVIsRUFBQUUsU0FFQWIsRUFBQVcsRUFDQVgsRUFBQXRyQixJQUFBekssS0FBQTIyQixJQUdBWixFQUFBRCxHQUFBLENBQUFZLEVBQUFDLElBSUFaLEVBQUFhLFFBQUEsRUFDQXpuQixFQUFBc25CLEdBQUFWLEVBS0EsU0FBQWMsR0FDQXh1QixFQUNBMGpCLEVBQ0FoeEIsR0FLQSxJQUFBazRCLEVBQUFsSCxFQUFBdFAsUUFBQWdWLE1BQ0EsSUFBQXRNLEVBQUE4TixHQUFBLENBR0EsSUFBQXprQixFQUFBLEdBQ0Fzb0IsRUFBQXp1QixFQUFBeXVCLE1BQ0FyRixFQUFBcHBCLEVBQUFvcEIsTUFDQSxHQUFBck0sRUFBQTBSLElBQUExUixFQUFBcU0sR0FDQSxRQUFBL3lCLEtBQUF1MEIsRUFBQSxDQUNBLElBQUE4RCxFQUFBOVAsRUFBQXZvQixHQWlCQXM0QixHQUFBeG9CLEVBQUFpakIsRUFBQS95QixFQUFBcTRCLEdBQUEsSUFDQUMsR0FBQXhvQixFQUFBc29CLEVBQUFwNEIsRUFBQXE0QixHQUFBLEdBR0EsT0FBQXZvQixHQUdBLFNBQUF3b0IsR0FDQXhvQixFQUNBeW9CLEVBQ0F2NEIsRUFDQXE0QixFQUNBRyxHQUVBLEdBQUE5UixFQUFBNlIsR0FBQSxDQUNBLEdBQUF6USxFQUFBeVEsRUFBQXY0QixHQUtBLE9BSkE4UCxFQUFBOVAsR0FBQXU0QixFQUFBdjRCLEdBQ0F3NEIsVUFDQUQsRUFBQXY0QixJQUVBLEVBQ0ssR0FBQThuQixFQUFBeVEsRUFBQUYsR0FLTCxPQUpBdm9CLEVBQUE5UCxHQUFBdTRCLEVBQUFGLEdBQ0FHLFVBQ0FELEVBQUFGLElBRUEsRUFHQSxTQWlCQSxTQUFBSSxHQUFBaEssR0FDQSxRQUFBNXRCLEVBQUEsRUFBaUJBLEVBQUE0dEIsRUFBQTF0QixPQUFxQkYsSUFDdEMsR0FBQXNPLE1BQUF6UixRQUFBK3dCLEVBQUE1dEIsSUFDQSxPQUFBc08sTUFBQXpULFVBQUFrZCxPQUFBdFYsTUFBQSxHQUFBbXJCLEdBR0EsT0FBQUEsRUFPQSxTQUFBaUssR0FBQWpLLEdBQ0EsT0FBQTVILEVBQUE0SCxHQUNBLENBQUFxQixHQUFBckIsSUFDQXRmLE1BQUF6UixRQUFBK3dCLEdBQ0FrSyxHQUFBbEssUUFDQXp5QixFQUdBLFNBQUE0OEIsR0FBQXBWLEdBQ0EsT0FBQWtELEVBQUFsRCxJQUFBa0QsRUFBQWxELEVBQUFyRyxPQUFBeUosRUFBQXBELEVBQUE4TCxXQUdBLFNBQUFxSixHQUFBbEssRUFBQW9LLEdBQ0EsSUFDQWg0QixFQUFBaVksRUFBQTdJLEVBQUFpVCxFQURBcFQsRUFBQSxHQUVBLElBQUFqUCxFQUFBLEVBQWFBLEVBQUE0dEIsRUFBQTF0QixPQUFxQkYsSUFDbENpWSxFQUFBMlYsRUFBQTV0QixHQUNBNGxCLEVBQUEzTixJQUFBLG1CQUFBQSxJQUNBN0ksRUFBQUgsRUFBQS9PLE9BQUEsRUFDQW1pQixFQUFBcFQsRUFBQUcsR0FFQWQsTUFBQXpSLFFBQUFvYixHQUNBQSxFQUFBL1gsT0FBQSxJQUNBK1gsRUFBQTZmLEdBQUE3ZixHQUFBK2YsR0FBQSxRQUFBaDRCLEdBRUErM0IsR0FBQTlmLEVBQUEsS0FBQThmLEdBQUExVixLQUNBcFQsRUFBQUcsR0FBQTZmLEdBQUE1TSxFQUFBL0YsS0FBQXJFLEVBQUEsR0FBQXFFLE1BQ0FyRSxFQUFBOEIsU0FFQTlLLEVBQUF4TyxLQUFBZ0MsTUFBQXdNLEVBQUFnSixJQUVLK04sRUFBQS9OLEdBQ0w4ZixHQUFBMVYsR0FJQXBULEVBQUFHLEdBQUE2ZixHQUFBNU0sRUFBQS9GLEtBQUFyRSxHQUNPLEtBQUFBLEdBRVBoSixFQUFBeE8sS0FBQXd1QixHQUFBaFgsSUFHQThmLEdBQUE5ZixJQUFBOGYsR0FBQTFWLEdBRUFwVCxFQUFBRyxHQUFBNmYsR0FBQTVNLEVBQUEvRixLQUFBckUsRUFBQXFFLE9BR0F3SixFQUFBOEgsRUFBQXFLLFdBQ0FwUyxFQUFBNU4sRUFBQXpjLE1BQ0FvcUIsRUFBQTNOLEVBQUE5WSxNQUNBMG1CLEVBQUFtUyxLQUNBL2YsRUFBQTlZLElBQUEsVUFBQTY0QixFQUFBLElBQUFoNEIsRUFBQSxNQUVBaVAsRUFBQXhPLEtBQUF3WCxLQUlBLE9BQUFoSixFQUtBLFNBQUFpcEIsR0FBQXpHLEdBQ0EsSUFBQVksRUFBQVosRUFBQTJDLFNBQUEvQixRQUNBQSxJQUNBWixFQUFBMEcsVUFBQSxvQkFBQTlGLEVBQ0FBLEVBQUE5MkIsS0FBQWsyQixHQUNBWSxHQUlBLFNBQUErRixHQUFBM0csR0FDQSxJQUFBOTFCLEVBQUEwOEIsR0FBQTVHLEVBQUEyQyxTQUFBakMsT0FBQVYsR0FDQTkxQixJQUNBczBCLElBQUEsR0FDQXIxQixPQUFBbUYsS0FBQXBFLEdBQUF3ZSxRQUFBLFNBQUFoYixHQVlBc3hCLEdBQUFnQixFQUFBdHlCLEVBQUF4RCxFQUFBd0QsTUFHQTh3QixJQUFBLElBSUEsU0FBQW9JLEdBQUFsRyxFQUFBVixHQUNBLEdBQUFVLEVBQUEsQ0FPQSxJQUxBLElBQUF4MkIsRUFBQWYsT0FBQW9ILE9BQUEsTUFDQWpDLEVBQUEyc0IsR0FDQUMsUUFBQUMsUUFBQXVGLEdBQ0F2M0IsT0FBQW1GLEtBQUFveUIsR0FFQW55QixFQUFBLEVBQW1CQSxFQUFBRCxFQUFBRyxPQUFpQkYsSUFBQSxDQUNwQyxJQUFBYixFQUFBWSxFQUFBQyxHQUVBLGNBQUFiLEVBQUEsQ0FDQSxJQUFBbTVCLEVBQUFuRyxFQUFBaHpCLEdBQUFzWSxLQUNBakcsRUFBQWlnQixFQUNBLE1BQUFqZ0IsRUFBQSxDQUNBLEdBQUFBLEVBQUEybUIsV0FBQWxSLEVBQUF6VixFQUFBMm1CLFVBQUFHLEdBQUEsQ0FDQTM4QixFQUFBd0QsR0FBQXFTLEVBQUEybUIsVUFBQUcsR0FDQSxNQUVBOW1CLElBQUFvakIsUUFFQSxJQUFBcGpCLEVBQ0EsZUFBQTJnQixFQUFBaHpCLEdBQUEsQ0FDQSxJQUFBbzVCLEVBQUFwRyxFQUFBaHpCLEdBQUFnMUIsUUFDQXg0QixFQUFBd0QsR0FBQSxvQkFBQW81QixFQUNBQSxFQUFBaDlCLEtBQUFrMkIsR0FDQThHLE9BQ21CLEdBS25CLE9BQUE1OEIsR0FXQSxTQUFBNjhCLEdBQ0E1SyxFQUNBRSxHQUVBLElBQUFGLE1BQUExdEIsT0FDQSxTQUdBLElBREEsSUFBQXU0QixFQUFBLEdBQ0F6NEIsRUFBQSxFQUFBQyxFQUFBMnRCLEVBQUExdEIsT0FBc0NGLEVBQUFDLEVBQU9ELElBQUEsQ0FDN0MsSUFBQSt1QixFQUFBbkIsRUFBQTV0QixHQUNBOEksRUFBQWltQixFQUFBam1CLEtBT0EsR0FMQUEsS0FBQXl1QixPQUFBenVCLEVBQUF5dUIsTUFBQW1CLGFBQ0E1dkIsRUFBQXl1QixNQUFBbUIsS0FJQTNKLEVBQUFqQixhQUFBaUIsRUFBQWIsWUFBQUosSUFDQWhsQixHQUFBLE1BQUFBLEVBQUE0dkIsTUFVQUQsRUFBQXRFLFVBQUFzRSxFQUFBdEUsUUFBQSxLQUFBMXpCLEtBQUFzdUIsT0FUQSxDQUNBLElBQUE5dEIsRUFBQTZILEVBQUE0dkIsS0FDQUEsRUFBQUQsRUFBQXgzQixLQUFBdzNCLEVBQUF4M0IsR0FBQSxJQUNBLGFBQUE4dEIsRUFBQXZ6QixJQUNBazlCLEVBQUFqNEIsS0FBQWdDLE1BQUFpMkIsRUFBQTNKLEVBQUFuQixVQUFBLElBRUE4SyxFQUFBajRCLEtBQUFzdUIsSUFPQSxRQUFBNEosS0FBQUYsRUFDQUEsRUFBQUUsR0FBQTNQLE1BQUE0UCxZQUNBSCxFQUFBRSxHQUdBLE9BQUFGLEVBR0EsU0FBQUcsR0FBQWpXLEdBQ0EsT0FBQUEsRUFBQThMLFlBQUE5TCxFQUFBcUwsY0FBQSxNQUFBckwsRUFBQXJHLEtBS0EsU0FBQXVjLEdBQ0FKLEVBQ0FLLEVBQ0FDLEdBRUEsSUFBQTlwQixFQUNBK3BCLEVBQUFwK0IsT0FBQW1GLEtBQUErNEIsR0FBQTU0QixPQUFBLEVBQ0ErNEIsRUFBQVIsTUFBQVMsU0FBQUYsRUFDQTc1QixFQUFBczVCLEtBQUFVLEtBQ0EsR0FBQVYsRUFFRyxJQUFBQSxFQUFBVyxZQUVILE9BQUFYLEVBQUFXLFlBQ0csR0FDSEgsR0FDQUYsR0FDQUEsSUFBQXJULEdBQ0F2bUIsSUFBQTQ1QixFQUFBSSxPQUNBSCxJQUNBRCxFQUFBTSxXQUlBLE9BQUFOLEVBR0EsUUFBQTlHLEtBREFoakIsRUFBQSxHQUNBd3BCLEVBQ0FBLEVBQUF4RyxJQUFBLE1BQUFBLEVBQUEsS0FDQWhqQixFQUFBZ2pCLEdBQUFxSCxHQUFBUixFQUFBN0csRUFBQXdHLEVBQUF4RyxVQW5CQWhqQixFQUFBLEdBd0JBLFFBQUFzcUIsS0FBQVQsRUFDQVMsS0FBQXRxQixJQUNBQSxFQUFBc3FCLEdBQUFDLEdBQUFWLEVBQUFTLElBV0EsT0FOQWQsR0FBQTc5QixPQUFBMjFCLGFBQUFrSSxLQUNBLEVBQUFXLFlBQUFucUIsR0FFQVcsRUFBQVgsRUFBQSxVQUFBZ3FCLEdBQ0FycEIsRUFBQVgsRUFBQSxPQUFBOVAsR0FDQXlRLEVBQUFYLEVBQUEsYUFBQStwQixHQUNBL3BCLEVBR0EsU0FBQXFxQixHQUFBUixFQUFBMzVCLEVBQUF3SixHQUNBLElBQUE4cEIsRUFBQSxXQUNBLElBQUF4akIsRUFBQXBPLFVBQUFYLE9BQUF5SSxFQUFBbEcsTUFBQSxLQUFBNUIsV0FBQThILEVBQUEsSUFJQSxPQUhBc0csS0FBQSxrQkFBQUEsSUFBQVgsTUFBQXpSLFFBQUFvUyxHQUNBLENBQUFBLEdBQ0E0b0IsR0FBQTVvQixHQUNBQSxJQUNBLElBQUFBLEVBQUEvTyxRQUNBLElBQUErTyxFQUFBL08sUUFBQStPLEVBQUEsR0FBQXdmLGdCQUNBdHpCLEVBQ0E4VCxHQVlBLE9BUEF0RyxFQUFBOHdCLE9BQ0E3K0IsT0FBQXFILGVBQUE2MkIsRUFBQTM1QixFQUFBLENBQ0FKLElBQUEwekIsRUFDQTd5QixZQUFBLEVBQ0FtQixjQUFBLElBR0EweEIsRUFHQSxTQUFBK0csR0FBQWYsRUFBQXQ1QixHQUNBLGtCQUFzQixPQUFBczVCLEVBQUF0NUIsSUFRdEIsU0FBQXU2QixHQUNBN3ZCLEVBQ0E4dkIsR0FFQSxJQUFBMXZCLEVBQUFqSyxFQUFBQyxFQUFBRixFQUFBWixFQUNBLEdBQUFtUCxNQUFBelIsUUFBQWdOLElBQUEsa0JBQUFBLEVBRUEsSUFEQUksRUFBQSxJQUFBcUUsTUFBQXpFLEVBQUEzSixRQUNBRixFQUFBLEVBQUFDLEVBQUE0SixFQUFBM0osT0FBK0JGLEVBQUFDLEVBQU9ELElBQ3RDaUssRUFBQWpLLEdBQUEyNUIsRUFBQTl2QixFQUFBN0osV0FFRyxxQkFBQTZKLEVBRUgsSUFEQUksRUFBQSxJQUFBcUUsTUFBQXpFLEdBQ0E3SixFQUFBLEVBQWVBLEVBQUE2SixFQUFTN0osSUFDeEJpSyxFQUFBakssR0FBQTI1QixFQUFBMzVCLEVBQUEsRUFBQUEsUUFFRyxHQUFBakQsRUFBQThNLEdBQ0gsR0FBQTZpQixJQUFBN2lCLEVBQUFwUCxPQUFBaUYsVUFBQSxDQUNBdUssRUFBQSxHQUNBLElBQUF2SyxFQUFBbUssRUFBQXBQLE9BQUFpRixZQUNBL0QsRUFBQStELEVBQUFnRSxPQUNBLE9BQUEvSCxFQUFBNEwsS0FDQTBDLEVBQUF4SixLQUFBazVCLEVBQUFoK0IsRUFBQU4sTUFBQTRPLEVBQUEvSixTQUNBdkUsRUFBQStELEVBQUFnRSxZQUtBLElBRkEzRCxFQUFBbkYsT0FBQW1GLEtBQUE4SixHQUNBSSxFQUFBLElBQUFxRSxNQUFBdk8sRUFBQUcsUUFDQUYsRUFBQSxFQUFBQyxFQUFBRixFQUFBRyxPQUFrQ0YsRUFBQUMsRUFBT0QsSUFDekNiLEVBQUFZLEVBQUFDLEdBQ0FpSyxFQUFBakssR0FBQTI1QixFQUFBOXZCLEVBQUExSyxLQUFBYSxHQVFBLE9BSkE2bEIsRUFBQTViLEtBQ0FBLEVBQUEsSUFFQSxFQUFBZ3VCLFVBQUEsRUFDQWh1QixFQVFBLFNBQUEydkIsR0FDQTM0QixFQUNBNDRCLEVBQ0EzSCxFQUNBNEgsR0FFQSxJQUNBQyxFQURBQyxFQUFBaDdCLEtBQUFpN0IsYUFBQWg1QixHQUVBKzRCLEdBQ0E5SCxLQUFBLEdBQ0E0SCxJQU9BNUgsRUFBQWhLLElBQUEsR0FBOEI0UixHQUFBNUgsSUFFOUI2SCxFQUFBQyxFQUFBOUgsSUFBQTJILEdBRUFFLEVBQUEvNkIsS0FBQWs3QixPQUFBajVCLElBQUE0NEIsRUFHQSxJQUFBemlCLEVBQUE4YSxLQUFBd0csS0FDQSxPQUFBdGhCLEVBQ0FwWSxLQUFBbTdCLGVBQUEsWUFBNEN6QixLQUFBdGhCLEdBQWUyaUIsR0FFM0RBLEVBU0EsU0FBQUssR0FBQTF4QixHQUNBLE9BQUEwcUIsR0FBQXAwQixLQUFBbzFCLFNBQUEsVUFBQTFyQixHQUFBLElBQUE2ZixFQUtBLFNBQUE4UixHQUFBQyxFQUFBQyxHQUNBLE9BQUFqc0IsTUFBQXpSLFFBQUF5OUIsSUFDQSxJQUFBQSxFQUFBdG5CLFFBQUF1bkIsR0FFQUQsSUFBQUMsRUFTQSxTQUFBQyxHQUNBQyxFQUNBdDdCLEVBQ0F1N0IsRUFDQUMsRUFDQUMsR0FFQSxJQUFBQyxFQUFBblIsRUFBQVMsU0FBQWhyQixJQUFBdTdCLEVBQ0EsT0FBQUUsR0FBQUQsSUFBQWpSLEVBQUFTLFNBQUFockIsR0FDQWs3QixHQUFBTyxFQUFBRCxHQUNHRSxFQUNIUixHQUFBUSxFQUFBSixHQUNHRSxFQUNIalQsRUFBQWlULEtBQUF4N0IsT0FERyxFQVVILFNBQUEyN0IsR0FDQWh5QixFQUNBdE4sRUFDQUgsRUFDQTAvQixFQUNBQyxHQUVBLEdBQUEzL0IsRUFDQSxHQUFBMEIsRUFBQTFCLEdBS0ssQ0FJTCxJQUFBcThCLEVBSEFwcEIsTUFBQXpSLFFBQUF4QixLQUNBQSxFQUFBNlMsRUFBQTdTLElBR0EsSUFBQTQvQixFQUFBLFNBQUE5N0IsR0FDQSxHQUNBLFVBQUFBLEdBQ0EsVUFBQUEsR0FDQTBuQixFQUFBMW5CLEdBRUF1NEIsRUFBQTV1QixNQUNTLENBQ1QsSUFBQWMsRUFBQWQsRUFBQXl1QixPQUFBenVCLEVBQUF5dUIsTUFBQTN0QixLQUNBOHRCLEVBQUFxRCxHQUFBclIsRUFBQWUsWUFBQWp2QixFQUFBb08sRUFBQXpLLEdBQ0EySixFQUFBb3lCLFdBQUFweUIsRUFBQW95QixTQUFBLElBQ0FweUIsRUFBQXl1QixRQUFBenVCLEVBQUF5dUIsTUFBQSxJQUVBLElBQUE0RCxFQUFBN1QsRUFBQW5vQixHQUNBaThCLEVBQUExVCxFQUFBdm9CLEdBQ0EsS0FBQWc4QixLQUFBekQsTUFBQTBELEtBQUExRCxLQUNBQSxFQUFBdjRCLEdBQUE5RCxFQUFBOEQsR0FFQTY3QixHQUFBLENBQ0EsSUFBQXJFLEVBQUE3dEIsRUFBQTZ0QixLQUFBN3RCLEVBQUE2dEIsR0FBQSxJQUNBQSxFQUFBLFVBQUF4M0IsR0FBQSxTQUFBazhCLEdBQ0FoZ0MsRUFBQThELEdBQUFrOEIsS0FNQSxRQUFBbDhCLEtBQUE5RCxFQUFBNC9CLEVBQUE5N0IsUUFHQSxPQUFBMkosRUFRQSxTQUFBd3lCLEdBQ0E5MUIsRUFDQSsxQixHQUVBLElBQUFyVSxFQUFBbG9CLEtBQUF3OEIsZUFBQXg4QixLQUFBdzhCLGFBQUEsSUFDQUMsRUFBQXZVLEVBQUExaEIsR0FHQSxPQUFBaTJCLElBQUFGLEVBQ0FFLEdBR0FBLEVBQUF2VSxFQUFBMWhCLEdBQUF4RyxLQUFBbzFCLFNBQUFzSCxnQkFBQWwyQixHQUFBakssS0FDQXlELEtBQUEyOEIsYUFDQSxLQUNBMzhCLE1BRUE0OEIsR0FBQUgsRUFBQSxhQUFBajJCLEdBQUEsR0FDQWkyQixHQU9BLFNBQUFJLEdBQ0FKLEVBQ0FqMkIsRUFDQXJHLEdBR0EsT0FEQXk4QixHQUFBSCxFQUFBLFdBQUFqMkIsR0FBQXJHLEVBQUEsSUFBQUEsRUFBQSxRQUNBczhCLEVBR0EsU0FBQUcsR0FDQUgsRUFDQXQ4QixFQUNBd3ZCLEdBRUEsR0FBQXJnQixNQUFBelIsUUFBQTQrQixHQUNBLFFBQUF6N0IsRUFBQSxFQUFtQkEsRUFBQXk3QixFQUFBdjdCLE9BQWlCRixJQUNwQ3k3QixFQUFBejdCLElBQUEsa0JBQUF5N0IsRUFBQXo3QixJQUNBODdCLEdBQUFMLEVBQUF6N0IsR0FBQWIsRUFBQSxJQUFBYSxFQUFBMnVCLFFBSUFtTixHQUFBTCxFQUFBdDhCLEVBQUF3dkIsR0FJQSxTQUFBbU4sR0FBQW5aLEVBQUF4akIsRUFBQXd2QixHQUNBaE0sRUFBQTRMLFVBQUEsRUFDQTVMLEVBQUF4akIsTUFDQXdqQixFQUFBZ00sU0FLQSxTQUFBb04sR0FBQWp6QixFQUFBek4sR0FDQSxHQUFBQSxFQUNBLEdBQUE2cUIsRUFBQTdxQixHQUtLLENBQ0wsSUFBQXM3QixFQUFBN3RCLEVBQUE2dEIsR0FBQTd0QixFQUFBNnRCLEdBQUF6TyxFQUFBLEdBQTRDcGYsRUFBQTZ0QixJQUFBLEdBQzVDLFFBQUF4M0IsS0FBQTlELEVBQUEsQ0FDQSxJQUFBMmdDLEVBQUFyRixFQUFBeDNCLEdBQ0E4OEIsRUFBQTVnQyxFQUFBOEQsR0FDQXczQixFQUFBeDNCLEdBQUE2OEIsRUFBQSxHQUFBamtCLE9BQUFpa0IsRUFBQUMsV0FJQSxPQUFBbnpCLEVBS0EsU0FBQW96QixHQUNBaHhCLEVBQ0ErRCxFQUVBa3RCLEVBQ0FDLEdBRUFudEIsS0FBQSxDQUFnQmlxQixTQUFBaUQsR0FDaEIsUUFBQW44QixFQUFBLEVBQWlCQSxFQUFBa0wsRUFBQWhMLE9BQWdCRixJQUFBLENBQ2pDLElBQUEwNEIsRUFBQXh0QixFQUFBbEwsR0FDQXNPLE1BQUF6UixRQUFBNjdCLEdBQ0F3RCxHQUFBeEQsRUFBQXpwQixFQUFBa3RCLEdBQ0t6RCxJQUVMQSxFQUFBZSxRQUNBZixFQUFBL3ZCLEdBQUE4d0IsT0FBQSxHQUVBeHFCLEVBQUF5cEIsRUFBQXY1QixLQUFBdTVCLEVBQUEvdkIsSUFNQSxPQUhBeXpCLElBQ0EsRUFBQWpELEtBQUFpRCxHQUVBbnRCLEVBS0EsU0FBQW90QixHQUFBQyxFQUFBMzNCLEdBQ0EsUUFBQTNFLEVBQUEsRUFBaUJBLEVBQUEyRSxFQUFBekUsT0FBbUJGLEdBQUEsR0FDcEMsSUFBQWIsRUFBQXdGLEVBQUEzRSxHQUNBLGtCQUFBYixPQUNBbTlCLEVBQUEzM0IsRUFBQTNFLElBQUEyRSxFQUFBM0UsRUFBQSxJQVNBLE9BQUFzOEIsRUFNQSxTQUFBQyxHQUFBbGhDLEVBQUFtaEMsR0FDQSx3QkFBQW5oQyxFQUFBbWhDLEVBQUFuaEMsSUFLQSxTQUFBb2hDLEdBQUFybEIsR0FDQUEsRUFBQXNsQixHQUFBYixHQUNBemtCLEVBQUFoRSxHQUFBb1QsRUFDQXBQLEVBQUEzRCxHQUFBelksRUFDQW9jLEVBQUF1bEIsR0FBQWpELEdBQ0F0aUIsRUFBQWhRLEdBQUF3eUIsR0FDQXhpQixFQUFBd2xCLEdBQUFqVSxFQUNBdlIsRUFBQS9QLEdBQUEraEIsRUFDQWhTLEVBQUF5bEIsR0FBQXZCLEdBQ0Fsa0IsRUFBQTBsQixHQUFBMUMsR0FDQWhqQixFQUFBNVgsR0FBQWc3QixHQUNBcGpCLEVBQUEybEIsR0FBQWpDLEdBQ0ExakIsRUFBQTdELEdBQUEwYixHQUNBN1gsRUFBQTRsQixHQUFBaE8sR0FDQTVYLEVBQUE2bEIsR0FBQWYsR0FDQTlrQixFQUFBOGxCLEdBQUFuQixHQUNBM2tCLEVBQUFwQyxHQUFBcW5CLEdBQ0FqbEIsRUFBQStsQixHQUFBWixHQUtBLFNBQUFhLEdBQ0F0MEIsRUFDQW9wQixFQUNBdEUsRUFDQXJMLEVBQ0FpSyxHQUVBLElBS0E2USxFQUxBQyxFQUFBdCtCLEtBRUFrZSxFQUFBc1AsRUFBQXRQLFFBSUErSixFQUFBMUUsRUFBQSxTQUNBOGEsRUFBQXppQyxPQUFBb0gsT0FBQXVnQixHQUVBOGEsRUFBQUUsVUFBQWhiLElBS0E4YSxFQUFBOWEsRUFFQUEsSUFBQWdiLFdBRUEsSUFBQUMsRUFBQTFYLEVBQUE1SSxFQUFBdWdCLFdBQ0FDLEdBQUFGLEVBRUF4K0IsS0FBQThKLE9BQ0E5SixLQUFBa3pCLFFBQ0FsekIsS0FBQTR1QixXQUNBNXVCLEtBQUF1akIsU0FDQXZqQixLQUFBMitCLFVBQUE3MEIsRUFBQTZ0QixJQUFBalIsRUFDQTFtQixLQUFBNCtCLFdBQUF2RixHQUFBbmIsRUFBQWlWLE9BQUE1UCxHQUNBdmpCLEtBQUF5NUIsTUFBQSxXQU9BLE9BTkE2RSxFQUFBcEQsUUFDQXJCLEdBQ0EvdkIsRUFBQSswQixZQUNBUCxFQUFBcEQsT0FBQTFCLEdBQUE1SyxFQUFBckwsSUFHQSthLEVBQUFwRCxRQUdBdC9CLE9BQUFxSCxlQUFBakQsS0FBQSxlQUNBWSxZQUFBLEVBQ0FiLElBQUEsV0FDQSxPQUFBODVCLEdBQUEvdkIsRUFBQSswQixZQUFBNytCLEtBQUF5NUIsWUFLQStFLElBRUF4K0IsS0FBQW8xQixTQUFBbFgsRUFFQWxlLEtBQUFrN0IsT0FBQWw3QixLQUFBeTVCLFFBQ0F6NUIsS0FBQWk3QixhQUFBcEIsR0FBQS92QixFQUFBKzBCLFlBQUE3K0IsS0FBQWs3QixTQUdBaGQsRUFBQTRnQixTQUNBOStCLEtBQUFzVSxHQUFBLFNBQUFyVSxFQUFBZ0csRUFBQWdULEVBQUE2TCxHQUNBLElBQUFxTCxFQUFBbmxCLEdBQUFxekIsRUFBQXArQixFQUFBZ0csRUFBQWdULEVBQUE2TCxFQUFBNFosR0FLQSxPQUpBdk8sSUFBQTdnQixNQUFBelIsUUFBQXN5QixLQUNBQSxFQUFBZixVQUFBbFIsRUFBQTRnQixTQUNBM08sRUFBQWpCLFVBQUEzTCxHQUVBNE0sR0FHQW53QixLQUFBc1UsR0FBQSxTQUFBclUsRUFBQWdHLEVBQUFnVCxFQUFBNkwsR0FBcUMsT0FBQTlaLEdBQUFxekIsRUFBQXArQixFQUFBZ0csRUFBQWdULEVBQUE2TCxFQUFBNFosSUFNckMsU0FBQUssR0FDQXZSLEVBQ0FtSCxFQUNBN3FCLEVBQ0F1MEIsRUFDQXpQLEdBRUEsSUFBQTFRLEVBQUFzUCxFQUFBdFAsUUFDQWdWLEVBQUEsR0FDQXdCLEVBQUF4VyxFQUFBZ1YsTUFDQSxHQUFBck0sRUFBQTZOLEdBQ0EsUUFBQXYwQixLQUFBdTBCLEVBQ0F4QixFQUFBL3lCLEdBQUFzMEIsR0FBQXQwQixFQUFBdTBCLEVBQUFDLEdBQUFqTyxRQUdBRyxFQUFBL2MsRUFBQXl1QixRQUE0QnlHLEdBQUE5TCxFQUFBcHBCLEVBQUF5dUIsT0FDNUIxUixFQUFBL2MsRUFBQW9wQixRQUE0QjhMLEdBQUE5TCxFQUFBcHBCLEVBQUFvcEIsT0FHNUIsSUFBQStMLEVBQUEsSUFBQWIsR0FDQXQwQixFQUNBb3BCLEVBQ0F0RSxFQUNBeVAsRUFDQTdRLEdBR0EyQyxFQUFBalMsRUFBQXljLE9BQUFwK0IsS0FBQSxLQUFBMGlDLEVBQUEzcUIsR0FBQTJxQixHQUVBLEdBQUE5TyxhQUFBeEIsR0FDQSxPQUFBdVEsR0FBQS9PLEVBQUFybUIsRUFBQW0xQixFQUFBMWIsT0FBQXJGLEVBQUErZ0IsR0FDRyxHQUFBM3ZCLE1BQUF6UixRQUFBc3lCLEdBQUEsQ0FHSCxJQUZBLElBQUFnUCxFQUFBdEcsR0FBQTFJLElBQUEsR0FDQWxnQixFQUFBLElBQUFYLE1BQUE2dkIsRUFBQWorQixRQUNBRixFQUFBLEVBQW1CQSxFQUFBbStCLEVBQUFqK0IsT0FBbUJGLElBQ3RDaVAsRUFBQWpQLEdBQUFrK0IsR0FBQUMsRUFBQW4rQixHQUFBOEksRUFBQW0xQixFQUFBMWIsT0FBQXJGLEVBQUErZ0IsR0FFQSxPQUFBaHZCLEdBSUEsU0FBQWl2QixHQUFBL08sRUFBQXJtQixFQUFBdTBCLEVBQUFuZ0IsRUFBQStnQixHQUlBLElBQUE3ZixFQUFBOFEsR0FBQUMsR0FTQSxPQVJBL1EsRUFBQThQLFVBQUFtUCxFQUNBamYsRUFBQStQLFVBQUFqUixFQUlBcFUsRUFBQTR2QixRQUNBdGEsRUFBQXRWLE9BQUFzVixFQUFBdFYsS0FBQSxLQUFtQzR2QixLQUFBNXZCLEVBQUE0dkIsTUFFbkN0YSxFQUdBLFNBQUE0ZixHQUFBN1YsRUFBQTFRLEdBQ0EsUUFBQXRZLEtBQUFzWSxFQUNBMFEsRUFBQWIsRUFBQW5vQixJQUFBc1ksRUFBQXRZLEdBN0RBczlCLEdBQUFXLEdBQUF2aUMsV0EwRUEsSUFBQXVqQyxHQUFBLENBQ0F0ZixLQUFBLFNBQUFxUSxFQUFBa1AsR0FDQSxHQUNBbFAsRUFBQWQsb0JBQ0FjLEVBQUFkLGtCQUFBaVEsY0FDQW5QLEVBQUFybUIsS0FBQXkxQixVQUNBLENBRUEsSUFBQUMsRUFBQXJQLEVBQ0FpUCxHQUFBSyxTQUFBRCxTQUNLLENBQ0wsSUFBQXpQLEVBQUFJLEVBQUFkLGtCQUFBcVEsR0FDQXZQLEVBQ0F3UCxJQUVBNVAsRUFBQTZQLE9BQUFQLEVBQUFsUCxFQUFBdEIsU0FBQTF5QixFQUFBa2pDLEtBSUFJLFNBQUEsU0FBQUksRUFBQTFQLEdBQ0EsSUFBQWpTLEVBQUFpUyxFQUFBcEIsaUJBQ0FnQixFQUFBSSxFQUFBZCxrQkFBQXdRLEVBQUF4USxrQkFDQXlRLEdBQ0EvUCxFQUNBN1IsRUFBQXlXLFVBQ0F6VyxFQUFBeWdCLFVBQ0F4TyxFQUNBalMsRUFBQTBRLFdBSUFtUixPQUFBLFNBQUE1UCxHQUNBLElBQUFyQixFQUFBcUIsRUFBQXJCLFFBQ0FPLEVBQUFjLEVBQUFkLGtCQUNBQSxFQUFBMlEsYUFDQTNRLEVBQUEyUSxZQUFBLEVBQ0FDLEdBQUE1USxFQUFBLFlBRUFjLEVBQUFybUIsS0FBQXkxQixZQUNBelEsRUFBQWtSLFdBTUFFLEdBQUE3USxHQUVBOFEsR0FBQTlRLEdBQUEsS0FLQStRLFFBQUEsU0FBQWpRLEdBQ0EsSUFBQWQsRUFBQWMsRUFBQWQsa0JBQ0FBLEVBQUFpUSxlQUNBblAsRUFBQXJtQixLQUFBeTFCLFVBR0FjLEdBQUFoUixHQUFBLEdBRkFBLEVBQUFpUixjQVFBQyxHQUFBM2tDLE9BQUFtRixLQUFBcStCLElBRUEsU0FBQW9CLEdBQ0FoVCxFQUNBMWpCLEVBQ0FnbEIsRUFDQUYsRUFDQXB5QixHQUVBLElBQUFvcUIsRUFBQTRHLEdBQUEsQ0FJQSxJQUFBaVQsRUFBQTNSLEVBQUFzRyxTQUFBckIsTUFTQSxHQU5BaDJCLEVBQUF5dkIsS0FDQUEsRUFBQWlULEVBQUF2WCxPQUFBc0UsSUFLQSxvQkFBQUEsRUFBQSxDQVFBLElBQUF3QixFQUNBLEdBQUFwSSxFQUFBNEcsRUFBQWtULE9BQ0ExUixFQUFBeEIsRUFDQUEsRUFBQW1ULEdBQUEzUixFQUFBeVIsUUFDQXRrQyxJQUFBcXhCLEdBSUEsT0FBQW9ULEdBQ0E1UixFQUNBbGxCLEVBQ0FnbEIsRUFDQUYsRUFDQXB5QixHQUtBc04sS0FBQSxHQUlBKzJCLEdBQUFyVCxHQUdBM0csRUFBQS9jLEVBQUFnM0IsUUFDQUMsR0FBQXZULEVBQUF0UCxRQUFBcFUsR0FJQSxJQUFBNnFCLEVBQUEyRCxHQUFBeHVCLEVBQUEwakIsRUFBQWh4QixHQUdBLEdBQUFzcUIsRUFBQTBHLEVBQUF0UCxRQUFBOGlCLFlBQ0EsT0FBQWpDLEdBQUF2UixFQUFBbUgsRUFBQTdxQixFQUFBZ2xCLEVBQUFGLEdBS0EsSUFBQStQLEVBQUE3MEIsRUFBQTZ0QixHQUtBLEdBRkE3dEIsRUFBQTZ0QixHQUFBN3RCLEVBQUFtM0IsU0FFQW5hLEVBQUEwRyxFQUFBdFAsUUFBQWdqQixVQUFBLENBS0EsSUFBQXhILEVBQUE1dkIsRUFBQTR2QixLQUNBNXZCLEVBQUEsR0FDQTR2QixJQUNBNXZCLEVBQUE0dkIsUUFLQXlILEdBQUFyM0IsR0FHQSxJQUFBN0gsRUFBQXVyQixFQUFBdFAsUUFBQWpjLE1BQUF6RixFQUNBMnpCLEVBQUEsSUFBQXhCLEdBQ0EsaUJBQUFuQixFQUFBLEtBQUF2ckIsRUFBQSxJQUFBQSxFQUFBLElBQ0E2SCxPQUFBM04sZ0JBQUEyeUIsRUFDQSxDQUFLdEIsT0FBQW1ILFlBQUFnSyxZQUFBbmlDLE1BQUFveUIsWUFDTEksR0FHQSxPQUFBbUIsSUFHQSxTQUFBdVAsR0FDQXZQLEVBQ0E1TSxHQUVBLElBQUFyRixFQUFBLENBQ0FrakIsY0FBQSxFQUNBQyxhQUFBbFIsRUFDQTVNLFVBR0ErZCxFQUFBblIsRUFBQXJtQixLQUFBdzNCLGVBS0EsT0FKQXphLEVBQUF5YSxLQUNBcGpCLEVBQUF5YyxPQUFBMkcsRUFBQTNHLE9BQ0F6YyxFQUFBd2UsZ0JBQUE0RSxFQUFBNUUsaUJBRUEsSUFBQXZNLEVBQUFwQixpQkFBQXZCLEtBQUF0UCxHQUdBLFNBQUFpakIsR0FBQXIzQixHQUVBLElBREEsSUFBQWdwQixFQUFBaHBCLEVBQUFrcEIsT0FBQWxwQixFQUFBa3BCLEtBQUEsSUFDQWh5QixFQUFBLEVBQWlCQSxFQUFBdS9CLEdBQUFyL0IsT0FBeUJGLElBQUEsQ0FDMUMsSUFBQWIsRUFBQW9nQyxHQUFBdi9CLEdBQ0FnOEIsRUFBQWxLLEVBQUEzeUIsR0FDQW9oQyxFQUFBbkMsR0FBQWovQixHQUNBNjhCLElBQUF1RSxHQUFBdkUsS0FBQXdFLFVBQ0ExTyxFQUFBM3lCLEdBQUE2OEIsRUFBQXlFLEdBQUFGLEVBQUF2RSxHQUFBdUUsSUFLQSxTQUFBRSxHQUFBQyxFQUFBQyxHQUNBLElBQUF0SixFQUFBLFNBQUFwNEIsRUFBQWdHLEdBRUF5N0IsRUFBQXpoQyxFQUFBZ0csR0FDQTA3QixFQUFBMWhDLEVBQUFnRyxJQUdBLE9BREFveUIsRUFBQW1KLFNBQUEsRUFDQW5KLEVBS0EsU0FBQTBJLEdBQUE3aUIsRUFBQXBVLEdBQ0EsSUFBQThxQixFQUFBMVcsRUFBQTRpQixPQUFBNWlCLEVBQUE0aUIsTUFBQWxNLE1BQUEsUUFDQS9xQixFQUFBcVUsRUFBQTRpQixPQUFBNWlCLEVBQUE0aUIsTUFBQWozQixPQUFBLFNBQ0dDLEVBQUF5dUIsUUFBQXp1QixFQUFBeXVCLE1BQUEsS0FBK0IzRCxHQUFBOXFCLEVBQUFnM0IsTUFBQXprQyxNQUNsQyxJQUFBczdCLEVBQUE3dEIsRUFBQTZ0QixLQUFBN3RCLEVBQUE2dEIsR0FBQSxJQUNBcUYsRUFBQXJGLEVBQUE5dEIsR0FDQThULEVBQUE3VCxFQUFBZzNCLE1BQUFuakIsU0FDQWtKLEVBQUFtVyxJQUVBMXRCLE1BQUF6UixRQUFBbS9CLElBQ0EsSUFBQUEsRUFBQWhwQixRQUFBMkosR0FDQXFmLElBQUFyZixLQUVBZ2EsRUFBQTl0QixHQUFBLENBQUE4VCxHQUFBNUUsT0FBQWlrQixJQUdBckYsRUFBQTl0QixHQUFBOFQsRUFNQSxJQUFBaWtCLEdBQUEsRUFDQUMsR0FBQSxFQUlBLFNBQUE3MkIsR0FDQThqQixFQUNBdHlCLEVBQ0FzTixFQUNBOGtCLEVBQ0FrVCxFQUNBQyxHQVVBLE9BUkF6eUIsTUFBQXpSLFFBQUFpTSxJQUFBa2QsRUFBQWxkLE1BQ0FnNEIsRUFBQWxULEVBQ0FBLEVBQUE5a0IsRUFDQUEsT0FBQTNOLEdBRUEycUIsRUFBQWliLEtBQ0FELEVBQUFELElBRUFHLEdBQUFsVCxFQUFBdHlCLEVBQUFzTixFQUFBOGtCLEVBQUFrVCxHQUdBLFNBQUFFLEdBQ0FsVCxFQUNBdHlCLEVBQ0FzTixFQUNBOGtCLEVBQ0FrVCxHQUVBLEdBQUFqYixFQUFBL2MsSUFBQStjLEVBQUEsRUFBQStKLFFBTUEsT0FBQVosS0FNQSxHQUhBbkosRUFBQS9jLElBQUErYyxFQUFBL2MsRUFBQWlCLE1BQ0F2TyxFQUFBc04sRUFBQWlCLEtBRUF2TyxFQUVBLE9BQUF3ekIsS0EyQkEsSUFBQUcsRUFBQWxCLEVBRUF6QixHQWRBbGUsTUFBQXpSLFFBQUErd0IsSUFDQSxvQkFBQUEsRUFBQSxLQUVBOWtCLEtBQUEsR0FDQUEsRUFBQSswQixZQUFBLENBQXdCMUosUUFBQXZHLEVBQUEsSUFDeEJBLEVBQUExdEIsT0FBQSxHQUVBNGdDLElBQUFELEdBQ0FqVCxFQUFBaUssR0FBQWpLLEdBQ0drVCxJQUFBRixLQUNIaFQsRUFBQWdLLEdBQUFoSyxJQUdBLGtCQUFBcHlCLElBRUF5eUIsRUFBQUgsRUFBQW1ULFFBQUFuVCxFQUFBbVQsT0FBQWhULElBQUF2RSxFQUFBYSxnQkFBQS91QixHQUdBMnpCLEVBRkF6RixFQUFBVSxjQUFBNXVCLEdBRUEsSUFBQW15QixHQUNBakUsRUFBQWMscUJBQUFodkIsR0FBQXNOLEVBQUE4a0IsT0FDQXp5QixTQUFBMnlCLEdBRUtobEIsS0FBQW80QixNQUFBcmIsRUFBQTJHLEVBQUE0RyxHQUFBdEYsRUFBQXNHLFNBQUEsYUFBQTU0QixJQU9MLElBQUFteUIsR0FDQW55QixFQUFBc04sRUFBQThrQixPQUNBenlCLFNBQUEyeUIsR0FQQTBSLEdBQUFoVCxFQUFBMWpCLEVBQUFnbEIsRUFBQUYsRUFBQXB5QixJQVlBMnpCLEVBQUFxUSxHQUFBaGtDLEVBQUFzTixFQUFBZ2xCLEVBQUFGLEdBRUEsT0FBQXRmLE1BQUF6UixRQUFBc3lCLEdBQ0FBLEVBQ0d0SixFQUFBc0osSUFDSHRKLEVBQUFvSSxJQUFvQmtULEdBQUFoUyxFQUFBbEIsR0FDcEJwSSxFQUFBL2MsSUFBc0JzNEIsR0FBQXQ0QixHQUN0QnFtQixHQUVBSCxLQUlBLFNBQUFtUyxHQUFBaFMsRUFBQWxCLEVBQUFvVCxHQU9BLEdBTkFsUyxFQUFBbEIsS0FDQSxrQkFBQWtCLEVBQUEzekIsTUFFQXl5QixPQUFBOXlCLEVBQ0FrbUMsR0FBQSxHQUVBeGIsRUFBQXNKLEVBQUF2QixVQUNBLFFBQUE1dEIsRUFBQSxFQUFBQyxFQUFBa3ZCLEVBQUF2QixTQUFBMXRCLE9BQThDRixFQUFBQyxFQUFPRCxJQUFBLENBQ3JELElBQUErdUIsRUFBQUksRUFBQXZCLFNBQUE1dEIsR0FDQTZsQixFQUFBa0osRUFBQXZ6QixPQUNBb3FCLEVBQUFtSixFQUFBZCxLQUFBbkksRUFBQXViLElBQUEsUUFBQXRTLEVBQUF2ekIsTUFDQTJsQyxHQUFBcFMsRUFBQWQsRUFBQW9ULElBU0EsU0FBQUQsR0FBQXQ0QixHQUNBL0wsRUFBQStMLEVBQUFzRSxRQUNBMG9CLEdBQUFodEIsRUFBQXNFLE9BRUFyUSxFQUFBK0wsRUFBQXc0QixRQUNBeEwsR0FBQWh0QixFQUFBdzRCLE9BTUEsU0FBQUMsR0FBQTlQLEdBQ0FBLEVBQUErUCxPQUFBLEtBQ0EvUCxFQUFBK0osYUFBQSxLQUNBLElBQUF0ZSxFQUFBdVUsRUFBQTJDLFNBQ0FxTixFQUFBaFEsRUFBQXdQLE9BQUEvakIsRUFBQW1qQixhQUNBcEMsRUFBQXdELEtBQUEzVCxRQUNBMkQsRUFBQXlJLE9BQUExQixHQUFBdGIsRUFBQXdrQixnQkFBQXpELEdBQ0F4TSxFQUFBd0ksYUFBQXZVLEVBS0ErTCxFQUFBbmUsR0FBQSxTQUFBclUsRUFBQWdHLEVBQUFnVCxFQUFBNkwsR0FBaUMsT0FBQTlaLEdBQUF5bkIsRUFBQXh5QixFQUFBZ0csRUFBQWdULEVBQUE2TCxHQUFBLElBR2pDMk4sRUFBQTBJLGVBQUEsU0FBQWw3QixFQUFBZ0csRUFBQWdULEVBQUE2TCxHQUE2QyxPQUFBOVosR0FBQXluQixFQUFBeHlCLEVBQUFnRyxFQUFBZ1QsRUFBQTZMLEdBQUEsSUFJN0MsSUFBQTZkLEVBQUFGLEtBQUEzNEIsS0FXQTJuQixHQUFBZ0IsRUFBQSxTQUFBa1EsS0FBQXBLLE9BQUE3UixFQUFBLFNBQ0ErSyxHQUFBZ0IsRUFBQSxhQUFBdlUsRUFBQTBrQixrQkFBQWxjLEVBQUEsU0FJQSxJQWtRQXRPLEdBbFFBeXFCLEdBQUEsS0FFQSxTQUFBQyxHQUFBQyxHQUVBdEYsR0FBQXNGLEVBQUFsbkMsV0FFQWtuQyxFQUFBbG5DLFVBQUFtbkMsVUFBQSxTQUFBcjVCLEdBQ0EsT0FBQUssR0FBQUwsRUFBQTNKLE9BR0EraUMsRUFBQWxuQyxVQUFBb25DLFFBQUEsV0FDQSxJQWlCQTlTLEVBakJBc0MsRUFBQXp5QixLQUNBa2pDLEVBQUF6USxFQUFBMkMsU0FDQXVGLEVBQUF1SSxFQUFBdkksT0FDQTBHLEVBQUE2QixFQUFBN0IsYUFFQUEsSUFDQTVPLEVBQUF3SSxhQUFBcEIsR0FDQXdILEVBQUF2M0IsS0FBQSswQixZQUNBcE0sRUFBQXlJLE9BQ0F6SSxFQUFBd0ksZUFNQXhJLEVBQUF3UCxPQUFBWixFQUdBLElBSUF3QixHQUFBcFEsRUFDQXRDLEVBQUF3SyxFQUFBcCtCLEtBQUFrMkIsRUFBQWtLLGFBQUFsSyxFQUFBMEksZ0JBQ0ssTUFBQXorQixJQUNMKzRCLEdBQUEvNEIsR0FBQSsxQixFQUFBLFVBWUF0QyxFQUFBc0MsRUFBQStQLE9BRUssUUFDTEssR0FBQSxLQW1CQSxPQWhCQXZ6QixNQUFBelIsUUFBQXN5QixJQUFBLElBQUFBLEVBQUFqdkIsU0FDQWl2QixJQUFBLElBR0FBLGFBQUF4QixLQVFBd0IsRUFBQUgsTUFHQUcsRUFBQTVNLE9BQUE4ZCxFQUNBbFIsR0FNQSxTQUFBZ1QsR0FBQUMsRUFBQUMsR0FPQSxPQUxBRCxFQUFBRSxZQUNBNVYsSUFBQSxXQUFBMFYsRUFBQTNuQyxPQUFBUyxnQkFFQWtuQyxJQUFBak8sU0FFQXAzQixFQUFBcWxDLEdBQ0FDLEVBQUFuYSxPQUFBa2EsR0FDQUEsRUFHQSxTQUFBeEMsR0FDQTJDLEVBQ0F6NUIsRUFDQWdsQixFQUNBRixFQUNBcHlCLEdBRUEsSUFBQW1uQixFQUFBcU0sS0FHQSxPQUZBck0sRUFBQXFMLGFBQUF1VSxFQUNBNWYsRUFBQWlNLFVBQUEsQ0FBb0I5bEIsT0FBQWdsQixVQUFBRixXQUFBcHlCLE9BQ3BCbW5CLEVBR0EsU0FBQWdkLEdBQ0E0QyxFQUNBOUMsR0FFQSxHQUFBM1osRUFBQXljLEVBQUE1dEIsUUFBQWtSLEVBQUEwYyxFQUFBQyxXQUNBLE9BQUFELEVBQUFDLFVBR0EsR0FBQTNjLEVBQUEwYyxFQUFBRSxVQUNBLE9BQUFGLEVBQUFFLFNBR0EsSUFBQUMsRUFBQWIsR0FNQSxHQUxBYSxHQUFBN2MsRUFBQTBjLEVBQUFJLFVBQUEsSUFBQUosRUFBQUksT0FBQTN2QixRQUFBMHZCLElBRUFILEVBQUFJLE9BQUFsaUMsS0FBQWlpQyxHQUdBNWMsRUFBQXljLEVBQUFLLFVBQUEvYyxFQUFBMGMsRUFBQU0sYUFDQSxPQUFBTixFQUFBTSxZQUdBLEdBQUFILElBQUE3YyxFQUFBMGMsRUFBQUksUUFBQSxDQUNBLElBQUFBLEVBQUFKLEVBQUFJLE9BQUEsQ0FBQUQsR0FDQUksR0FBQSxFQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FFSyxFQUFBQyxJQUFBLDRCQUEyQyxPQUFBbmMsRUFBQTZiLEVBQUFELEtBRWhELElBQUFRLEVBQUEsU0FBQUMsR0FDQSxRQUFBbmpDLEVBQUEsRUFBQUMsRUFBQTBpQyxFQUFBemlDLE9BQXdDRixFQUFBQyxFQUFPRCxJQUMvQzJpQyxFQUFBM2lDLEdBQUFvakMsZUFHQUQsSUFDQVIsRUFBQXppQyxPQUFBLEVBQ0EsT0FBQTZpQyxJQUNBTSxhQUFBTixHQUNBQSxFQUFBLE1BRUEsT0FBQUMsSUFDQUssYUFBQUwsR0FDQUEsRUFBQSxRQUtBbndCLEVBQUF3VyxFQUFBLFNBQUFwYSxHQUVBc3pCLEVBQUFFLFNBQUFOLEdBQUFsekIsRUFBQXd3QixHQUdBcUQsRUFHQUgsRUFBQXppQyxPQUFBLEVBRkFnakMsR0FBQSxLQU1BcHZCLEVBQUF1VixFQUFBLFNBQUEzVSxHQUtBbVIsRUFBQTBjLEVBQUFDLGFBQ0FELEVBQUE1dEIsT0FBQSxFQUNBdXVCLEdBQUEsTUFJQWowQixFQUFBc3pCLEVBQUExdkIsRUFBQWlCLEdBK0NBLE9BN0NBL1csRUFBQWtTLEtBQ0FzWCxFQUFBdFgsR0FFQTJXLEVBQUEyYyxFQUFBRSxXQUNBeHpCLEVBQUEzSSxLQUFBdU0sRUFBQWlCLEdBRU95UyxFQUFBdFgsRUFBQXEwQixhQUNQcjBCLEVBQUFxMEIsVUFBQWg5QixLQUFBdU0sRUFBQWlCLEdBRUErUixFQUFBNVcsRUFBQTBGLFNBQ0E0dEIsRUFBQUMsVUFBQUwsR0FBQWx6QixFQUFBMEYsTUFBQThxQixJQUdBNVosRUFBQTVXLEVBQUEyekIsV0FDQUwsRUFBQU0sWUFBQVYsR0FBQWx6QixFQUFBMnpCLFFBQUFuRCxHQUNBLElBQUF4d0IsRUFBQXMwQixNQUNBaEIsRUFBQUssU0FBQSxFQUVBRyxFQUFBcjVCLFdBQUEsV0FDQXE1QixFQUFBLEtBQ0FuZCxFQUFBMmMsRUFBQUUsV0FBQTdjLEVBQUEyYyxFQUFBNXRCLFNBQ0E0dEIsRUFBQUssU0FBQSxFQUNBTSxHQUFBLEtBRWFqMEIsRUFBQXMwQixPQUFBLE1BSWIxZCxFQUFBNVcsRUFBQXUwQixXQUNBUixFQUFBdDVCLFdBQUEsV0FDQXM1QixFQUFBLEtBQ0FwZCxFQUFBMmMsRUFBQUUsV0FDQTN1QixFQUdBLE9BR1c3RSxFQUFBdTBCLFlBS1hWLEdBQUEsRUFFQVAsRUFBQUssUUFDQUwsRUFBQU0sWUFDQU4sRUFBQUUsVUFNQSxTQUFBNVQsR0FBQWxNLEdBQ0EsT0FBQUEsRUFBQThMLFdBQUE5TCxFQUFBcUwsYUFLQSxTQUFBeVYsR0FBQTdWLEdBQ0EsR0FBQXRmLE1BQUF6UixRQUFBK3dCLEdBQ0EsUUFBQTV0QixFQUFBLEVBQW1CQSxFQUFBNHRCLEVBQUExdEIsT0FBcUJGLElBQUEsQ0FDeEMsSUFBQWlZLEVBQUEyVixFQUFBNXRCLEdBQ0EsR0FBQTZsQixFQUFBNU4sS0FBQTROLEVBQUE1TixFQUFBOFYsbUJBQUFjLEdBQUE1VyxJQUNBLE9BQUFBLEdBVUEsU0FBQXlyQixHQUFBalMsR0FDQUEsRUFBQWtTLFFBQUEvb0MsT0FBQW9ILE9BQUEsTUFDQXl2QixFQUFBbVMsZUFBQSxFQUVBLElBQUFqRyxFQUFBbE0sRUFBQTJDLFNBQUF3TixpQkFDQWpFLEdBQ0FrRyxHQUFBcFMsRUFBQWtNLEdBTUEsU0FBQTdRLEdBQUFqa0IsRUFBQUYsR0FDQXlPLEdBQUE2ckIsSUFBQXA2QixFQUFBRixHQUdBLFNBQUFtN0IsR0FBQWo3QixFQUFBRixHQUNBeU8sR0FBQTJzQixLQUFBbDdCLEVBQUFGLEdBR0EsU0FBQW11QixHQUFBanVCLEVBQUFGLEdBQ0EsSUFBQXE3QixFQUFBNXNCLEdBQ0EsZ0JBQUE2c0IsSUFDQSxJQUFBaDFCLEVBQUF0RyxFQUFBbEcsTUFBQSxLQUFBNUIsV0FDQSxPQUFBb08sR0FDQSswQixFQUFBRCxLQUFBbDdCLEVBQUFvN0IsSUFLQSxTQUFBSixHQUNBcFMsRUFDQWtNLEVBQ0F1RyxHQUVBOXNCLEdBQUFxYSxFQUNBaUYsR0FBQWlILEVBQUF1RyxHQUFBLEdBQStDcFgsR0FBQWdYLEdBQUFoTixHQUFBckYsR0FDL0NyYSxRQUFBamMsRUFHQSxTQUFBZ3BDLEdBQUFwQyxHQUNBLElBQUFxQyxFQUFBLFNBQ0FyQyxFQUFBbG5DLFVBQUFvb0MsSUFBQSxTQUFBcDZCLEVBQUFGLEdBQ0EsSUFBQThvQixFQUFBenlCLEtBQ0EsR0FBQXNQLE1BQUF6UixRQUFBZ00sR0FDQSxRQUFBN0ksRUFBQSxFQUFBQyxFQUFBNEksRUFBQTNJLE9BQXVDRixFQUFBQyxFQUFPRCxJQUM5Q3l4QixFQUFBd1IsSUFBQXA2QixFQUFBN0ksR0FBQTJJLFFBR0E4b0IsRUFBQWtTLFFBQUE5NkIsS0FBQTRvQixFQUFBa1MsUUFBQTk2QixHQUFBLEtBQUFwSSxLQUFBa0ksR0FHQXk3QixFQUFBMXFCLEtBQUE3USxLQUNBNG9CLEVBQUFtUyxlQUFBLEdBR0EsT0FBQW5TLEdBR0FzUSxFQUFBbG5DLFVBQUF3cEMsTUFBQSxTQUFBeDdCLEVBQUFGLEdBQ0EsSUFBQThvQixFQUFBenlCLEtBQ0EsU0FBQTIzQixJQUNBbEYsRUFBQXNTLEtBQUFsN0IsRUFBQTh0QixHQUNBaHVCLEVBQUFsRyxNQUFBZ3ZCLEVBQUE1d0IsV0FJQSxPQUZBODFCLEVBQUFodUIsS0FDQThvQixFQUFBd1IsSUFBQXA2QixFQUFBOHRCLEdBQ0FsRixHQUdBc1EsRUFBQWxuQyxVQUFBa3BDLEtBQUEsU0FBQWw3QixFQUFBRixHQUNBLElBQUE4b0IsRUFBQXp5QixLQUVBLElBQUE2QixVQUFBWCxPQUVBLE9BREF1eEIsRUFBQWtTLFFBQUEvb0MsT0FBQW9ILE9BQUEsTUFDQXl2QixFQUdBLEdBQUFuakIsTUFBQXpSLFFBQUFnTSxHQUFBLENBQ0EsUUFBQXk3QixFQUFBLEVBQUFya0MsRUFBQTRJLEVBQUEzSSxPQUF5Q29rQyxFQUFBcmtDLEVBQVNxa0MsSUFDbEQ3UyxFQUFBc1MsS0FBQWw3QixFQUFBeTdCLEdBQUEzN0IsR0FFQSxPQUFBOG9CLEVBR0EsSUFTQWtFLEVBVEE0TyxFQUFBOVMsRUFBQWtTLFFBQUE5NkIsR0FDQSxJQUFBMDdCLEVBQ0EsT0FBQTlTLEVBRUEsSUFBQTlvQixFQUVBLE9BREE4b0IsRUFBQWtTLFFBQUE5NkIsR0FBQSxLQUNBNG9CLEVBSUEsSUFBQXp4QixFQUFBdWtDLEVBQUFya0MsT0FDQSxNQUFBRixJQUVBLEdBREEyMUIsRUFBQTRPLEVBQUF2a0MsR0FDQTIxQixJQUFBaHRCLEdBQUFndEIsRUFBQWh0QixPQUFBLENBQ0E0N0IsRUFBQXZkLE9BQUFobkIsRUFBQSxHQUNBLE1BR0EsT0FBQXl4QixHQUdBc1EsRUFBQWxuQyxVQUFBMnBDLE1BQUEsU0FBQTM3QixHQUNBLElBQUE0b0IsRUFBQXp5QixLQWFBdWxDLEVBQUE5UyxFQUFBa1MsUUFBQTk2QixHQUNBLEdBQUEwN0IsRUFBQSxDQUNBQSxJQUFBcmtDLE9BQUEsRUFBQThuQixFQUFBdWMsS0FHQSxJQUZBLElBQUEvaEMsRUFBQXdsQixFQUFBbm5CLFVBQUEsR0FDQTZ6QixFQUFBLHNCQUFBN3JCLEVBQUEsSUFDQTdJLEVBQUEsRUFBQUMsRUFBQXNrQyxFQUFBcmtDLE9BQXFDRixFQUFBQyxFQUFPRCxJQUM1Q2cxQixHQUFBdVAsRUFBQXZrQyxHQUFBeXhCLEVBQUFqdkIsRUFBQWl2QixFQUFBaUQsR0FHQSxPQUFBakQsR0FNQSxJQUFBa04sR0FBQSxLQUdBLFNBQUE4RixHQUFBaFQsR0FDQSxJQUFBaVQsRUFBQS9GLEdBRUEsT0FEQUEsR0FBQWxOLEVBQ0EsV0FDQWtOLEdBQUErRixHQUlBLFNBQUFDLEdBQUFsVCxHQUNBLElBQUF2VSxFQUFBdVUsRUFBQTJDLFNBR0E3UixFQUFBckYsRUFBQXFGLE9BQ0EsR0FBQUEsSUFBQXJGLEVBQUFnakIsU0FBQSxDQUNBLE1BQUEzZCxFQUFBNlIsU0FBQThMLFVBQUEzZCxFQUFBcVMsUUFDQXJTLElBQUFxUyxRQUVBclMsRUFBQXFpQixVQUFBbmtDLEtBQUFneEIsR0FHQUEsRUFBQW1ELFFBQUFyUyxFQUNBa1AsRUFBQW9ULE1BQUF0aUIsSUFBQXNpQixNQUFBcFQsRUFFQUEsRUFBQW1ULFVBQUEsR0FDQW5ULEVBQUFxVCxNQUFBLEdBRUFyVCxFQUFBc1QsU0FBQSxLQUNBdFQsRUFBQXVULFVBQUEsS0FDQXZULEVBQUF3VCxpQkFBQSxFQUNBeFQsRUFBQXVOLFlBQUEsRUFDQXZOLEVBQUE2TSxjQUFBLEVBQ0E3TSxFQUFBeVQsbUJBQUEsRUFHQSxTQUFBQyxHQUFBcEQsR0FDQUEsRUFBQWxuQyxVQUFBdXFDLFFBQUEsU0FBQWpXLEVBQUFrUCxHQUNBLElBQUE1TSxFQUFBenlCLEtBQ0FxbUMsRUFBQTVULEVBQUE2VCxJQUNBQyxFQUFBOVQsRUFBQStQLE9BQ0FnRSxFQUFBZixHQUFBaFQsR0FDQUEsRUFBQStQLE9BQUFyUyxFQVFBc0MsRUFBQTZULElBTEFDLEVBS0E5VCxFQUFBZ1UsVUFBQUYsRUFBQXBXLEdBSEFzQyxFQUFBZ1UsVUFBQWhVLEVBQUE2VCxJQUFBblcsRUFBQWtQLEdBQUEsR0FLQW1ILElBRUFILElBQ0FBLEVBQUFLLFFBQUEsTUFFQWpVLEVBQUE2VCxNQUNBN1QsRUFBQTZULElBQUFJLFFBQUFqVSxHQUdBQSxFQUFBd1AsUUFBQXhQLEVBQUFtRCxTQUFBbkQsRUFBQXdQLFNBQUF4UCxFQUFBbUQsUUFBQTRNLFNBQ0EvUCxFQUFBbUQsUUFBQTBRLElBQUE3VCxFQUFBNlQsTUFNQXZELEVBQUFsbkMsVUFBQXVvQyxhQUFBLFdBQ0EsSUFBQTNSLEVBQUF6eUIsS0FDQXl5QixFQUFBc1QsVUFDQXRULEVBQUFzVCxTQUFBeFgsVUFJQXdVLEVBQUFsbkMsVUFBQXlrQyxTQUFBLFdBQ0EsSUFBQTdOLEVBQUF6eUIsS0FDQSxJQUFBeXlCLEVBQUF5VCxrQkFBQSxDQUdBakcsR0FBQXhOLEVBQUEsaUJBQ0FBLEVBQUF5VCxtQkFBQSxFQUVBLElBQUEzaUIsRUFBQWtQLEVBQUFtRCxTQUNBclMsS0FBQTJpQixtQkFBQXpULEVBQUEyQyxTQUFBOEwsVUFDQXBaLEVBQUF2RSxFQUFBcWlCLFVBQUFuVCxHQUdBQSxFQUFBc1QsVUFDQXRULEVBQUFzVCxTQUFBWSxXQUVBLElBQUEzbEMsRUFBQXl4QixFQUFBbVUsVUFBQTFsQyxPQUNBLE1BQUFGLElBQ0F5eEIsRUFBQW1VLFVBQUE1bEMsR0FBQTJsQyxXQUlBbFUsRUFBQW9VLE1BQUFqVyxRQUNBNkIsRUFBQW9VLE1BQUFqVyxPQUFBTSxVQUdBdUIsRUFBQTZNLGNBQUEsRUFFQTdNLEVBQUFnVSxVQUFBaFUsRUFBQStQLE9BQUEsTUFFQXZDLEdBQUF4TixFQUFBLGFBRUFBLEVBQUFzUyxPQUVBdFMsRUFBQTZULE1BQ0E3VCxFQUFBNlQsSUFBQUksUUFBQSxNQUdBalUsRUFBQXdQLFNBQ0F4UCxFQUFBd1AsT0FBQTFlLE9BQUEsUUFLQSxTQUFBdWpCLEdBQ0FyVSxFQUNBL2EsRUFDQTJuQixHQXlCQSxJQUFBMEgsRUEyQ0EsT0FsRUF0VSxFQUFBNlQsSUFBQTV1QixFQUNBK2EsRUFBQTJDLFNBQUF1RixTQUNBbEksRUFBQTJDLFNBQUF1RixPQUFBM0ssSUFtQkFpUSxHQUFBeE4sRUFBQSxlQXNCQXNVLEVBQUEsV0FDQXRVLEVBQUEyVCxRQUFBM1QsRUFBQXdRLFVBQUE1RCxJQU9BLElBQUEySCxHQUFBdlUsRUFBQXNVLEVBQUExZCxFQUFBLENBQ0E0ZCxPQUFBLFdBQ0F4VSxFQUFBdU4sYUFBQXZOLEVBQUE2TSxjQUNBVyxHQUFBeE4sRUFBQSxtQkFHRyxHQUNINE0sR0FBQSxFQUlBLE1BQUE1TSxFQUFBd1AsU0FDQXhQLEVBQUF1TixZQUFBLEVBQ0FDLEdBQUF4TixFQUFBLFlBRUFBLEVBR0EsU0FBQXFOLEdBQ0FyTixFQUNBa0MsRUFDQWdLLEVBQ0E4RCxFQUNBeUUsR0FZQSxJQUFBQyxFQUFBMUUsRUFBQTM0QixLQUFBKzBCLFlBQ0F1SSxFQUFBM1UsRUFBQXdJLGFBQ0FvTSxLQUNBRixNQUFBak4sU0FDQWtOLElBQUExZ0IsSUFBQTBnQixFQUFBbE4sU0FDQWlOLEdBQUExVSxFQUFBd0ksYUFBQWQsT0FBQWdOLEVBQUFoTixNQU1BbU4sS0FDQUosR0FDQXpVLEVBQUEyQyxTQUFBc04saUJBQ0EyRSxHQWtCQSxHQWZBNVUsRUFBQTJDLFNBQUFpTSxhQUFBb0IsRUFDQWhRLEVBQUF3UCxPQUFBUSxFQUVBaFEsRUFBQStQLFNBQ0EvUCxFQUFBK1AsT0FBQWpmLE9BQUFrZixHQUVBaFEsRUFBQTJDLFNBQUFzTixnQkFBQXdFLEVBS0F6VSxFQUFBOFUsT0FBQTlFLEVBQUEzNEIsS0FBQXl1QixPQUFBN1IsRUFDQStMLEVBQUErVSxXQUFBN0ksR0FBQWpZLEVBR0FpTyxHQUFBbEMsRUFBQTJDLFNBQUFsQyxNQUFBLENBQ0FqQyxJQUFBLEdBR0EsSUFGQSxJQUFBaUMsRUFBQVQsRUFBQTRDLE9BQ0FvUyxFQUFBaFYsRUFBQTJDLFNBQUFzUyxXQUFBLEdBQ0ExbUMsRUFBQSxFQUFtQkEsRUFBQXltQyxFQUFBdm1DLE9BQXFCRixJQUFBLENBQ3hDLElBQUFiLEVBQUFzbkMsRUFBQXptQyxHQUNBMHpCLEVBQUFqQyxFQUFBMkMsU0FBQWxDLE1BQ0FBLEVBQUEveUIsR0FBQXMwQixHQUFBdDBCLEVBQUF1MEIsRUFBQUMsRUFBQWxDLEdBRUF4QixJQUFBLEdBRUF3QixFQUFBMkMsU0FBQVQsWUFJQWdLLEtBQUFqWSxFQUNBLElBQUF3ZSxFQUFBelMsRUFBQTJDLFNBQUF3TixpQkFDQW5RLEVBQUEyQyxTQUFBd04saUJBQUFqRSxFQUNBa0csR0FBQXBTLEVBQUFrTSxFQUFBdUcsR0FHQW9DLElBQ0E3VSxFQUFBeUksT0FBQTFCLEdBQUEwTixFQUFBekUsRUFBQTNULFNBQ0EyRCxFQUFBMlIsZ0JBUUEsU0FBQXVELEdBQUFsVixHQUNBLE1BQUFBLFFBQUFtRCxTQUNBLEdBQUFuRCxFQUFBdVQsVUFBdUIsU0FFdkIsU0FHQSxTQUFBN0YsR0FBQTFOLEVBQUFtVixHQUNBLEdBQUFBLEdBRUEsR0FEQW5WLEVBQUF3VCxpQkFBQSxFQUNBMEIsR0FBQWxWLEdBQ0EsWUFFRyxHQUFBQSxFQUFBd1QsZ0JBQ0gsT0FFQSxHQUFBeFQsRUFBQXVULFdBQUEsT0FBQXZULEVBQUF1VCxVQUFBLENBQ0F2VCxFQUFBdVQsV0FBQSxFQUNBLFFBQUFobEMsRUFBQSxFQUFtQkEsRUFBQXl4QixFQUFBbVQsVUFBQTFrQyxPQUF5QkYsSUFDNUNtL0IsR0FBQTFOLEVBQUFtVCxVQUFBNWtDLElBRUFpL0IsR0FBQXhOLEVBQUEsY0FJQSxTQUFBNE4sR0FBQTVOLEVBQUFtVixHQUNBLEtBQUFBLElBQ0FuVixFQUFBd1QsaUJBQUEsR0FDQTBCLEdBQUFsVixPQUlBQSxFQUFBdVQsVUFBQSxDQUNBdlQsRUFBQXVULFdBQUEsRUFDQSxRQUFBaGxDLEVBQUEsRUFBbUJBLEVBQUF5eEIsRUFBQW1ULFVBQUExa0MsT0FBeUJGLElBQzVDcS9CLEdBQUE1TixFQUFBbVQsVUFBQTVrQyxJQUVBaS9CLEdBQUF4TixFQUFBLGdCQUlBLFNBQUF3TixHQUFBeE4sRUFBQU8sR0FFQXZFLEtBQ0EsSUFBQW9aLEVBQUFwVixFQUFBMkMsU0FBQXBDLEdBQ0EwQyxFQUFBMUMsRUFBQSxRQUNBLEdBQUE2VSxFQUNBLFFBQUE3bUMsRUFBQSxFQUFBdUIsRUFBQXNsQyxFQUFBM21DLE9BQXdDRixFQUFBdUIsRUFBT3ZCLElBQy9DZzFCLEdBQUE2UixFQUFBN21DLEdBQUF5eEIsRUFBQSxLQUFBQSxFQUFBaUQsR0FHQWpELEVBQUFtUyxlQUNBblMsRUFBQStTLE1BQUEsUUFBQXhTLEdBRUF0RSxLQUtBLElBRUFubEIsR0FBQSxHQUNBdStCLEdBQUEsR0FDQS9xQyxHQUFBLEdBRUFnckMsSUFBQSxFQUNBQyxJQUFBLEVBQ0F4aEMsR0FBQSxFQUtBLFNBQUF5aEMsS0FDQXpoQyxHQUFBK0MsR0FBQXJJLE9BQUE0bUMsR0FBQTVtQyxPQUFBLEVBQ0FuRSxHQUFBLEdBSUFnckMsR0FBQUMsSUFBQSxFQVFBLElBQUFFLEdBQUEsRUFHQUMsR0FBQTMzQixLQUFBdkcsSUFRQSxHQUFBbWlCLElBQUFNLEdBQUEsQ0FDQSxJQUFBM0IsR0FBQXBrQixPQUFBb2tCLFlBRUFBLElBQ0Esb0JBQUFBLEdBQUE5Z0IsS0FDQWsrQixLQUFBcjlCLFNBQUFzOUIsWUFBQSxTQUFBQyxZQU1BRixHQUFBLFdBQTBCLE9BQUFwZCxHQUFBOWdCLFFBTzFCLFNBQUFxK0IsS0FHQSxJQUFBQyxFQUFBNytCLEVBY0EsSUFoQkF3K0IsR0FBQUMsS0FDQUgsSUFBQSxFQVdBeitCLEdBQUFzWSxLQUFBLFNBQUE1aEIsRUFBQWdHLEdBQThCLE9BQUFoRyxFQUFBeUosR0FBQXpELEVBQUF5RCxLQUk5QmxELEdBQUEsRUFBaUJBLEdBQUErQyxHQUFBckksT0FBc0JzRixLQUN2QytoQyxFQUFBaC9CLEdBQUEvQyxJQUNBK2hDLEVBQUF0QixRQUNBc0IsRUFBQXRCLFNBRUF2OUIsRUFBQTYrQixFQUFBNytCLEdBQ0EzTSxHQUFBMk0sR0FBQSxLQUNBNitCLEVBQUE5K0IsTUFtQkEsSUFBQSsrQixFQUFBVixHQUFBeGhDLFFBQ0FtaUMsRUFBQWwvQixHQUFBakQsUUFFQTJoQyxLQUdBUyxHQUFBRixHQUNBRyxHQUFBRixHQUlBM2QsSUFBQUosRUFBQUksVUFDQUEsR0FBQXRWLEtBQUEsU0FJQSxTQUFBbXpCLEdBQUFwL0IsR0FDQSxJQUFBdkksRUFBQXVJLEVBQUFySSxPQUNBLE1BQUFGLElBQUEsQ0FDQSxJQUFBdW5DLEVBQUFoL0IsRUFBQXZJLEdBQ0F5eEIsRUFBQThWLEVBQUE5VixHQUNBQSxFQUFBc1QsV0FBQXdDLEdBQUE5VixFQUFBdU4sYUFBQXZOLEVBQUE2TSxjQUNBVyxHQUFBeE4sRUFBQSxZQVNBLFNBQUF5TixHQUFBek4sR0FHQUEsRUFBQXVULFdBQUEsRUFDQThCLEdBQUFybUMsS0FBQWd4QixHQUdBLFNBQUFpVyxHQUFBbi9CLEdBQ0EsUUFBQXZJLEVBQUEsRUFBaUJBLEVBQUF1SSxFQUFBckksT0FBa0JGLElBQ25DdUksRUFBQXZJLEdBQUFnbEMsV0FBQSxFQUNBN0YsR0FBQTUyQixFQUFBdkksSUFBQSxHQVNBLFNBQUE0bkMsR0FBQUwsR0FDQSxJQUFBNytCLEVBQUE2K0IsRUFBQTcrQixHQUNBLFNBQUEzTSxHQUFBMk0sR0FBQSxDQUVBLEdBREEzTSxHQUFBMk0sSUFBQSxFQUNBcytCLEdBRUssQ0FHTCxJQUFBaG5DLEVBQUF1SSxHQUFBckksT0FBQSxFQUNBLE1BQUFGLEVBQUF3RixJQUFBK0MsR0FBQXZJLEdBQUEwSSxHQUFBNitCLEVBQUE3K0IsR0FDQTFJLElBRUF1SSxHQUFBeWUsT0FBQWhuQixFQUFBLElBQUF1bkMsUUFSQWgvQixHQUFBOUgsS0FBQThtQyxHQVdBUixLQUNBQSxJQUFBLEVBTUEvOUIsR0FBQXMrQixNQVNBLElBQUFPLEdBQUEsRUFPQTdCLEdBQUEsU0FDQXZVLEVBQ0FxVyxFQUNBblMsRUFDQXpZLEVBQ0E2cUIsR0FFQS9vQyxLQUFBeXlCLEtBQ0FzVyxJQUNBdFcsRUFBQXNULFNBQUEvbEMsTUFFQXl5QixFQUFBbVUsVUFBQW5sQyxLQUFBekIsTUFFQWtlLEdBQ0FsZSxLQUFBZ3BDLE9BQUE5cUIsRUFBQThxQixLQUNBaHBDLEtBQUFpcEMsT0FBQS9xQixFQUFBK3FCLEtBQ0FqcEMsS0FBQWtwQyxPQUFBaHJCLEVBQUFnckIsS0FDQWxwQyxLQUFBOGpDLE9BQUE1bEIsRUFBQTRsQixLQUNBOWpDLEtBQUFpbkMsT0FBQS9vQixFQUFBK29CLFFBRUFqbkMsS0FBQWdwQyxLQUFBaHBDLEtBQUFpcEMsS0FBQWpwQyxLQUFBa3BDLEtBQUFscEMsS0FBQThqQyxNQUFBLEVBRUE5akMsS0FBQTIyQixLQUNBMzJCLEtBQUEwSixLQUFBbS9CLEdBQ0E3b0MsS0FBQW1wQyxRQUFBLEVBQ0FucEMsS0FBQW9wQyxNQUFBcHBDLEtBQUFrcEMsS0FDQWxwQyxLQUFBcXBDLEtBQUEsR0FDQXJwQyxLQUFBc3BDLFFBQUEsR0FDQXRwQyxLQUFBdXBDLE9BQUEsSUFBQTliLEdBQ0F6dEIsS0FBQXdwQyxVQUFBLElBQUEvYixHQUNBenRCLEtBQUF5cEMsV0FFQSxHQUVBLG9CQUFBWCxFQUNBOW9DLEtBQUE2eEIsT0FBQWlYLEdBRUE5b0MsS0FBQTZ4QixPQUFBOUYsRUFBQStjLEdBQ0E5b0MsS0FBQTZ4QixTQUNBN3hCLEtBQUE2eEIsT0FBQXhJLElBU0FycEIsS0FBQTNELE1BQUEyRCxLQUFBa3BDLFVBQ0Evc0MsRUFDQTZELEtBQUFELE9BTUFpbkMsR0FBQW5yQyxVQUFBa0UsSUFBQSxXQUVBLElBQUExRCxFQURBb3lCLEdBQUF6dUIsTUFFQSxJQUFBeXlCLEVBQUF6eUIsS0FBQXl5QixHQUNBLElBQ0FwMkIsRUFBQTJELEtBQUE2eEIsT0FBQXQxQixLQUFBazJCLEtBQ0csTUFBQS8xQixJQUNILElBQUFzRCxLQUFBaXBDLEtBR0EsTUFBQXZzQyxHQUZBKzRCLEdBQUEvNEIsR0FBQSsxQixFQUFBLHVCQUFBenlCLEtBQUEsZ0JBSUcsUUFHSEEsS0FBQWdwQyxNQUNBbFMsR0FBQXo2QixHQUVBcXlCLEtBQ0ExdUIsS0FBQTBwQyxjQUVBLE9BQUFydEMsR0FNQTJxQyxHQUFBbnJDLFVBQUF5eUIsT0FBQSxTQUFBd0MsR0FDQSxJQUFBcG5CLEVBQUFvbkIsRUFBQXBuQixHQUNBMUosS0FBQXdwQyxVQUFBenNDLElBQUEyTSxLQUNBMUosS0FBQXdwQyxVQUFBMWIsSUFBQXBrQixHQUNBMUosS0FBQXNwQyxRQUFBN25DLEtBQUFxdkIsR0FDQTl3QixLQUFBdXBDLE9BQUF4c0MsSUFBQTJNLElBQ0FvbkIsRUFBQTVDLE9BQUFsdUIsUUFRQWduQyxHQUFBbnJDLFVBQUE2dEMsWUFBQSxXQUNBLElBQUExb0MsRUFBQWhCLEtBQUFxcEMsS0FBQW5vQyxPQUNBLE1BQUFGLElBQUEsQ0FDQSxJQUFBOHZCLEVBQUE5d0IsS0FBQXFwQyxLQUFBcm9DLEdBQ0FoQixLQUFBd3BDLFVBQUF6c0MsSUFBQSt6QixFQUFBcG5CLEtBQ0FvbkIsRUFBQTFDLFVBQUFwdUIsTUFHQSxJQUFBMnBDLEVBQUEzcEMsS0FBQXVwQyxPQUNBdnBDLEtBQUF1cEMsT0FBQXZwQyxLQUFBd3BDLFVBQ0F4cEMsS0FBQXdwQyxVQUFBRyxFQUNBM3BDLEtBQUF3cEMsVUFBQTcrQixRQUNBZy9CLEVBQUEzcEMsS0FBQXFwQyxLQUNBcnBDLEtBQUFxcEMsS0FBQXJwQyxLQUFBc3BDLFFBQ0F0cEMsS0FBQXNwQyxRQUFBSyxFQUNBM3BDLEtBQUFzcEMsUUFBQXBvQyxPQUFBLEdBT0E4bEMsR0FBQW5yQyxVQUFBMHlCLE9BQUEsV0FFQXZ1QixLQUFBa3BDLEtBQ0FscEMsS0FBQW9wQyxPQUFBLEVBQ0dwcEMsS0FBQThqQyxLQUNIOWpDLEtBQUF5SixNQUVBbS9CLEdBQUE1b0MsT0FRQWduQyxHQUFBbnJDLFVBQUE0TixJQUFBLFdBQ0EsR0FBQXpKLEtBQUFtcEMsT0FBQSxDQUNBLElBQUE5c0MsRUFBQTJELEtBQUFELE1BQ0EsR0FDQTFELElBQUEyRCxLQUFBM0QsT0FJQTBCLEVBQUExQixJQUNBMkQsS0FBQWdwQyxLQUNBLENBRUEsSUFBQXRyQixFQUFBMWQsS0FBQTNELE1BRUEsR0FEQTJELEtBQUEzRCxRQUNBMkQsS0FBQWlwQyxLQUNBLElBQ0FqcEMsS0FBQTIyQixHQUFBcDZCLEtBQUF5RCxLQUFBeXlCLEdBQUFwMkIsRUFBQXFoQixHQUNTLE1BQUFoaEIsSUFDVCs0QixHQUFBLzRCLEdBQUFzRCxLQUFBeXlCLEdBQUEseUJBQUF6eUIsS0FBQSxxQkFHQUEsS0FBQTIyQixHQUFBcDZCLEtBQUF5RCxLQUFBeXlCLEdBQUFwMkIsRUFBQXFoQixNQVVBc3BCLEdBQUFuckMsVUFBQSt0QyxTQUFBLFdBQ0E1cEMsS0FBQTNELE1BQUEyRCxLQUFBRCxNQUNBQyxLQUFBb3BDLE9BQUEsR0FNQXBDLEdBQUFuckMsVUFBQXd5QixPQUFBLFdBQ0EsSUFBQXJ0QixFQUFBaEIsS0FBQXFwQyxLQUFBbm9DLE9BQ0EsTUFBQUYsSUFDQWhCLEtBQUFxcEMsS0FBQXJvQyxHQUFBcXRCLFVBT0EyWSxHQUFBbnJDLFVBQUE4cUMsU0FBQSxXQUNBLEdBQUEzbUMsS0FBQW1wQyxPQUFBLENBSUFucEMsS0FBQXl5QixHQUFBeVQsbUJBQ0FwZSxFQUFBOW5CLEtBQUF5eUIsR0FBQW1VLFVBQUE1bUMsTUFFQSxJQUFBZ0IsRUFBQWhCLEtBQUFxcEMsS0FBQW5vQyxPQUNBLE1BQUFGLElBQ0FoQixLQUFBcXBDLEtBQUFyb0MsR0FBQW90QixVQUFBcHVCLE1BRUFBLEtBQUFtcEMsUUFBQSxJQU1BLElBQUFVLEdBQUEsQ0FDQWpwQyxZQUFBLEVBQ0FtQixjQUFBLEVBQ0FoQyxJQUFBc3BCLEVBQ0FybkIsSUFBQXFuQixHQUdBLFNBQUFvUixHQUFBcmlCLEVBQUEweEIsRUFBQTNwQyxHQUNBMHBDLEdBQUE5cEMsSUFBQSxXQUNBLE9BQUFDLEtBQUE4cEMsR0FBQTNwQyxJQUVBMHBDLEdBQUE3bkMsSUFBQSxTQUFBNkksR0FDQTdLLEtBQUE4cEMsR0FBQTNwQyxHQUFBMEssR0FFQWpQLE9BQUFxSCxlQUFBbVYsRUFBQWpZLEVBQUEwcEMsSUFHQSxTQUFBRSxHQUFBdFgsR0FDQUEsRUFBQW1VLFVBQUEsR0FDQSxJQUFBMVosRUFBQXVGLEVBQUEyQyxTQUNBbEksRUFBQWdHLE9BQW1COFcsR0FBQXZYLEVBQUF2RixFQUFBZ0csT0FDbkJoRyxFQUFBcG9CLFNBQXFCbWxDLEdBQUF4WCxFQUFBdkYsRUFBQXBvQixTQUNyQm9vQixFQUFBcGpCLEtBQ0FvZ0MsR0FBQXpYLEdBRUE1TyxHQUFBNE8sRUFBQW9VLE1BQUEsSUFBeUIsR0FFekIzWixFQUFBa0csVUFBc0IrVyxHQUFBMVgsRUFBQXZGLEVBQUFrRyxVQUN0QmxHLEVBQUFGLE9BQUFFLEVBQUFGLFFBQUFELElBQ0FxZCxHQUFBM1gsRUFBQXZGLEVBQUFGLE9BSUEsU0FBQWdkLEdBQUF2WCxFQUFBNFgsR0FDQSxJQUFBMVYsRUFBQWxDLEVBQUEyQyxTQUFBVCxXQUFBLEdBQ0F6QixFQUFBVCxFQUFBNEMsT0FBQSxHQUdBdDBCLEVBQUEweEIsRUFBQTJDLFNBQUFzUyxVQUFBLEdBQ0E0QyxHQUFBN1gsRUFBQW1ELFFBRUEwVSxHQUNBclosSUFBQSxHQUVBLElBQUFnTCxFQUFBLFNBQUE5N0IsR0FDQVksRUFBQVUsS0FBQXRCLEdBQ0EsSUFBQTlELEVBQUFvNEIsR0FBQXQwQixFQUFBa3FDLEVBQUExVixFQUFBbEMsR0F1QkFoQixHQUFBeUIsRUFBQS95QixFQUFBOUQsR0FLQThELEtBQUFzeUIsR0FDQWdJLEdBQUFoSSxFQUFBLFNBQUF0eUIsSUFJQSxRQUFBQSxLQUFBa3FDLEVBQUFwTyxFQUFBOTdCLEdBQ0E4d0IsSUFBQSxHQUdBLFNBQUFpWixHQUFBelgsR0FDQSxJQUFBM29CLEVBQUEyb0IsRUFBQTJDLFNBQUF0ckIsS0FDQUEsRUFBQTJvQixFQUFBb1UsTUFBQSxvQkFBQS84QixFQUNBeWdDLEdBQUF6Z0MsRUFBQTJvQixHQUNBM29CLEdBQUEsR0FDQW9kLEVBQUFwZCxLQUNBQSxFQUFBLElBUUEsSUFBQS9JLEVBQUFuRixPQUFBbUYsS0FBQStJLEdBQ0FvcEIsRUFBQVQsRUFBQTJDLFNBQUFsQyxNQUVBbHlCLEdBREF5eEIsRUFBQTJDLFNBQUF0d0IsUUFDQS9ELEVBQUFHLFFBQ0EsTUFBQUYsSUFBQSxDQUNBLElBQUFiLEVBQUFZLEVBQUFDLEdBQ1EsRUFRUmt5QixHQUFBakwsRUFBQWlMLEVBQUEveUIsSUFNSzByQixFQUFBMXJCLElBQ0xzNkIsR0FBQWhJLEVBQUEsUUFBQXR5QixHQUlBMGpCLEdBQUEvWixHQUFBLEdBR0EsU0FBQXlnQyxHQUFBemdDLEVBQUEyb0IsR0FFQWhFLEtBQ0EsSUFDQSxPQUFBM2tCLEVBQUF2TixLQUFBazJCLEtBQ0csTUFBQS8xQixJQUVILE9BREErNEIsR0FBQS80QixHQUFBKzFCLEVBQUEsVUFDQSxHQUNHLFFBQ0gvRCxNQUlBLElBQUE4YixHQUFBLENBQThCdEIsTUFBQSxHQUU5QixTQUFBaUIsR0FBQTFYLEVBQUFXLEdBRUEsSUFBQXFYLEVBQUFoWSxFQUFBaVksa0JBQUE5dUMsT0FBQW9ILE9BQUEsTUFFQTJuQyxFQUFBeGQsS0FFQSxRQUFBaHRCLEtBQUFpekIsRUFBQSxDQUNBLElBQUF3WCxFQUFBeFgsRUFBQWp6QixHQUNBMHhCLEVBQUEsb0JBQUErWSxNQUFBN3FDLElBQ1EsRUFPUjRxQyxJQUVBRixFQUFBdHFDLEdBQUEsSUFBQTZtQyxHQUNBdlUsRUFDQVosR0FBQXhJLEVBQ0FBLEVBQ0FtaEIsS0FPQXJxQyxLQUFBc3lCLEdBQ0FvWSxHQUFBcFksRUFBQXR5QixFQUFBeXFDLElBV0EsU0FBQUMsR0FDQXp5QixFQUNBalksRUFDQXlxQyxHQUVBLElBQUFFLEdBQUEzZCxLQUNBLG9CQUFBeWQsR0FDQWYsR0FBQTlwQyxJQUFBK3FDLEVBQ0FDLEdBQUE1cUMsR0FDQTZxQyxHQUFBSixHQUNBZixHQUFBN25DLElBQUFxbkIsSUFFQXdnQixHQUFBOXBDLElBQUE2cUMsRUFBQTdxQyxJQUNBK3FDLElBQUEsSUFBQUYsRUFBQXppQixNQUNBNGlCLEdBQUE1cUMsR0FDQTZxQyxHQUFBSixFQUFBN3FDLEtBQ0FzcEIsRUFDQXdnQixHQUFBN25DLElBQUE0b0MsRUFBQTVvQyxLQUFBcW5CLEdBV0F6dEIsT0FBQXFILGVBQUFtVixFQUFBalksRUFBQTBwQyxJQUdBLFNBQUFrQixHQUFBNXFDLEdBQ0Esa0JBQ0EsSUFBQW9vQyxFQUFBdm9DLEtBQUEwcUMsbUJBQUExcUMsS0FBQTBxQyxrQkFBQXZxQyxHQUNBLEdBQUFvb0MsRUFPQSxPQU5BQSxFQUFBYSxPQUNBYixFQUFBcUIsV0FFQTViLEdBQUE1VixRQUNBbXdCLEVBQUFsYSxTQUVBa2EsRUFBQWxzQyxPQUtBLFNBQUEydUMsR0FBQXJoQyxHQUNBLGtCQUNBLE9BQUFBLEVBQUFwTixLQUFBeUQsWUFJQSxTQUFBaXFDLEdBQUF4WCxFQUFBM3RCLEdBQ0EydEIsRUFBQTJDLFNBQUFsQyxNQUNBLFFBQUEveUIsS0FBQTJFLEVBc0JBMnRCLEVBQUF0eUIsR0FBQSxvQkFBQTJFLEVBQUEzRSxHQUFBa3BCLEVBQUFOLEVBQUFqa0IsRUFBQTNFLEdBQUFzeUIsR0FJQSxTQUFBMlgsR0FBQTNYLEVBQUF6RixHQUNBLFFBQUE3c0IsS0FBQTZzQixFQUFBLENBQ0EsSUFBQXBZLEVBQUFvWSxFQUFBN3NCLEdBQ0EsR0FBQW1QLE1BQUF6UixRQUFBK1csR0FDQSxRQUFBNVQsRUFBQSxFQUFxQkEsRUFBQTRULEVBQUExVCxPQUFvQkYsSUFDekNpcUMsR0FBQXhZLEVBQUF0eUIsRUFBQXlVLEVBQUE1VCxTQUdBaXFDLEdBQUF4WSxFQUFBdHlCLEVBQUF5VSxJQUtBLFNBQUFxMkIsR0FDQXhZLEVBQ0FxVyxFQUNBbDBCLEVBQ0FzSixHQVNBLE9BUEFnSixFQUFBdFMsS0FDQXNKLEVBQUF0SixFQUNBQSxhQUVBLGtCQUFBQSxJQUNBQSxFQUFBNmQsRUFBQTdkLElBRUE2ZCxFQUFBeVksT0FBQXBDLEVBQUFsMEIsRUFBQXNKLEdBR0EsU0FBQWl0QixHQUFBcEksR0FJQSxJQUFBcUksRUFBQSxDQUNBcnJDLElBQUEsV0FBNkIsT0FBQUMsS0FBQTZtQyxRQUM3QndFLEVBQUEsQ0FDQXRyQyxJQUFBLFdBQThCLE9BQUFDLEtBQUFxMUIsU0FhOUJ6NUIsT0FBQXFILGVBQUE4L0IsRUFBQWxuQyxVQUFBLFFBQUF1dkMsR0FDQXh2QyxPQUFBcUgsZUFBQTgvQixFQUFBbG5DLFVBQUEsU0FBQXd2QyxHQUVBdEksRUFBQWxuQyxVQUFBaUcsS0FBQUUsR0FDQStnQyxFQUFBbG5DLFVBQUF5dkMsUUFBQXJaLEdBRUE4USxFQUFBbG5DLFVBQUFxdkMsT0FBQSxTQUNBcEMsRUFDQW5TLEVBQ0F6WSxHQUVBLElBQUF1VSxFQUFBenlCLEtBQ0EsR0FBQWtuQixFQUFBeVAsR0FDQSxPQUFBc1UsR0FBQXhZLEVBQUFxVyxFQUFBblMsRUFBQXpZLEdBRUFBLEtBQUEsR0FDQUEsRUFBQStxQixNQUFBLEVBQ0EsSUFBQVYsRUFBQSxJQUFBdkIsR0FBQXZVLEVBQUFxVyxFQUFBblMsRUFBQXpZLEdBQ0EsR0FBQUEsRUFBQXF0QixVQUNBLElBQ0E1VSxFQUFBcDZCLEtBQUFrMkIsRUFBQThWLEVBQUFsc0MsT0FDTyxNQUFBc1osR0FDUDhmLEdBQUE5ZixFQUFBOGMsRUFBQSxtQ0FBQThWLEVBQUEsZ0JBR0Esa0JBQ0FBLEVBQUE1QixhQU9BLElBQUE2RSxHQUFBLEVBRUEsU0FBQUMsR0FBQTFJLEdBQ0FBLEVBQUFsbkMsVUFBQTZ2QyxNQUFBLFNBQUF4dEIsR0FDQSxJQUFBdVUsRUFBQXp5QixLQUVBeXlCLEVBQUFrWixLQUFBSCxLQVdBL1ksRUFBQWpCLFFBQUEsRUFFQXRULEtBQUFrakIsYUFJQXdLLEdBQUFuWixFQUFBdlUsR0FFQXVVLEVBQUEyQyxTQUFBdEIsR0FDQStNLEdBQUFwTyxFQUFBem1CLGFBQ0FrUyxHQUFBLEdBQ0F1VSxHQU9BQSxFQUFBa0ssYUFBQWxLLEVBR0FBLEVBQUFvWixNQUFBcFosRUFDQWtULEdBQUFsVCxHQUNBaVMsR0FBQWpTLEdBQ0E4UCxHQUFBOVAsR0FDQXdOLEdBQUF4TixFQUFBLGdCQUNBMkcsR0FBQTNHLEdBQ0FzWCxHQUFBdFgsR0FDQXlHLEdBQUF6RyxHQUNBd04sR0FBQXhOLEVBQUEsV0FTQUEsRUFBQTJDLFNBQUExZCxJQUNBK2EsRUFBQW1OLE9BQUFuTixFQUFBMkMsU0FBQTFkLEtBS0EsU0FBQWswQixHQUFBblosRUFBQXZVLEdBQ0EsSUFBQWdQLEVBQUF1RixFQUFBMkMsU0FBQXg1QixPQUFBb0gsT0FBQXl2QixFQUFBem1CLFlBQUFrUyxTQUVBdWtCLEVBQUF2a0IsRUFBQW1qQixhQUNBblUsRUFBQTNKLE9BQUFyRixFQUFBcUYsT0FDQTJKLEVBQUFtVSxhQUFBb0IsRUFFQSxJQUFBcUosRUFBQXJKLEVBQUExVCxpQkFDQTdCLEVBQUF5SCxVQUFBbVgsRUFBQW5YLFVBQ0F6SCxFQUFBMFYsaUJBQUFrSixFQUFBbk4sVUFDQXpSLEVBQUF3VixnQkFBQW9KLEVBQUFsZCxTQUNBMUIsRUFBQTZlLGNBQUFELEVBQUF0dkMsSUFFQTBoQixFQUFBeWMsU0FDQXpOLEVBQUF5TixPQUFBemMsRUFBQXljLE9BQ0F6TixFQUFBd1AsZ0JBQUF4ZSxFQUFBd2UsaUJBSUEsU0FBQW1FLEdBQUFyVCxHQUNBLElBQUF0UCxFQUFBc1AsRUFBQXRQLFFBQ0EsR0FBQXNQLEVBQUF3ZSxNQUFBLENBQ0EsSUFBQUMsRUFBQXBMLEdBQUFyVCxFQUFBd2UsT0FDQUUsRUFBQTFlLEVBQUF5ZSxhQUNBLEdBQUFBLElBQUFDLEVBQUEsQ0FHQTFlLEVBQUF5ZSxlQUVBLElBQUFFLEVBQUFDLEdBQUE1ZSxHQUVBMmUsR0FDQWpqQixFQUFBc0UsRUFBQTZlLGNBQUFGLEdBRUFqdUIsRUFBQXNQLEVBQUF0UCxRQUFBNFYsR0FBQW1ZLEVBQUF6ZSxFQUFBNmUsZUFDQW51QixFQUFBamMsT0FDQWljLEVBQUFvdUIsV0FBQXB1QixFQUFBamMsTUFBQXVyQixJQUlBLE9BQUF0UCxFQUdBLFNBQUFrdUIsR0FBQTVlLEdBQ0EsSUFBQStlLEVBQ0FDLEVBQUFoZixFQUFBdFAsUUFDQXV1QixFQUFBamYsRUFBQWtmLGNBQ0EsUUFBQXZzQyxLQUFBcXNDLEVBQ0FBLEVBQUFyc0MsS0FBQXNzQyxFQUFBdHNDLEtBQ0Fvc0MsSUFBc0JBLEVBQUEsSUFDdEJBLEVBQUFwc0MsR0FBQXFzQyxFQUFBcnNDLElBR0EsT0FBQW9zQyxFQUdBLFNBQUF4SixHQUFBN2tCLEdBTUFsZSxLQUFBMHJDLE1BQUF4dEIsR0FXQSxTQUFBeXVCLEdBQUE1SixHQUNBQSxFQUFBNkosSUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUE5c0MsS0FBQStzQyxvQkFBQS9zQyxLQUFBK3NDLGtCQUFBLElBQ0EsR0FBQUQsRUFBQTk0QixRQUFBNjRCLElBQUEsRUFDQSxPQUFBN3NDLEtBSUEsSUFBQXdELEVBQUF3bEIsRUFBQW5uQixVQUFBLEdBUUEsT0FQQTJCLEVBQUF3cEMsUUFBQWh0QyxNQUNBLG9CQUFBNnNDLEVBQUFJLFFBQ0FKLEVBQUFJLFFBQUF4cEMsTUFBQW9wQyxFQUFBcnBDLEdBQ0ssb0JBQUFxcEMsR0FDTEEsRUFBQXBwQyxNQUFBLEtBQUFELEdBRUFzcEMsRUFBQXJyQyxLQUFBb3JDLEdBQ0E3c0MsTUFNQSxTQUFBa3RDLEdBQUFuSyxHQUNBQSxFQUFBb0ssTUFBQSxTQUFBQSxHQUVBLE9BREFudEMsS0FBQWtlLFFBQUE0VixHQUFBOXpCLEtBQUFrZSxRQUFBaXZCLEdBQ0FudEMsTUFNQSxTQUFBb3RDLEdBQUFySyxHQU1BQSxFQUFBckMsSUFBQSxFQUNBLElBQUFBLEVBQUEsRUFLQXFDLEVBQUE3WixPQUFBLFNBQUFtakIsR0FDQUEsS0FBQSxHQUNBLElBQUFnQixFQUFBcnRDLEtBQ0FzdEMsRUFBQUQsRUFBQTNNLElBQ0E2TSxFQUFBbEIsRUFBQW1CLFFBQUFuQixFQUFBbUIsTUFBQSxJQUNBLEdBQUFELEVBQUFELEdBQ0EsT0FBQUMsRUFBQUQsR0FHQSxJQUFBcnJDLEVBQUFvcUMsRUFBQXBxQyxNQUFBb3JDLEVBQUFudkIsUUFBQWpjLEtBS0EsSUFBQXdyQyxFQUFBLFNBQUF2dkIsR0FDQWxlLEtBQUEwckMsTUFBQXh0QixJQTZDQSxPQTNDQXV2QixFQUFBNXhDLFVBQUFELE9BQUFvSCxPQUFBcXFDLEVBQUF4eEMsV0FDQTR4QyxFQUFBNXhDLFVBQUFtUSxZQUFBeWhDLEVBQ0FBLEVBQUEvTSxRQUNBK00sRUFBQXZ2QixRQUFBNFYsR0FDQXVaLEVBQUFudkIsUUFDQW11QixHQUVBb0IsRUFBQSxTQUFBSixFQUtBSSxFQUFBdnZCLFFBQUFnVixPQUNBd2EsR0FBQUQsR0FFQUEsRUFBQXZ2QixRQUFBa1YsVUFDQXVhLEdBQUFGLEdBSUFBLEVBQUF2a0IsT0FBQW1rQixFQUFBbmtCLE9BQ0F1a0IsRUFBQU4sTUFBQUUsRUFBQUYsTUFDQU0sRUFBQWIsSUFBQVMsRUFBQVQsSUFJQXBpQixFQUFBclAsUUFBQSxTQUFBdlEsR0FDQTZpQyxFQUFBN2lDLEdBQUF5aUMsRUFBQXppQyxLQUdBM0ksSUFDQXdyQyxFQUFBdnZCLFFBQUFvdUIsV0FBQXJxQyxHQUFBd3JDLEdBTUFBLEVBQUF4QixhQUFBb0IsRUFBQW52QixRQUNBdXZCLEVBQUFwQixnQkFDQW9CLEVBQUFmLGNBQUF4akIsRUFBQSxHQUFpQ3VrQixFQUFBdnZCLFNBR2pDcXZCLEVBQUFELEdBQUFHLEVBQ0FBLEdBSUEsU0FBQUMsR0FBQUUsR0FDQSxJQUFBMWEsRUFBQTBhLEVBQUExdkIsUUFBQWdWLE1BQ0EsUUFBQS95QixLQUFBK3lCLEVBQ0F1SCxHQUFBbVQsRUFBQS94QyxVQUFBLFNBQUFzRSxHQUlBLFNBQUF3dEMsR0FBQUMsR0FDQSxJQUFBeGEsRUFBQXdhLEVBQUExdkIsUUFBQWtWLFNBQ0EsUUFBQWp6QixLQUFBaXpCLEVBQ0F5WCxHQUFBK0MsRUFBQS94QyxVQUFBc0UsRUFBQWl6QixFQUFBanpCLElBTUEsU0FBQTB0QyxHQUFBOUssR0FJQXZZLEVBQUFyUCxRQUFBLFNBQUF2USxHQUNBbTRCLEVBQUFuNEIsR0FBQSxTQUNBbEIsRUFDQW9rQyxHQUVBLE9BQUFBLEdBT0EsY0FBQWxqQyxHQUFBc2MsRUFBQTRtQixLQUNBQSxFQUFBN3JDLEtBQUE2ckMsRUFBQTdyQyxNQUFBeUgsRUFDQW9rQyxFQUFBOXRDLEtBQUFrZSxRQUFBNlYsTUFBQTdLLE9BQUE0a0IsSUFFQSxjQUFBbGpDLEdBQUEsb0JBQUFrakMsSUFDQUEsRUFBQSxDQUF3Qi9rQixLQUFBK2tCLEVBQUF2ZixPQUFBdWYsSUFFeEI5dEMsS0FBQWtlLFFBQUF0VCxFQUFBLEtBQUFsQixHQUFBb2tDLEVBQ0FBLEdBZEE5dEMsS0FBQWtlLFFBQUF0VCxFQUFBLEtBQUFsQixNQXdCQSxTQUFBcWtDLEdBQUE3Z0IsR0FDQSxPQUFBQSxNQUFBTSxLQUFBdFAsUUFBQWpjLE1BQUFpckIsRUFBQTF3QixLQUdBLFNBQUF3eEMsR0FBQUMsRUFBQWhzQyxHQUNBLE9BQUFxTixNQUFBelIsUUFBQW93QyxHQUNBQSxFQUFBajZCLFFBQUEvUixJQUFBLEVBQ0csa0JBQUFnc0MsRUFDSEEsRUFBQTNyQyxNQUFBLEtBQUEwUixRQUFBL1IsSUFBQSxJQUNHa2xCLEVBQUE4bUIsSUFDSEEsRUFBQXZ6QixLQUFBelksR0FNQSxTQUFBaXNDLEdBQUFDLEVBQUE3ckIsR0FDQSxJQUFBNkYsRUFBQWdtQixFQUFBaG1CLE1BQ0FwbkIsRUFBQW90QyxFQUFBcHRDLEtBQ0F5aEMsRUFBQTJMLEVBQUEzTCxPQUNBLFFBQUFyaUMsS0FBQWdvQixFQUFBLENBQ0EsSUFBQWltQixFQUFBam1CLEVBQUFob0IsR0FDQSxHQUFBaXVDLEVBQUEsQ0FDQSxJQUFBbnNDLEVBQUE4ckMsR0FBQUssRUFBQXJmLGtCQUNBOXNCLElBQUFxZ0IsRUFBQXJnQixJQUNBb3NDLEdBQUFsbUIsRUFBQWhvQixFQUFBWSxFQUFBeWhDLEtBTUEsU0FBQTZMLEdBQ0FsbUIsRUFDQWhvQixFQUNBWSxFQUNBdXRDLEdBRUEsSUFBQUMsRUFBQXBtQixFQUFBaG9CLElBQ0FvdUMsR0FBQUQsR0FBQUMsRUFBQS94QyxNQUFBOHhDLEVBQUE5eEMsS0FDQSt4QyxFQUFBbGYsa0JBQUFpUixXQUVBblksRUFBQWhvQixHQUFBLEtBQ0EybkIsRUFBQS9tQixFQUFBWixHQS9NQXNyQyxHQUFBMUksSUFDQW9JLEdBQUFwSSxJQUNBb0MsR0FBQXBDLElBQ0FvRCxHQUFBcEQsSUFDQUQsR0FBQUMsSUE4TUEsSUFBQXlMLEdBQUEsQ0FBQXJvQyxPQUFBdUcsT0FBQTRDLE9BRUFtL0IsR0FBQSxDQUNBeHNDLEtBQUEsYUFDQWkvQixVQUFBLEVBRUFoTyxNQUFBLENBQ0F3YixRQUFBRixHQUNBRyxRQUFBSCxHQUNBM21DLElBQUEsQ0FBQTFCLE9BQUEyYixTQUdBOHNCLFFBQUEsV0FDQTV1QyxLQUFBbW9CLE1BQUF2c0IsT0FBQW9ILE9BQUEsTUFDQWhELEtBQUFlLEtBQUEsSUFHQTh0QyxVQUFBLFdBQ0EsUUFBQTF1QyxLQUFBSCxLQUFBbW9CLE1BQ0FrbUIsR0FBQXJ1QyxLQUFBbW9CLE1BQUFob0IsRUFBQUgsS0FBQWUsT0FJQSt0QyxRQUFBLFdBQ0EsSUFBQXhRLEVBQUF0K0IsS0FFQUEsS0FBQWtyQyxPQUFBLG1CQUFBcmdDLEdBQ0FxakMsR0FBQTVQLEVBQUEsU0FBQXI4QixHQUEwQyxPQUFBK3JDLEdBQUFuakMsRUFBQTVJLE9BRTFDakMsS0FBQWtyQyxPQUFBLG1CQUFBcmdDLEdBQ0FxakMsR0FBQTVQLEVBQUEsU0FBQXI4QixHQUEwQyxPQUFBK3JDLEdBQUFuakMsRUFBQTVJLFFBSTFDMDRCLE9BQUEsV0FDQSxJQUFBakIsRUFBQTE1QixLQUFBazdCLE9BQUEvRixRQUNBaEYsRUFBQXNVLEdBQUEvSyxHQUNBM0ssRUFBQW9CLEtBQUFwQixpQkFDQSxHQUFBQSxFQUFBLENBRUEsSUFBQTlzQixFQUFBOHJDLEdBQUFoZixHQUNBbVUsRUFBQWxqQyxLQUNBMHVDLEVBQUF4TCxFQUFBd0wsUUFDQUMsRUFBQXpMLEVBQUF5TCxRQUNBLEdBRUFELEtBQUF6c0MsSUFBQStyQyxHQUFBVSxFQUFBenNDLEtBRUEwc0MsR0FBQTFzQyxHQUFBK3JDLEdBQUFXLEVBQUExc0MsR0FFQSxPQUFBa3VCLEVBR0EsSUFBQTRlLEVBQUEvdUMsS0FDQW1vQixFQUFBNG1CLEVBQUE1bUIsTUFDQXBuQixFQUFBZ3VDLEVBQUFodUMsS0FDQVosRUFBQSxNQUFBZ3dCLEVBQUFod0IsSUFHQTR1QixFQUFBdkIsS0FBQWtULEtBQUEzUixFQUFBdnlCLElBQUEsS0FBQXV5QixFQUFBLFFBQ0FvQixFQUFBaHdCLElBQ0Fnb0IsRUFBQWhvQixJQUNBZ3dCLEVBQUFkLGtCQUFBbEgsRUFBQWhvQixHQUFBa3ZCLGtCQUVBdkgsRUFBQS9tQixFQUFBWixHQUNBWSxFQUFBVSxLQUFBdEIsS0FFQWdvQixFQUFBaG9CLEdBQUFnd0IsRUFDQXB2QixFQUFBVSxLQUFBdEIsR0FFQUgsS0FBQTZILEtBQUE5RyxFQUFBRyxPQUFBOHRDLFNBQUFodkMsS0FBQTZILE1BQ0F3bUMsR0FBQWxtQixFQUFBcG5CLEVBQUEsR0FBQUEsRUFBQWYsS0FBQXdpQyxTQUlBclMsRUFBQXJtQixLQUFBeTFCLFdBQUEsRUFFQSxPQUFBcFAsR0FBQXVKLEtBQUEsS0FJQXVWLEdBQUEsQ0FDQVIsY0FLQSxTQUFBUyxHQUFBbk0sR0FFQSxJQUFBb00sRUFBQSxDQUNBcHZDLElBQUEsV0FBK0IsT0FBQTJxQixJQVEvQjl1QixPQUFBcUgsZUFBQTgvQixFQUFBLFNBQUFvTSxHQUtBcE0sRUFBQXFNLEtBQUEsQ0FDQXJoQixRQUNBN0UsU0FDQTRLLGdCQUNBdWIsZUFBQTVkLElBR0FzUixFQUFBL2dDLE9BQ0ErZ0MsRUFBQXVNLE9BQUFyZCxHQUNBOFEsRUFBQS80QixZQUdBKzRCLEVBQUF3TSxXQUFBLFNBQUFyMUIsR0FFQSxPQURBMkosR0FBQTNKLEdBQ0FBLEdBR0E2b0IsRUFBQTdrQixRQUFBdGlCLE9BQUFvSCxPQUFBLE1BQ0F3bkIsRUFBQXJQLFFBQUEsU0FBQXZRLEdBQ0FtNEIsRUFBQTdrQixRQUFBdFQsRUFBQSxLQUFBaFAsT0FBQW9ILE9BQUEsUUFLQSsvQixFQUFBN2tCLFFBQUE2VixNQUFBZ1AsRUFFQTdaLEVBQUE2WixFQUFBN2tCLFFBQUFvdUIsV0FBQTJDLElBRUF0QyxHQUFBNUosR0FDQW1LLEdBQUFuSyxHQUNBcUssR0FBQXJLLEdBQ0E4SyxHQUFBOUssR0FHQW1NLEdBQUFuTSxJQUVBbm5DLE9BQUFxSCxlQUFBOC9CLEdBQUFsbkMsVUFBQSxhQUNBa0UsSUFBQW90QixLQUdBdnhCLE9BQUFxSCxlQUFBOC9CLEdBQUFsbkMsVUFBQSxlQUNBa0UsSUFBQSxXQUVBLE9BQUFDLEtBQUFpaUMsUUFBQWppQyxLQUFBaWlDLE9BQUF1TixjQUtBNXpDLE9BQUFxSCxlQUFBOC9CLEdBQUEsMkJBQ0ExbUMsTUFBQStoQyxLQUdBMkUsR0FBQTVyQixRQUFBLFNBTUEsSUFBQWtVLEdBQUE1RCxFQUFBLGVBR0Fnb0IsR0FBQWhvQixFQUFBLHlDQUNBZ0UsR0FBQSxTQUFBanZCLEVBQUFvTyxFQUFBOGtDLEdBQ0EsTUFDQSxVQUFBQSxHQUFBRCxHQUFBanpDLElBQUEsV0FBQW9PLEdBQ0EsYUFBQThrQyxHQUFBLFdBQUFsekMsR0FDQSxZQUFBa3pDLEdBQUEsVUFBQWx6QyxHQUNBLFVBQUFrekMsR0FBQSxVQUFBbHpDLEdBSUFtekMsR0FBQWxvQixFQUFBLHdDQUVBbW9CLEdBQUFub0IsRUFBQSxzQ0FFQW9vQixHQUFBLFNBQUExdkMsRUFBQTlELEdBQ0EsT0FBQXl6QyxHQUFBenpDLElBQUEsVUFBQUEsRUFDQSxRQUVBLG9CQUFBOEQsR0FBQXl2QyxHQUFBdnpDLEdBQ0FBLEVBQ0EsUUFHQTB6QyxHQUFBdG9CLEVBQ0Esd1lBUUF1b0IsR0FBQSwrQkFFQUMsR0FBQSxTQUFBaHVDLEdBQ0EsWUFBQUEsRUFBQW9FLE9BQUEsY0FBQXBFLEVBQUFxRSxNQUFBLE1BR0E0cEMsR0FBQSxTQUFBanVDLEdBQ0EsT0FBQWd1QyxHQUFBaHVDLEtBQUFxRSxNQUFBLEVBQUFyRSxFQUFBZixRQUFBLElBR0E0dUMsR0FBQSxTQUFBamxDLEdBQ0EsYUFBQUEsSUFBQSxJQUFBQSxHQUtBLFNBQUFzbEMsR0FBQWhnQixHQUNBLElBQUFybUIsRUFBQXFtQixFQUFBcm1CLEtBQ0FzbUMsRUFBQWpnQixFQUNBa2dCLEVBQUFsZ0IsRUFDQSxNQUFBdEosRUFBQXdwQixFQUFBaGhCLG1CQUNBZ2hCLElBQUFoaEIsa0JBQUFtVCxPQUNBNk4sS0FBQXZtQyxPQUNBQSxFQUFBd21DLEdBQUFELEVBQUF2bUMsU0FHQSxNQUFBK2MsRUFBQXVwQixJQUFBN3NCLFFBQ0E2c0IsS0FBQXRtQyxPQUNBQSxFQUFBd21DLEdBQUF4bUMsRUFBQXNtQyxFQUFBdG1DLE9BR0EsT0FBQXltQyxHQUFBem1DLEVBQUEwbUMsWUFBQTFtQyxFQUFBdzRCLE9BR0EsU0FBQWdPLEdBQUF2Z0IsRUFBQXhNLEdBQ0EsT0FDQWl0QixZQUFBejNCLEdBQUFnWCxFQUFBeWdCLFlBQUFqdEIsRUFBQWl0QixhQUNBbE8sTUFBQXpiLEVBQUFrSixFQUFBdVMsT0FDQSxDQUFBdlMsRUFBQXVTLE1BQUEvZSxFQUFBK2UsT0FDQS9lLEVBQUErZSxPQUlBLFNBQUFpTyxHQUNBQyxFQUNBQyxHQUVBLE9BQUE1cEIsRUFBQTJwQixJQUFBM3BCLEVBQUE0cEIsR0FDQTEzQixHQUFBeTNCLEVBQUFFLEdBQUFELElBR0EsR0FHQSxTQUFBMTNCLEdBQUE5WSxFQUFBZ0csR0FDQSxPQUFBaEcsRUFBQWdHLEVBQUFoRyxFQUFBLElBQUFnRyxFQUFBaEcsRUFBQWdHLEdBQUEsR0FHQSxTQUFBeXFDLEdBQUFyMEMsR0FDQSxPQUFBaVQsTUFBQXpSLFFBQUF4QixHQUNBczBDLEdBQUF0MEMsR0FFQTBCLEVBQUExQixHQUNBdTBDLEdBQUF2MEMsR0FFQSxrQkFBQUEsRUFDQUEsRUFHQSxHQUdBLFNBQUFzMEMsR0FBQXQwQyxHQUdBLElBRkEsSUFDQXcwQyxFQURBNWdDLEVBQUEsR0FFQWpQLEVBQUEsRUFBQUMsRUFBQTVFLEVBQUE2RSxPQUFtQ0YsRUFBQUMsRUFBT0QsSUFDMUM2bEIsRUFBQWdxQixFQUFBSCxHQUFBcjBDLEVBQUEyRSxNQUFBLEtBQUE2dkMsSUFDQTVnQyxJQUFnQkEsR0FBQSxLQUNoQkEsR0FBQTRnQyxHQUdBLE9BQUE1Z0MsRUFHQSxTQUFBMmdDLEdBQUF2MEMsR0FDQSxJQUFBNFQsRUFBQSxHQUNBLFFBQUE5UCxLQUFBOUQsRUFDQUEsRUFBQThELEtBQ0E4UCxJQUFnQkEsR0FBQSxLQUNoQkEsR0FBQTlQLEdBR0EsT0FBQThQLEVBS0EsSUFBQTZnQyxHQUFBLENBQ0FDLElBQUEsNkJBQ0FDLEtBQUEsc0NBR0FDLEdBQUF4cEIsRUFDQSxzbkJBZUF5cEIsR0FBQXpwQixFQUNBLGtOQUdBLEdBR0EwcEIsR0FBQSxTQUFBMzBDLEdBQStCLGNBQUFBLEdBRS9CNHVCLEdBQUEsU0FBQTV1QixHQUNBLE9BQUF5MEMsR0FBQXowQyxJQUFBMDBDLEdBQUExMEMsSUFHQSxTQUFBK3VCLEdBQUEvdUIsR0FDQSxPQUFBMDBDLEdBQUExMEMsR0FDQSxNQUlBLFNBQUFBLEVBQ0EsWUFEQSxFQUtBLElBQUE0MEMsR0FBQXgxQyxPQUFBb0gsT0FBQSxNQUNBLFNBQUFzb0IsR0FBQTl1QixHQUVBLElBQUE0dkIsRUFDQSxTQUVBLEdBQUFoQixHQUFBNXVCLEdBQ0EsU0FJQSxHQUZBQSxJQUFBbWUsY0FFQSxNQUFBeTJCLEdBQUE1MEMsR0FDQSxPQUFBNDBDLEdBQUE1MEMsR0FFQSxJQUFBa2IsRUFBQTVNLFNBQUFFLGNBQUF4TyxHQUNBLE9BQUFBLEVBQUF3WCxRQUFBLFFBRUFvOUIsR0FBQTUwQyxHQUNBa2IsRUFBQTFMLGNBQUFyRixPQUFBMHFDLG9CQUNBMzVCLEVBQUExTCxjQUFBckYsT0FBQTJxQyxZQUdBRixHQUFBNTBDLEdBQUEscUJBQUFrZSxLQUFBaEQsRUFBQTFiLFlBSUEsSUFBQXUxQyxHQUFBOXBCLEVBQUEsNkNBT0EsU0FBQWhGLEdBQUEvSyxHQUNBLHFCQUFBQSxFQUFBLENBQ0EsSUFBQW9PLEVBQUFoYixTQUFBMG1DLGNBQUE5NUIsR0FDQSxPQUFBb08sR0FJQWhiLFNBQUFFLGNBQUEsT0FJQSxPQUFBME0sRUFNQSxTQUFBKzVCLEdBQUFDLEVBQUF2aEIsR0FDQSxJQUFBdEIsRUFBQS9qQixTQUFBRSxjQUFBMG1DLEdBQ0EsaUJBQUFBLEVBQ0E3aUIsR0FHQXNCLEVBQUFybUIsTUFBQXFtQixFQUFBcm1CLEtBQUF5dUIsWUFBQXA4QixJQUFBZzBCLEVBQUFybUIsS0FBQXl1QixNQUFBb1osVUFDQTlpQixFQUFBK2lCLGFBQUEsdUJBRUEvaUIsR0FHQSxTQUFBZ2pCLEdBQUFDLEVBQUFKLEdBQ0EsT0FBQTVtQyxTQUFBK21DLGdCQUFBZixHQUFBZ0IsR0FBQUosR0FHQSxTQUFBOXRCLEdBQUF0RyxHQUNBLE9BQUF4UyxTQUFBOFksZUFBQXRHLEdBR0EsU0FBQXkwQixHQUFBejBCLEdBQ0EsT0FBQXhTLFNBQUFpbkMsY0FBQXowQixHQUdBLFNBQUEwMEIsR0FBQTVCLEVBQUE2QixFQUFBQyxHQUNBOUIsRUFBQTRCLGFBQUFDLEVBQUFDLEdBR0EsU0FBQXpuQyxHQUFBa1osRUFBQW9NLEdBQ0FwTSxFQUFBbFosWUFBQXNsQixHQUdBLFNBQUF2bEIsR0FBQW1aLEVBQUFvTSxHQUNBcE0sRUFBQW5aLFlBQUF1bEIsR0FHQSxTQUFBcWdCLEdBQUF6c0IsR0FDQSxPQUFBQSxFQUFBeXNCLFdBR0EsU0FBQStCLEdBQUF4dUIsR0FDQSxPQUFBQSxFQUFBd3VCLFlBR0EsU0FBQVQsR0FBQS90QixHQUNBLE9BQUFBLEVBQUErdEIsUUFHQSxTQUFBVSxHQUFBenVCLEVBQUFyRyxHQUNBcUcsRUFBQTB1QixZQUFBLzBCLEVBR0EsU0FBQWcxQixHQUFBM3VCLEVBQUE0dUIsR0FDQTV1QixFQUFBaXVCLGFBQUFXLEVBQUEsSUFHQSxJQUFBQyxHQUFBNTJDLE9BQUErcUIsT0FBQSxDQUNBM2IsY0FBQXltQyxHQUNBSSxtQkFDQWp1QixrQkFDQW11QixpQkFDQUMsZ0JBQ0F2bkMsZUFDQUQsZUFDQTRsQyxjQUNBK0IsZUFDQVQsV0FDQVUsa0JBQ0FFLG1CQUtBcFAsR0FBQSxDQUNBbGdDLE9BQUEsU0FBQXVsQixFQUFBNEgsR0FDQXNpQixHQUFBdGlCLElBRUE1QixPQUFBLFNBQUFzUixFQUFBMVAsR0FDQTBQLEVBQUEvMUIsS0FBQW81QixNQUFBL1MsRUFBQXJtQixLQUFBbzVCLE1BQ0F1UCxHQUFBNVMsR0FBQSxHQUNBNFMsR0FBQXRpQixLQUdBaVEsUUFBQSxTQUFBalEsR0FDQXNpQixHQUFBdGlCLEdBQUEsS0FJQSxTQUFBc2lCLEdBQUF0aUIsRUFBQXVpQixHQUNBLElBQUF2eUMsRUFBQWd3QixFQUFBcm1CLEtBQUFvNUIsSUFDQSxHQUFBcmMsRUFBQTFtQixHQUFBLENBRUEsSUFBQXN5QixFQUFBdEMsRUFBQXJCLFFBQ0FvVSxFQUFBL1MsRUFBQWQsbUJBQUFjLEVBQUF0QixJQUNBOGpCLEVBQUFsZ0IsRUFBQXFULE1BQ0E0TSxFQUNBcGpDLE1BQUF6UixRQUFBODBDLEVBQUF4eUMsSUFDQTJuQixFQUFBNnFCLEVBQUF4eUMsR0FBQStpQyxHQUNLeVAsRUFBQXh5QyxLQUFBK2lDLElBQ0x5UCxFQUFBeHlDLFFBQUFoRSxHQUdBZzBCLEVBQUFybUIsS0FBQThvQyxTQUNBdGpDLE1BQUF6UixRQUFBODBDLEVBQUF4eUMsSUFFT3d5QyxFQUFBeHlDLEdBQUE2VCxRQUFBa3ZCLEdBQUEsR0FFUHlQLEVBQUF4eUMsR0FBQXNCLEtBQUF5aEMsR0FIQXlQLEVBQUF4eUMsR0FBQSxDQUFBK2lDLEdBTUF5UCxFQUFBeHlDLEdBQUEraUMsR0FpQkEsSUFBQTJQLEdBQUEsSUFBQWxrQixHQUFBLE1BQWdDLElBRWhDbUUsR0FBQSxrREFFQSxTQUFBZ2dCLEdBQUE3eUMsRUFBQWdHLEdBQ0EsT0FDQWhHLEVBQUFFLE1BQUE4RixFQUFBOUYsTUFFQUYsRUFBQXpELE1BQUF5SixFQUFBekosS0FDQXlELEVBQUF3dkIsWUFBQXhwQixFQUFBd3BCLFdBQ0E1SSxFQUFBNW1CLEVBQUE2SixRQUFBK2MsRUFBQTVnQixFQUFBNkQsT0FDQWlwQyxHQUFBOXlDLEVBQUFnRyxJQUVBNmdCLEVBQUE3bUIsRUFBQTR2QixxQkFDQTV2QixFQUFBK3VCLGVBQUEvb0IsRUFBQStvQixjQUNBcEksRUFBQTNnQixFQUFBK29CLGFBQUFyWixRQU1BLFNBQUFvOUIsR0FBQTl5QyxFQUFBZ0csR0FDQSxhQUFBaEcsRUFBQXpELElBQTBCLFNBQzFCLElBQUF3RSxFQUNBZ3lDLEVBQUFuc0IsRUFBQTdsQixFQUFBZixFQUFBNkosT0FBQStjLEVBQUE3bEIsSUFBQXUzQixRQUFBdjNCLEVBQUE0SixLQUNBcW9DLEVBQUFwc0IsRUFBQTdsQixFQUFBaUYsRUFBQTZELE9BQUErYyxFQUFBN2xCLElBQUF1M0IsUUFBQXYzQixFQUFBNEosS0FDQSxPQUFBb29DLElBQUFDLEdBQUExQixHQUFBeUIsSUFBQXpCLEdBQUEwQixHQUdBLFNBQUFDLEdBQUF0a0IsRUFBQXVrQixFQUFBQyxHQUNBLElBQUFweUMsRUFBQWIsRUFDQSthLEVBQUEsR0FDQSxJQUFBbGEsRUFBQW15QyxFQUFvQm55QyxHQUFBb3lDLElBQWFweUMsRUFDakNiLEVBQUF5dUIsRUFBQTV0QixHQUFBYixJQUNBMG1CLEVBQUExbUIsS0FBcUIrYSxFQUFBL2EsR0FBQWEsR0FFckIsT0FBQWthLEVBR0EsU0FBQW00QixHQUFBQyxHQUNBLElBQUF0eUMsRUFBQXVCLEVBQ0FnakMsRUFBQSxHQUVBOWIsRUFBQTZwQixFQUFBN3BCLFFBQ0Erb0IsRUFBQWMsRUFBQWQsUUFFQSxJQUFBeHhDLEVBQUEsRUFBYUEsRUFBQTh4QixHQUFBNXhCLFNBQWtCRixFQUUvQixJQURBdWtDLEVBQUF6UyxHQUFBOXhCLElBQUEsR0FDQXVCLEVBQUEsRUFBZUEsRUFBQWtuQixFQUFBdm9CLFNBQW9CcUIsRUFDbkNza0IsRUFBQTRDLEVBQUFsbkIsR0FBQXV3QixHQUFBOXhCLE1BQ0F1a0MsRUFBQXpTLEdBQUE5eEIsSUFBQVMsS0FBQWdvQixFQUFBbG5CLEdBQUF1d0IsR0FBQTl4QixLQUtBLFNBQUF1eUMsRUFBQTFrQixHQUNBLFdBQUFGLEdBQUE2akIsRUFBQWQsUUFBQTdpQixHQUFBbFUsY0FBQSxHQUEyRCxRQUFBeGUsRUFBQTB5QixHQUczRCxTQUFBMmtCLEVBQUFDLEVBQUE5VSxHQUNBLFNBQUE5RyxJQUNBLE1BQUFBLEVBQUE4RyxXQUNBK1UsRUFBQUQsR0FJQSxPQURBNWIsRUFBQThHLFlBQ0E5RyxFQUdBLFNBQUE2YixFQUFBaDhCLEdBQ0EsSUFBQTZMLEVBQUFpdkIsRUFBQXBDLFdBQUExNEIsR0FFQW1QLEVBQUF0RCxJQUNBaXZCLEVBQUEvbkMsWUFBQThZLEVBQUE3TCxHQXNCQSxTQUFBaThCLEVBQ0F4akIsRUFDQXlqQixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBeHRDLEdBWUEsR0FWQXFnQixFQUFBc0osRUFBQXRCLE1BQUFoSSxFQUFBbXRCLEtBTUE3akIsRUFBQTZqQixFQUFBeHRDLEdBQUEwcEIsR0FBQUMsSUFHQUEsRUFBQVgsY0FBQXVrQixHQUNBdlQsRUFBQXJRLEVBQUF5akIsRUFBQUMsRUFBQUMsR0FBQSxDQUlBLElBQUFocUMsRUFBQXFtQixFQUFBcm1CLEtBQ0E4a0IsRUFBQXVCLEVBQUF2QixTQUNBcHlCLEVBQUEyekIsRUFBQTN6QixJQUNBcXFCLEVBQUFycUIsSUFlQTJ6QixFQUFBdEIsSUFBQXNCLEVBQUFsQixHQUNBdWpCLEVBQUFYLGdCQUFBMWhCLEVBQUFsQixHQUFBenlCLEdBQ0FnMkMsRUFBQXhuQyxjQUFBeE8sRUFBQTJ6QixHQUNBOGpCLEVBQUE5akIsR0FJQStqQixFQUFBL2pCLEVBQUF2QixFQUFBZ2xCLEdBQ0Evc0IsRUFBQS9jLElBQ0FxcUMsRUFBQWhrQixFQUFBeWpCLEdBRUE3VCxFQUFBOFQsRUFBQTFqQixFQUFBdEIsSUFBQWlsQixJQU1LaHRCLEVBQUFxSixFQUFBVixZQUNMVSxFQUFBdEIsSUFBQTJqQixFQUFBVCxjQUFBNWhCLEVBQUE3UyxNQUNBeWlCLEVBQUE4VCxFQUFBMWpCLEVBQUF0QixJQUFBaWxCLEtBRUEzakIsRUFBQXRCLElBQUEyakIsRUFBQTV1QixlQUFBdU0sRUFBQTdTLE1BQ0F5aUIsRUFBQThULEVBQUExakIsRUFBQXRCLElBQUFpbEIsS0FJQSxTQUFBdFQsRUFBQXJRLEVBQUF5akIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBOXlDLEVBQUFtdkIsRUFBQXJtQixLQUNBLEdBQUErYyxFQUFBN2xCLEdBQUEsQ0FDQSxJQUFBb3pDLEVBQUF2dEIsRUFBQXNKLEVBQUFkLG9CQUFBcnVCLEVBQUF1K0IsVUFRQSxHQVBBMVksRUFBQTdsQixJQUFBZ3lCLE9BQUFuTSxFQUFBN2xCLElBQUE4ZSxPQUNBOWUsRUFBQW12QixHQUFBLEdBTUF0SixFQUFBc0osRUFBQWQsbUJBTUEsT0FMQWdsQixFQUFBbGtCLEVBQUF5akIsR0FDQTdULEVBQUE4VCxFQUFBMWpCLEVBQUF0QixJQUFBaWxCLEdBQ0FodEIsRUFBQXN0QixJQUNBRSxFQUFBbmtCLEVBQUF5akIsRUFBQUMsRUFBQUMsSUFFQSxHQUtBLFNBQUFPLEVBQUFsa0IsRUFBQXlqQixHQUNBL3NCLEVBQUFzSixFQUFBcm1CLEtBQUF5cUMsaUJBQ0FYLEVBQUFueUMsS0FBQWdDLE1BQUFtd0MsRUFBQXpqQixFQUFBcm1CLEtBQUF5cUMsZUFDQXBrQixFQUFBcm1CLEtBQUF5cUMsY0FBQSxNQUVBcGtCLEVBQUF0QixJQUFBc0IsRUFBQWQsa0JBQUFpWCxJQUNBa08sRUFBQXJrQixJQUNBZ2tCLEVBQUFoa0IsRUFBQXlqQixHQUNBSyxFQUFBOWpCLEtBSUFzaUIsR0FBQXRpQixHQUVBeWpCLEVBQUFueUMsS0FBQTB1QixJQUlBLFNBQUFta0IsRUFBQW5rQixFQUFBeWpCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQTl5QyxFQUtBeXpDLEVBQUF0a0IsRUFDQSxNQUFBc2tCLEVBQUFwbEIsa0JBRUEsR0FEQW9sQixJQUFBcGxCLGtCQUFBbVQsT0FDQTNiLEVBQUE3bEIsRUFBQXl6QyxFQUFBM3FDLE9BQUErYyxFQUFBN2xCLElBQUEwekMsWUFBQSxDQUNBLElBQUExekMsRUFBQSxFQUFtQkEsRUFBQXVrQyxFQUFBb1AsU0FBQXp6QyxTQUF5QkYsRUFDNUN1a0MsRUFBQW9QLFNBQUEzekMsR0FBQTZ4QyxHQUFBNEIsR0FFQWIsRUFBQW55QyxLQUFBZ3pDLEdBQ0EsTUFLQTFVLEVBQUE4VCxFQUFBMWpCLEVBQUF0QixJQUFBaWxCLEdBR0EsU0FBQS9ULEVBQUF4YyxFQUFBc0wsRUFBQStsQixHQUNBL3RCLEVBQUF0RCxLQUNBc0QsRUFBQSt0QixHQUNBcEMsRUFBQXBDLFdBQUF3RSxLQUFBcnhCLEdBQ0FpdkIsRUFBQVIsYUFBQXp1QixFQUFBc0wsRUFBQStsQixHQUdBcEMsRUFBQWhvQyxZQUFBK1ksRUFBQXNMLElBS0EsU0FBQXFsQixFQUFBL2pCLEVBQUF2QixFQUFBZ2xCLEdBQ0EsR0FBQXRrQyxNQUFBelIsUUFBQSt3QixHQUFBLENBQ1UsRUFHVixRQUFBNXRCLEVBQUEsRUFBcUJBLEVBQUE0dEIsRUFBQTF0QixTQUFxQkYsRUFDMUMyeUMsRUFBQS9rQixFQUFBNXRCLEdBQUE0eUMsRUFBQXpqQixFQUFBdEIsSUFBQSxRQUFBRCxFQUFBNXRCLFFBRUtnbUIsRUFBQW1KLEVBQUE3UyxPQUNMazFCLEVBQUFob0MsWUFBQTJsQixFQUFBdEIsSUFBQTJqQixFQUFBNXVCLGVBQUF6ZCxPQUFBZ3FCLEVBQUE3UyxRQUlBLFNBQUFrM0IsRUFBQXJrQixHQUNBLE1BQUFBLEVBQUFkLGtCQUNBYyxJQUFBZCxrQkFBQW1ULE9BRUEsT0FBQTNiLEVBQUFzSixFQUFBM3pCLEtBR0EsU0FBQTIzQyxFQUFBaGtCLEVBQUF5akIsR0FDQSxRQUFBdE8sRUFBQSxFQUFxQkEsRUFBQUMsRUFBQXZpQyxPQUFBOUIsU0FBeUJva0MsRUFDOUNDLEVBQUF2aUMsT0FBQXNpQyxHQUFBdU4sR0FBQTFpQixHQUVBbnZCLEVBQUFtdkIsRUFBQXJtQixLQUFBa3BCLEtBQ0FuTSxFQUFBN2xCLEtBQ0E2bEIsRUFBQTdsQixFQUFBZ0MsU0FBNEJoQyxFQUFBZ0MsT0FBQTZ2QyxHQUFBMWlCLEdBQzVCdEosRUFBQTdsQixFQUFBKytCLFNBQTRCNlQsRUFBQW55QyxLQUFBMHVCLElBTzVCLFNBQUE4akIsRUFBQTlqQixHQUNBLElBQUFudkIsRUFDQSxHQUFBNmxCLEVBQUE3bEIsRUFBQW12QixFQUFBZixXQUNBb2pCLEVBQUFGLGNBQUFuaUIsRUFBQXRCLElBQUE3dEIsT0FDSyxDQUNMLElBQUE2ekMsRUFBQTFrQixFQUNBLE1BQUEwa0IsRUFDQWh1QixFQUFBN2xCLEVBQUE2ekMsRUFBQS9sQixVQUFBakksRUFBQTdsQixJQUFBbzBCLFNBQUEwSixXQUNBMFQsRUFBQUYsY0FBQW5pQixFQUFBdEIsSUFBQTd0QixHQUVBNnpDLElBQUF0eEIsT0FJQXNELEVBQUE3bEIsRUFBQTIrQixLQUNBMytCLElBQUFtdkIsRUFBQXJCLFNBQ0E5dEIsSUFBQW12QixFQUFBakIsV0FDQXJJLEVBQUE3bEIsSUFBQW8wQixTQUFBMEosV0FFQTBULEVBQUFGLGNBQUFuaUIsRUFBQXRCLElBQUE3dEIsR0FJQSxTQUFBOHpDLEVBQUFqQixFQUFBQyxFQUFBM1UsRUFBQTRWLEVBQUEzQixFQUFBUSxHQUNBLEtBQVVtQixHQUFBM0IsSUFBb0IyQixFQUM5QnBCLEVBQUF4VSxFQUFBNFYsR0FBQW5CLEVBQUFDLEVBQUFDLEdBQUEsRUFBQTNVLEVBQUE0VixHQUlBLFNBQUFDLEVBQUE3a0IsR0FDQSxJQUFBbnZCLEVBQUF1QixFQUNBdUgsRUFBQXFtQixFQUFBcm1CLEtBQ0EsR0FBQStjLEVBQUEvYyxHQUVBLElBREErYyxFQUFBN2xCLEVBQUE4SSxFQUFBa3BCLE9BQUFuTSxFQUFBN2xCLElBQUFvL0IsVUFBeURwL0IsRUFBQW12QixHQUN6RG52QixFQUFBLEVBQWlCQSxFQUFBdWtDLEVBQUFuRixRQUFBbC9CLFNBQXdCRixFQUFPdWtDLEVBQUFuRixRQUFBcC9CLEdBQUFtdkIsR0FFaEQsR0FBQXRKLEVBQUE3bEIsRUFBQW12QixFQUFBdkIsVUFDQSxJQUFBcnNCLEVBQUEsRUFBaUJBLEVBQUE0dEIsRUFBQXZCLFNBQUExdEIsU0FBMkJxQixFQUM1Q3l5QyxFQUFBN2tCLEVBQUF2QixTQUFBcnNCLElBS0EsU0FBQTB5QyxFQUFBcEIsRUFBQTFVLEVBQUE0VixFQUFBM0IsR0FDQSxLQUFVMkIsR0FBQTNCLElBQW9CMkIsRUFBQSxDQUM5QixJQUFBRyxFQUFBL1YsRUFBQTRWLEdBQ0FsdUIsRUFBQXF1QixLQUNBcnVCLEVBQUFxdUIsRUFBQTE0QyxNQUNBMjRDLEVBQUFELEdBQ0FGLEVBQUFFLElBRUF4QixFQUFBd0IsRUFBQXJtQixPQU1BLFNBQUFzbUIsRUFBQWhsQixFQUFBaWxCLEdBQ0EsR0FBQXZ1QixFQUFBdXVCLElBQUF2dUIsRUFBQXNKLEVBQUFybUIsTUFBQSxDQUNBLElBQUE5SSxFQUNBMjlCLEVBQUE0RyxFQUFBemQsT0FBQTVtQixPQUFBLEVBYUEsSUFaQTJsQixFQUFBdXVCLEdBR0FBLEVBQUF6VyxhQUdBeVcsRUFBQTVCLEVBQUFyakIsRUFBQXRCLElBQUE4UCxHQUdBOVgsRUFBQTdsQixFQUFBbXZCLEVBQUFkLG9CQUFBeEksRUFBQTdsQixJQUFBd2hDLFNBQUEzYixFQUFBN2xCLEVBQUE4SSxPQUNBcXJDLEVBQUFuMEMsRUFBQW8wQyxHQUVBcDBDLEVBQUEsRUFBaUJBLEVBQUF1a0MsRUFBQXpkLE9BQUE1bUIsU0FBdUJGLEVBQ3hDdWtDLEVBQUF6ZCxPQUFBOW1CLEdBQUFtdkIsRUFBQWlsQixHQUVBdnVCLEVBQUE3bEIsRUFBQW12QixFQUFBcm1CLEtBQUFrcEIsT0FBQW5NLEVBQUE3bEIsSUFBQThtQixRQUNBOW1CLEVBQUFtdkIsRUFBQWlsQixHQUVBQSxTQUdBMUIsRUFBQXZqQixFQUFBdEIsS0FJQSxTQUFBd21CLEVBQUF4QixFQUFBeUIsRUFBQUMsRUFBQTNCLEVBQUE0QixHQUNBLElBUUFDLEVBQUFDLEVBQUFDLEVBQUE3QixFQVJBOEIsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUFSLEVBQUFwMEMsT0FBQSxFQUNBNjBDLEVBQUFULEVBQUEsR0FDQVUsRUFBQVYsRUFBQVEsR0FDQUcsRUFBQVYsRUFBQXIwQyxPQUFBLEVBQ0FnMUMsRUFBQVgsRUFBQSxHQUNBWSxFQUFBWixFQUFBVSxHQU1BRyxHQUFBWixFQU1BLE1BQUFJLEdBQUFFLEdBQUFELEdBQUFJLEVBQ0FydkIsRUFBQW12QixHQUNBQSxFQUFBVCxJQUFBTSxHQUNPaHZCLEVBQUFvdkIsR0FDUEEsRUFBQVYsSUFBQVEsR0FDT2hELEdBQUFpRCxFQUFBRyxJQUNQRyxFQUFBTixFQUFBRyxFQUFBdEMsRUFBQTJCLEVBQUFNLEdBQ0FFLEVBQUFULElBQUFNLEdBQ0FNLEVBQUFYLElBQUFNLElBQ08vQyxHQUFBa0QsRUFBQUcsSUFDUEUsRUFBQUwsRUFBQUcsRUFBQXZDLEVBQUEyQixFQUFBVSxHQUNBRCxFQUFBVixJQUFBUSxHQUNBSyxFQUFBWixJQUFBVSxJQUNPbkQsR0FBQWlELEVBQUFJLElBQ1BFLEVBQUFOLEVBQUFJLEVBQUF2QyxFQUFBMkIsRUFBQVUsR0FDQUcsR0FBQTVELEVBQUFSLGFBQUE2QixFQUFBa0MsRUFBQWxuQixJQUFBMmpCLEVBQUFMLFlBQUE2RCxFQUFBbm5CLE1BQ0FrbkIsRUFBQVQsSUFBQU0sR0FDQU8sRUFBQVosSUFBQVUsSUFDT25ELEdBQUFrRCxFQUFBRSxJQUNQRyxFQUFBTCxFQUFBRSxFQUFBdEMsRUFBQTJCLEVBQUFNLEdBQ0FPLEdBQUE1RCxFQUFBUixhQUFBNkIsRUFBQW1DLEVBQUFubkIsSUFBQWtuQixFQUFBbG5CLEtBQ0FtbkIsRUFBQVYsSUFBQVEsR0FDQUksRUFBQVgsSUFBQU0sS0FFQWp2QixFQUFBNnVCLEtBQW1DQSxFQUFBdkMsR0FBQW9DLEVBQUFNLEVBQUFFLElBQ25DSixFQUFBN3VCLEVBQUFxdkIsRUFBQS8xQyxLQUNBczFDLEVBQUFTLEVBQUEvMUMsS0FDQW0yQyxFQUFBSixFQUFBWixFQUFBTSxFQUFBRSxHQUNBbHZCLEVBQUE4dUIsR0FDQS9CLEVBQUF1QyxFQUFBdEMsRUFBQUMsRUFBQWtDLEVBQUFsbkIsS0FBQSxFQUFBMG1CLEVBQUFNLElBRUFGLEVBQUFMLEVBQUFJLEdBQ0E1QyxHQUFBNkMsRUFBQU8sSUFDQUcsRUFBQVYsRUFBQU8sRUFBQXRDLEVBQUEyQixFQUFBTSxHQUNBUCxFQUFBSSxRQUFBdjVDLEVBQ0FpNkMsR0FBQTVELEVBQUFSLGFBQUE2QixFQUFBOEIsRUFBQTltQixJQUFBa25CLEVBQUFsbkIsTUFHQThrQixFQUFBdUMsRUFBQXRDLEVBQUFDLEVBQUFrQyxFQUFBbG5CLEtBQUEsRUFBQTBtQixFQUFBTSxJQUdBSyxFQUFBWCxJQUFBTSxJQUdBRCxFQUFBRSxHQUNBaEMsRUFBQWx0QixFQUFBMnVCLEVBQUFVLEVBQUEsU0FBQVYsRUFBQVUsRUFBQSxHQUFBcG5CLElBQ0FpbUIsRUFBQWpCLEVBQUFDLEVBQUF5QixFQUFBTSxFQUFBSSxFQUFBckMsSUFDS2lDLEVBQUFJLEdBQ0xoQixFQUFBcEIsRUFBQXlCLEVBQUFNLEVBQUFFLEdBc0JBLFNBQUFRLEVBQUEzeUIsRUFBQTJ4QixFQUFBcnNCLEVBQUFzdEIsR0FDQSxRQUFBdjFDLEVBQUFpb0IsRUFBdUJqb0IsRUFBQXUxQyxFQUFTdjFDLElBQUEsQ0FDaEMsSUFBQWlZLEVBQUFxOEIsRUFBQXQwQyxHQUNBLEdBQUE2bEIsRUFBQTVOLElBQUE2NUIsR0FBQW52QixFQUFBMUssR0FBMkMsT0FBQWpZLEdBSTNDLFNBQUFxMUMsRUFDQXhXLEVBQ0ExUCxFQUNBeWpCLEVBQ0FJLEVBQ0F4dEMsRUFDQWd2QyxHQUVBLEdBQUEzVixJQUFBMVAsRUFBQSxDQUlBdEosRUFBQXNKLEVBQUF0QixNQUFBaEksRUFBQW10QixLQUVBN2pCLEVBQUE2akIsRUFBQXh0QyxHQUFBMHBCLEdBQUFDLElBR0EsSUFBQXRCLEVBQUFzQixFQUFBdEIsSUFBQWdSLEVBQUFoUixJQUVBLEdBQUEvSCxFQUFBK1ksRUFBQWhRLG9CQUNBaEosRUFBQXNKLEVBQUFuQixhQUFBeVUsVUFDQStTLEVBQUEzVyxFQUFBaFIsSUFBQXNCLEVBQUF5akIsR0FFQXpqQixFQUFBTixvQkFBQSxPQVNBLEdBQUEvSSxFQUFBcUosRUFBQVosV0FDQXpJLEVBQUErWSxFQUFBdFEsV0FDQVksRUFBQWh3QixNQUFBMC9CLEVBQUExL0IsTUFDQTJtQixFQUFBcUosRUFBQVQsV0FBQTVJLEVBQUFxSixFQUFBUixTQUVBUSxFQUFBZCxrQkFBQXdRLEVBQUF4USxzQkFMQSxDQVNBLElBQUFydUIsRUFDQThJLEVBQUFxbUIsRUFBQXJtQixLQUNBK2MsRUFBQS9jLElBQUErYyxFQUFBN2xCLEVBQUE4SSxFQUFBa3BCLE9BQUFuTSxFQUFBN2xCLElBQUF5K0IsV0FDQXorQixFQUFBNitCLEVBQUExUCxHQUdBLElBQUFtbEIsRUFBQXpWLEVBQUFqUixTQUNBc21CLEVBQUEva0IsRUFBQXZCLFNBQ0EsR0FBQS9ILEVBQUEvYyxJQUFBMHFDLEVBQUFya0IsR0FBQSxDQUNBLElBQUFudkIsRUFBQSxFQUFpQkEsRUFBQXVrQyxFQUFBaFgsT0FBQXJ0QixTQUF1QkYsRUFBT3VrQyxFQUFBaFgsT0FBQXZ0QixHQUFBNitCLEVBQUExUCxHQUMvQ3RKLEVBQUE3bEIsRUFBQThJLEVBQUFrcEIsT0FBQW5NLEVBQUE3bEIsSUFBQXV0QixTQUF3RHZ0QixFQUFBNitCLEVBQUExUCxHQUV4RHZKLEVBQUF1SixFQUFBN1MsTUFDQXVKLEVBQUF5dUIsSUFBQXp1QixFQUFBcXVCLEdBQ0FJLElBQUFKLEdBQTJCRyxFQUFBeG1CLEVBQUF5bUIsRUFBQUosRUFBQXRCLEVBQUE0QixHQUNwQjN1QixFQUFBcXVCLElBSVBydUIsRUFBQWdaLEVBQUF2aUIsT0FBbUNrMUIsRUFBQUosZUFBQXZqQixFQUFBLElBQ25DaW1CLEVBQUFqbUIsRUFBQSxLQUFBcW1CLEVBQUEsRUFBQUEsRUFBQWgwQyxPQUFBLEVBQUEweUMsSUFDTy9zQixFQUFBeXVCLEdBQ1BMLEVBQUFwbUIsRUFBQXltQixFQUFBLEVBQUFBLEVBQUFwMEMsT0FBQSxHQUNPMmxCLEVBQUFnWixFQUFBdmlCLE9BQ1BrMUIsRUFBQUosZUFBQXZqQixFQUFBLElBRUtnUixFQUFBdmlCLE9BQUE2UyxFQUFBN1MsTUFDTGsxQixFQUFBSixlQUFBdmpCLEVBQUFzQixFQUFBN1MsTUFFQXVKLEVBQUEvYyxJQUNBK2MsRUFBQTdsQixFQUFBOEksRUFBQWtwQixPQUFBbk0sRUFBQTdsQixJQUFBeTFDLFlBQTJEejFDLEVBQUE2K0IsRUFBQTFQLEtBSTNELFNBQUF1bUIsRUFBQXZtQixFQUFBNW1CLEVBQUFvdEMsR0FHQSxHQUFBN3ZCLEVBQUE2dkIsSUFBQTl2QixFQUFBc0osRUFBQTVNLFFBQ0E0TSxFQUFBNU0sT0FBQXpaLEtBQUF5cUMsY0FBQWhyQyxPQUVBLFFBQUF2SSxFQUFBLEVBQXFCQSxFQUFBdUksRUFBQXJJLFNBQWtCRixFQUN2Q3VJLEVBQUF2SSxHQUFBOEksS0FBQWtwQixLQUFBK00sT0FBQXgyQixFQUFBdkksSUFLQSxJQUtBNDFDLEVBQUFudkIsRUFBQSwyQ0FHQSxTQUFBK3VCLEVBQUEzbkIsRUFBQXNCLEVBQUF5akIsRUFBQWlELEdBQ0EsSUFBQTcxQyxFQUNBeEUsRUFBQTJ6QixFQUFBM3pCLElBQ0FzTixFQUFBcW1CLEVBQUFybUIsS0FDQThrQixFQUFBdUIsRUFBQXZCLFNBSUEsR0FIQWlvQixLQUFBL3NDLEtBQUFvNEIsSUFDQS9SLEVBQUF0QixNQUVBL0gsRUFBQXFKLEVBQUFWLFlBQUE1SSxFQUFBc0osRUFBQW5CLGNBRUEsT0FEQW1CLEVBQUFOLG9CQUFBLEdBQ0EsRUFRQSxHQUFBaEosRUFBQS9jLEtBQ0ErYyxFQUFBN2xCLEVBQUE4SSxFQUFBa3BCLE9BQUFuTSxFQUFBN2xCLElBQUE4ZSxPQUFzRDllLEVBQUFtdkIsR0FBQSxHQUN0RHRKLEVBQUE3bEIsRUFBQW12QixFQUFBZCxvQkFHQSxPQURBZ2xCLEVBQUFsa0IsRUFBQXlqQixJQUNBLEVBR0EsR0FBQS9zQixFQUFBcnFCLEdBQUEsQ0FDQSxHQUFBcXFCLEVBQUErSCxHQUVBLEdBQUFDLEVBQUFpb0IsZ0JBSUEsR0FBQWp3QixFQUFBN2xCLEVBQUE4SSxJQUFBK2MsRUFBQTdsQixJQUFBazdCLFdBQUFyVixFQUFBN2xCLElBQUErMUMsWUFDQSxHQUFBLzFDLElBQUE2dEIsRUFBQWtvQixVQVdBLGFBRVcsQ0FJWCxJQUZBLElBQUFDLEdBQUEsRUFDQTNHLEVBQUF4aEIsRUFBQW9vQixXQUNBM1IsRUFBQSxFQUE2QkEsRUFBQTFXLEVBQUExdEIsT0FBdUJva0MsSUFBQSxDQUNwRCxJQUFBK0ssSUFBQW1HLEVBQUFuRyxFQUFBemhCLEVBQUEwVyxHQUFBc08sRUFBQWlELEdBQUEsQ0FDQUcsR0FBQSxFQUNBLE1BRUEzRyxJQUFBOEIsWUFJQSxJQUFBNkUsR0FBQTNHLEVBVUEsY0F4Q0E2RCxFQUFBL2pCLEVBQUF2QixFQUFBZ2xCLEdBNkNBLEdBQUEvc0IsRUFBQS9jLEdBQUEsQ0FDQSxJQUFBb3RDLEdBQUEsRUFDQSxRQUFBLzJDLEtBQUEySixFQUNBLElBQUE4c0MsRUFBQXoyQyxHQUFBLENBQ0ErMkMsR0FBQSxFQUNBL0MsRUFBQWhrQixFQUFBeWpCLEdBQ0EsT0FHQXNELEdBQUFwdEMsRUFBQSxVQUVBZ3RCLEdBQUFodEIsRUFBQSxnQkFHSytrQixFQUFBL2tCLE9BQUFxbUIsRUFBQTdTLE9BQ0x1UixFQUFBL2tCLEtBQUFxbUIsRUFBQTdTLE1BRUEsU0FjQSxnQkFBQXVpQixFQUFBMVAsRUFBQWtQLEVBQUFtVyxHQUNBLElBQUE1dUIsRUFBQXVKLEdBQUEsQ0FLQSxJQUFBZ25CLEdBQUEsRUFDQXZELEVBQUEsR0FFQSxHQUFBaHRCLEVBQUFpWixHQUVBc1gsR0FBQSxFQUNBeEQsRUFBQXhqQixFQUFBeWpCLE9BQ0ssQ0FDTCxJQUFBd0QsRUFBQXZ3QixFQUFBZ1osRUFBQXdYLFVBQ0EsSUFBQUQsR0FBQXRFLEdBQUFqVCxFQUFBMVAsR0FFQWttQixFQUFBeFcsRUFBQTFQLEVBQUF5akIsRUFBQSxVQUFBNEIsT0FDTyxDQUNQLEdBQUE0QixFQUFBLENBUUEsR0FKQSxJQUFBdlgsRUFBQXdYLFVBQUF4WCxFQUFBeVgsYUFBQS9zQixLQUNBc1YsRUFBQTBYLGdCQUFBaHRCLEdBQ0E4VSxHQUFBLEdBRUF2WSxFQUFBdVksSUFDQW1YLEVBQUEzVyxFQUFBMVAsRUFBQXlqQixHQUVBLE9BREE4QyxFQUFBdm1CLEVBQUF5akIsR0FBQSxHQUNBL1QsRUFhQUEsRUFBQTBULEVBQUExVCxHQUlBLElBQUEyWCxFQUFBM1gsRUFBQWhSLElBQ0FnbEIsRUFBQXJCLEVBQUFwQyxXQUFBb0gsR0FjQSxHQVhBN0QsRUFDQXhqQixFQUNBeWpCLEVBSUE0RCxFQUFBQyxTQUFBLEtBQUE1RCxFQUNBckIsRUFBQUwsWUFBQXFGLElBSUEzd0IsRUFBQXNKLEVBQUE1TSxRQUFBLENBQ0EsSUFBQXN4QixFQUFBMWtCLEVBQUE1TSxPQUNBbTBCLEVBQUFsRCxFQUFBcmtCLEdBQ0EsTUFBQTBrQixFQUFBLENBQ0EsUUFBQTd6QyxFQUFBLEVBQTJCQSxFQUFBdWtDLEVBQUFuRixRQUFBbC9CLFNBQXdCRixFQUNuRHVrQyxFQUFBbkYsUUFBQXAvQixHQUFBNnpDLEdBR0EsR0FEQUEsRUFBQWhtQixJQUFBc0IsRUFBQXRCLElBQ0E2b0IsRUFBQSxDQUNBLFFBQUFwUyxFQUFBLEVBQStCQSxFQUFBQyxFQUFBdmlDLE9BQUE5QixTQUF5Qm9rQyxFQUN4REMsRUFBQXZpQyxPQUFBc2lDLEdBQUF1TixHQUFBZ0MsR0FLQSxJQUFBOVUsRUFBQThVLEVBQUEvcUMsS0FBQWtwQixLQUFBK00sT0FDQSxHQUFBQSxFQUFBMUgsT0FFQSxRQUFBc2YsRUFBQSxFQUFpQ0EsRUFBQTVYLEVBQUE3ekIsSUFBQWhMLE9BQXlCeTJDLElBQzFENVgsRUFBQTd6QixJQUFBeXJDLFVBSUFsRixHQUFBb0MsR0FFQUEsSUFBQXR4QixRQUtBc0QsRUFBQWd0QixHQUNBb0IsRUFBQXBCLEVBQUEsQ0FBQWhVLEdBQUEsS0FDU2haLEVBQUFnWixFQUFBcmpDLE1BQ1R3NEMsRUFBQW5WLElBTUEsT0FEQTZXLEVBQUF2bUIsRUFBQXlqQixFQUFBdUQsR0FDQWhuQixFQUFBdEIsSUFuR0FoSSxFQUFBZ1osSUFBNEJtVixFQUFBblYsSUF5RzVCLElBQUFqTSxHQUFBLENBQ0E1d0IsT0FBQTQwQyxHQUNBcnBCLE9BQUFxcEIsR0FDQXhYLFFBQUEsU0FBQWpRLEdBQ0F5bkIsR0FBQXpuQixFQUFBMGlCLE1BSUEsU0FBQStFLEdBQUEvWCxFQUFBMVAsSUFDQTBQLEVBQUEvMUIsS0FBQThwQixZQUFBekQsRUFBQXJtQixLQUFBOHBCLGFBQ0F3UyxHQUFBdkcsRUFBQTFQLEdBSUEsU0FBQWlXLEdBQUF2RyxFQUFBMVAsR0FDQSxJQVFBaHdCLEVBQUEwM0MsRUFBQUMsRUFSQUMsRUFBQWxZLElBQUFnVCxHQUNBbUYsRUFBQTduQixJQUFBMGlCLEdBQ0FvRixFQUFBQyxHQUFBclksRUFBQS8xQixLQUFBOHBCLFdBQUFpTSxFQUFBL1EsU0FDQXFwQixFQUFBRCxHQUFBL25CLEVBQUFybUIsS0FBQThwQixXQUFBekQsRUFBQXJCLFNBRUFzcEIsRUFBQSxHQUNBQyxFQUFBLEdBR0EsSUFBQWw0QyxLQUFBZzRDLEVBQ0FOLEVBQUFJLEVBQUE5M0MsR0FDQTIzQyxFQUFBSyxFQUFBaDRDLEdBQ0EwM0MsR0FRQUMsRUFBQXA2QixTQUFBbTZCLEVBQUF4N0MsTUFDQXk3QyxFQUFBUSxPQUFBVCxFQUFBanJDLElBQ0EyckMsR0FBQVQsRUFBQSxTQUFBM25CLEVBQUEwUCxHQUNBaVksRUFBQWxuQyxLQUFBa25DLEVBQUFsbkMsSUFBQTRuQyxrQkFDQUgsRUFBQTUyQyxLQUFBcTJDLEtBVkFTLEdBQUFULEVBQUEsT0FBQTNuQixFQUFBMFAsR0FDQWlZLEVBQUFsbkMsS0FBQWtuQyxFQUFBbG5DLElBQUE4ZixVQUNBMG5CLEVBQUEzMkMsS0FBQXEyQyxJQWFBLEdBQUFNLEVBQUFsM0MsT0FBQSxDQUNBLElBQUF1M0MsRUFBQSxXQUNBLFFBQUF6M0MsRUFBQSxFQUFxQkEsRUFBQW8zQyxFQUFBbDNDLE9BQTJCRixJQUNoRHUzQyxHQUFBSCxFQUFBcDNDLEdBQUEsV0FBQW12QixFQUFBMFAsSUFHQWtZLEVBQ0E5ZixHQUFBOUgsRUFBQSxTQUFBc29CLEdBRUFBLElBWUEsR0FSQUosRUFBQW4zQyxRQUNBKzJCLEdBQUE5SCxFQUFBLHVCQUNBLFFBQUFudkIsRUFBQSxFQUFxQkEsRUFBQXEzQyxFQUFBbjNDLE9BQThCRixJQUNuRHUzQyxHQUFBRixFQUFBcjNDLEdBQUEsbUJBQUFtdkIsRUFBQTBQLE1BS0FrWSxFQUNBLElBQUE1M0MsS0FBQTgzQyxFQUNBRSxFQUFBaDRDLElBRUFvNEMsR0FBQU4sRUFBQTkzQyxHQUFBLFNBQUEwL0IsSUFBQW1ZLEdBTUEsSUFBQVUsR0FBQTk4QyxPQUFBb0gsT0FBQSxNQUVBLFNBQUFrMUMsR0FDQXZrQixFQUNBbEIsR0FFQSxJQUtBenhCLEVBQUE4MkMsRUFMQTduQyxFQUFBclUsT0FBQW9ILE9BQUEsTUFDQSxJQUFBMndCLEVBRUEsT0FBQTFqQixFQUdBLElBQUFqUCxFQUFBLEVBQWFBLEVBQUEyeUIsRUFBQXp5QixPQUFpQkYsSUFDOUI4MkMsRUFBQW5rQixFQUFBM3lCLEdBQ0E4MkMsRUFBQWEsWUFFQWIsRUFBQWEsVUFBQUQsSUFFQXpvQyxFQUFBMm9DLEdBQUFkLE1BQ0FBLEVBQUFsbkMsSUFBQXdqQixHQUFBM0IsRUFBQTJDLFNBQUEsYUFBQTBpQixFQUFBNzFDLE1BQUEsR0FHQSxPQUFBZ08sRUFHQSxTQUFBMm9DLEdBQUFkLEdBQ0EsT0FBQUEsRUFBQWUsU0FBQWYsRUFBQSxTQUFBbDhDLE9BQUFtRixLQUFBKzJDLEVBQUFhLFdBQUEsSUFBNEVockMsS0FBQSxLQUc1RSxTQUFBNHFDLEdBQUFULEVBQUE5a0IsRUFBQTdDLEVBQUEwUCxFQUFBbVksR0FDQSxJQUFBcnVDLEVBQUFtdUMsRUFBQWxuQyxLQUFBa25DLEVBQUFsbkMsSUFBQW9pQixHQUNBLEdBQUFycEIsRUFDQSxJQUNBQSxFQUFBd21CLEVBQUF0QixJQUFBaXBCLEVBQUEzbkIsRUFBQTBQLEVBQUFtWSxHQUNLLE1BQUF0N0MsSUFDTCs0QixHQUFBLzRCLEdBQUF5ekIsRUFBQXJCLFFBQUEsYUFBQWdwQixFQUFBLFNBQUE5a0IsRUFBQSxVQUtBLElBQUE4bEIsR0FBQSxDQUNBNVYsR0FDQXRQLElBS0EsU0FBQW1sQixHQUFBbFosRUFBQTFQLEdBQ0EsSUFBQWpELEVBQUFpRCxFQUFBcEIsaUJBQ0EsS0FBQWxJLEVBQUFxRyxLQUFBLElBQUFBLEVBQUFNLEtBQUF0UCxRQUFBODZCLGlCQUdBcHlCLEVBQUFpWixFQUFBLzFCLEtBQUF5dUIsU0FBQTNSLEVBQUF1SixFQUFBcm1CLEtBQUF5dUIsUUFBQSxDQUdBLElBQUFwNEIsRUFBQXcxQixFQUFBb0MsRUFDQWxKLEVBQUFzQixFQUFBdEIsSUFDQW9xQixFQUFBcFosRUFBQS8xQixLQUFBeXVCLE9BQUEsR0FDQUEsRUFBQXBJLEVBQUFybUIsS0FBQXl1QixPQUFBLEdBTUEsSUFBQXA0QixLQUpBMG1CLEVBQUEwUixFQUFBM0gsVUFDQTJILEVBQUFwSSxFQUFBcm1CLEtBQUF5dUIsTUFBQXJQLEVBQUEsR0FBd0NxUCxJQUd4Q0EsRUFDQTVDLEVBQUE0QyxFQUFBcDRCLEdBQ0E0M0IsRUFBQWtoQixFQUFBOTRDLEdBQ0E0M0IsSUFBQXBDLEdBQ0F1akIsR0FBQXJxQixFQUFBMXVCLEVBQUF3MUIsR0FTQSxJQUFBeDFCLEtBSEF1c0IsSUFBQUUsS0FBQTJMLEVBQUFsOEIsUUFBQTQ4QyxFQUFBNThDLE9BQ0E2OEMsR0FBQXJxQixFQUFBLFFBQUEwSixFQUFBbDhCLE9BRUE0OEMsRUFDQXJ5QixFQUFBMlIsRUFBQXA0QixNQUNBOHZDLEdBQUE5dkMsR0FDQTB1QixFQUFBc3FCLGtCQUFBbkosR0FBQUUsR0FBQS92QyxJQUNPd3ZDLEdBQUF4dkMsSUFDUDB1QixFQUFBMG9CLGdCQUFBcDNDLEtBTUEsU0FBQSs0QyxHQUFBeGhDLEVBQUF2WCxFQUFBOUQsR0FDQXFiLEVBQUFnNkIsUUFBQTE5QixRQUFBLFFBQ0FvbEMsR0FBQTFoQyxFQUFBdlgsRUFBQTlELEdBQ0cwekMsR0FBQTV2QyxHQUdIMnZDLEdBQUF6ekMsR0FDQXFiLEVBQUE2L0IsZ0JBQUFwM0MsSUFJQTlELEVBQUEsb0JBQUE4RCxHQUFBLFVBQUF1WCxFQUFBZzZCLFFBQ0EsT0FDQXZ4QyxFQUNBdVgsRUFBQWs2QixhQUFBenhDLEVBQUE5RCxJQUVHc3pDLEdBQUF4dkMsR0FDSHVYLEVBQUFrNkIsYUFBQXp4QyxFQUFBMHZDLEdBQUExdkMsRUFBQTlELElBQ0c0ekMsR0FBQTl2QyxHQUNIMnZDLEdBQUF6ekMsR0FDQXFiLEVBQUF5aEMsa0JBQUFuSixHQUFBRSxHQUFBL3ZDLElBRUF1WCxFQUFBMmhDLGVBQUFySixHQUFBN3ZDLEVBQUE5RCxHQUdBKzhDLEdBQUExaEMsRUFBQXZYLEVBQUE5RCxHQUlBLFNBQUErOEMsR0FBQTFoQyxFQUFBdlgsRUFBQTlELEdBQ0EsR0FBQXl6QyxHQUFBenpDLEdBQ0FxYixFQUFBNi9CLGdCQUFBcDNDLE9BQ0csQ0FLSCxHQUNBdXNCLEtBQUFDLElBQ0EsYUFBQWpWLEVBQUFnNkIsU0FDQSxnQkFBQXZ4QyxHQUFBLEtBQUE5RCxJQUFBcWIsRUFBQTRoQyxPQUNBLENBQ0EsSUFBQUMsRUFBQSxTQUFBNzhDLEdBQ0FBLEVBQUE4OEMsMkJBQ0E5aEMsRUFBQXFKLG9CQUFBLFFBQUF3NEIsSUFFQTdoQyxFQUFBcE4saUJBQUEsUUFBQWl2QyxHQUVBN2hDLEVBQUE0aEMsUUFBQSxFQUVBNWhDLEVBQUFrNkIsYUFBQXp4QyxFQUFBOUQsSUFJQSxJQUFBazhCLEdBQUEsQ0FDQXYxQixPQUFBKzFDLEdBQ0F4cUIsT0FBQXdxQixJQUtBLFNBQUFVLEdBQUE1WixFQUFBMVAsR0FDQSxJQUFBelksRUFBQXlZLEVBQUF0QixJQUNBL2tCLEVBQUFxbUIsRUFBQXJtQixLQUNBNHZDLEVBQUE3WixFQUFBLzFCLEtBQ0EsS0FDQThjLEVBQUE5YyxFQUFBMG1DLGNBQ0E1cEIsRUFBQTljLEVBQUF3NEIsU0FDQTFiLEVBQUE4eUIsSUFDQTl5QixFQUFBOHlCLEVBQUFsSixjQUNBNXBCLEVBQUE4eUIsRUFBQXBYLFNBTEEsQ0FZQSxJQUFBcVgsRUFBQXhKLEdBQUFoZ0IsR0FHQXlwQixFQUFBbGlDLEVBQUFtaUMsbUJBQ0FoekIsRUFBQSt5QixLQUNBRCxFQUFBNWdDLEdBQUE0Z0MsRUFBQWpKLEdBQUFrSixLQUlBRCxJQUFBamlDLEVBQUFvaUMsYUFDQXBpQyxFQUFBazZCLGFBQUEsUUFBQStILEdBQ0FqaUMsRUFBQW9pQyxXQUFBSCxJQUlBLElBNFlBbHBCLEdBQUFwa0IsR0FBQTB0QyxHQUFBQyxHQUFBQyxHQUFBQyxHQTVZQUMsR0FBQSxDQUNBbjNDLE9BQUF5MkMsR0FDQWxyQixPQUFBa3JCLElBS0FXLEdBQUEsZ0JBRUEsU0FBQUMsR0FBQXZpQyxHQUNBLElBUUFtQixFQUFBcWhDLEVBQUF0NUMsRUFBQXlvQyxFQUFBOFEsRUFSQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBR0EsSUFBQS81QyxFQUFBLEVBQWFBLEVBQUE4VyxFQUFBNVcsT0FBZ0JGLElBRzdCLEdBRkFzNUMsRUFBQXJoQyxFQUNBQSxFQUFBbkIsRUFBQTFSLFdBQUFwRixHQUNBdzVDLEVBQ0EsS0FBQXZoQyxHQUFBLEtBQUFxaEMsSUFBd0NFLEdBQUEsUUFDbkMsR0FBQUMsRUFDTCxLQUFBeGhDLEdBQUEsS0FBQXFoQyxJQUF3Q0csR0FBQSxRQUNuQyxHQUFBQyxFQUNMLEtBQUF6aEMsR0FBQSxLQUFBcWhDLElBQXdDSSxHQUFBLFFBQ25DLEdBQUFDLEVBQ0wsS0FBQTFoQyxHQUFBLEtBQUFxaEMsSUFBd0NLLEdBQUEsUUFDbkMsR0FDTCxNQUFBMWhDLEdBQ0EsTUFBQW5CLEVBQUExUixXQUFBcEYsRUFBQSxJQUNBLE1BQUE4VyxFQUFBMVIsV0FBQXBGLEVBQUEsSUFDQTQ1QyxHQUFBQyxHQUFBQyxFQVNLLENBQ0wsT0FBQTdoQyxHQUNBLFFBQUF3aEMsR0FBQSxFQUFtQyxNQUNuQyxRQUFBRCxHQUFBLEVBQW1DLE1BQ25DLFFBQUFFLEdBQUEsRUFBMkMsTUFDM0MsUUFBQUksSUFBMkIsTUFDM0IsUUFBQUEsSUFBMkIsTUFDM0IsUUFBQUQsSUFBNEIsTUFDNUIsUUFBQUEsSUFBNEIsTUFDNUIsU0FBQUQsSUFBMkIsTUFDM0IsU0FBQUEsSUFBMkIsTUFFM0IsUUFBQTNoQyxFQUFBLENBSUEsSUFIQSxJQUFBMVcsRUFBQXZCLEVBQUEsRUFDQWtqQixPQUFBLEVBRWMzaEIsR0FBQSxFQUFRQSxJQUV0QixHQURBMmhCLEVBQUFwTSxFQUFBelIsT0FBQTlELEdBQ0EsTUFBQTJoQixFQUEwQixNQUUxQkEsR0FBQWsyQixHQUFBMS9CLEtBQUF3SixLQUNBeTJCLEdBQUEsY0E1QkF4K0MsSUFBQXN0QyxHQUVBc1IsRUFBQS81QyxFQUFBLEVBQ0F5b0MsRUFBQTN4QixFQUFBeFIsTUFBQSxFQUFBdEYsR0FBQXdkLFFBRUF3OEIsSUFtQ0EsU0FBQUEsS0FDQVQsTUFBQSxLQUFBOTRDLEtBQUFxVyxFQUFBeFIsTUFBQXkwQyxFQUFBLzVDLEdBQUF3ZCxRQUNBdThCLEVBQUEvNUMsRUFBQSxFQUdBLFFBWEE3RSxJQUFBc3RDLEVBQ0FBLEVBQUEzeEIsRUFBQXhSLE1BQUEsRUFBQXRGLEdBQUF3ZCxPQUNHLElBQUF1OEIsR0FDSEMsSUFRQVQsRUFDQSxJQUFBdjVDLEVBQUEsRUFBZUEsRUFBQXU1QyxFQUFBcjVDLE9BQW9CRixJQUNuQ3lvQyxFQUFBd1IsR0FBQXhSLEVBQUE4USxFQUFBdjVDLElBSUEsT0FBQXlvQyxFQUdBLFNBQUF3UixHQUFBbmpDLEVBQUF3SyxHQUNBLElBQUF0aEIsRUFBQXNoQixFQUFBdE8sUUFBQSxLQUNBLEdBQUFoVCxFQUFBLEVBRUEsYUFBQXNoQixFQUFBLE1BQUF4SyxFQUFBLElBRUEsSUFBQTdWLEVBQUFxZ0IsRUFBQWhjLE1BQUEsRUFBQXRGLEdBQ0F3QyxFQUFBOGUsRUFBQWhjLE1BQUF0RixFQUFBLEdBQ0EsYUFBQWlCLEVBQUEsTUFBQTZWLEdBQUEsTUFBQXRVLEVBQUEsSUFBQUEsS0FTQSxTQUFBMDNDLEdBQUFDLEVBQUFDLEdBQ0EvbEMsUUFBQU0sTUFBQSxtQkFBQXdsQyxHQUlBLFNBQUFFLEdBQ0E1eEIsRUFDQXRwQixHQUVBLE9BQUFzcEIsRUFDQUEsRUFBQXZPLElBQUEsU0FBQThJLEdBQWdDLE9BQUFBLEVBQUE3akIsS0FBaUJtaUIsT0FBQSxTQUFBaUcsR0FBdUIsT0FBQUEsSUFDeEUsR0FHQSxTQUFBK3lCLEdBQUE1akMsRUFBQXpWLEVBQUE1RixFQUFBKytDLEVBQUFHLElBQ0E3akMsRUFBQXdiLFFBQUF4YixFQUFBd2IsTUFBQSxLQUFBenhCLEtBQUErNUMsR0FBQSxDQUFtRHY1QyxPQUFBNUYsUUFBQWsvQyxXQUE2Q0gsSUFDaEcxakMsRUFBQStqQyxPQUFBLEVBR0EsU0FBQUMsR0FBQWhrQyxFQUFBelYsRUFBQTVGLEVBQUErK0MsRUFBQUcsR0FDQSxJQUFBaGpCLEVBQUFnakIsRUFDQTdqQyxFQUFBaWtDLGVBQUFqa0MsRUFBQWlrQyxhQUFBLElBQ0Fqa0MsRUFBQTZnQixRQUFBN2dCLEVBQUE2Z0IsTUFBQSxJQUNBQSxFQUFBOTJCLEtBQUErNUMsR0FBQSxDQUEyQnY1QyxPQUFBNUYsUUFBQWsvQyxXQUE2Q0gsSUFDeEUxakMsRUFBQStqQyxPQUFBLEVBSUEsU0FBQUcsR0FBQWxrQyxFQUFBelYsRUFBQTVGLEVBQUErK0MsR0FDQTFqQyxFQUFBbWtDLFNBQUE1NUMsR0FBQTVGLEVBQ0FxYixFQUFBb2tDLFVBQUFyNkMsS0FBQSs1QyxHQUFBLENBQWtDdjVDLE9BQUE1RixTQUEyQisrQyxJQUc3RCxTQUFBVyxHQUNBcmtDLEVBQ0F6VixFQUNBNDJDLEVBQ0F4OEMsRUFDQXVRLEVBQ0FvdkMsRUFDQXJELEVBQ0F5QyxJQUVBMWpDLEVBQUFrYyxhQUFBbGMsRUFBQWtjLFdBQUEsS0FBQW55QixLQUFBKzVDLEdBQUEsQ0FDQXY1QyxPQUNBNDJDLFVBQ0F4OEMsUUFDQXVRLE1BQ0FvdkMsZUFDQXJELGFBQ0d5QyxJQUNIMWpDLEVBQUErakMsT0FBQSxFQUdBLFNBQUFRLEdBQUF6ZSxFQUFBdjdCLEVBQUFzNUMsR0FDQSxPQUFBQSxFQUNBLE1BQUF0NUMsRUFBQSxLQUFBdTdCLEVBQUEsS0FDQUEsRUFBQXY3QixFQUdBLFNBQUFpNkMsR0FDQXhrQyxFQUNBelYsRUFDQTVGLEVBQ0FzOEMsRUFDQXdELEVBQ0FwdUIsRUFDQXF0QixFQUNBRyxHQWlEQSxJQUFBYSxFQS9DQXpELEtBQUFqeUIsRUFpQkFpeUIsRUFBQTBELE1BQ0FkLEVBQ0F0NUMsRUFBQSxJQUFBQSxFQUFBLDhCQUFBQSxFQUFBLElBQ0ssVUFBQUEsSUFDTEEsRUFBQSxxQkFDQTAyQyxFQUFBMEQsT0FFRzFELEVBQUEyRCxTQUNIZixFQUNBdDVDLEVBQUEsSUFBQUEsRUFBQSwwQkFBQUEsRUFBQSxJQUNLLFVBQUFBLElBQ0xBLEVBQUEsWUFLQTAyQyxFQUFBN2lCLGlCQUNBNmlCLEVBQUE3aUIsUUFDQTd6QixFQUFBZzZDLEdBQUEsSUFBQWg2QyxFQUFBczVDLElBRUE1QyxFQUFBdHVCLGNBQ0FzdUIsRUFBQXR1QixLQUNBcG9CLEVBQUFnNkMsR0FBQSxJQUFBaDZDLEVBQUFzNUMsSUFHQTVDLEVBQUF0aEIsaUJBQ0FzaEIsRUFBQXRoQixRQUNBcDFCLEVBQUFnNkMsR0FBQSxJQUFBaDZDLEVBQUFzNUMsSUFJQTVDLEVBQUE0RCxlQUNBNUQsRUFBQTRELE9BQ0FILEVBQUExa0MsRUFBQThrQyxlQUFBOWtDLEVBQUE4a0MsYUFBQSxLQUVBSixFQUFBMWtDLEVBQUEwa0MsU0FBQTFrQyxFQUFBMGtDLE9BQUEsSUFHQSxJQUFBSyxFQUFBakIsR0FBQSxDQUFpQ24vQyxRQUFBbWlCLE9BQUErOEIsV0FBd0NILEdBQ3pFekMsSUFBQWp5QixJQUNBKzFCLEVBQUE5RCxhQUdBLElBQUE5USxFQUFBdVUsRUFBQW42QyxHQUVBcU4sTUFBQXpSLFFBQUFncUMsR0FDQXNVLEVBQUF0VSxFQUFBbUYsUUFBQXlQLEdBQUE1VSxFQUFBcG1DLEtBQUFnN0MsR0FFQUwsRUFBQW42QyxHQURHNGxDLEVBQ0hzVSxFQUFBLENBQUFNLEVBQUE1VSxHQUFBLENBQUFBLEVBQUE0VSxHQUVBQSxFQUdBL2tDLEVBQUErakMsT0FBQSxFQUdBLFNBQUFpQixHQUNBaGxDLEVBQ0F6VixHQUVBLE9BQUF5VixFQUFBaWxDLFlBQUEsSUFBQTE2QyxJQUNBeVYsRUFBQWlsQyxZQUFBLFVBQUExNkMsSUFDQXlWLEVBQUFpbEMsWUFBQTE2QyxHQUdBLFNBQUEyNkMsR0FDQWxsQyxFQUNBelYsRUFDQTQ2QyxHQUVBLElBQUFDLEVBQ0FDLEdBQUFybEMsRUFBQSxJQUFBelYsSUFDQTg2QyxHQUFBcmxDLEVBQUEsVUFBQXpWLEdBQ0EsU0FBQTY2QyxFQUNBLE9BQUF6QyxHQUFBeUMsR0FDRyxRQUFBRCxFQUFBLENBQ0gsSUFBQUcsRUFBQUQsR0FBQXJsQyxFQUFBelYsR0FDQSxTQUFBKzZDLEVBQ0EsT0FBQWwrQyxLQUFBRSxVQUFBZytDLElBU0EsU0FBQUQsR0FDQXJsQyxFQUNBelYsRUFDQWc3QyxHQUVBLElBQUFweUMsRUFDQSxVQUFBQSxFQUFBNk0sRUFBQW1rQyxTQUFBNTVDLElBRUEsSUFEQSxJQUFBMGxCLEVBQUFqUSxFQUFBb2tDLFVBQ0E5NkMsRUFBQSxFQUFBQyxFQUFBMG1CLEVBQUF6bUIsT0FBb0NGLEVBQUFDLEVBQU9ELElBQzNDLEdBQUEybUIsRUFBQTNtQixHQUFBaUIsU0FBQSxDQUNBMGxCLEVBQUFLLE9BQUFobkIsRUFBQSxHQUNBLE1BT0EsT0FIQWk4QyxVQUNBdmxDLEVBQUFta0MsU0FBQTU1QyxHQUVBNEksRUFHQSxTQUFBcXlDLEdBQ0F4bEMsRUFDQXpWLEdBR0EsSUFEQSxJQUFBMGxCLEVBQUFqUSxFQUFBb2tDLFVBQ0E5NkMsRUFBQSxFQUFBQyxFQUFBMG1CLEVBQUF6bUIsT0FBa0NGLEVBQUFDLEVBQU9ELElBQUEsQ0FDekMsSUFBQTB1QyxFQUFBL25CLEVBQUEzbUIsR0FDQSxHQUFBaUIsRUFBQXlZLEtBQUFnMUIsRUFBQXp0QyxNQUVBLE9BREEwbEIsRUFBQUssT0FBQWhuQixFQUFBLEdBQ0EwdUMsR0FLQSxTQUFBOEwsR0FDQXp6QixFQUNBcXpCLEdBVUEsT0FSQUEsSUFDQSxNQUFBQSxFQUFBbnlCLFFBQ0FsQixFQUFBa0IsTUFBQW15QixFQUFBbnlCLE9BRUEsTUFBQW15QixFQUFBN0UsTUFDQXh1QixFQUFBd3VCLElBQUE2RSxFQUFBN0UsTUFHQXh1QixFQVFBLFNBQUFvMUIsR0FDQXpsQyxFQUNBcmIsRUFDQXM4QyxHQUVBLElBQUF6VixFQUFBeVYsR0FBQSxHQUNBeUUsRUFBQWxhLEVBQUFrYSxPQUNBNStCLEVBQUEwa0IsRUFBQTFrQixLQUVBNitCLEVBQUEsTUFDQUMsRUFBQUQsRUFDQTcrQixJQUNBOCtCLEVBQ0EsV0FBQUQsRUFBQSxrQkFDQUEsRUFBQSxZQUNBQSxFQUFBLEtBRUFELElBQ0FFLEVBQUEsTUFBQUEsRUFBQSxLQUVBLElBQUFDLEVBQUFDLEdBQUFuaEQsRUFBQWloRCxHQUVBNWxDLEVBQUFvcEIsTUFBQSxDQUNBemtDLE1BQUEsSUFBQUEsRUFBQSxJQUNBb3RDLFdBQUEzcUMsS0FBQUUsVUFBQTNDLEdBQ0FzaEIsU0FBQSxhQUFBMC9CLEVBQUEsTUFBd0RFLEVBQUEsS0FPeEQsU0FBQUMsR0FDQW5oRCxFQUNBa2hELEdBRUEsSUFBQXR0QyxFQUFBd3RDLEdBQUFwaEQsR0FDQSxjQUFBNFQsRUFBQTlQLElBQ0E5RCxFQUFBLElBQUFraEQsRUFFQSxRQUFBdHRDLEVBQUEsU0FBQUEsRUFBQSxTQUFBc3RDLEVBQUEsSUF1QkEsU0FBQUUsR0FBQTV5QyxHQU1BLEdBSEFBLElBQUEyVCxPQUNBaVMsR0FBQTVsQixFQUFBM0osT0FFQTJKLEVBQUFtSixRQUFBLFFBQUFuSixFQUFBNnlDLFlBQUEsS0FBQWp0QixHQUFBLEVBRUEsT0FEQXVwQixHQUFBbnZDLEVBQUE2eUMsWUFBQSxLQUNBMUQsSUFBQSxFQUNBLENBQ0FsaUMsSUFBQWpOLEVBQUF2RSxNQUFBLEVBQUEwekMsSUFDQTc1QyxJQUFBLElBQUEwSyxFQUFBdkUsTUFBQTB6QyxHQUFBLFFBR0EsQ0FDQWxpQyxJQUFBak4sRUFDQTFLLElBQUEsTUFLQWtNLEdBQUF4QixFQUNBbXZDLEdBQUFDLEdBQUFDLEdBQUEsRUFFQSxPQUFBeUQsS0FDQTVELEdBQUFyMUMsS0FFQWs1QyxHQUFBN0QsSUFDQThELEdBQUE5RCxJQUNLLEtBQUFBLElBQ0wrRCxHQUFBL0QsSUFJQSxPQUNBamlDLElBQUFqTixFQUFBdkUsTUFBQSxFQUFBMnpDLElBQ0E5NUMsSUFBQTBLLEVBQUF2RSxNQUFBMnpDLEdBQUEsRUFBQUMsS0FJQSxTQUFBeDFDLEtBQ0EsT0FBQTJILEdBQUFqRyxhQUFBNHpDLElBR0EsU0FBQTJELEtBQ0EsT0FBQTNELElBQUF2cEIsR0FHQSxTQUFBbXRCLEdBQUE3RCxHQUNBLFlBQUFBLEdBQUEsS0FBQUEsRUFHQSxTQUFBK0QsR0FBQS9ELEdBQ0EsSUFBQWdFLEVBQUEsRUFDQTlELEdBQUFELEdBQ0EsT0FBQTJELEtBRUEsR0FEQTVELEVBQUFyMUMsS0FDQWs1QyxHQUFBN0QsR0FDQThELEdBQUE5RCxRQUtBLEdBRkEsS0FBQUEsR0FBdUJnRSxJQUN2QixLQUFBaEUsR0FBdUJnRSxJQUN2QixJQUFBQSxFQUFBLENBQ0E3RCxHQUFBRixHQUNBLE9BS0EsU0FBQTZELEdBQUE5RCxHQUNBLElBQUFpRSxFQUFBakUsRUFDQSxPQUFBNEQsS0FFQSxHQURBNUQsRUFBQXIxQyxLQUNBcTFDLElBQUFpRSxFQUNBLE1BV0EsSUFnTUFDLEdBaE1BQyxHQUFBLE1BQ0FDLEdBQUEsTUFFQSxTQUFBcmQsR0FDQXBwQixFQUNBb2dDLEVBQ0FzRyxHQUVBQSxFQUNBLElBQUEvaEQsRUFBQXk3QyxFQUFBejdDLE1BQ0FzOEMsRUFBQWIsRUFBQWEsVUFDQW44QyxFQUFBa2IsRUFBQWxiLElBQ0FvTyxFQUFBOE0sRUFBQW1rQyxTQUFBanhDLEtBY0EsR0FBQThNLEVBQUE0c0IsVUFHQSxPQUZBNlksR0FBQXpsQyxFQUFBcmIsRUFBQXM4QyxJQUVBLEVBQ0csY0FBQW44QyxFQUNINmhELEdBQUEzbUMsRUFBQXJiLEVBQUFzOEMsUUFDRyxhQUFBbjhDLEdBQUEsYUFBQW9PLEVBQ0gwekMsR0FBQTVtQyxFQUFBcmIsRUFBQXM4QyxRQUNHLGFBQUFuOEMsR0FBQSxVQUFBb08sRUFDSDJ6QyxHQUFBN21DLEVBQUFyYixFQUFBczhDLFFBQ0csYUFBQW44QyxHQUFBLGFBQUFBLEVBQ0hnaUQsR0FBQTltQyxFQUFBcmIsRUFBQXM4QyxPQUNHLEtBQUFqdUIsRUFBQVUsY0FBQTV1QixHQUdILE9BRkEyZ0QsR0FBQXpsQyxFQUFBcmIsRUFBQXM4QyxJQUVBLEVBWUEsU0FHQSxTQUFBMkYsR0FDQTVtQyxFQUNBcmIsRUFDQXM4QyxHQUVBLElBQUF5RSxFQUFBekUsS0FBQXlFLE9BQ0FxQixFQUFBN0IsR0FBQWxsQyxFQUFBLGlCQUNBZ25DLEVBQUE5QixHQUFBbGxDLEVBQUEsc0JBQ0FpbkMsRUFBQS9CLEdBQUFsbEMsRUFBQSx3QkFDQTRqQyxHQUFBNWpDLEVBQUEsVUFDQSxpQkFBQXJiLEVBQUEsUUFDQUEsRUFBQSxJQUFBb2lELEVBQUEsUUFDQSxTQUFBQyxFQUNBLEtBQUFyaUQsRUFBQSxJQUNBLE9BQUFBLEVBQUEsSUFBQXFpRCxFQUFBLE1BR0F4QyxHQUFBeGtDLEVBQUEsU0FDQSxXQUFBcmIsRUFBQSx5Q0FFQXFpRCxFQUFBLE1BQUFDLEVBQUEscUNBRUF2QixFQUFBLE1BQUFxQixFQUFBLElBQUFBLEdBQUEsNkNBRXdCakIsR0FBQW5oRCxFQUFBLHdDQUNabWhELEdBQUFuaEQsRUFBQSx3REFDRG1oRCxHQUFBbmhELEVBQUEsV0FDWCxTQUlBLFNBQUFraUQsR0FDQTdtQyxFQUNBcmIsRUFDQXM4QyxHQUVBLElBQUF5RSxFQUFBekUsS0FBQXlFLE9BQ0FxQixFQUFBN0IsR0FBQWxsQyxFQUFBLGlCQUNBK21DLEVBQUFyQixFQUFBLE1BQUFxQixFQUFBLElBQUFBLEVBQ0FuRCxHQUFBNWpDLEVBQUEsZ0JBQUFyYixFQUFBLElBQUFvaUQsRUFBQSxLQUNBdkMsR0FBQXhrQyxFQUFBLFNBQUE4bEMsR0FBQW5oRCxFQUFBb2lELEdBQUEsU0FHQSxTQUFBSixHQUNBM21DLEVBQ0FyYixFQUNBczhDLEdBRUEsSUFBQXlFLEVBQUF6RSxLQUFBeUUsT0FDQXdCLEVBQUEsMEpBR0F4QixFQUFBLHNCQUVBRyxFQUFBLDREQUNBc0IsRUFBQSx1QkFBQUQsRUFBQSxJQUNBQyxJQUFBLElBQUFyQixHQUFBbmhELEVBQUFraEQsR0FDQXJCLEdBQUF4a0MsRUFBQSxTQUFBbW5DLEVBQUEsU0FHQSxTQUFBTCxHQUNBOW1DLEVBQ0FyYixFQUNBczhDLEdBRUEsSUFBQS90QyxFQUFBOE0sRUFBQW1rQyxTQUFBanhDLEtBaUJBczRCLEVBQUF5VixHQUFBLEdBQ0F6UCxFQUFBaEcsRUFBQWdHLEtBQ0FrVSxFQUFBbGEsRUFBQWthLE9BQ0E1K0IsRUFBQTBrQixFQUFBMWtCLEtBQ0FzZ0MsR0FBQTVWLEdBQUEsVUFBQXQrQixFQUNBZixFQUFBcS9CLEVBQ0EsU0FDQSxVQUFBdCtCLEVBQ0FzekMsR0FDQSxRQUVBWixFQUFBLHNCQUNBOStCLElBQ0E4K0IsRUFBQSw4QkFFQUYsSUFDQUUsRUFBQSxNQUFBQSxFQUFBLEtBR0EsSUFBQXVCLEVBQUFyQixHQUFBbmhELEVBQUFpaEQsR0FDQXdCLElBQ0FELEVBQUEscUNBQThDQSxHQUc5Q3ZELEdBQUE1akMsRUFBQSxZQUFBcmIsRUFBQSxLQUNBNi9DLEdBQUF4a0MsRUFBQTdOLEVBQUFnMUMsRUFBQSxVQUNBcmdDLEdBQUE0K0IsSUFDQWxCLEdBQUF4a0MsRUFBQSx5QkFVQSxTQUFBcW5DLEdBQUFwbkIsR0FFQSxHQUFBOVEsRUFBQThRLEVBQUF1bUIsS0FBQSxDQUVBLElBQUFyMEMsRUFBQTZpQixHQUFBLGlCQUNBaUwsRUFBQTl0QixHQUFBLEdBQUFrUCxPQUFBNGUsRUFBQXVtQixJQUFBdm1CLEVBQUE5dEIsSUFBQSxXQUNBOHRCLEVBQUF1bUIsSUFLQXIzQixFQUFBOFEsRUFBQXdtQixPQUNBeG1CLEVBQUFxbkIsT0FBQSxHQUFBam1DLE9BQUE0ZSxFQUFBd21CLElBQUF4bUIsRUFBQXFuQixRQUFBLFdBQ0FybkIsRUFBQXdtQixLQU1BLFNBQUFjLEdBQUFwMUMsRUFBQStLLEVBQUFraEIsR0FDQSxJQUFBa1AsRUFBQWlaLEdBQ0EsZ0JBQUFoWixJQUNBLElBQUFoMUIsRUFBQTJFLEVBQUFuUixNQUFBLEtBQUE1QixXQUNBLE9BQUFvTyxHQUNBaXZDLEdBQUFyMUMsRUFBQW83QixFQUFBblAsRUFBQWtQLElBUUEsSUFBQW1hLEdBQUEvb0IsTUFBQXRKLElBQUFoTCxPQUFBZ0wsR0FBQSxTQUVBLFNBQUFzeUIsR0FDQW45QyxFQUNBMlMsRUFDQWtoQixFQUNBdUIsR0FRQSxHQUFBOG5CLEdBQUEsQ0FDQSxJQUFBRSxFQUFBblgsR0FDQTFYLEVBQUE1YixFQUNBQSxFQUFBNGIsRUFBQTh1QixTQUFBLFNBQUE1aUQsR0FDQSxHQUlBQSxFQUFBMGIsU0FBQTFiLEVBQUE2aUQsZUFFQTdpRCxFQUFBMnJDLFdBQUFnWCxHQUlBM2lELEVBQUEyckMsV0FBQSxHQUlBM3JDLEVBQUEwYixPQUFBb25DLGdCQUFBMTBDLFNBRUEsT0FBQTBsQixFQUFBL3NCLE1BQUF6RCxLQUFBNkIsWUFJQW84QyxHQUFBM3pDLGlCQUNBckksRUFDQTJTLEVBQ0FxWSxHQUNBLENBQVM2SSxVQUFBdUIsV0FDVHZCLEdBSUEsU0FBQW9wQixHQUNBajlDLEVBQ0EyUyxFQUNBa2hCLEVBQ0FrUCxJQUVBQSxHQUFBaVosSUFBQWw5QixvQkFDQTllLEVBQ0EyUyxFQUFBMHFDLFVBQUExcUMsRUFDQWtoQixHQUlBLFNBQUEycEIsR0FBQTVmLEVBQUExUCxHQUNBLElBQUF2SixFQUFBaVosRUFBQS8xQixLQUFBNnRCLE1BQUEvUSxFQUFBdUosRUFBQXJtQixLQUFBNnRCLElBQUEsQ0FHQSxJQUFBQSxFQUFBeEgsRUFBQXJtQixLQUFBNnRCLElBQUEsR0FDQUMsRUFBQWlJLEVBQUEvMUIsS0FBQTZ0QixJQUFBLEdBQ0FzbUIsR0FBQTl0QixFQUFBdEIsSUFDQWt3QixHQUFBcG5CLEdBQ0FELEdBQUFDLEVBQUFDLEVBQUF3bkIsR0FBQUYsR0FBQUQsR0FBQTl1QixFQUFBckIsU0FDQW12QixRQUFBOWhELEdBR0EsSUFPQXVqRCxHQVBBdEQsR0FBQSxDQUNBcDVDLE9BQUF5OEMsR0FDQWx4QixPQUFBa3hCLElBT0EsU0FBQUUsR0FBQTlmLEVBQUExUCxHQUNBLElBQUF2SixFQUFBaVosRUFBQS8xQixLQUFBb3lCLFlBQUF0VixFQUFBdUosRUFBQXJtQixLQUFBb3lCLFVBQUEsQ0FHQSxJQUFBLzdCLEVBQUF3MUIsRUFDQTlHLEVBQUFzQixFQUFBdEIsSUFDQSt3QixFQUFBL2YsRUFBQS8xQixLQUFBb3lCLFVBQUEsR0FDQWhKLEVBQUEvQyxFQUFBcm1CLEtBQUFveUIsVUFBQSxHQU1BLElBQUEvN0IsS0FKQTBtQixFQUFBcU0sRUFBQXRDLFVBQ0FzQyxFQUFBL0MsRUFBQXJtQixLQUFBb3lCLFNBQUFoVCxFQUFBLEdBQTJDZ0ssSUFHM0Mwc0IsRUFDQXovQyxLQUFBK3lCLElBQ0FyRSxFQUFBMXVCLEdBQUEsSUFJQSxJQUFBQSxLQUFBK3lCLEVBQUEsQ0FLQSxHQUpBeUMsRUFBQXpDLEVBQUEveUIsR0FJQSxnQkFBQUEsR0FBQSxjQUFBQSxFQUFBLENBRUEsR0FEQWd3QixFQUFBdkIsV0FBMkJ1QixFQUFBdkIsU0FBQTF0QixPQUFBLEdBQzNCeTBCLElBQUFpcUIsRUFBQXovQyxHQUFrQyxTQUdsQyxJQUFBMHVCLEVBQUFneEIsV0FBQTMrQyxRQUNBMnRCLEVBQUFwa0IsWUFBQW9rQixFQUFBZ3hCLFdBQUEsSUFJQSxhQUFBMS9DLEdBQUEsYUFBQTB1QixFQUFBNmlCLFFBQUEsQ0FHQTdpQixFQUFBaXhCLE9BQUFucUIsRUFFQSxJQUFBb3FCLEVBQUFuNUIsRUFBQStPLEdBQUEsR0FBQXh2QixPQUFBd3ZCLEdBQ0FxcUIsR0FBQW54QixFQUFBa3hCLEtBQ0FseEIsRUFBQXh5QixNQUFBMGpELFFBRUssaUJBQUE1L0MsR0FBQSt3QyxHQUFBcmlCLEVBQUE2aUIsVUFBQTlxQixFQUFBaUksRUFBQWtvQixXQUFBLENBRUwySSxPQUFBNTBDLFNBQUFFLGNBQUEsT0FDQTAwQyxHQUFBM0ksVUFBQSxRQUFBcGhCLEVBQUEsU0FDQSxJQUFBb2IsRUFBQTJPLEdBQUF6SSxXQUNBLE1BQUFwb0IsRUFBQW9vQixXQUNBcG9CLEVBQUFwa0IsWUFBQW9rQixFQUFBb29CLFlBRUEsTUFBQWxHLEVBQUFrRyxXQUNBcG9CLEVBQUFya0IsWUFBQXVtQyxFQUFBa0csaUJBRUssR0FLTHRoQixJQUFBaXFCLEVBQUF6L0MsR0FJQSxJQUNBMHVCLEVBQUExdUIsR0FBQXcxQixFQUNPLE1BQUFqNUIsUUFRUCxTQUFBc2pELEdBQUFueEIsRUFBQW94QixHQUNBLE9BQUFweEIsRUFBQXF4QixZQUNBLFdBQUFyeEIsRUFBQTZpQixTQUNBeU8sR0FBQXR4QixFQUFBb3hCLElBQ0FHLEdBQUF2eEIsRUFBQW94QixJQUlBLFNBQUFFLEdBQUF0eEIsRUFBQW94QixHQUdBLElBQUFJLEdBQUEsRUFHQSxJQUFPQSxFQUFBdjFDLFNBQUF3MUMsZ0JBQUF6eEIsRUFBK0MsTUFBQW55QixLQUN0RCxPQUFBMmpELEdBQUF4eEIsRUFBQXh5QixRQUFBNGpELEVBR0EsU0FBQUcsR0FBQXZ4QixFQUFBbUQsR0FDQSxJQUFBMzFCLEVBQUF3eUIsRUFBQXh5QixNQUNBczhDLEVBQUE5cEIsRUFBQTB4QixZQUNBLEdBQUExNUIsRUFBQTh4QixHQUFBLENBQ0EsR0FBQUEsRUFBQXlFLE9BQ0EsT0FBQTUxQixFQUFBbnJCLEtBQUFtckIsRUFBQXdLLEdBRUEsR0FBQTJtQixFQUFBbjZCLEtBQ0EsT0FBQW5pQixFQUFBbWlCLFNBQUF3VCxFQUFBeFQsT0FHQSxPQUFBbmlCLElBQUEyMUIsRUFHQSxJQUFBa0ssR0FBQSxDQUNBbDVCLE9BQUEyOEMsR0FDQXB4QixPQUFBb3hCLElBS0FhLEdBQUF0NEIsRUFBQSxTQUFBdTRCLEdBQ0EsSUFBQXh3QyxFQUFBLEdBQ0F5d0MsRUFBQSxnQkFDQUMsRUFBQSxRQU9BLE9BTkFGLEVBQUFuK0MsTUFBQW8rQyxHQUFBdmxDLFFBQUEsU0FBQTRNLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLElBQUE0aEIsRUFBQTVoQixFQUFBemxCLE1BQUFxK0MsR0FDQWhYLEVBQUF6b0MsT0FBQSxJQUFBK08sRUFBQTA1QixFQUFBLEdBQUFuckIsUUFBQW1yQixFQUFBLEdBQUFuckIsV0FHQXZPLElBSUEsU0FBQTJ3QyxHQUFBOTJDLEdBQ0EsSUFBQXNFLEVBQUF5eUMsR0FBQS8yQyxFQUFBc0UsT0FHQSxPQUFBdEUsRUFBQWczQyxZQUNBNTNCLEVBQUFwZixFQUFBZzNDLFlBQUExeUMsR0FDQUEsRUFJQSxTQUFBeXlDLEdBQUFFLEdBQ0EsT0FBQXp4QyxNQUFBelIsUUFBQWtqRCxHQUNBN3hDLEVBQUE2eEMsR0FFQSxrQkFBQUEsRUFDQVAsR0FBQU8sR0FFQUEsRUFPQSxTQUFBQyxHQUFBN3dCLEVBQUE4d0IsR0FDQSxJQUNBQyxFQURBanhDLEVBQUEsR0FHQSxHQUFBZ3hDLEVBQUEsQ0FDQSxJQUFBNVEsRUFBQWxnQixFQUNBLE1BQUFrZ0IsRUFBQWhoQixrQkFDQWdoQixJQUFBaGhCLGtCQUFBbVQsT0FFQTZOLEtBQUF2bUMsT0FDQW8zQyxFQUFBTixHQUFBdlEsRUFBQXZtQyxRQUVBb2YsRUFBQWpaLEVBQUFpeEMsSUFLQUEsRUFBQU4sR0FBQXp3QixFQUFBcm1CLFFBQ0FvZixFQUFBalosRUFBQWl4QyxHQUdBLElBQUE5USxFQUFBamdCLEVBQ0EsTUFBQWlnQixJQUFBN3NCLE9BQ0E2c0IsRUFBQXRtQyxPQUFBbzNDLEVBQUFOLEdBQUF4USxFQUFBdG1DLFFBQ0FvZixFQUFBalosRUFBQWl4QyxHQUdBLE9BQUFqeEMsRUFLQSxJQXlCQWt4QyxHQXpCQUMsR0FBQSxNQUNBQyxHQUFBLGlCQUNBQyxHQUFBLFNBQUE1cEMsRUFBQXpWLEVBQUE0SSxHQUVBLEdBQUF1MkMsR0FBQTFtQyxLQUFBelksR0FDQXlWLEVBQUF0SixNQUFBbXpDLFlBQUF0L0MsRUFBQTRJLFFBQ0csR0FBQXcyQyxHQUFBM21DLEtBQUE3UCxHQUNINk0sRUFBQXRKLE1BQUFtekMsWUFBQTc0QixFQUFBem1CLEdBQUE0SSxFQUFBWSxRQUFBNDFDLEdBQUEscUJBQ0csQ0FDSCxJQUFBRyxFQUFBQyxHQUFBeC9DLEdBQ0EsR0FBQXFOLE1BQUF6UixRQUFBZ04sR0FJQSxRQUFBN0osRUFBQSxFQUFBeXZCLEVBQUE1bEIsRUFBQTNKLE9BQXVDRixFQUFBeXZCLEVBQVN6dkIsSUFDaEQwVyxFQUFBdEosTUFBQW96QyxHQUFBMzJDLEVBQUE3SixRQUdBMFcsRUFBQXRKLE1BQUFvekMsR0FBQTMyQyxJQUtBNjJDLEdBQUEsc0JBR0FELEdBQUF2NUIsRUFBQSxTQUFBME0sR0FHQSxHQUZBdXNCLE9BQUFyMkMsU0FBQUUsY0FBQSxPQUFBb0QsTUFDQXdtQixFQUFBdE0sRUFBQXNNLEdBQ0EsV0FBQUEsUUFBQXVzQixHQUNBLE9BQUF2c0IsRUFHQSxJQURBLElBQUErc0IsRUFBQS9zQixFQUFBdnVCLE9BQUEsR0FBQStTLGNBQUF3YixFQUFBdHVCLE1BQUEsR0FDQXRGLEVBQUEsRUFBaUJBLEVBQUEwZ0QsR0FBQXhnRCxPQUF3QkYsSUFBQSxDQUN6QyxJQUFBaUIsRUFBQXkvQyxHQUFBMWdELEdBQUEyZ0QsRUFDQSxHQUFBMS9DLEtBQUFrL0MsR0FDQSxPQUFBbC9DLEtBS0EsU0FBQTIvQyxHQUFBL2hCLEVBQUExUCxHQUNBLElBQUFybUIsRUFBQXFtQixFQUFBcm1CLEtBQ0E0dkMsRUFBQTdaLEVBQUEvMUIsS0FFQSxLQUFBOGMsRUFBQTljLEVBQUFnM0MsY0FBQWw2QixFQUFBOWMsRUFBQXNFLFFBQ0F3WSxFQUFBOHlCLEVBQUFvSCxjQUFBbDZCLEVBQUE4eUIsRUFBQXRyQyxRQURBLENBTUEsSUFBQXVuQixFQUFBMXpCLEVBQ0F5VixFQUFBeVksRUFBQXRCLElBQ0FnekIsRUFBQW5JLEVBQUFvSCxZQUNBZ0IsRUFBQXBJLEVBQUFxSSxpQkFBQXJJLEVBQUF0ckMsT0FBQSxHQUdBNHpDLEVBQUFILEdBQUFDLEVBRUExekMsRUFBQXl5QyxHQUFBMXdCLEVBQUFybUIsS0FBQXNFLFFBQUEsR0FLQStoQixFQUFBcm1CLEtBQUFpNEMsZ0JBQUFsN0IsRUFBQXpZLEVBQUF3aUIsUUFDQTFILEVBQUEsR0FBZTlhLEdBQ2ZBLEVBRUEsSUFBQTZ6QyxFQUFBakIsR0FBQTd3QixHQUFBLEdBRUEsSUFBQWx1QixLQUFBKy9DLEVBQ0FwN0IsRUFBQXE3QixFQUFBaGdELEtBQ0FxL0MsR0FBQTVwQyxFQUFBelYsRUFBQSxJQUdBLElBQUFBLEtBQUFnZ0QsRUFDQXRzQixFQUFBc3NCLEVBQUFoZ0QsR0FDQTB6QixJQUFBcXNCLEVBQUEvL0MsSUFFQXEvQyxHQUFBNXBDLEVBQUF6VixFQUFBLE1BQUEwekIsRUFBQSxHQUFBQSxJQUtBLElBQUF2bkIsR0FBQSxDQUNBcEwsT0FBQTQrQyxHQUNBcnpCLE9BQUFxekIsSUFLQU0sR0FBQSxNQU1BLFNBQUFDLEdBQUF6cUMsRUFBQWlpQyxHQUVBLEdBQUFBLFFBQUFuN0IsUUFLQSxHQUFBOUcsRUFBQTBxQyxVQUNBekksRUFBQTNsQyxRQUFBLFFBQ0EybEMsRUFBQXIzQyxNQUFBNC9DLElBQUEvbUMsUUFBQSxTQUFBbEMsR0FBb0QsT0FBQXZCLEVBQUEwcUMsVUFBQXQwQixJQUFBN1UsS0FFcER2QixFQUFBMHFDLFVBQUF0MEIsSUFBQTZyQixPQUVHLENBQ0gsSUFBQWhrQixFQUFBLEtBQUFqZSxFQUFBMnFDLGFBQUEsa0JBQ0Exc0IsRUFBQTNoQixRQUFBLElBQUEybEMsRUFBQSxRQUNBamlDLEVBQUFrNkIsYUFBQSxTQUFBamMsRUFBQWdrQixHQUFBbjdCLFNBU0EsU0FBQThqQyxHQUFBNXFDLEVBQUFpaUMsR0FFQSxHQUFBQSxRQUFBbjdCLFFBS0EsR0FBQTlHLEVBQUEwcUMsVUFDQXpJLEVBQUEzbEMsUUFBQSxRQUNBMmxDLEVBQUFyM0MsTUFBQTQvQyxJQUFBL21DLFFBQUEsU0FBQWxDLEdBQW9ELE9BQUF2QixFQUFBMHFDLFVBQUF0NkIsT0FBQTdPLEtBRXBEdkIsRUFBQTBxQyxVQUFBdDZCLE9BQUE2eEIsR0FFQWppQyxFQUFBMHFDLFVBQUFsaEQsUUFDQXdXLEVBQUE2L0IsZ0JBQUEsYUFFRyxDQUNILElBQUE1aEIsRUFBQSxLQUFBamUsRUFBQTJxQyxhQUFBLGtCQUNBRSxFQUFBLElBQUE1SSxFQUFBLElBQ0EsTUFBQWhrQixFQUFBM2hCLFFBQUF1dUMsSUFBQSxFQUNBNXNCLElBQUFscUIsUUFBQTgyQyxFQUFBLEtBRUE1c0IsSUFBQW5YLE9BQ0FtWCxFQUNBamUsRUFBQWs2QixhQUFBLFFBQUFqYyxHQUVBamUsRUFBQTYvQixnQkFBQSxVQU9BLFNBQUFpTCxHQUFBM3VCLEdBQ0EsR0FBQUEsRUFBQSxDQUlBLHFCQUFBQSxFQUFBLENBQ0EsSUFBQTVqQixFQUFBLEdBS0EsT0FKQSxJQUFBNGpCLEVBQUE0dUIsS0FDQXY1QixFQUFBalosRUFBQXl5QyxHQUFBN3VCLEVBQUE1eEIsTUFBQSxNQUVBaW5CLEVBQUFqWixFQUFBNGpCLEdBQ0E1akIsRUFDRyx3QkFBQTRqQixFQUNINnVCLEdBQUE3dUIsUUFERyxHQUtILElBQUE2dUIsR0FBQXg2QixFQUFBLFNBQUFqbUIsR0FDQSxPQUNBMGdELFdBQUExZ0QsRUFBQSxTQUNBMmdELGFBQUEzZ0QsRUFBQSxZQUNBNGdELGlCQUFBNWdELEVBQUEsZ0JBQ0E2Z0QsV0FBQTdnRCxFQUFBLFNBQ0E4Z0QsYUFBQTlnRCxFQUFBLFlBQ0ErZ0QsaUJBQUEvZ0QsRUFBQSxtQkFJQWdoRCxHQUFBNzJCLElBQUFPLEdBQ0F1MkIsR0FBQSxhQUNBQyxHQUFBLFlBR0FDLEdBQUEsYUFDQUMsR0FBQSxnQkFDQUMsR0FBQSxZQUNBQyxHQUFBLGVBQ0FOLFVBRUE5bUQsSUFBQXdLLE9BQUE2OEMsc0JBQ0FybkQsSUFBQXdLLE9BQUE4OEMsd0JBRUFMLEdBQUEsbUJBQ0FDLEdBQUEsNEJBRUFsbkQsSUFBQXdLLE9BQUErOEMscUJBQ0F2bkQsSUFBQXdLLE9BQUFnOUMsdUJBRUFMLEdBQUEsa0JBQ0FDLEdBQUEsdUJBS0EsSUFBQUssR0FBQXgzQixFQUNBemxCLE9BQUFrOUMsc0JBQ0FsOUMsT0FBQWs5QyxzQkFBQTk2QixLQUFBcGlCLFFBQ0ErRCxXQUNBLFNBQUFmLEdBQThDLE9BQUFBLEtBRTlDLFNBQUFtNkMsR0FBQW42QyxHQUNBaTZDLEdBQUEsV0FDQUEsR0FBQWo2QyxLQUlBLFNBQUFvNkMsR0FBQXJzQyxFQUFBaWlDLEdBQ0EsSUFBQXFLLEVBQUF0c0MsRUFBQW1pQyxxQkFBQW5pQyxFQUFBbWlDLG1CQUFBLElBQ0FtSyxFQUFBaHdDLFFBQUEybEMsR0FBQSxJQUNBcUssRUFBQXZpRCxLQUFBazRDLEdBQ0F3SSxHQUFBenFDLEVBQUFpaUMsSUFJQSxTQUFBc0ssR0FBQXZzQyxFQUFBaWlDLEdBQ0FqaUMsRUFBQW1pQyxvQkFDQS94QixFQUFBcFEsRUFBQW1pQyxtQkFBQUYsR0FFQTJJLEdBQUE1cUMsRUFBQWlpQyxHQUdBLFNBQUF1SyxHQUNBeHNDLEVBQ0F5c0MsRUFDQXh0QixHQUVBLElBQUF1TSxFQUFBa2hCLEdBQUExc0MsRUFBQXlzQyxHQUNBdjVDLEVBQUFzNEIsRUFBQXQ0QixLQUNBNDVCLEVBQUF0QixFQUFBc0IsUUFDQTZmLEVBQUFuaEIsRUFBQW1oQixVQUNBLElBQUF6NUMsRUFBYyxPQUFBK3JCLElBQ2QsSUFBQTlzQixFQUFBZSxJQUFBczRDLEdBQUFHLEdBQUFFLEdBQ0FlLEVBQUEsRUFDQS9OLEVBQUEsV0FDQTcrQixFQUFBcUosb0JBQUFsWCxFQUFBMDZDLEdBQ0E1dEIsS0FFQTR0QixFQUFBLFNBQUE3bkQsR0FDQUEsRUFBQTBiLFNBQUFWLEtBQ0E0c0MsR0FBQUQsR0FDQTlOLEtBSUE3ckMsV0FBQSxXQUNBNDVDLEVBQUFELEdBQ0E5TixLQUVHL1IsRUFBQSxHQUNIOXNCLEVBQUFwTixpQkFBQVQsRUFBQTA2QyxHQUdBLElBQUFDLEdBQUEseUJBRUEsU0FBQUosR0FBQTFzQyxFQUFBeXNDLEdBQ0EsSUFTQXY1QyxFQVRBNjVDLEVBQUE5OUMsT0FBQSs5QyxpQkFBQWh0QyxHQUVBaXRDLEdBQUFGLEVBQUFyQixHQUFBLGNBQUE5Z0QsTUFBQSxNQUNBc2lELEdBQUFILEVBQUFyQixHQUFBLGlCQUFBOWdELE1BQUEsTUFDQXVpRCxFQUFBQyxHQUFBSCxFQUFBQyxHQUNBRyxHQUFBTixFQUFBbkIsR0FBQSxjQUFBaGhELE1BQUEsTUFDQTBpRCxHQUFBUCxFQUFBbkIsR0FBQSxpQkFBQWhoRCxNQUFBLE1BQ0EyaUQsRUFBQUgsR0FBQUMsRUFBQUMsR0FHQXhnQixFQUFBLEVBQ0E2ZixFQUFBLEVBRUFGLElBQUFqQixHQUNBMkIsRUFBQSxJQUNBajZDLEVBQUFzNEMsR0FDQTFlLEVBQUFxZ0IsRUFDQVIsRUFBQU8sRUFBQTFqRCxRQUVHaWpELElBQUFoQixHQUNIOEIsRUFBQSxJQUNBcjZDLEVBQUF1NEMsR0FDQTNlLEVBQUF5Z0IsRUFDQVosRUFBQVcsRUFBQTlqRCxTQUdBc2pDLEVBQUE3Z0MsS0FBQWtFLElBQUFnOUMsRUFBQUksR0FDQXI2QyxFQUFBNDVCLEVBQUEsRUFDQXFnQixFQUFBSSxFQUNBL0IsR0FDQUMsR0FDQSxLQUNBa0IsRUFBQXo1QyxFQUNBQSxJQUFBczRDLEdBQ0EwQixFQUFBMWpELE9BQ0E4akQsRUFBQTlqRCxPQUNBLEdBRUEsSUFBQWdrRCxFQUNBdDZDLElBQUFzNEMsSUFDQXNCLEdBQUE5cEMsS0FBQStwQyxFQUFBckIsR0FBQSxhQUNBLE9BQ0F4NEMsT0FDQTQ1QixVQUNBNmYsWUFDQWEsZ0JBSUEsU0FBQUosR0FBQUssRUFBQUMsR0FFQSxNQUFBRCxFQUFBamtELE9BQUFra0QsRUFBQWxrRCxPQUNBaWtELElBQUFwc0MsT0FBQW9zQyxHQUdBLE9BQUF4aEQsS0FBQWtFLElBQUFwRSxNQUFBLEtBQUEyaEQsRUFBQWxxQyxJQUFBLFNBQUE0SixFQUFBOWpCLEdBQ0EsT0FBQXFrRCxHQUFBdmdDLEdBQUF1Z0MsR0FBQUYsRUFBQW5rRCxPQVFBLFNBQUFxa0QsR0FBQW4vQyxHQUNBLFdBQUE0YixPQUFBNWIsRUFBQUksTUFBQSxNQUFBbUYsUUFBQSxVQUtBLFNBQUF5SixHQUFBaWIsRUFBQW0xQixHQUNBLElBQUE1dEMsRUFBQXlZLEVBQUF0QixJQUdBaEksRUFBQW5QLEVBQUErL0IsWUFDQS8vQixFQUFBKy9CLFNBQUE4TixXQUFBLEVBQ0E3dEMsRUFBQSsvQixZQUdBLElBQUEzdEMsRUFBQTA0QyxHQUFBcnlCLEVBQUFybUIsS0FBQTRxQyxZQUNBLElBQUE5dEIsRUFBQTljLEtBS0ErYyxFQUFBblAsRUFBQTh0QyxXQUFBLElBQUE5dEMsRUFBQTIvQixTQUFBLENBSUEsSUFBQW9MLEVBQUEzNEMsRUFBQTI0QyxJQUNBNzNDLEVBQUFkLEVBQUFjLEtBQ0ErM0MsRUFBQTc0QyxFQUFBNjRDLFdBQ0FDLEVBQUE5NEMsRUFBQTg0QyxhQUNBQyxFQUFBLzRDLEVBQUErNEMsaUJBQ0E0QyxFQUFBMzdDLEVBQUEyN0MsWUFDQUMsRUFBQTU3QyxFQUFBNDdDLGNBQ0FDLEVBQUE3N0MsRUFBQTY3QyxrQkFDQUMsRUFBQTk3QyxFQUFBODdDLFlBQ0Exd0MsRUFBQXBMLEVBQUFvTCxNQUNBMndDLEVBQUEvN0MsRUFBQSs3QyxXQUNBQyxFQUFBaDhDLEVBQUFnOEMsZUFDQUMsRUFBQWo4QyxFQUFBaThDLGFBQ0FDLEVBQUFsOEMsRUFBQWs4QyxPQUNBQyxFQUFBbjhDLEVBQUFtOEMsWUFDQUMsRUFBQXA4QyxFQUFBbzhDLGdCQUNBQyxFQUFBcjhDLEVBQUFxOEMsU0FNQXIzQixFQUFBNlEsR0FDQXltQixFQUFBem1CLEdBQUFzQyxPQUNBLE1BQUFta0IsS0FBQTdpQyxPQUNBdUwsRUFBQXMzQixFQUFBdDNCLFFBQ0FzM0IsSUFBQTdpQyxPQUdBLElBQUE4aUMsR0FBQXYzQixFQUFBa1IsYUFBQTdQLEVBQUFYLGFBRUEsSUFBQTYyQixHQUFBTCxHQUFBLEtBQUFBLEVBQUEsQ0FJQSxJQUFBTSxFQUFBRCxHQUFBWixFQUNBQSxFQUNBOUMsRUFDQTRELEVBQUFGLEdBQUFWLEVBQ0FBLEVBQ0E5QyxFQUNBMkQsRUFBQUgsR0FBQVgsRUFDQUEsRUFDQTlDLEVBRUE2RCxFQUFBSixHQUNBTixHQUNBSCxFQUNBYyxFQUFBTCxHQUNBLG9CQUFBTCxJQUNBOXdDLEVBQ0F5eEMsRUFBQU4sR0FDQUosR0FDQUosRUFDQWUsRUFBQVAsR0FDQUgsR0FDQUosRUFFQWUsRUFBQXIvQixFQUNBenBCLEVBQUFvb0QsR0FDQUEsRUFBQWp4QyxNQUNBaXhDLEdBR00sRUFJTixJQUFBVyxHQUFBLElBQUFyRSxJQUFBOTFCLEdBQ0FvNkIsRUFBQUMsR0FBQU4sR0FFQS92QixFQUFBamYsRUFBQTh0QyxTQUFBbjdCLEVBQUEsV0FDQXk4QixJQUNBN0MsR0FBQXZzQyxFQUFBOHVDLEdBQ0F2QyxHQUFBdnNDLEVBQUE2dUMsSUFFQTV2QixFQUFBNHVCLFdBQ0F1QixHQUNBN0MsR0FBQXZzQyxFQUFBNHVDLEdBRUFNLEtBQUFsdkMsSUFFQWl2QyxLQUFBanZDLEdBRUFBLEVBQUE4dEMsU0FBQSxPQUdBcjFCLEVBQUFybUIsS0FBQW05QyxNQUVBaHZCLEdBQUE5SCxFQUFBLG9CQUNBLElBQUE1TSxFQUFBN0wsRUFBQTA0QixXQUNBOFcsRUFBQTNqQyxLQUFBNGpDLFVBQUE1akMsRUFBQTRqQyxTQUFBaDNCLEVBQUFod0IsS0FDQSttRCxHQUNBQSxFQUFBMXFELE1BQUEyekIsRUFBQTN6QixLQUNBMHFELEVBQUFyNEIsSUFBQTRvQixVQUVBeVAsRUFBQXI0QixJQUFBNG9CLFdBRUFpUCxLQUFBaHZDLEVBQUFpZixLQUtBOHZCLEtBQUEvdUMsR0FDQW92QyxJQUNBL0MsR0FBQXJzQyxFQUFBNHVDLEdBQ0F2QyxHQUFBcnNDLEVBQUE2dUMsR0FDQXpDLEdBQUEsV0FDQUcsR0FBQXZzQyxFQUFBNHVDLEdBQ0EzdkIsRUFBQTR1QixZQUNBeEIsR0FBQXJzQyxFQUFBOHVDLEdBQ0FPLElBQ0FLLEdBQUFQLEdBQ0FuOEMsV0FBQWlzQixFQUFBa3dCLEdBRUEzQyxHQUFBeHNDLEVBQUE5TSxFQUFBK3JCLFFBT0F4RyxFQUFBcm1CLEtBQUFtOUMsT0FDQTNCLE9BQ0FvQixLQUFBaHZDLEVBQUFpZixJQUdBbXdCLEdBQUFDLEdBQ0Fwd0IsTUFJQSxTQUFBMHdCLEdBQUFsM0IsRUFBQWlsQixHQUNBLElBQUExOUIsRUFBQXlZLEVBQUF0QixJQUdBaEksRUFBQW5QLEVBQUE4dEMsWUFDQTl0QyxFQUFBOHRDLFNBQUFELFdBQUEsRUFDQTd0QyxFQUFBOHRDLFlBR0EsSUFBQTE3QyxFQUFBMDRDLEdBQUFyeUIsRUFBQXJtQixLQUFBNHFDLFlBQ0EsR0FBQTl0QixFQUFBOWMsSUFBQSxJQUFBNE4sRUFBQTIvQixTQUNBLE9BQUFqQyxJQUlBLElBQUF2dUIsRUFBQW5QLEVBQUErL0IsVUFBQSxDQUlBLElBQUFnTCxFQUFBMzRDLEVBQUEyNEMsSUFDQTczQyxFQUFBZCxFQUFBYyxLQUNBazRDLEVBQUFoNUMsRUFBQWc1QyxXQUNBQyxFQUFBajVDLEVBQUFpNUMsYUFDQUMsRUFBQWw1QyxFQUFBazVDLGlCQUNBc0UsRUFBQXg5QyxFQUFBdzlDLFlBQ0FELEVBQUF2OUMsRUFBQXU5QyxNQUNBRSxFQUFBejlDLEVBQUF5OUMsV0FDQUMsRUFBQTE5QyxFQUFBMDlDLGVBQ0FDLEVBQUEzOUMsRUFBQTI5QyxXQUNBdEIsRUFBQXI4QyxFQUFBcThDLFNBRUFXLEdBQUEsSUFBQXJFLElBQUE5MUIsR0FDQW82QixFQUFBQyxHQUFBSyxHQUVBSyxFQUFBbGdDLEVBQ0F6cEIsRUFBQW9vRCxHQUNBQSxFQUFBa0IsTUFDQWxCLEdBR00sRUFJTixJQUFBeHZCLEVBQUFqZixFQUFBKy9CLFNBQUFwdEIsRUFBQSxXQUNBM1MsRUFBQTA0QixZQUFBMTRCLEVBQUEwNEIsV0FBQStXLFdBQ0F6dkMsRUFBQTA0QixXQUFBK1csU0FBQWgzQixFQUFBaHdCLEtBQUEsTUFFQTJtRCxJQUNBN0MsR0FBQXZzQyxFQUFBcXJDLEdBQ0FrQixHQUFBdnNDLEVBQUFzckMsSUFFQXJzQixFQUFBNHVCLFdBQ0F1QixHQUNBN0MsR0FBQXZzQyxFQUFBb3JDLEdBRUEwRSxLQUFBOXZDLEtBRUEwOUIsSUFDQW1TLEtBQUE3dkMsSUFFQUEsRUFBQSsvQixTQUFBLE9BR0FnUSxFQUNBQSxFQUFBRSxHQUVBQSxJQUdBLFNBQUFBLElBRUFoeEIsRUFBQTR1QixhQUlBcDFCLEVBQUFybUIsS0FBQW05QyxNQUFBdnZDLEVBQUEwNEIsY0FDQTE0QixFQUFBMDRCLFdBQUErVyxXQUFBenZDLEVBQUEwNEIsV0FBQStXLFNBQUEsS0FBNkRoM0IsRUFBQSxLQUFBQSxHQUU3RG0zQixLQUFBNXZDLEdBQ0FvdkMsSUFDQS9DLEdBQUFyc0MsRUFBQW9yQyxHQUNBaUIsR0FBQXJzQyxFQUFBc3JDLEdBQ0FjLEdBQUEsV0FDQUcsR0FBQXZzQyxFQUFBb3JDLEdBQ0Fuc0IsRUFBQTR1QixZQUNBeEIsR0FBQXJzQyxFQUFBcXJDLEdBQ0FnRSxJQUNBSyxHQUFBTSxHQUNBaDlDLFdBQUFpc0IsRUFBQSt3QixHQUVBeEQsR0FBQXhzQyxFQUFBOU0sRUFBQStyQixRQU1BMHdCLEtBQUEzdkMsRUFBQWlmLEdBQ0Ftd0IsR0FBQUMsR0FDQXB3QixNQXNCQSxTQUFBeXdCLEdBQUF2OEMsR0FDQSx3QkFBQUEsSUFBQTBGLE1BQUExRixHQVNBLFNBQUFtOEMsR0FBQXI5QyxHQUNBLEdBQUFpZCxFQUFBamQsR0FDQSxTQUVBLElBQUFpK0MsRUFBQWorQyxFQUFBdUMsSUFDQSxPQUFBMmEsRUFBQStnQyxHQUVBWixHQUNBMTNDLE1BQUF6UixRQUFBK3BELEdBQ0FBLEVBQUEsR0FDQUEsSUFHQWorQyxFQUFBa2YsU0FBQWxmLEVBQUF6SSxRQUFBLEVBSUEsU0FBQTJtRCxHQUFBdC9CLEVBQUE0SCxJQUNBLElBQUFBLEVBQUFybUIsS0FBQW05QyxNQUNBL3hDLEdBQUFpYixHQUlBLElBQUF1a0IsR0FBQXRvQixFQUFBLENBQ0FwcEIsT0FBQTZrRCxHQUNBbFQsU0FBQWtULEdBQ0EvL0IsT0FBQSxTQUFBcUksRUFBQWlsQixJQUVBLElBQUFqbEIsRUFBQXJtQixLQUFBbTlDLEtBQ0FJLEdBQUFsM0IsRUFBQWlsQixHQUVBQSxNQUdDLEdBRUQwUyxHQUFBLENBQ0F2dkIsR0FDQTRoQixHQUNBaUMsR0FDQWxnQixHQUNBOXRCLEdBQ0FzbUMsSUFPQWpyQixHQUFBcStCLEdBQUEvdUMsT0FBQSsvQixJQUVBaVAsR0FBQTFVLEdBQUEsQ0FBaUNiLFdBQUEvb0IsYUFRakNrRCxJQUVBN2hCLFNBQUFSLGlCQUFBLDZCQUNBLElBQUFvTixFQUFBNU0sU0FBQXcxQyxjQUNBNW9DLEtBQUFzd0MsUUFDQUMsR0FBQXZ3QyxFQUFBLFdBS0EsSUFBQXd3QyxHQUFBLENBQ0F4M0IsU0FBQSxTQUFBaFosRUFBQXl3QyxFQUFBaDRCLEVBQUEwUCxHQUNBLFdBQUExUCxFQUFBM3pCLEtBRUFxakMsRUFBQWhSLE1BQUFnUixFQUFBaFIsSUFBQXU1QixVQUNBbndCLEdBQUE5SCxFQUFBLHVCQUNBKzNCLEdBQUExUCxpQkFBQTlnQyxFQUFBeXdDLEVBQUFoNEIsS0FHQWs0QixHQUFBM3dDLEVBQUF5d0MsRUFBQWg0QixFQUFBckIsU0FFQXBYLEVBQUEwd0MsVUFBQSxHQUFBbHRDLElBQUEzZSxLQUFBbWIsRUFBQXdHLFFBQUFvcUMsTUFDSyxhQUFBbjRCLEVBQUEzekIsS0FBQSswQyxHQUFBNzVCLEVBQUE5TSxTQUNMOE0sRUFBQTZvQyxZQUFBNEgsRUFBQXhQLFVBQ0F3UCxFQUFBeFAsVUFBQXpQLE9BQ0F4eEIsRUFBQXBOLGlCQUFBLG1CQUFBaStDLElBQ0E3d0MsRUFBQXBOLGlCQUFBLGlCQUFBaytDLElBS0E5d0MsRUFBQXBOLGlCQUFBLFNBQUFrK0MsSUFFQTc3QixLQUNBalYsRUFBQXN3QyxRQUFBLE1BTUF4UCxpQkFBQSxTQUFBOWdDLEVBQUF5d0MsRUFBQWg0QixHQUNBLGNBQUFBLEVBQUEzekIsSUFBQSxDQUNBNnJELEdBQUEzd0MsRUFBQXl3QyxFQUFBaDRCLEVBQUFyQixTQUtBLElBQUEyNUIsRUFBQS93QyxFQUFBMHdDLFVBQ0FNLEVBQUFoeEMsRUFBQTB3QyxVQUFBLEdBQUFsdEMsSUFBQTNlLEtBQUFtYixFQUFBd0csUUFBQW9xQyxJQUNBLEdBQUFJLEVBQUFDLEtBQUEsU0FBQW5rQyxFQUFBeGpCLEdBQTJDLE9BQUEyb0IsRUFBQW5GLEVBQUFpa0MsRUFBQXpuRCxNQUF5QyxDQUdwRixJQUFBNG5ELEVBQUFseEMsRUFBQWk2QixTQUNBd1csRUFBQTlyRCxNQUFBc3NELEtBQUEsU0FBQTl5QyxHQUE2QyxPQUFBZ3pDLEdBQUFoekMsRUFBQTZ5QyxLQUM3Q1AsRUFBQTlyRCxRQUFBOHJELEVBQUF6cUMsVUFBQW1yQyxHQUFBVixFQUFBOXJELE1BQUFxc0QsR0FDQUUsR0FDQVgsR0FBQXZ3QyxFQUFBLGNBT0EsU0FBQTJ3QyxHQUFBM3dDLEVBQUF5d0MsRUFBQTExQixHQUNBcTJCLEdBQUFweEMsRUFBQXl3QyxFQUFBMTFCLElBRUEvRixJQUFBRSxLQUNBbGlCLFdBQUEsV0FDQW8rQyxHQUFBcHhDLEVBQUF5d0MsRUFBQTExQixJQUNLLEdBSUwsU0FBQXEyQixHQUFBcHhDLEVBQUF5d0MsRUFBQTExQixHQUNBLElBQUFwMkIsRUFBQThyRCxFQUFBOXJELE1BQ0Ewc0QsRUFBQXJ4QyxFQUFBaTZCLFNBQ0EsSUFBQW9YLEdBQUF6NUMsTUFBQXpSLFFBQUF4QixHQUFBLENBU0EsSUFEQSxJQUFBeXBCLEVBQUFrakMsRUFDQWhvRCxFQUFBLEVBQUFDLEVBQUF5VyxFQUFBd0csUUFBQWhkLE9BQXdDRixFQUFBQyxFQUFPRCxJQUUvQyxHQURBZ29ELEVBQUF0eEMsRUFBQXdHLFFBQUFsZCxHQUNBK25ELEVBQ0FqakMsRUFBQXNFLEVBQUEvdEIsRUFBQWlzRCxHQUFBVSxLQUFBLEVBQ0FBLEVBQUFsakMsZUFDQWtqQyxFQUFBbGpDLGlCQUdBLEdBQUE2RCxFQUFBMitCLEdBQUFVLEdBQUEzc0QsR0FJQSxZQUhBcWIsRUFBQXV4QyxnQkFBQWpvRCxJQUNBMFcsRUFBQXV4QyxjQUFBam9ELElBTUErbkQsSUFDQXJ4QyxFQUFBdXhDLGVBQUEsSUFJQSxTQUFBSixHQUFBeHNELEVBQUE2aEIsR0FDQSxPQUFBQSxFQUFBOEwsTUFBQSxTQUFBeEYsR0FBcUMsT0FBQW1GLEVBQUFuRixFQUFBbm9CLEtBR3JDLFNBQUFpc0QsR0FBQVUsR0FDQSxpQkFBQUEsRUFDQUEsRUFBQWxKLE9BQ0FrSixFQUFBM3NELE1BR0EsU0FBQWtzRCxHQUFBN3JELEdBQ0FBLEVBQUEwYixPQUFBOG5DLFdBQUEsRUFHQSxTQUFBc0ksR0FBQTlyRCxHQUVBQSxFQUFBMGIsT0FBQThuQyxZQUNBeGpELEVBQUEwYixPQUFBOG5DLFdBQUEsRUFDQStILEdBQUF2ckQsRUFBQTBiLE9BQUEsVUFHQSxTQUFBNnZDLEdBQUF2d0MsRUFBQTlNLEdBQ0EsSUFBQWxPLEVBQUFvTyxTQUFBczlCLFlBQUEsY0FDQTFyQyxFQUFBd3NELFVBQUF0K0MsR0FBQSxNQUNBOE0sRUFBQXl4QyxjQUFBenNELEdBTUEsU0FBQTBzRCxHQUFBajVCLEdBQ0EsT0FBQUEsRUFBQWQsbUJBQUFjLEVBQUFybUIsTUFBQXFtQixFQUFBcm1CLEtBQUE0cUMsV0FFQXZrQixFQURBaTVCLEdBQUFqNUIsRUFBQWQsa0JBQUFtVCxRQUlBLElBQUF5a0IsR0FBQSxDQUNBbCtCLEtBQUEsU0FBQXJSLEVBQUF3ckIsRUFBQS9TLEdBQ0EsSUFBQTl6QixFQUFBNm1DLEVBQUE3bUMsTUFFQTh6QixFQUFBaTVCLEdBQUFqNUIsR0FDQSxJQUFBazVCLEVBQUFsNUIsRUFBQXJtQixNQUFBcW1CLEVBQUFybUIsS0FBQTRxQyxXQUNBNFUsRUFBQTV4QyxFQUFBNnhDLG1CQUNBLFNBQUE3eEMsRUFBQXRKLE1BQUFDLFFBQUEsR0FBQXFKLEVBQUF0SixNQUFBQyxRQUNBaFMsR0FBQWd0RCxHQUNBbDVCLEVBQUFybUIsS0FBQW05QyxNQUFBLEVBQ0EveEMsR0FBQWliLEVBQUEsV0FDQXpZLEVBQUF0SixNQUFBQyxRQUFBaTdDLEtBR0E1eEMsRUFBQXRKLE1BQUFDLFFBQUFoUyxFQUFBaXRELEVBQUEsUUFJQS82QixPQUFBLFNBQUE3VyxFQUFBd3JCLEVBQUEvUyxHQUNBLElBQUE5ekIsRUFBQTZtQyxFQUFBN21DLE1BQ0FxaEIsRUFBQXdsQixFQUFBeGxCLFNBR0EsSUFBQXJoQixLQUFBcWhCLEVBQUEsQ0FDQXlTLEVBQUFpNUIsR0FBQWo1QixHQUNBLElBQUFrNUIsRUFBQWw1QixFQUFBcm1CLE1BQUFxbUIsRUFBQXJtQixLQUFBNHFDLFdBQ0EyVSxHQUNBbDVCLEVBQUFybUIsS0FBQW05QyxNQUFBLEVBQ0E1cUQsRUFDQTZZLEdBQUFpYixFQUFBLFdBQ0F6WSxFQUFBdEosTUFBQUMsUUFBQXFKLEVBQUE2eEMscUJBR0FsQyxHQUFBbDNCLEVBQUEsV0FDQXpZLEVBQUF0SixNQUFBQyxRQUFBLFVBSUFxSixFQUFBdEosTUFBQUMsUUFBQWhTLEVBQUFxYixFQUFBNnhDLG1CQUFBLFNBSUFDLE9BQUEsU0FDQTl4QyxFQUNBeXdDLEVBQ0FoNEIsRUFDQTBQLEVBQ0FtWSxHQUVBQSxJQUNBdGdDLEVBQUF0SixNQUFBQyxRQUFBcUosRUFBQTZ4QyxzQkFLQUUsR0FBQSxDQUNBM29CLE1BQUFvbkIsR0FDQWpCLFNBS0F5QyxHQUFBLENBQ0F6bkQsS0FBQWtFLE9BQ0E2L0MsT0FBQTNqQyxRQUNBb2dDLElBQUFwZ0MsUUFDQWpMLEtBQUFqUixPQUNBeUUsS0FBQXpFLE9BQ0F3OEMsV0FBQXg4QyxPQUNBMjhDLFdBQUEzOEMsT0FDQXk4QyxhQUFBejhDLE9BQ0E0OEMsYUFBQTU4QyxPQUNBMDhDLGlCQUFBMThDLE9BQ0E2OEMsaUJBQUE3OEMsT0FDQXMvQyxZQUFBdC9DLE9BQ0F3L0Msa0JBQUF4L0MsT0FDQXUvQyxjQUFBdi9DLE9BQ0FnZ0QsU0FBQSxDQUFBcmtDLE9BQUEzYixPQUFBdkssU0FLQSxTQUFBK3RELEdBQUF4NUIsR0FDQSxJQUFBeTVCLEVBQUF6NUIsS0FBQXBCLGlCQUNBLE9BQUE2NkIsS0FBQXA4QixLQUFBdFAsUUFBQWdqQixTQUNBeW9CLEdBQUFsbEIsR0FBQW1sQixFQUFBaDdCLFdBRUF1QixFQUlBLFNBQUEwNUIsR0FBQXptQixHQUNBLElBQUF0NUIsRUFBQSxHQUNBb1UsRUFBQWtsQixFQUFBaE8sU0FFQSxRQUFBajFCLEtBQUErZCxFQUFBeVcsVUFDQTdxQixFQUFBM0osR0FBQWlqQyxFQUFBampDLEdBSUEsSUFBQXcrQixFQUFBemdCLEVBQUEwa0IsaUJBQ0EsUUFBQTNQLEtBQUEwTCxFQUNBNzBCLEVBQUF3ZSxFQUFBMkssSUFBQTBMLEVBQUExTCxHQUVBLE9BQUFucEIsRUFHQSxTQUFBZ2dELEdBQUF2bEMsRUFBQXdsQyxHQUNBLG9CQUFBcnZDLEtBQUFxdkMsRUFBQXZ0RCxLQUNBLE9BQUErbkIsRUFBQSxjQUNBMk8sTUFBQTYyQixFQUFBaDdCLGlCQUFBNEYsWUFLQSxTQUFBcTFCLEdBQUE3NUIsR0FDQSxNQUFBQSxJQUFBNU0sT0FDQSxHQUFBNE0sRUFBQXJtQixLQUFBNHFDLFdBQ0EsU0FLQSxTQUFBdVYsR0FBQWw2QixFQUFBbTZCLEdBQ0EsT0FBQUEsRUFBQS9wRCxNQUFBNHZCLEVBQUE1dkIsS0FBQStwRCxFQUFBMXRELE1BQUF1ekIsRUFBQXZ6QixJQUdBLElBQUEydEQsR0FBQSxTQUFBbHhDLEdBQWtDLE9BQUFBLEVBQUF6YyxLQUFBcXpCLEdBQUE1VyxJQUVsQ214QyxHQUFBLFNBQUF0bEMsR0FBcUMsZUFBQUEsRUFBQTdpQixNQUVyQ29vRCxHQUFBLENBQ0Fwb0QsS0FBQSxhQUNBaXhCLE1BQUF3MkIsR0FDQXhvQixVQUFBLEVBRUF2RyxPQUFBLFNBQUFwVyxHQUNBLElBQUErWixFQUFBdCtCLEtBRUE0dUIsRUFBQTV1QixLQUFBazdCLE9BQUEvRixRQUNBLEdBQUF2RyxJQUtBQSxJQUFBdE0sT0FBQTZuQyxJQUVBdjdCLEVBQUExdEIsUUFBQSxDQUtRLEVBUVIsSUFBQWtXLEVBQUFwWCxLQUFBb1gsS0FHUSxFQVNSLElBQUEyeUMsRUFBQW43QixFQUFBLEdBSUEsR0FBQW83QixHQUFBaHFELEtBQUFpaUMsUUFDQSxPQUFBOG5CLEVBS0EsSUFBQWg2QixFQUFBNDVCLEdBQUFJLEdBRUEsSUFBQWg2QixFQUNBLE9BQUFnNkIsRUFHQSxHQUFBL3BELEtBQUFzcUQsU0FDQSxPQUFBUixHQUFBdmxDLEVBQUF3bEMsR0FNQSxJQUFBcmdELEVBQUEsZ0JBQUExSixLQUFBLFNBQ0ErdkIsRUFBQTV2QixJQUFBLE1BQUE0dkIsRUFBQTV2QixJQUNBNHZCLEVBQUFOLFVBQ0EvbEIsRUFBQSxVQUNBQSxFQUFBcW1CLEVBQUF2ekIsSUFDQXdxQixFQUFBK0ksRUFBQTV2QixLQUNBLElBQUFnRyxPQUFBNHBCLEVBQUE1dkIsS0FBQTZULFFBQUF0SyxHQUFBcW1CLEVBQUE1dkIsSUFBQXVKLEVBQUFxbUIsRUFBQTV2QixJQUNBNHZCLEVBQUE1dkIsSUFFQSxJQUFBMkosR0FBQWltQixFQUFBam1CLE9BQUFpbUIsRUFBQWptQixLQUFBLEtBQThDNHFDLFdBQUFtVixHQUFBN3BELE1BQzlDdXFELEVBQUF2cUQsS0FBQXdpQyxPQUNBMG5CLEVBQUFQLEdBQUFZLEdBUUEsR0FKQXg2QixFQUFBam1CLEtBQUE4cEIsWUFBQTdELEVBQUFqbUIsS0FBQThwQixXQUFBKzBCLEtBQUF5QixNQUNBcjZCLEVBQUFqbUIsS0FBQW05QyxNQUFBLEdBSUFpRCxHQUNBQSxFQUFBcGdELE9BQ0FtZ0QsR0FBQWw2QixFQUFBbTZCLEtBQ0FyNkIsR0FBQXE2QixNQUVBQSxFQUFBNzZCLG9CQUFBNjZCLEVBQUE3NkIsa0JBQUFtVCxPQUFBL1MsV0FDQSxDQUdBLElBQUFpcUIsRUFBQXdRLEVBQUFwZ0QsS0FBQTRxQyxXQUFBeHJCLEVBQUEsR0FBd0RwZixHQUV4RCxjQUFBc04sRUFPQSxPQUxBcFgsS0FBQXNxRCxVQUFBLEVBQ0FyeUIsR0FBQXloQixFQUFBLHdCQUNBcGIsRUFBQWdzQixVQUFBLEVBQ0Foc0IsRUFBQThGLGlCQUVBMGxCLEdBQUF2bEMsRUFBQXdsQyxHQUNPLGNBQUEzeUMsRUFBQSxDQUNQLEdBQUF5WSxHQUFBRSxHQUNBLE9BQUF3NkIsRUFFQSxJQUFBQyxFQUNBN0MsRUFBQSxXQUF3QzZDLEtBQ3hDdnlCLEdBQUFudUIsRUFBQSxhQUFBNjlDLEdBQ0ExdkIsR0FBQW51QixFQUFBLGlCQUFBNjlDLEdBQ0ExdkIsR0FBQXloQixFQUFBLHNCQUFBMk4sR0FBZ0VtRCxFQUFBbkQsS0FJaEUsT0FBQTBDLEtBTUE3MkIsR0FBQWhLLEVBQUEsQ0FDQTFzQixJQUFBMkosT0FDQXNrRCxVQUFBdGtELFFBQ0N1akQsV0FFRHgyQixHQUFBOWIsS0FFQSxJQUFBc3pDLEdBQUEsQ0FDQXgzQixTQUVBeTNCLFlBQUEsV0FDQSxJQUFBcnNCLEVBQUF0K0IsS0FFQXV1QixFQUFBdnVCLEtBQUFvbUMsUUFDQXBtQyxLQUFBb21DLFFBQUEsU0FBQWpXLEVBQUFrUCxHQUNBLElBQUFtSCxFQUFBZixHQUFBbkgsR0FFQUEsRUFBQW1JLFVBQ0FuSSxFQUFBa0UsT0FDQWxFLEVBQUFzc0IsTUFDQSxHQUNBLEdBRUF0c0IsRUFBQWtFLE9BQUFsRSxFQUFBc3NCLEtBQ0Fwa0IsSUFDQWpZLEVBQUFoeUIsS0FBQStoQyxFQUFBbk8sRUFBQWtQLEtBSUExRSxPQUFBLFNBQUFwVyxHQVFBLElBUEEsSUFBQS9uQixFQUFBd0QsS0FBQXhELEtBQUF3RCxLQUFBaWlDLE9BQUFuNEIsS0FBQXROLEtBQUEsT0FDQTBlLEVBQUF0ZixPQUFBb0gsT0FBQSxNQUNBNm5ELEVBQUE3cUQsS0FBQTZxRCxhQUFBN3FELEtBQUE0dUIsU0FDQWs4QixFQUFBOXFELEtBQUFrN0IsT0FBQS9GLFNBQUEsR0FDQXZHLEVBQUE1dUIsS0FBQTR1QixTQUFBLEdBQ0FtOEIsRUFBQWxCLEdBQUE3cEQsTUFFQWdCLEVBQUEsRUFBbUJBLEVBQUE4cEQsRUFBQTVwRCxPQUF3QkYsSUFBQSxDQUMzQyxJQUFBaVksRUFBQTZ4QyxFQUFBOXBELEdBQ0EsR0FBQWlZLEVBQUF6YyxJQUNBLFNBQUF5YyxFQUFBOVksS0FBQSxJQUFBZ0csT0FBQThTLEVBQUE5WSxLQUFBNlQsUUFBQSxXQUNBNGEsRUFBQW50QixLQUFBd1gsR0FDQWlDLEVBQUFqQyxFQUFBOVksS0FBQThZLEdBQ1dBLEVBQUFuUCxPQUFBbVAsRUFBQW5QLEtBQUEsS0FBdUI0cUMsV0FBQXFXLFFBU2xDLEdBQUFGLEVBQUEsQ0FHQSxJQUZBLElBQUFELEVBQUEsR0FDQUksRUFBQSxHQUNBMWxCLEVBQUEsRUFBdUJBLEVBQUF1bEIsRUFBQTNwRCxPQUEyQm9rQyxJQUFBLENBQ2xELElBQUEybEIsRUFBQUosRUFBQXZsQixHQUNBMmxCLEVBQUFuaEQsS0FBQTRxQyxXQUFBcVcsRUFDQUUsRUFBQW5oRCxLQUFBOUQsSUFBQWlsRCxFQUFBcDhCLElBQUFxOEIsd0JBQ0Fod0MsRUFBQSt2QyxFQUFBOXFELEtBQ0F5cUQsRUFBQW5wRCxLQUFBd3BELEdBRUFELEVBQUF2cEQsS0FBQXdwRCxHQUdBanJELEtBQUE0cUQsS0FBQXJtQyxFQUFBL25CLEVBQUEsS0FBQW91RCxHQUNBNXFELEtBQUFnckQsVUFHQSxPQUFBem1DLEVBQUEvbkIsRUFBQSxLQUFBb3lCLElBR0F1OEIsUUFBQSxXQUNBLElBQUF2OEIsRUFBQTV1QixLQUFBNnFELGFBQ0FKLEVBQUF6cUQsS0FBQXlxRCxZQUFBenFELEtBQUFpQyxNQUFBLGFBQ0Eyc0IsRUFBQTF0QixRQUFBbEIsS0FBQW9yRCxRQUFBeDhCLEVBQUEsR0FBQUMsSUFBQTQ3QixLQU1BNzdCLEVBQUF6VCxRQUFBa3dDLElBQ0F6OEIsRUFBQXpULFFBQUFtd0MsSUFDQTE4QixFQUFBelQsUUFBQW93QyxJQUtBdnJELEtBQUF3ckQsUUFBQTFnRCxTQUFBeVEsS0FBQWt3QyxhQUVBNzhCLEVBQUF6VCxRQUFBLFNBQUFsQyxHQUNBLEdBQUFBLEVBQUFuUCxLQUFBNGhELE1BQUEsQ0FDQSxJQUFBaDBDLEVBQUF1QixFQUFBNFYsSUFDQTNvQixFQUFBd1IsRUFBQXRKLE1BQ0EyMUMsR0FBQXJzQyxFQUFBK3lDLEdBQ0F2a0QsRUFBQXlsRCxVQUFBemxELEVBQUEwbEQsZ0JBQUExbEQsRUFBQTJsRCxtQkFBQSxHQUNBbjBDLEVBQUFwTixpQkFBQSs0QyxHQUFBM3JDLEVBQUFvMEMsUUFBQSxTQUFBbjFCLEVBQUFqNkIsR0FDQUEsS0FBQTBiLFNBQUFWLEdBR0FoYixJQUFBLGFBQUFnZSxLQUFBaGUsRUFBQXF2RCxnQkFDQXIwQyxFQUFBcUosb0JBQUFzaUMsR0FBQTFzQixHQUNBamYsRUFBQW8wQyxRQUFBLEtBQ0E3SCxHQUFBdnNDLEVBQUEreUMsV0FPQTNsRCxRQUFBLENBQ0FzbUQsUUFBQSxTQUFBMXpDLEVBQUEreUMsR0FFQSxJQUFBeEgsR0FDQSxTQUdBLEdBQUFqakQsS0FBQWdzRCxTQUNBLE9BQUFoc0QsS0FBQWdzRCxTQU9BLElBQUE1c0MsRUFBQTFILEVBQUF1MEMsWUFDQXYwQyxFQUFBbWlDLG9CQUNBbmlDLEVBQUFtaUMsbUJBQUExK0IsUUFBQSxTQUFBdytCLEdBQXNEMkksR0FBQWxqQyxFQUFBdTZCLEtBRXREd0ksR0FBQS9pQyxFQUFBcXJDLEdBQ0FyckMsRUFBQWhSLE1BQUFDLFFBQUEsT0FDQXJPLEtBQUFzbUMsSUFBQTk3QixZQUFBNFUsR0FDQSxJQUFBc1csRUFBQTB1QixHQUFBaGxDLEdBRUEsT0FEQXBmLEtBQUFzbUMsSUFBQTc3QixZQUFBMlUsR0FDQXBmLEtBQUFnc0QsU0FBQXQyQixFQUFBd3ZCLGdCQUtBLFNBQUFtRyxHQUFBcHlDLEdBRUFBLEVBQUE0VixJQUFBaTlCLFNBQ0E3eUMsRUFBQTRWLElBQUFpOUIsVUFHQTd5QyxFQUFBNFYsSUFBQTIyQixVQUNBdnNDLEVBQUE0VixJQUFBMjJCLFdBSUEsU0FBQThGLEdBQUFyeUMsR0FDQUEsRUFBQW5QLEtBQUFvaUQsT0FBQWp6QyxFQUFBNFYsSUFBQXE4Qix3QkFHQSxTQUFBSyxHQUFBdHlDLEdBQ0EsSUFBQWt6QyxFQUFBbHpDLEVBQUFuUCxLQUFBOUQsSUFDQWttRCxFQUFBanpDLEVBQUFuUCxLQUFBb2lELE9BQ0FFLEVBQUFELEVBQUFFLEtBQUFILEVBQUFHLEtBQ0FDLEVBQUFILEVBQUFJLElBQUFMLEVBQUFLLElBQ0EsR0FBQUgsR0FBQUUsRUFBQSxDQUNBcnpDLEVBQUFuUCxLQUFBNGhELE9BQUEsRUFDQSxJQUFBeGxELEVBQUErUyxFQUFBNFYsSUFBQXpnQixNQUNBbEksRUFBQXlsRCxVQUFBemxELEVBQUEwbEQsZ0JBQUEsYUFBQVEsRUFBQSxNQUFBRSxFQUFBLE1BQ0FwbUQsRUFBQTJsRCxtQkFBQSxNQUlBLElBQUFXLEdBQUEsQ0FDQW5DLGNBQ0FLLG9CQU1BM25CLEdBQUFyWSxPQUFBZSxlQUNBc1gsR0FBQXJZLE9BQUFVLGlCQUNBMlgsR0FBQXJZLE9BQUFXLGtCQUNBMFgsR0FBQXJZLE9BQUFhLG1CQUNBd1gsR0FBQXJZLE9BQUFZLG9CQUdBcEMsRUFBQTZaLEdBQUE3a0IsUUFBQTBWLFdBQUE2MUIsSUFDQXZnQyxFQUFBNlosR0FBQTdrQixRQUFBb3VCLFdBQUFrZ0IsSUFHQXpwQixHQUFBbG5DLFVBQUE0cUMsVUFBQXJhLEVBQUEyN0IsR0FBQTErQixFQUdBMFosR0FBQWxuQyxVQUFBK2pDLE9BQUEsU0FDQWxvQixFQUNBMm5CLEdBR0EsT0FEQTNuQixLQUFBMFUsRUFBQTNKLEdBQUEvSyxRQUFBdmIsRUFDQTJxQyxHQUFBOW1DLEtBQUEwWCxFQUFBMm5CLElBS0FqVCxHQUNBMWhCLFdBQUEsV0FDQWdnQixFQUFBSSxVQUNBQSxJQUNBQSxHQUFBdFYsS0FBQSxPQUFBdXRCLEtBc0JHLEdBS0gsSUFBQTBwQixHQUFBLDJCQUNBQyxHQUFBLHlCQUVBQyxHQUFBemtDLEVBQUEsU0FBQTBrQyxHQUNBLElBQUFwK0MsRUFBQW8rQyxFQUFBLEdBQUFuaEQsUUFBQWloRCxHQUFBLFFBQ0FoK0MsRUFBQWsrQyxFQUFBLEdBQUFuaEQsUUFBQWloRCxHQUFBLFFBQ0EsV0FBQWhnRCxPQUFBOEIsRUFBQSxnQkFBQUUsRUFBQSxPQUtBLFNBQUFtK0MsR0FDQXZ2QyxFQUNBc3ZDLEdBRUEsSUFBQUUsRUFBQUYsRUFBQUQsR0FBQUMsR0FBQUgsR0FDQSxHQUFBSyxFQUFBcHlDLEtBQUE0QyxHQUFBLENBR0EsSUFHQS9LLEVBQUEvTCxFQUFBdW1ELEVBSEFDLEVBQUEsR0FDQUMsRUFBQSxHQUNBNzhDLEVBQUEwOEMsRUFBQTE4QyxVQUFBLEVBRUEsTUFBQW1DLEVBQUF1NkMsRUFBQXZoRCxLQUFBK1IsR0FBQSxDQUNBOVcsRUFBQStMLEVBQUEvTCxNQUVBQSxFQUFBNEosSUFDQTY4QyxFQUFBeHJELEtBQUFzckQsRUFBQXp2QyxFQUFBaFgsTUFBQThKLEVBQUE1SixJQUNBd21ELEVBQUF2ckQsS0FBQTNDLEtBQUFFLFVBQUErdEQsS0FHQSxJQUFBajFDLEVBQUF1aUMsR0FBQTluQyxFQUFBLEdBQUFpTSxRQUNBd3VDLEVBQUF2ckQsS0FBQSxNQUFBcVcsRUFBQSxLQUNBbTFDLEVBQUF4ckQsS0FBQSxDQUFvQnlyRCxXQUFBcDFDLElBQ3BCMUgsRUFBQTVKLEVBQUErTCxFQUFBLEdBQUFyUixPQU1BLE9BSkFrUCxFQUFBa04sRUFBQXBjLFNBQ0ErckQsRUFBQXhyRCxLQUFBc3JELEVBQUF6dkMsRUFBQWhYLE1BQUE4SixJQUNBNDhDLEVBQUF2ckQsS0FBQTNDLEtBQUFFLFVBQUErdEQsS0FFQSxDQUNBdGpCLFdBQUF1akIsRUFBQXIvQyxLQUFBLEtBQ0FxL0MsT0FBQUMsSUFNQSxTQUFBRSxHQUFBejFDLEVBQUF3RyxHQUNBQSxFQUFBNlAsS0FBQSxJQUNBeWlCLEVBQUF1TSxHQUFBcmxDLEVBQUEsU0FhQTg0QixJQUNBOTRCLEVBQUE4NEIsWUFBQTF4QyxLQUFBRSxVQUFBd3hDLElBRUEsSUFBQTRjLEVBQUF4USxHQUFBbGxDLEVBQUEsWUFDQTAxQyxJQUNBMTFDLEVBQUEwMUMsZ0JBSUEsU0FBQUMsR0FBQTMxQyxHQUNBLElBQUE1TixFQUFBLEdBT0EsT0FOQTROLEVBQUE4NEIsY0FDQTFtQyxHQUFBLGVBQUE0TixFQUFBLGlCQUVBQSxFQUFBMDFDLGVBQ0F0akQsR0FBQSxTQUFBNE4sRUFBQSxrQkFFQTVOLEVBR0EsSUFBQXdqRCxHQUFBLENBQ0E1akMsV0FBQSxnQkFDQXlqQyxpQkFDQUUsWUFLQSxTQUFBRSxHQUFBNzFDLEVBQUF3RyxHQUNBQSxFQUFBNlAsS0FBQSxJQUNBK3lCLEVBQUEvRCxHQUFBcmxDLEVBQUEsU0FDQW9wQyxJQWNBcHBDLEVBQUFvcEMsWUFBQWhpRCxLQUFBRSxVQUFBd2hELEdBQUFNLEtBR0EsSUFBQTBNLEVBQUE1USxHQUFBbGxDLEVBQUEsWUFDQTgxQyxJQUNBOTFDLEVBQUE4MUMsZ0JBSUEsU0FBQUMsR0FBQS8xQyxHQUNBLElBQUE1TixFQUFBLEdBT0EsT0FOQTROLEVBQUFvcEMsY0FDQWgzQyxHQUFBLGVBQUE0TixFQUFBLGlCQUVBQSxFQUFBODFDLGVBQ0ExakQsR0FBQSxVQUFBNE4sRUFBQSxtQkFFQTVOLEVBR0EsSUFRQTRqRCxHQVJBQyxHQUFBLENBQ0Fqa0MsV0FBQSxnQkFDQXlqQyxjQUFBSSxHQUNBRixRQUFBSSxJQU9BRyxHQUFBLENBQ0Fyd0MsT0FBQSxTQUFBMVUsR0FHQSxPQUZBNmtELE9BQUE1aUQsU0FBQUUsY0FBQSxPQUNBMGlELEdBQUEzVyxVQUFBbHVDLEVBQ0E2a0QsR0FBQXJiLGNBTUF3YixHQUFBcG1DLEVBQ0EsNkZBTUFxbUMsR0FBQXJtQyxFQUNBLDJEQUtBc21DLEdBQUF0bUMsRUFDQSxtU0FZQXVtQyxHQUFBLDRFQUNBQyxHQUFBLHdHQUNBQyxHQUFBLDZCQUFBdGlDLEVBQUEsWUFDQXVpQyxHQUFBLE9BQUFELEdBQUEsUUFBQUEsR0FBQSxJQUNBRSxHQUFBLElBQUExaEQsT0FBQSxLQUFBeWhELElBQ0FFLEdBQUEsYUFDQUMsR0FBQSxJQUFBNWhELE9BQUEsUUFBQXloRCxHQUFBLFVBQ0FJLEdBQUEscUJBRUFDLEdBQUEsU0FDQUMsR0FBQSxRQUdBQyxHQUFBam5DLEVBQUEsNEJBQ0FrbkMsR0FBQSxHQUVBQyxHQUFBLENBQ0FDLE9BQU8sSUFDUEMsT0FBTyxJQUNQQyxTQUFTLElBQ1RDLFFBQVEsSUFDUkMsUUFBUSxLQUNSQyxPQUFPLEtBQ1BDLFFBQVEsS0FFUkMsR0FBQSw0QkFDQUMsR0FBQSxtQ0FHQUMsR0FBQTduQyxFQUFBLG1CQUNBOG5DLEdBQUEsU0FBQS95RCxFQUFBcU0sR0FBcUQsT0FBQXJNLEdBQUE4eUQsR0FBQTl5RCxJQUFBLE9BQUFxTSxFQUFBLElBRXJELFNBQUEybUQsR0FBQW56RCxFQUFBb3pELEdBQ0EsSUFBQW5rRCxFQUFBbWtELEVBQUFKLEdBQUFELEdBQ0EsT0FBQS95RCxFQUFBb1AsUUFBQUgsRUFBQSxTQUFBaUgsR0FBNkMsT0FBQXE4QyxHQUFBcjhDLEtBRzdDLFNBQUFtOUMsR0FBQTdtRCxFQUFBcVYsR0FDQSxJQUtBbUYsRUFBQXNzQyxFQUxBL3ZDLEVBQUEsR0FDQWd3QyxFQUFBMXhDLEVBQUEweEMsV0FDQUMsRUFBQTN4QyxFQUFBMnZDLFlBQUF2a0MsRUFDQXdtQyxFQUFBNXhDLEVBQUE0dkMsa0JBQUF4a0MsRUFDQTlpQixFQUFBLEVBRUEsTUFBQXFDLEVBQUEsQ0FHQSxHQUZBd2EsRUFBQXhhLEVBRUE4bUQsR0FBQWpCLEdBQUFpQixHQWtGSyxDQUNMLElBQUFJLEVBQUEsRUFDQUMsRUFBQUwsRUFBQWgxQyxjQUNBczFDLEVBQUF0QixHQUFBcUIsS0FBQXJCLEdBQUFxQixHQUFBLElBQUF0akQsT0FBQSxrQkFBQXNqRCxFQUFBLGdCQUNBRSxFQUFBcm5ELEVBQUE0QyxRQUFBd2tELEVBQUEsU0FBQXA1QyxFQUFBeUcsRUFBQWd4QyxHQWFBLE9BWkF5QixFQUFBekIsRUFBQXB0RCxPQUNBd3RELEdBQUFzQixJQUFBLGFBQUFBLElBQ0ExeUMsSUFDQTdSLFFBQUEsNEJBQ0FBLFFBQUEsbUNBRUE4akQsR0FBQVMsRUFBQTF5QyxLQUNBQSxJQUFBaFgsTUFBQSxJQUVBNFgsRUFBQTVCLE9BQ0E0QixFQUFBNUIsTUFBQWdCLEdBRUEsS0FFQTlXLEdBQUFxQyxFQUFBM0gsT0FBQWd2RCxFQUFBaHZELE9BQ0EySCxFQUFBcW5ELEVBQ0FDLEVBQUFILEVBQUF4cEQsRUFBQXVwRCxFQUFBdnBELE9BdkdBLENBQ0EsSUFBQTRwRCxFQUFBdm5ELEVBQUFtTCxRQUFBLEtBQ0EsT0FBQW84QyxFQUFBLENBRUEsR0FBQTVCLEdBQUE5ekMsS0FBQTdSLEdBQUEsQ0FDQSxJQUFBd25ELEVBQUF4bkQsRUFBQW1MLFFBQUEsVUFFQSxHQUFBcThDLEdBQUEsR0FDQW55QyxFQUFBb3lDLG1CQUNBcHlDLEVBQUFzd0MsUUFBQTNsRCxFQUFBMG5ELFVBQUEsRUFBQUYsR0FBQTdwRCxJQUFBNnBELEVBQUEsR0FFQUcsRUFBQUgsRUFBQSxHQUNBLFVBS0EsR0FBQTVCLEdBQUEvekMsS0FBQTdSLEdBQUEsQ0FDQSxJQUFBNG5ELEVBQUE1bkQsRUFBQW1MLFFBQUEsTUFFQSxHQUFBeThDLEdBQUEsR0FDQUQsRUFBQUMsRUFBQSxHQUNBLFVBS0EsSUFBQUMsRUFBQTduRCxFQUFBMEosTUFBQWc4QyxJQUNBLEdBQUFtQyxFQUFBLENBQ0FGLEVBQUFFLEVBQUEsR0FBQXh2RCxRQUNBLFNBSUEsSUFBQXl2RCxFQUFBOW5ELEVBQUEwSixNQUFBKzdDLElBQ0EsR0FBQXFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBcHFELEVBQ0FncUQsRUFBQUcsRUFBQSxHQUFBenZELFFBQ0FpdkQsRUFBQVEsRUFBQSxHQUFBQyxFQUFBcHFELEdBQ0EsU0FJQSxJQUFBcXFELEVBQUFDLElBQ0EsR0FBQUQsRUFBQSxDQUNBRSxFQUFBRixHQUNBdEIsR0FBQXNCLEVBQUFuZixRQUFBN29DLElBQ0EybkQsRUFBQSxHQUVBLFVBSUEsSUFBQWx6QyxPQUFBLEVBQUEwekMsT0FBQSxFQUFBdHNELE9BQUEsRUFDQSxHQUFBMHJELEdBQUEsR0FDQVksRUFBQW5vRCxFQUFBdkMsTUFBQThwRCxHQUNBLE9BQ0E5QixHQUFBNXpDLEtBQUFzMkMsS0FDQTVDLEdBQUExekMsS0FBQXMyQyxLQUNBeEMsR0FBQTl6QyxLQUFBczJDLEtBQ0F2QyxHQUFBL3pDLEtBQUFzMkMsR0FDQSxDQUdBLEdBREF0c0QsRUFBQXNzRCxFQUFBaDlDLFFBQUEsT0FDQXRQLEVBQUEsRUFBeUIsTUFDekIwckQsR0FBQTFyRCxFQUNBc3NELEVBQUFub0QsRUFBQXZDLE1BQUE4cEQsR0FFQTl5QyxFQUFBelUsRUFBQTBuRCxVQUFBLEVBQUFILEdBR0FBLEVBQUEsSUFDQTl5QyxFQUFBelUsR0FHQXlVLEdBQ0FrekMsRUFBQWx6QyxFQUFBcGMsUUFHQWdkLEVBQUE1QixPQUFBZ0IsR0FDQVksRUFBQTVCLE1BQUFnQixFQUFBOVcsRUFBQThXLEVBQUFwYyxPQUFBc0YsR0EwQkEsR0FBQXFDLElBQUF3YSxFQUFBLENBQ0FuRixFQUFBNUIsT0FBQTRCLEVBQUE1QixNQUFBelQsR0FJQSxPQU9BLFNBQUEybkQsRUFBQXZzQyxHQUNBemQsR0FBQXlkLEVBQ0FwYixJQUFBMG5ELFVBQUF0c0MsR0FHQSxTQUFBNnNDLElBQ0EsSUFBQTduQyxFQUFBcGdCLEVBQUEwSixNQUFBNjdDLElBQ0EsR0FBQW5sQyxFQUFBLENBQ0EsSUFNQXN0QixFQUFBN0csRUFOQW45QixFQUFBLENBQ0FtL0IsUUFBQXpvQixFQUFBLEdBQ0FzUCxNQUFBLEdBQ0F0UCxNQUFBemlCLEdBRUFncUQsRUFBQXZuQyxFQUFBLEdBQUEvbkIsUUFFQSxRQUFBcTFDLEVBQUExdEMsRUFBQTBKLE1BQUE4N0MsT0FBQTNlLEVBQUE3bUMsRUFBQTBKLE1BQUEwN0MsS0FBQXBsRCxFQUFBMEosTUFBQXk3QyxLQUNBdGUsRUFBQXptQixNQUFBemlCLEVBQ0FncUQsRUFBQTlnQixFQUFBLEdBQUF4dUMsUUFDQXd1QyxFQUFBNkcsSUFBQS92QyxFQUNBK0wsRUFBQWdtQixNQUFBOTJCLEtBQUFpdUMsR0FFQSxHQUFBNkcsRUFJQSxPQUhBaGtDLEVBQUEwK0MsV0FBQTFhLEVBQUEsR0FDQWlhLEVBQUFqYSxFQUFBLEdBQUFyMUMsUUFDQXFSLEVBQUFna0MsSUFBQS92QyxFQUNBK0wsR0FLQSxTQUFBdytDLEVBQUF4K0MsR0FDQSxJQUFBbS9CLEVBQUFuL0IsRUFBQW0vQixRQUNBdWYsRUFBQTErQyxFQUFBMCtDLFdBRUFyQixJQUNBLE1BQUFELEdBQUE1QixHQUFBcmMsSUFDQXllLEVBQUFSLEdBRUFHLEVBQUFwZSxJQUFBaWUsSUFBQWplLEdBQ0F5ZSxFQUFBemUsSUFRQSxJQUpBLElBQUF3ZixFQUFBckIsRUFBQW5lLE1BQUF1ZixFQUVBaHdELEVBQUFzUixFQUFBZ21CLE1BQUFyM0IsT0FDQXEzQixFQUFBLElBQUFqcEIsTUFBQXJPLEdBQ0FELEVBQUEsRUFBbUJBLEVBQUFDLEVBQU9ELElBQUEsQ0FDMUIsSUFBQXdDLEVBQUErTyxFQUFBZ21CLE1BQUF2M0IsR0FDQTNFLEVBQUFtSCxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxPQUNBaXNELEVBQUEsTUFBQS9kLEdBQUEsU0FBQWx1QyxFQUFBLEdBQ0EwYSxFQUFBaXpDLDRCQUNBanpDLEVBQUF1eEMscUJBQ0FsM0IsRUFBQXYzQixHQUFBLENBQ0FpQixLQUFBdUIsRUFBQSxHQUNBbkgsTUFBQW16RCxHQUFBbnpELEVBQUFvekQsSUFRQXlCLElBQ0F0eEMsRUFBQW5lLEtBQUEsQ0FBa0JqRixJQUFBazFDLEVBQUEwZixjQUFBMWYsRUFBQS8yQixjQUFBNGQsUUFBQXRQLE1BQUExVyxFQUFBMFcsTUFBQXN0QixJQUFBaGtDLEVBQUFna0MsTUFDbEJvWixFQUFBamUsR0FHQXh6QixFQUFBK0ssT0FDQS9LLEVBQUErSyxNQUFBeW9CLEVBQUFuWixFQUFBMjRCLEVBQUEzK0MsRUFBQTBXLE1BQUExVyxFQUFBZ2tDLEtBSUEsU0FBQTRaLEVBQUF6ZSxFQUFBem9CLEVBQUFzdEIsR0FDQSxJQUFBdndDLEVBQUFxckQsRUFLQSxHQUpBLE1BQUFwb0MsSUFBd0JBLEVBQUF6aUIsR0FDeEIsTUFBQSt2QyxJQUFzQkEsRUFBQS92QyxHQUd0QmtyQyxHQUVBLElBREEyZixFQUFBM2YsRUFBQS8yQixjQUNBM1UsRUFBQTRaLEVBQUExZSxPQUFBLEVBQWtDOEUsR0FBQSxFQUFVQSxJQUM1QyxHQUFBNFosRUFBQTVaLEdBQUFvckQsZ0JBQUFDLEVBQ0EsV0FLQXJyRCxFQUFBLEVBR0EsR0FBQUEsR0FBQSxHQUVBLFFBQUFoRixFQUFBNGUsRUFBQTFlLE9BQUEsRUFBb0NGLEdBQUFnRixFQUFVaEYsSUFVOUNrZCxFQUFBcTRCLEtBQ0FyNEIsRUFBQXE0QixJQUFBMzJCLEVBQUE1ZSxHQUFBeEUsSUFBQXlzQixFQUFBc3RCLEdBS0EzMkIsRUFBQTFlLE9BQUE4RSxFQUNBMnBELEVBQUEzcEQsR0FBQTRaLEVBQUE1WixFQUFBLEdBQUF4SixRQUNLLE9BQUE2MEQsRUFDTG56QyxFQUFBK0ssT0FDQS9LLEVBQUErSyxNQUFBeW9CLEVBQUEsTUFBQXpvQixFQUFBc3RCLEdBRUssTUFBQThhLElBQ0xuekMsRUFBQStLLE9BQ0EvSyxFQUFBK0ssTUFBQXlvQixFQUFBLE1BQUF6b0IsRUFBQXN0QixHQUVBcjRCLEVBQUFxNEIsS0FDQXI0QixFQUFBcTRCLElBQUE3RSxFQUFBem9CLEVBQUFzdEIsSUExSEE0WixJQWtJQSxJQXVCQW1CLEdBQ0ExRSxHQUNBMkUsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0E5QkFDLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLHFDQUNBQyxHQUFBLGlDQUNBQyxHQUFBLFdBQ0FDLEdBQUEsV0FFQUMsR0FBQSxTQUNBQyxHQUFBLGtCQUNBQyxHQUFBLHdCQUVBQyxHQUFBLGtCQUVBQyxHQUFBLFNBQ0FDLEdBQUEsT0FJQUMsR0FBQXZxQyxFQUFBMGxDLEdBQUFyd0MsUUFFQW0xQyxHQUFBLFVBYUEsU0FBQUMsR0FDQW4yRCxFQUNBKzdCLEVBQ0FoVixHQUVBLE9BQ0EzWSxLQUFBLEVBQ0FwTyxNQUNBcy9DLFVBQUF2akIsRUFDQXNqQixTQUFBK1csR0FBQXI2QixHQUNBb2tCLFlBQUEsR0FDQXA1QixTQUNBcUwsU0FBQSxJQU9BLFNBQUFuUixHQUNBbzFDLEVBQ0EzMEMsR0FFQW96QyxHQUFBcHpDLEVBQUE2UCxNQUFBbXRCLEdBRUF3VyxHQUFBeHpDLEVBQUFpekIsVUFBQTduQixFQUNBcW9DLEdBQUF6ekMsRUFBQXVOLGFBQUFuQyxFQUNBc29DLEdBQUExekMsRUFBQXFOLGlCQUFBakMsRUFDQSxJQUFBOEIsRUFBQWxOLEVBQUFrTixlQUFBOUIsR0FDQSxTQUFBNVIsR0FBa0MsUUFBQUEsRUFBQTRzQixZQUFBbFosRUFBQTFULEVBQUFsYixPQUVsQyswRCxHQUFBbFcsR0FBQW45QixFQUFBdUwsUUFBQSxpQkFDQStuQyxHQUFBblcsR0FBQW45QixFQUFBdUwsUUFBQSxvQkFDQWdvQyxHQUFBcFcsR0FBQW45QixFQUFBdUwsUUFBQSxxQkFFQW1qQyxHQUFBMXVDLEVBQUEwdUMsV0FFQSxJQUdBOTlDLEVBQ0Fna0QsRUFKQWx6QyxFQUFBLEdBQ0FtekMsR0FBQSxJQUFBNzBDLEVBQUE2MEMsbUJBQ0FDLEVBQUE5MEMsRUFBQSswQyxXQUdBcGMsR0FBQSxFQUNBcWMsR0FBQSxFQVVBLFNBQUFDLEVBQUFDLEdBeUJBLEdBeEJBQyxFQUFBRCxHQUNBdmMsR0FBQXVjLEVBQUFFLFlBQ0FGLEVBQUFHLEdBQUFILEVBQUFsMUMsSUFHQTBCLEVBQUExZSxRQUFBa3lELElBQUF0a0QsR0FFQUEsRUFBQTBrRCxLQUFBSixFQUFBSyxRQUFBTCxFQUFBTSxPQUlBQyxHQUFBN2tELEVBQUEsQ0FDQWdKLElBQUFzN0MsRUFBQUssT0FDQUcsTUFBQVIsSUFXQU4sSUFBQU0sRUFBQVMsVUFDQSxHQUFBVCxFQUFBSyxRQUFBTCxFQUFBTSxLQUNBSSxHQUFBVixFQUFBTixPQUNPLENBQ1AsR0FBQU0sRUFBQVcsVUFBQSxDQUlBLElBQUE5eEQsRUFBQW14RCxFQUFBWSxZQUFBLGFBQ1dsQixFQUFBajBCLGNBQUFpMEIsRUFBQWowQixZQUFBLEtBQTZENThCLEdBQUFteEQsRUFFeEVOLEVBQUFsa0MsU0FBQW50QixLQUFBMnhELEdBQ0FBLEVBQUE3dkMsT0FBQXV2QyxFQU1BTSxFQUFBeGtDLFNBQUF3a0MsRUFBQXhrQyxTQUFBdE0sT0FBQSxTQUFBckosR0FBNkQsU0FBQTg2QyxZQUU3RFYsRUFBQUQsR0FHQUEsRUFBQWx4QixNQUNBMlUsR0FBQSxHQUVBNmEsR0FBQTBCLEVBQUE1MkQsT0FDQTAyRCxHQUFBLEdBR0EsUUFBQWx5RCxFQUFBLEVBQW1CQSxFQUFBeXdELEdBQUF2d0QsT0FBMkJGLElBQzlDeXdELEdBQUF6d0QsR0FBQW95RCxFQUFBbDFDLEdBSUEsU0FBQW0xQyxFQUFBMzdDLEdBR0EsSUFBQXU4QyxFQURBLElBQUFmLEVBRUEsT0FDQWUsRUFBQXY4QyxFQUFBa1gsU0FBQWxYLEVBQUFrWCxTQUFBMXRCLE9BQUEsS0FDQSxJQUFBK3lELEVBQUFycEQsTUFDQSxNQUFBcXBELEVBQUEzMkMsS0FFQTVGLEVBQUFrWCxTQUFBMUksTUF5TkEsT0FuTUF3cEMsR0FBQW1ELEVBQUEsQ0FDQTlrQyxLQUFBdWpDLEdBQ0ExQixXQUFBMXhDLEVBQUEweEMsV0FDQS9CLFdBQUEzdkMsRUFBQTJ2QyxXQUNBQyxpQkFBQTV2QyxFQUFBNHZDLGlCQUNBMkIscUJBQUF2eEMsRUFBQXV4QyxxQkFDQTBCLDRCQUFBanpDLEVBQUFpekMsNEJBQ0FiLGtCQUFBcHlDLEVBQUFnMkMsU0FDQUMsa0JBQUFqMkMsRUFBQWkyQyxrQkFDQWxyQyxNQUFBLFNBQUF6c0IsRUFBQSs3QixFQUFBMjRCLEVBQUFrRCxFQUFBN2QsR0FHQSxJQUFBdG5CLEVBQUE2akMsS0FBQTdqQyxJQUFBMmlDLEdBQUFwMUQsR0FJQWt3QixJQUFBLFFBQUF1QyxJQUNBc0osRUFBQTg3QixHQUFBOTdCLElBR0EsSUFBQTY2QixFQUFBVCxHQUFBbjJELEVBQUErN0IsRUFBQXU2QixHQUNBN2pDLElBQ0Fta0MsRUFBQW5rQyxNQTBCQXFsQyxHQUFBbEIsS0FBQWptQyxPQUNBaW1DLEVBQUFTLFdBQUEsR0FVQSxRQUFBN3lELEVBQUEsRUFBcUJBLEVBQUF3d0QsR0FBQXR3RCxPQUEwQkYsSUFDL0NveUQsRUFBQTVCLEdBQUF4d0QsR0FBQW95RCxFQUFBbDFDLElBQUFrMUMsRUFHQXZjLElBQ0EwZCxHQUFBbkIsR0FDQUEsRUFBQWx4QixNQUNBMlUsR0FBQSxJQUdBNmEsR0FBQTBCLEVBQUE1MkQsT0FDQTAyRCxHQUFBLEdBRUFyYyxFQUNBMmQsR0FBQXBCLEdBQ09BLEVBQUFFLFlBRVBtQixHQUFBckIsR0FDQXNCLEdBQUF0QixHQUNBdUIsR0FBQXZCLElBR0F0a0QsSUFDQUEsRUFBQXNrRCxHQU1BbEMsRUFJQWlDLEVBQUFDLElBSEFOLEVBQUFNLEVBQ0F4ekMsRUFBQW5lLEtBQUEyeEQsS0FNQTdjLElBQUEsU0FBQS81QyxFQUFBeXNCLEVBQUEyckMsR0FDQSxJQUFBeEIsRUFBQXh6QyxJQUFBMWUsT0FBQSxHQUVBMGUsRUFBQTFlLFFBQUEsRUFDQTR4RCxFQUFBbHpDLElBQUExZSxPQUFBLEdBSUFpeUQsRUFBQUMsSUFHQTkyQyxNQUFBLFNBQUFnQixFQUFBMkwsRUFBQXN0QixHQUNBLEdBQUF1YyxLQWtCQXBtQyxJQUNBLGFBQUFvbUMsRUFBQXQyRCxLQUNBczJELEVBQUFqWCxTQUFBaU8sY0FBQXhzQyxHQUZBLENBTUEsSUFzQkFyTixFQUNBOGYsRUF2QkFuQixFQUFBa2tDLEVBQUFsa0MsU0FpQkEsR0FmQXRSLEVBREE0MUMsR0FBQTUxQyxFQUFBa0IsT0FDQXEyQyxHQUFBL0IsR0FBQXgxQyxFQUFBbTFDLEdBQUFuMUMsR0FDT3NSLEVBQUExdEIsT0FHQTh4RCxFQUNQLGFBQUFBLEdBR0FULEdBQUE3M0MsS0FBQTRDLEdBQUEsR0FFQSxJQUdBeTFDLEVBQUEsT0FWQSxHQVlBejFDLEVBQ0E0MUMsR0FBQSxhQUFBRixJQUVBMTFDLElBQUE3UixRQUFBK21ELEdBQUEsT0FJQTNiLEdBQUEsTUFBQXY1QixJQUFBck4sRUFBQTQ4QyxHQUFBdnZDLEVBQUFzdkMsS0FDQTc4QixFQUFBLENBQ0FubEIsS0FBQSxFQUNBNitCLFdBQUF4NUIsRUFBQXc1QixXQUNBdWpCLE9BQUEvOEMsRUFBQSs4QyxPQUNBMXZDLFFBRVMsTUFBQUEsR0FBQXNSLEVBQUExdEIsUUFBQSxNQUFBMHRCLElBQUExdEIsT0FBQSxHQUFBb2MsT0FDVHlTLEVBQUEsQ0FDQW5sQixLQUFBLEVBQ0EwUyxTQUdBeVMsR0FLQW5CLEVBQUFudEIsS0FBQXN1QixLQUlBeStCLFFBQUEsU0FBQWx4QyxFQUFBMkwsRUFBQXN0QixHQUdBLEdBQUF1YyxFQUFBLENBQ0EsSUFBQS9pQyxFQUFBLENBQ0FubEIsS0FBQSxFQUNBMFMsT0FDQW1TLFdBQUEsR0FFWSxFQUlacWpDLEVBQUFsa0MsU0FBQW50QixLQUFBc3VCLE9BSUFqaEIsRUFHQSxTQUFBeWxELEdBQUE3OEMsR0FDQSxNQUFBcWxDLEdBQUFybEMsRUFBQSxXQUNBQSxFQUFBd3FCLEtBQUEsR0FJQSxTQUFBc3lCLEdBQUE5OEMsR0FDQSxJQUFBaVEsRUFBQWpRLEVBQUFva0MsVUFDQXJyQixFQUFBOUksRUFBQXptQixPQUNBLEdBQUF1dkIsRUFFQSxJQURBLElBQUE4SCxFQUFBN2dCLEVBQUE2Z0IsTUFBQSxJQUFBanBCLE1BQUFtaEIsR0FDQXp2QixFQUFBLEVBQW1CQSxFQUFBeXZCLEVBQVN6dkIsSUFDNUJ1M0IsRUFBQXYzQixHQUFBLENBQ0FpQixLQUFBMGxCLEVBQUEzbUIsR0FBQWlCLEtBQ0E1RixNQUFBeUMsS0FBQUUsVUFBQTJvQixFQUFBM21CLEdBQUEzRSxRQUVBLE1BQUFzckIsRUFBQTNtQixHQUFBaW9CLFFBQ0FzUCxFQUFBdjNCLEdBQUFpb0IsTUFBQXRCLEVBQUEzbUIsR0FBQWlvQixNQUNBc1AsRUFBQXYzQixHQUFBdTFDLElBQUE1dUIsRUFBQTNtQixHQUFBdTFDLFVBR0c3K0IsRUFBQXdxQixNQUVIeHFCLEVBQUErakMsT0FBQSxHQUlBLFNBQUE4WCxHQUNBSCxFQUNBbDFDLEdBRUE0MkMsR0FBQTFCLEdBSUFBLEVBQUEzWCxPQUNBMlgsRUFBQWp6RCxNQUNBaXpELEVBQUF2MEIsY0FDQXUwQixFQUFBdFgsVUFBQTU2QyxPQUdBNnpELEdBQUEzQixHQUNBNEIsR0FBQTVCLEdBQ0E2QixHQUFBN0IsR0FDQThCLEdBQUE5QixHQUNBLFFBQUFweUQsRUFBQSxFQUFpQkEsRUFBQXV3RCxHQUFBcndELE9BQXVCRixJQUN4Q295RCxFQUFBN0IsR0FBQXZ3RCxHQUFBb3lELEVBQUFsMUMsSUFBQWsxQyxFQUdBLE9BREErQixHQUFBL0IsR0FDQUEsRUFHQSxTQUFBMEIsR0FBQXA5QyxHQUNBLElBQUFJLEVBQUE4a0MsR0FBQWxsQyxFQUFBLE9BQ0FJLElBcUJBSixFQUFBdlgsSUFBQTJYLEdBSUEsU0FBQWk5QyxHQUFBcjlDLEdBQ0EsSUFBQXdyQixFQUFBMFosR0FBQWxsQyxFQUFBLE9BQ0F3ckIsSUFDQXhyQixFQUFBd3JCLE1BQ0F4ckIsRUFBQWs3QixTQUFBd2lCLEdBQUExOUMsSUFJQSxTQUFBKzhDLEdBQUEvOEMsR0FDQSxJQUFBSSxFQUNBLEdBQUFBLEVBQUFpbEMsR0FBQXJsQyxFQUFBLFVBQ0EsSUFBQXpILEVBQUFvbEQsR0FBQXY5QyxHQUNBN0gsR0FDQWlaLEVBQUF4UixFQUFBekgsSUFZQSxTQUFBb2xELEdBQUF2OUMsR0FDQSxJQUFBdzlDLEVBQUF4OUMsRUFBQXZGLE1BQUF3L0MsSUFDQSxHQUFBdUQsRUFBQSxDQUNBLElBQUFybEQsRUFBQSxHQUNBQSxFQUFBck4sSUFBQTB5RCxFQUFBLEdBQUE5MkMsT0FDQSxJQUFBKzJDLEVBQUFELEVBQUEsR0FBQTkyQyxPQUFBL1MsUUFBQXdtRCxHQUFBLElBQ0F1RCxFQUFBRCxFQUFBaGpELE1BQUF5L0MsSUFVQSxPQVRBd0QsR0FDQXZsRCxFQUFBc2xELFFBQUE5cEQsUUFBQXVtRCxHQUFBLElBQUF4ekMsT0FDQXZPLEVBQUF3bEQsVUFBQUQsRUFBQSxHQUFBaDNDLE9BQ0FnM0MsRUFBQSxLQUNBdmxELEVBQUF5bEQsVUFBQUYsRUFBQSxHQUFBaDNDLFNBR0F2TyxFQUFBc2xELFFBRUF0bEQsR0FHQSxTQUFBeWtELEdBQUFoOUMsR0FDQSxJQUFBSSxFQUFBaWxDLEdBQUFybEMsRUFBQSxRQUNBLEdBQUFJLEVBQ0FKLEVBQUE4N0MsR0FBQTE3QyxFQUNBNjdDLEdBQUFqOEMsRUFBQSxDQUNBSSxNQUNBODdDLE1BQUFsOEMsUUFFRyxDQUNILE1BQUFxbEMsR0FBQXJsQyxFQUFBLFlBQ0FBLEVBQUFnOEMsTUFBQSxHQUVBLElBQUFELEVBQUExVyxHQUFBcmxDLEVBQUEsYUFDQSs3QyxJQUNBLzdDLEVBQUErN0MsV0FLQSxTQUFBSyxHQUFBcDhDLEVBQUE2TCxHQUNBLElBQUErMkIsRUFBQXFiLEdBQUFweUMsRUFBQXFMLFVBQ0EwckIsS0FBQWtaLElBQ0FHLEdBQUFyWixFQUFBLENBQ0F4aUMsSUFBQUosRUFBQSs3QyxPQUNBRyxNQUFBbDhDLElBV0EsU0FBQWkrQyxHQUFBL21DLEdBQ0EsSUFBQTV0QixFQUFBNHRCLEVBQUExdEIsT0FDQSxNQUFBRixJQUFBLENBQ0EsT0FBQTR0QixFQUFBNXRCLEdBQUE0SixLQUNBLE9BQUFna0IsRUFBQTV0QixHQVNBNHRCLEVBQUExSSxPQUtBLFNBQUF5dEMsR0FBQWo4QyxFQUFBaytDLEdBQ0FsK0MsRUFBQW0rQyxlQUNBbitDLEVBQUFtK0MsYUFBQSxJQUVBbitDLEVBQUFtK0MsYUFBQXAwRCxLQUFBbTBELEdBR0EsU0FBQWpCLEdBQUFqOUMsR0FDQSxJQUFBNGYsRUFBQXlsQixHQUFBcmxDLEVBQUEsVUFDQSxNQUFBNGYsSUFDQTVmLEVBQUEyUyxNQUFBLEdBTUEsU0FBQTJxQyxHQUFBdDlDLEdBQ0EsSUFBQXE4QyxFQUNBLGFBQUFyOEMsRUFBQWxiLEtBQ0F1M0QsRUFBQWhYLEdBQUFybEMsRUFBQSxTQVlBQSxFQUFBcThDLGFBQUFoWCxHQUFBcmxDLEVBQUEsZ0JBQ0dxOEMsRUFBQWhYLEdBQUFybEMsRUFBQSxpQkFXSEEsRUFBQXE4QyxhQUlBLElBQUFDLEVBQUFwWCxHQUFBbGxDLEVBQUEsUUFhQSxHQVpBczhDLElBQ0F0OEMsRUFBQXM4QyxXQUFBLE9BQUFBLEVBQUEsWUFBQUEsRUFDQXQ4QyxFQUFBbytDLHFCQUFBcCtDLEVBQUFta0MsU0FBQSxXQUFBbmtDLEVBQUFta0MsU0FBQSxnQkFHQSxhQUFBbmtDLEVBQUFsYixLQUFBa2IsRUFBQXE4QyxXQUNBclksR0FBQWhrQyxFQUFBLE9BQUFzOEMsRUFBQXRYLEdBQUFobEMsRUFBQSxVQU1BLGFBQUFBLEVBQUFsYixJQUFBLENBRUEsSUFBQXU1RCxFQUFBN1ksR0FBQXhsQyxFQUFBNDZDLElBQ0EsR0FBQXlELEVBQUEsQ0FDWSxFQWVaLElBQUE3eUIsRUFBQTh5QixHQUFBRCxHQUNBOXpELEVBQUFpaEMsRUFBQWpoQyxLQUNBczVDLEVBQUFyWSxFQUFBcVksUUFDQTdqQyxFQUFBczhDLFdBQUEveEQsRUFDQXlWLEVBQUFvK0Msa0JBQUF2YSxFQUNBN2pDLEVBQUFxOEMsVUFBQWdDLEVBQUExNUQsT0FBQXEyRCxRQUVLLENBRUwsSUFBQXVELEVBQUEvWSxHQUFBeGxDLEVBQUE0NkMsSUFDQSxHQUFBMkQsRUFBQSxDQUNZLEVBc0JaLElBQUF4OEIsRUFBQS9oQixFQUFBbW5CLGNBQUFubkIsRUFBQW1uQixZQUFBLElBQ0FrUSxFQUFBaW5CLEdBQUFDLEdBQ0F0OEIsRUFBQW9WLEVBQUE5c0MsS0FDQWkwRCxFQUFBbm5CLEVBQUF3TSxRQUNBNGEsRUFBQTE4QixFQUFBRSxHQUFBZzVCLEdBQUEsY0FBQWo3QyxHQUNBeStDLEVBQUFuQyxXQUFBcjZCLEVBQ0F3OEIsRUFBQUwsa0JBQUFJLEVBQ0FDLEVBQUF2bkMsU0FBQWxYLEVBQUFrWCxTQUFBdE0sT0FBQSxTQUFBckosR0FDQSxJQUFBQSxFQUFBODZDLFVBRUEsT0FEQTk2QyxFQUFBc0ssT0FBQTR5QyxHQUNBLElBR0FBLEVBQUFwQyxVQUFBa0MsRUFBQTU1RCxPQUFBcTJELEdBRUFoN0MsRUFBQWtYLFNBQUEsR0FFQWxYLEVBQUErakMsT0FBQSxJQU1BLFNBQUF1YSxHQUFBN04sR0FDQSxJQUFBbG1ELEVBQUFrbUQsRUFBQWxtRCxLQUFBd0osUUFBQTZtRCxHQUFBLElBV0EsT0FWQXJ3RCxHQUNBLE1BQUFrbUQsRUFBQWxtRCxLQUFBLEtBQ0FBLEVBQUEsV0FRQWl3RCxHQUFBeDNDLEtBQUF6WSxHQUVBLENBQU9BLE9BQUFxRSxNQUFBLE1BQUFpMUMsU0FBQSxHQUVQLENBQU90NUMsS0FBQSxJQUFBQSxFQUFBLElBQUFzNUMsU0FBQSxHQUlQLFNBQUEwWixHQUFBdjlDLEdBQ0EsU0FBQUEsRUFBQWxiLE1BQ0FrYixFQUFBMCtDLFNBQUF4WixHQUFBbGxDLEVBQUEsU0FZQSxTQUFBdzlDLEdBQUF4OUMsR0FDQSxJQUFBeXdDLEdBQ0FBLEVBQUF2TCxHQUFBbGxDLEVBQUEsU0FDQUEsRUFBQTRzQixVQUFBNmpCLEdBRUEsTUFBQXBMLEdBQUFybEMsRUFBQSxxQkFDQUEsRUFBQTRwQixnQkFBQSxHQUlBLFNBQUE2ekIsR0FBQXo5QyxHQUNBLElBQ0ExVyxFQUFBQyxFQUFBZ0IsRUFBQTQyQyxFQUFBeDhDLEVBQUFzOEMsRUFBQTBkLEVBQUFDLEVBREEzdUMsRUFBQWpRLEVBQUFva0MsVUFFQSxJQUFBOTZDLEVBQUEsRUFBQUMsRUFBQTBtQixFQUFBem1CLE9BQThCRixFQUFBQyxFQUFPRCxJQUFBLENBR3JDLEdBRkFpQixFQUFBNDJDLEVBQUFseEIsRUFBQTNtQixHQUFBaUIsS0FDQTVGLEVBQUFzckIsRUFBQTNtQixHQUFBM0UsTUFDQXkxRCxHQUFBcDNDLEtBQUF6WSxHQVNBLEdBUEF5VixFQUFBNitDLGFBQUEsRUFFQTVkLEVBQUE2ZCxHQUFBdjBELEVBQUF3SixRQUFBcW1ELEdBQUEsS0FFQW5aLElBQ0ExMkMsSUFBQXdKLFFBQUE0bUQsR0FBQSxLQUVBRCxHQUFBMTNDLEtBQUF6WSxHQUNBQSxJQUFBd0osUUFBQTJtRCxHQUFBLElBQ0EvMUQsRUFBQWcrQyxHQUFBaCtDLEdBQ0FpNkQsRUFBQXBFLEdBQUF4M0MsS0FBQXpZLEdBQ0FxMEQsSUFDQXIwRCxJQUFBcUUsTUFBQSxPQVVBcXlDLElBQ0FBLEVBQUEvakIsT0FBQTBoQyxJQUNBcjBELEVBQUFxbUIsRUFBQXJtQixHQUNBLGNBQUFBLElBQXVDQSxFQUFBLGNBRXZDMDJDLEVBQUE4ZCxRQUFBSCxJQUNBcjBELEVBQUFxbUIsRUFBQXJtQixJQUVBMDJDLEVBQUE3VSxPQUNBdXlCLEVBQUE3WSxHQUFBbmhELEVBQUEsVUFDQWk2RCxFQXVCQXBhLEdBQ0F4a0MsRUFDQSxjQUFBelYsRUFBQSxJQUNBbzBELEVBQ0EsTUFDQSxFQUNBL0UsR0FDQTNwQyxFQUFBM21CLElBQ0EsSUE5QkFrN0MsR0FDQXhrQyxFQUNBLFVBQUE0USxFQUFBcm1CLEdBQ0FvMEQsRUFDQSxNQUNBLEVBQ0EvRSxHQUNBM3BDLEVBQUEzbUIsSUFFQTBuQixFQUFBem1CLEtBQUFxbUIsRUFBQXJtQixJQUNBaTZDLEdBQ0F4a0MsRUFDQSxVQUFBZ1IsRUFBQXptQixHQUNBbzBELEVBQ0EsTUFDQSxFQUNBL0UsR0FDQTNwQyxFQUFBM21CLE9Ba0JBMjNDLEtBQUEvakIsT0FDQWxkLEVBQUE0c0IsV0FBQXF0QixHQUFBajZDLEVBQUFsYixJQUFBa2IsRUFBQW1rQyxTQUFBanhDLEtBQUEzSSxHQUVBcTVDLEdBQUE1akMsRUFBQXpWLEVBQUE1RixFQUFBc3JCLEVBQUEzbUIsR0FBQXMxRCxHQUVBNWEsR0FBQWhrQyxFQUFBelYsRUFBQTVGLEVBQUFzckIsRUFBQTNtQixHQUFBczFELFFBRU8sR0FBQXpFLEdBQUFuM0MsS0FBQXpZLEdBQ1BBLElBQUF3SixRQUFBb21ELEdBQUEsSUFDQXlFLEVBQUFwRSxHQUFBeDNDLEtBQUF6WSxHQUNBcTBELElBQ0FyMEQsSUFBQXFFLE1BQUEsT0FFQTQxQyxHQUFBeGtDLEVBQUF6VixFQUFBNUYsRUFBQXM4QyxHQUFBLEVBQUEyWSxHQUFBM3BDLEVBQUEzbUIsR0FBQXMxRCxPQUNPLENBQ1ByMEQsSUFBQXdKLFFBQUFxbUQsR0FBQSxJQUVBLElBQUE0RSxFQUFBejBELEVBQUFzUSxNQUFBNC9DLElBQ0F2bEQsRUFBQThwRCxLQUFBLEdBQ0FKLEdBQUEsRUFDQTFwRCxJQUNBM0ssSUFBQXFFLE1BQUEsSUFBQXNHLEVBQUExTCxPQUFBLElBQ0FneEQsR0FBQXgzQyxLQUFBOU4sS0FDQUEsSUFBQXRHLE1BQUEsTUFDQWd3RCxHQUFBLElBR0F2YSxHQUFBcmtDLEVBQUF6VixFQUFBNDJDLEVBQUF4OEMsRUFBQXVRLEVBQUEwcEQsRUFBQTNkLEVBQUFoeEIsRUFBQTNtQixTQW1CQTA2QyxHQUFBaGtDLEVBQUF6VixFQUFBbkQsS0FBQUUsVUFBQTNDLEdBQUFzckIsRUFBQTNtQixLQUdBMFcsRUFBQTRzQixXQUNBLFVBQUFyaUMsR0FDQTB2RCxHQUFBajZDLEVBQUFsYixJQUFBa2IsRUFBQW1rQyxTQUFBanhDLEtBQUEzSSxJQUNBcTVDLEdBQUE1akMsRUFBQXpWLEVBQUEsT0FBQTBsQixFQUFBM21CLEtBTUEsU0FBQW8wRCxHQUFBMTlDLEdBQ0EsSUFBQTZMLEVBQUE3TCxFQUNBLE1BQUE2TCxFQUFBLENBQ0EsUUFBQXBuQixJQUFBb25CLEVBQUEzZ0IsSUFDQSxTQUVBMmdCLFdBRUEsU0FHQSxTQUFBaXpDLEdBQUF2MEQsR0FDQSxJQUFBc1EsRUFBQXRRLEVBQUFzUSxNQUFBOC9DLElBQ0EsR0FBQTkvQyxFQUFBLENBQ0EsSUFBQXRILEVBQUEsR0FFQSxPQURBc0gsRUFBQTRJLFFBQUEsU0FBQTZJLEdBQWdDL1ksRUFBQStZLEVBQUExZCxNQUFBLFNBQ2hDMkUsR0FJQSxTQUFBMm5ELEdBQUFyNkIsR0FFQSxJQURBLElBQUFyZCxFQUFBLEdBQ0FsYSxFQUFBLEVBQUFDLEVBQUFzM0IsRUFBQXIzQixPQUFtQ0YsRUFBQUMsRUFBT0QsSUFPMUNrYSxFQUFBcWQsRUFBQXYzQixHQUFBaUIsTUFBQXMyQixFQUFBdjNCLEdBQUEzRSxNQUVBLE9BQUE2ZSxFQUlBLFNBQUEyNUMsR0FBQW45QyxHQUNBLGlCQUFBQSxFQUFBbGIsS0FBQSxVQUFBa2IsRUFBQWxiLElBR0EsU0FBQTgzRCxHQUFBNThDLEdBQ0EsTUFDQSxVQUFBQSxFQUFBbGIsS0FDQSxXQUFBa2IsRUFBQWxiLE9BQ0FrYixFQUFBbWtDLFNBQUFqeEMsTUFDQSxvQkFBQThNLEVBQUFta0MsU0FBQWp4QyxNQUtBLElBQUErckQsR0FBQSxlQUNBQyxHQUFBLFVBR0EsU0FBQXZDLEdBQUE5N0IsR0FFQSxJQURBLElBQUF0b0IsRUFBQSxHQUNBalAsRUFBQSxFQUFpQkEsRUFBQXUzQixFQUFBcjNCLE9BQWtCRixJQUFBLENBQ25DLElBQUEwdUMsRUFBQW5YLEVBQUF2M0IsR0FDQTIxRCxHQUFBajhDLEtBQUFnMUIsRUFBQXp0QyxRQUNBeXRDLEVBQUF6dEMsS0FBQXl0QyxFQUFBenRDLEtBQUF3SixRQUFBbXJELEdBQUEsSUFDQTNtRCxFQUFBeE8sS0FBQWl1QyxJQUdBLE9BQUF6L0IsRUFzQkEsU0FBQTRtRCxHQUFBbi9DLEVBQUF3RyxHQUNBLGFBQUF4RyxFQUFBbGIsSUFBQSxDQUNBLElBS0FzNkQsRUFMQTU3QyxFQUFBeEQsRUFBQW1rQyxTQUNBLElBQUEzZ0MsRUFBQSxXQUNBLE9BV0EsSUFQQUEsRUFBQSxVQUFBQSxFQUFBLGtCQUNBNDdDLEVBQUFsYSxHQUFBbGxDLEVBQUEsU0FFQXdELEVBQUF0USxNQUFBa3NELElBQUE1N0MsRUFBQSxZQUNBNDdDLEVBQUEsSUFBQTU3QyxFQUFBLG9CQUdBNDdDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBaGEsR0FBQXJsQyxFQUFBLFdBQ0FzL0MsRUFBQUQsRUFBQSxNQUFBQSxFQUFBLE9BQ0FFLEVBQUEsTUFBQWxhLEdBQUFybEMsRUFBQSxhQUNBdy9DLEVBQUFuYSxHQUFBcmxDLEVBQUEsZ0JBRUF5L0MsRUFBQUMsR0FBQTEvQyxHQUVBKzhDLEdBQUEwQyxHQUNBdmIsR0FBQXViLEVBQUEsbUJBQ0E1RCxHQUFBNEQsRUFBQWo1QyxHQUNBaTVDLEVBQUE3RCxXQUFBLEVBQ0E2RCxFQUFBM0QsR0FBQSxJQUFBc0QsRUFBQSxpQkFBQUUsRUFDQXJELEdBQUF3RCxFQUFBLENBQ0FyL0MsSUFBQXEvQyxFQUFBM0QsR0FDQUksTUFBQXVELElBR0EsSUFBQUUsRUFBQUQsR0FBQTEvQyxHQUNBcWxDLEdBQUFzYSxFQUFBLFlBQ0F6YixHQUFBeWIsRUFBQSxnQkFDQTlELEdBQUE4RCxFQUFBbjVDLEdBQ0F5MUMsR0FBQXdELEVBQUEsQ0FDQXIvQyxJQUFBLElBQUFnL0MsRUFBQSxjQUFBRSxFQUNBcEQsTUFBQXlELElBR0EsSUFBQUMsRUFBQUYsR0FBQTEvQyxHQWVBLE9BZEFxbEMsR0FBQXVhLEVBQUEsWUFDQTFiLEdBQUEwYixFQUFBLFFBQUFSLEdBQ0F2RCxHQUFBK0QsRUFBQXA1QyxHQUNBeTFDLEdBQUF3RCxFQUFBLENBQ0FyL0MsSUFBQWkvQyxFQUNBbkQsTUFBQTBELElBR0FMLEVBQ0FFLEVBQUF6RCxNQUFBLEVBQ093RCxJQUNQQyxFQUFBMUQsT0FBQXlELEdBR0FDLElBS0EsU0FBQUMsR0FBQTEvQyxHQUNBLE9BQUFpN0MsR0FBQWo3QyxFQUFBbGIsSUFBQWtiLEVBQUFva0MsVUFBQXgxQyxRQUFBb1IsRUFBQTZMLFFBR0EsSUFBQWcwQyxHQUFBLENBQ0FWLHFCQUdBVyxHQUFBLENBQ0FsSyxHQUNBSyxHQUNBNEosSUFLQSxTQUFBajZDLEdBQUE1RixFQUFBb2dDLEdBQ0FBLEVBQUF6N0MsT0FDQWkvQyxHQUFBNWpDLEVBQUEsb0JBQUFvZ0MsRUFBQSxVQUFBQSxHQU1BLFNBQUFqdkMsR0FBQTZPLEVBQUFvZ0MsR0FDQUEsRUFBQXo3QyxPQUNBaS9DLEdBQUE1akMsRUFBQSxrQkFBQW9nQyxFQUFBLFVBQUFBLEdBSUEsSUF1QkEyZixHQUNBQyxHQXhCQUMsR0FBQSxDQUNBNzJCLFNBQ0F4akIsUUFDQXpVLFNBS0ErdUQsR0FBQSxDQUNBaEksWUFBQSxFQUNBbm1DLFFBQUErdEMsR0FDQTVqQyxXQUFBK2pDLEdBQ0F4bUIsWUFDQTBjLGNBQ0FwaUMsZUFDQXFpQyxvQkFDQTFpQyxpQkFDQUcsbUJBQ0E3QixXQUFBRixFQUFBZ3VDLEtBUUFLLEdBQUEzdkMsRUFBQTR2QyxJQWFBLFNBQUFDLEdBQUFqcEQsRUFBQW9QLEdBQ0FwUCxJQUNBMm9ELEdBQUFJLEdBQUEzNUMsRUFBQXdMLFlBQUEsSUFDQWd1QyxHQUFBeDVDLEVBQUFrTixlQUFBOUIsRUFFQTB1QyxHQUFBbHBELEdBRUFtcEQsR0FBQW5wRCxHQUFBLElBR0EsU0FBQWdwRCxHQUFBLzJELEdBQ0EsT0FBQTBtQixFQUNBLGlGQUNBMW1CLEVBQUEsSUFBQUEsRUFBQSxLQUlBLFNBQUFpM0QsR0FBQXIwQyxHQUVBLEdBREFBLEVBQUF1MEMsT0FBQTNvQyxHQUFBNUwsR0FDQSxJQUFBQSxFQUFBL1ksS0FBQSxDQUlBLElBQ0E4c0QsR0FBQS96QyxFQUFBbm5CLE1BQ0EsU0FBQW1uQixFQUFBbm5CLEtBQ0EsTUFBQW1uQixFQUFBazRCLFNBQUEsbUJBRUEsT0FFQSxRQUFBNzZDLEVBQUEsRUFBQUMsRUFBQTBpQixFQUFBaUwsU0FBQTF0QixPQUE2Q0YsRUFBQUMsRUFBT0QsSUFBQSxDQUNwRCxJQUFBK3VCLEVBQUFwTSxFQUFBaUwsU0FBQTV0QixHQUNBZzNELEdBQUFqb0MsR0FDQUEsRUFBQW1vQyxTQUNBdjBDLEVBQUF1MEMsUUFBQSxHQUdBLEdBQUF2MEMsRUFBQWt5QyxhQUNBLFFBQUF2d0IsRUFBQSxFQUFBNnlCLEVBQUF4MEMsRUFBQWt5QyxhQUFBMzBELE9BQXVEb2tDLEVBQUE2eUIsRUFBVzd5QixJQUFBLENBQ2xFLElBQUFzdUIsRUFBQWp3QyxFQUFBa3lDLGFBQUF2d0IsR0FBQXN1QixNQUNBb0UsR0FBQXBFLEdBQ0FBLEVBQUFzRSxTQUNBdjBDLEVBQUF1MEMsUUFBQSxLQU9BLFNBQUFELEdBQUF0MEMsRUFBQTRZLEdBQ0EsT0FBQTVZLEVBQUEvWSxLQUFBLENBT0EsSUFOQStZLEVBQUF1MEMsUUFBQXYwQyxFQUFBMEcsUUFDQTFHLEVBQUF5MEMsWUFBQTc3QixHQUtBNVksRUFBQXUwQyxRQUFBdjBDLEVBQUFpTCxTQUFBMXRCLFNBQ0EsSUFBQXlpQixFQUFBaUwsU0FBQTF0QixRQUNBLElBQUF5aUIsRUFBQWlMLFNBQUEsR0FBQWhrQixNQUdBLFlBREErWSxFQUFBMDBDLFlBQUEsR0FLQSxHQUZBMTBDLEVBQUEwMEMsWUFBQSxFQUVBMTBDLEVBQUFpTCxTQUNBLFFBQUE1dEIsRUFBQSxFQUFBQyxFQUFBMGlCLEVBQUFpTCxTQUFBMXRCLE9BQStDRixFQUFBQyxFQUFPRCxJQUN0RGkzRCxHQUFBdDBDLEVBQUFpTCxTQUFBNXRCLEdBQUF1N0IsS0FBQTVZLEVBQUEvZ0IsS0FHQSxHQUFBK2dCLEVBQUFreUMsYUFDQSxRQUFBdndCLEVBQUEsRUFBQTZ5QixFQUFBeDBDLEVBQUFreUMsYUFBQTMwRCxPQUF1RG9rQyxFQUFBNnlCLEVBQVc3eUIsSUFDbEUyeUIsR0FBQXQwQyxFQUFBa3lDLGFBQUF2d0IsR0FBQXN1QixNQUFBcjNCLElBTUEsU0FBQWhOLEdBQUE1TCxHQUNBLFdBQUFBLEVBQUEvWSxPQUdBLElBQUErWSxFQUFBL1ksU0FHQStZLEVBQUF1ZSxNQUNBdmUsRUFBQTR5QyxhQUNBNXlDLEVBQUE2dkMsSUFBQTd2QyxFQUFBL2dCLEtBQ0FnbEIsRUFBQWpFLEVBQUFubkIsT0FDQWs3RCxHQUFBL3pDLEVBQUFubkIsTUFDQTg3RCxHQUFBMzBDLEtBQ0EvbkIsT0FBQW1GLEtBQUE0aUIsR0FBQXFHLE1BQUF5dEMsT0FJQSxTQUFBYSxHQUFBMzBDLEdBQ0EsTUFBQUEsRUFBQUosT0FBQSxDQUVBLEdBREFJLElBQUFKLE9BQ0EsYUFBQUksRUFBQW5uQixJQUNBLFNBRUEsR0FBQW1uQixFQUFBL2dCLElBQ0EsU0FHQSxTQUtBLElBQUEyMUQsR0FBQSwwREFDQUMsR0FBQSxnQkFDQUMsR0FBQSwrRkFHQXR0QyxHQUFBLENBQ0F1dEMsSUFBQSxHQUNBQyxJQUFBLEVBQ0F6akQsTUFBQSxHQUNBMGpELE1BQUEsR0FDQUMsR0FBQSxHQUNBeE0sS0FBQSxHQUNBaFEsTUFBQSxHQUNBeWMsS0FBQSxHQUNBeHBCLE9BQUEsUUFJQXlwQixHQUFBLENBRUFMLElBQUEsaUJBQ0FDLElBQUEsTUFDQXpqRCxNQUFBLFFBRUEwakQsTUFBQSxpQkFFQUMsR0FBQSxpQkFDQXhNLEtBQUEscUJBQ0FoUSxNQUFBLHVCQUNBeWMsS0FBQSxxQkFFQXhwQixPQUFBLDhCQU1BMHBCLEdBQUEsU0FBQXBELEdBQXFDLFlBQUFBLEVBQUEsaUJBRXJDcUQsR0FBQSxDQUNBQyxLQUFBLDRCQUNBQyxRQUFBLDJCQUNBdHFELEtBQUFtcUQsR0FBQSwwQ0FDQUksS0FBQUosR0FBQSxtQkFDQWorQyxNQUFBaStDLEdBQUEsb0JBQ0FLLElBQUFMLEdBQUEsa0JBQ0FNLEtBQUFOLEdBQUEsbUJBQ0EzTSxLQUFBMk0sR0FBQSw2Q0FDQTFjLE9BQUEwYyxHQUFBLDZDQUNBM2MsTUFBQTJjLEdBQUEsOENBR0EsU0FBQU8sR0FDQW5kLEVBQ0E3dUIsR0FFQSxJQUFBaXNDLEVBQUFqc0MsRUFBQSxrQkFDQWtzQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQSxRQUFBejNELEtBQUFtNkMsRUFBQSxDQUNBLElBQUF1ZCxFQUFBQyxHQUFBeGQsRUFBQW42QyxJQUNBbTZDLEVBQUFuNkMsSUFBQW02QyxFQUFBbjZDLEdBQUFzNUMsUUFDQW1lLEdBQUF6M0QsRUFBQSxJQUFBMDNELEVBQUEsSUFFQUYsR0FBQSxJQUFBeDNELEVBQUEsS0FBQTAzRCxFQUFBLElBSUEsT0FEQUYsRUFBQSxJQUFxQkEsRUFBQW56RCxNQUFBLFVBQ3JCb3pELEVBQ0FGLEVBQUEsTUFBQUMsRUFBQSxLQUFBQyxFQUFBcHpELE1BQUEsV0FFQWt6RCxFQUFBQyxFQUlBLFNBQUFHLEdBQUFobEQsR0FDQSxJQUFBQSxFQUNBLHFCQUdBLEdBQUF0RixNQUFBelIsUUFBQStXLEdBQ0EsVUFBQUEsRUFBQXNHLElBQUEsU0FBQXRHLEdBQW1ELE9BQUFnbEQsR0FBQWhsRCxLQUE4QmpILEtBQUEsU0FHakYsSUFBQWtzRCxFQUFBcEIsR0FBQS85QyxLQUFBOUYsRUFBQXZZLE9BQ0F5OUQsRUFBQXZCLEdBQUE3OUMsS0FBQTlGLEVBQUF2WSxPQUNBMDlELEVBQUF0QixHQUFBLzlDLEtBQUE5RixFQUFBdlksTUFBQW9QLFFBQUErc0QsR0FBQSxLQUVBLEdBQUE1akQsRUFBQStqQyxVQUtHLENBQ0gsSUFBQWtHLEVBQUEsR0FDQW1iLEVBQUEsR0FDQWo1RCxFQUFBLEdBQ0EsUUFBQVosS0FBQXlVLEVBQUErakMsVUFDQSxHQUFBc2dCLEdBQUE5NEQsR0FDQTY1RCxHQUFBZixHQUFBOTRELEdBRUFnckIsR0FBQWhyQixJQUNBWSxFQUFBVSxLQUFBdEIsUUFFTyxhQUFBQSxFQUFBLENBQ1AsSUFBQXc0QyxFQUFBL2pDLEVBQUEsVUFDQW9sRCxHQUFBaEIsR0FDQSw4QkFDQTEyQyxPQUFBLFNBQUEyM0MsR0FBNEMsT0FBQXRoQixFQUFBc2hCLEtBQzVDLytDLElBQUEsU0FBQSsrQyxHQUF5QyxnQkFBQUEsRUFBQSxRQUN6Q3RzRCxLQUFBLFlBR0E1TSxFQUFBVSxLQUFBdEIsR0FHQVksRUFBQUcsU0FDQTI5QyxHQUFBcWIsR0FBQW41RCxJQUdBaTVELElBQ0FuYixHQUFBbWIsR0FFQSxJQUFBTCxFQUFBRSxFQUNBLFVBQUFqbEQsRUFBQSxpQkFDQWtsRCxFQUNBLFdBQUFsbEQsRUFBQSxrQkFDQW1sRCxFQUNBLFVBQUFubEQsRUFBQSxNQUNBQSxFQUFBdlksTUFDQSwwQkFBOEJ3aUQsRUFBQThhLEVBQUEsSUF6QzlCLE9BQUFFLEdBQUFDLEVBQ0FsbEQsRUFBQXZZLE1BRUEscUJBQThCMDlELEVBQUEsVUFBQW5sRCxFQUFBLE1BQUFBLEVBQUF2WSxPQUFBLElBMEM5QixTQUFBNjlELEdBQUFuNUQsR0FDQSxNQUlBLG1DQUNBQSxFQUFBbWEsSUFBQWkvQyxJQUFBeHNELEtBQUEsc0JBSUEsU0FBQXdzRCxHQUFBaDZELEdBQ0EsSUFBQWk2RCxFQUFBcHJCLFNBQUE3dUMsRUFBQSxJQUNBLEdBQUFpNkQsRUFDQSwwQkFBQUEsRUFFQSxJQUFBQyxFQUFBbHZDLEdBQUFockIsR0FDQW02RCxFQUFBdkIsR0FBQTU0RCxHQUNBLE1BQ0EscUJBQ0FyQixLQUFBRSxVQUFBbUIsR0FBQSxJQUNBckIsS0FBQUUsVUFBQXE3RCxHQUFBLGVBRUF2N0QsS0FBQUUsVUFBQXM3RCxHQUNBLElBTUEsU0FBQTNpQyxHQUFBamdCLEVBQUFvZ0MsR0FJQXBnQyxFQUFBNmlELGNBQUEsU0FBQTFiLEdBQXNDLFlBQUFBLEVBQUEsSUFBQS9HLEVBQUEsV0FLdEMsU0FBQTBpQixHQUFBOWlELEVBQUFvZ0MsR0FDQXBnQyxFQUFBK2lELFNBQUEsU0FBQTViLEdBQ0EsWUFBQUEsRUFBQSxLQUFBbm5DLEVBQUEsU0FBQW9nQyxFQUFBLFdBQUFBLEVBQUFhLFdBQUFiLEVBQUFhLFVBQUEvakIsS0FBQSxpQkFBQWtqQixFQUFBYSxXQUFBYixFQUFBYSxVQUFBN1UsS0FBQSxpQkFNQSxJQUFBNDJCLEdBQUEsQ0FDQS9pQyxNQUNBNU8sS0FBQXl4QyxHQUNBRyxNQUFBdHhDLEdBU0F1eEMsR0FBQSxTQUFBMThDLEdBQ0FsZSxLQUFBa2UsVUFDQWxlLEtBQUErdEIsS0FBQTdQLEVBQUE2UCxNQUFBbXRCLEdBQ0FsN0MsS0FBQXV4RCxXQUFBbFcsR0FBQW45QixFQUFBdUwsUUFBQSxpQkFDQXpwQixLQUFBNjZELFdBQUF4ZixHQUFBbjlCLEVBQUF1TCxRQUFBLFdBQ0F6cEIsS0FBQTR6QixXQUFBMUssSUFBQSxHQUFvQ3d4QyxJQUFBeDhDLEVBQUEwVixZQUNwQyxJQUFBeEksRUFBQWxOLEVBQUFrTixlQUFBOUIsRUFDQXRwQixLQUFBODZELGVBQUEsU0FBQXBqRCxHQUF1QyxRQUFBQSxFQUFBNHNCLFlBQUFsWixFQUFBMVQsRUFBQWxiLE1BQ3ZDd0QsS0FBQSs2RCxPQUFBLEVBQ0EvNkQsS0FBQTA4QixnQkFBQSxHQUNBMThCLEtBQUFraUMsS0FBQSxHQUtBLFNBQUE4NEIsR0FDQUMsRUFDQS84QyxHQUVBLElBQUFnOUMsRUFBQSxJQUFBTixHQUFBMThDLEdBQ0EyZ0MsRUFBQW9jLEVBQUFFLEdBQUFGLEVBQUFDLEdBQUEsWUFDQSxPQUNBdmdDLE9BQUEscUJBQXlCa2tCLEVBQUEsSUFDekJuaUIsZ0JBQUF3K0IsRUFBQXgrQixpQkFJQSxTQUFBeStCLEdBQUF6akQsRUFBQXdqRCxHQUtBLEdBSkF4akQsRUFBQTZMLFNBQ0E3TCxFQUFBd3FCLElBQUF4cUIsRUFBQXdxQixLQUFBeHFCLEVBQUE2TCxPQUFBMmUsS0FHQXhxQixFQUFBMmdELGFBQUEzZ0QsRUFBQTBqRCxnQkFDQSxPQUFBQyxHQUFBM2pELEVBQUF3akQsR0FDRyxHQUFBeGpELEVBQUEyUyxPQUFBM1MsRUFBQTRqRCxjQUNILE9BQUFDLEdBQUE3akQsRUFBQXdqRCxHQUNHLEdBQUF4akQsRUFBQTlVLE1BQUE4VSxFQUFBOGpELGFBQ0gsT0FBQUMsR0FBQS9qRCxFQUFBd2pELEdBQ0csR0FBQXhqRCxFQUFBODdDLEtBQUE5N0MsRUFBQWdrRCxZQUNILE9BQUFDLEdBQUFqa0QsRUFBQXdqRCxHQUNHLGdCQUFBeGpELEVBQUFsYixLQUFBa2IsRUFBQXM4QyxZQUFBa0gsRUFBQWg1QixJQUVBLGFBQUF4cUIsRUFBQWxiLElBQ0gsT0FBQW8vRCxHQUFBbGtELEVBQUF3akQsR0FHQSxJQUFBcmMsRUFDQSxHQUFBbm5DLEVBQUE0c0IsVUFDQXVhLEVBQUFnZCxHQUFBbmtELEVBQUE0c0IsVUFBQTVzQixFQUFBd2pELE9BQ0ssQ0FDTCxJQUFBcHhELElBQ0E0TixFQUFBK2pDLE9BQUEvakMsRUFBQXdxQixLQUFBZzVCLEVBQUFKLGVBQUFwakQsTUFDQTVOLEVBQUFneUQsR0FBQXBrRCxFQUFBd2pELElBR0EsSUFBQXRzQyxFQUFBbFgsRUFBQTRwQixlQUFBLEtBQUF5NkIsR0FBQXJrRCxFQUFBd2pELEdBQUEsR0FDQXJjLEVBQUEsT0FBQW5uQyxFQUFBLFNBQUE1TixFQUFBLElBQUFBLEVBQUEsS0FBQThrQixFQUFBLElBQUFBLEVBQUEsUUFHQSxRQUFBNXRCLEVBQUEsRUFBbUJBLEVBQUFrNkQsRUFBQTNKLFdBQUFyd0QsT0FBNkJGLElBQ2hENjlDLEVBQUFxYyxFQUFBM0osV0FBQXZ3RCxHQUFBMFcsRUFBQW1uQyxHQUVBLE9BQUFBLEVBckJBLE9BQUFrZCxHQUFBcmtELEVBQUF3akQsSUFBQSxTQTBCQSxTQUFBRyxHQUFBM2pELEVBQUF3akQsR0FDQXhqRCxFQUFBMGpELGlCQUFBLEVBSUEsSUFBQVksRUFBQWQsRUFBQWg1QixJQU1BLE9BTEF4cUIsRUFBQXdxQixNQUNBZzVCLEVBQUFoNUIsSUFBQXhxQixFQUFBd3FCLEtBRUFnNUIsRUFBQXgrQixnQkFBQWo3QixLQUFBLHFCQUEwQzA1RCxHQUFBempELEVBQUF3akQsR0FBQSxLQUMxQ0EsRUFBQWg1QixJQUFBODVCLEVBQ0EsT0FBQWQsRUFBQXgrQixnQkFBQXg3QixPQUFBLElBQUF3VyxFQUFBMGdELFlBQUEsZ0JBSUEsU0FBQW1ELEdBQUE3akQsRUFBQXdqRCxHQUVBLEdBREF4akQsRUFBQTRqRCxlQUFBLEVBQ0E1akQsRUFBQTg3QyxLQUFBOTdDLEVBQUFna0QsWUFDQSxPQUFBQyxHQUFBamtELEVBQUF3akQsR0FDRyxHQUFBeGpELEVBQUEwZ0QsWUFBQSxDQUNILElBQUFqNEQsRUFBQSxHQUNBb2pCLEVBQUE3TCxFQUFBNkwsT0FDQSxNQUFBQSxFQUFBLENBQ0EsR0FBQUEsRUFBQTNnQixJQUFBLENBQ0F6QyxFQUFBb2pCLEVBQUFwakIsSUFDQSxNQUVBb2pCLFdBRUEsT0FBQXBqQixFQU9BLE1BQUFnN0QsR0FBQXpqRCxFQUFBd2pELEdBQUEsSUFBQUEsRUFBQUgsU0FBQSxJQUFBNTZELEVBQUEsSUFGQWc3RCxHQUFBempELEVBQUF3akQsR0FJQSxPQUFBRyxHQUFBM2pELEVBQUF3akQsR0FJQSxTQUFBUyxHQUNBamtELEVBQ0F3akQsRUFDQWUsRUFDQUMsR0FHQSxPQURBeGtELEVBQUFna0QsYUFBQSxFQUNBUyxHQUFBemtELEVBQUFtK0MsYUFBQXZ2RCxRQUFBNDBELEVBQUFlLEVBQUFDLEdBR0EsU0FBQUMsR0FDQUMsRUFDQWxCLEVBQ0FlLEVBQ0FDLEdBRUEsSUFBQUUsRUFBQWw3RCxPQUNBLE9BQUFnN0QsR0FBQSxPQUdBLElBQUF0RyxFQUFBd0csRUFBQXJoRCxRQUNBLE9BQUE2NkMsRUFBQTk5QyxJQUNBLElBQUE4OUMsRUFBQSxTQUFBeUcsRUFBQXpHLEVBQUFoQyxPQUFBLElBQUF1SSxHQUFBQyxFQUFBbEIsRUFBQWUsRUFBQUMsR0FFQSxHQUFBRyxFQUFBekcsRUFBQWhDLE9BSUEsU0FBQXlJLEVBQUEza0QsR0FDQSxPQUFBdWtELEVBQ0FBLEVBQUF2a0QsRUFBQXdqRCxHQUNBeGpELEVBQUEyUyxLQUNBa3hDLEdBQUE3akQsRUFBQXdqRCxHQUNBQyxHQUFBempELEVBQUF3akQsSUFJQSxTQUFBTyxHQUNBL2pELEVBQ0F3akQsRUFDQWUsRUFDQUssR0FFQSxJQUFBeGtELEVBQUFKLEVBQUE5VSxJQUNBMnlELEVBQUE3OUMsRUFBQTY5QyxNQUNBRSxFQUFBLzlDLEVBQUErOUMsVUFBQSxJQUFBLzlDLEVBQUEsYUFDQWcrQyxFQUFBaCtDLEVBQUFnK0MsVUFBQSxJQUFBaCtDLEVBQUEsYUFrQkEsT0FEQUEsRUFBQThqRCxjQUFBLEdBQ0FjLEdBQUEsV0FBQXhrRCxFQUFBLGNBQ0F5OUMsRUFBQUUsRUFBQUMsRUFBQSxhQUNBdUcsR0FBQWQsSUFBQXpqRCxFQUFBd2pELEdBQ0EsS0FHQSxTQUFBWSxHQUFBcGtELEVBQUF3akQsR0FDQSxJQUFBcHhELEVBQUEsSUFJQTZwQixFQUFBNG9DLEdBQUE3a0QsRUFBQXdqRCxHQUNBdm5DLElBQWE3cEIsR0FBQTZwQixFQUFBLEtBR2JqYyxFQUFBdlgsTUFDQTJKLEdBQUEsT0FBQTROLEVBQUEsU0FHQUEsRUFBQXdyQixNQUNBcDVCLEdBQUEsT0FBQTROLEVBQUEsU0FFQUEsRUFBQWs3QixXQUNBOW9DLEdBQUEsa0JBR0E0TixFQUFBd3FCLE1BQ0FwNEIsR0FBQSxhQUdBNE4sRUFBQTRzQixZQUNBeDZCLEdBQUEsUUFBQTROLEVBQUEsVUFHQSxRQUFBMVcsRUFBQSxFQUFpQkEsRUFBQWs2RCxFQUFBTCxXQUFBMzVELE9BQTZCRixJQUM5QzhJLEdBQUFveEQsRUFBQUwsV0FBQTc1RCxHQUFBMFcsR0ErQkEsR0E1QkFBLEVBQUE2Z0IsUUFDQXp1QixHQUFBLFNBQUEweUQsR0FBQTlrRCxFQUFBNmdCLE9BQUEsS0FHQTdnQixFQUFBd2IsUUFDQXBwQixHQUFBLFlBQUEweUQsR0FBQTlrRCxFQUFBd2IsT0FBQSxLQUdBeGIsRUFBQTBrQyxTQUNBdHlDLEdBQUF5dkQsR0FBQTdoRCxFQUFBMGtDLFFBQUEsUUFFQTFrQyxFQUFBOGtDLGVBQ0ExeUMsR0FBQXl2RCxHQUFBN2hELEVBQUE4a0MsY0FBQSxRQUlBOWtDLEVBQUFzOEMsYUFBQXQ4QyxFQUFBcThDLFlBQ0FqcUQsR0FBQSxRQUFBNE4sRUFBQSxnQkFHQUEsRUFBQW1uQixjQUNBLzBCLEdBQUEyeUQsR0FBQS9rRCxJQUFBbW5CLFlBQUFxOEIsR0FBQSxLQUdBeGpELEVBQUFvcEIsUUFDQWgzQixHQUFBLGdCQUFvQjROLEVBQUFvcEIsTUFBQSxtQkFBQXBwQixFQUFBb3BCLE1BQUEsd0JBQUFwcEIsRUFBQW9wQixNQUFBLGlCQUdwQnBwQixFQUFBNHBCLGVBQUEsQ0FDQSxJQUFBQSxFQUFBbzdCLEdBQUFobEQsRUFBQXdqRCxHQUNBNTVCLElBQ0F4M0IsR0FBQXczQixFQUFBLEtBa0JBLE9BZkF4M0IsSUFBQTJCLFFBQUEsYUFJQWlNLEVBQUFpa0MsZUFDQTd4QyxFQUFBLE1BQUFBLEVBQUEsS0FBQTROLEVBQUEsU0FBQThrRCxHQUFBOWtELEVBQUFpa0MsY0FBQSxLQUdBamtDLEVBQUEraUQsV0FDQTN3RCxFQUFBNE4sRUFBQStpRCxTQUFBM3dELElBR0E0TixFQUFBNmlELGdCQUNBendELEVBQUE0TixFQUFBNmlELGNBQUF6d0QsSUFFQUEsRUFHQSxTQUFBeXlELEdBQUE3a0QsRUFBQXdqRCxHQUNBLElBQUF2bkMsRUFBQWpjLEVBQUFrYyxXQUNBLEdBQUFELEVBQUEsQ0FDQSxJQUVBM3lCLEVBQUFDLEVBQUE2MkMsRUFBQTZrQixFQUZBMXNELEVBQUEsZUFDQTJzRCxHQUFBLEVBRUEsSUFBQTU3RCxFQUFBLEVBQUFDLEVBQUEweUIsRUFBQXp5QixPQUE4QkYsRUFBQUMsRUFBT0QsSUFBQSxDQUNyQzgyQyxFQUFBbmtCLEVBQUEzeUIsR0FDQTI3RCxHQUFBLEVBQ0EsSUFBQUUsRUFBQTNCLEVBQUF0bkMsV0FBQWtrQixFQUFBNzFDLE1BQ0E0NkQsSUFHQUYsSUFBQUUsRUFBQW5sRCxFQUFBb2dDLEVBQUFvakIsRUFBQW50QyxPQUVBNHVDLElBQ0FDLEdBQUEsRUFDQTNzRCxHQUFBLFVBQWU2bkMsRUFBQSxtQkFBQUEsRUFBQSxhQUFBQSxFQUFBejdDLE1BQUEsV0FBQXk3QyxFQUFBLHNCQUFBaDVDLEtBQUFFLFVBQUE4NEMsRUFBQXo3QyxPQUFBLEtBQUF5N0MsRUFBQWxyQyxJQUFBLFNBQUFrckMsRUFBQWtFLGFBQUFsRSxFQUFBbHJDLElBQUEsSUFBQWtyQyxFQUFBLGNBQUFBLEVBQUFhLFVBQUEsY0FBQTc1QyxLQUFBRSxVQUFBODRDLEVBQUFhLFdBQUEsVUFHZixPQUFBaWtCLEVBQ0Ezc0QsRUFBQTNKLE1BQUEsZUFEQSxHQUtBLFNBQUFvMkQsR0FBQWhsRCxFQUFBd2pELEdBQ0EsSUFBQUQsRUFBQXZqRCxFQUFBa1gsU0FBQSxHQVNBLEdBQUFxc0MsR0FBQSxJQUFBQSxFQUFBcndELEtBQUEsQ0FDQSxJQUFBa3lELEVBQUE5QixHQUFBQyxFQUFBQyxFQUFBaDlDLFNBQ0EsMkNBQStDNCtDLEVBQUEsNkJBQWlDQSxFQUFBcGdDLGdCQUFBeGhCLElBQUEsU0FBQTJqQyxHQUE0RSxvQkFBcUJBLEVBQUEsTUFBa0JseEMsS0FBQSxXQUluTSxTQUFBOHVELEdBQ0Eva0QsRUFDQStoQixFQUNBeWhDLEdBTUEsSUFBQTV6QixFQUFBNXZCLEVBQUE5VSxLQUFBaEgsT0FBQW1GLEtBQUEwNEIsR0FBQWt2QixLQUFBLFNBQUF4b0QsR0FDQSxJQUFBdTVCLEVBQUFELEVBQUF0NUIsR0FDQSxPQUNBdTVCLEVBQUFvOEIsbUJBQ0FwOEIsRUFBQTg1QixJQUNBOTVCLEVBQUE5MkIsS0FDQW02RCxHQUFBcmpDLEtBUUFzakMsSUFBQXRsRCxFQUFBODdDLEdBT0EsSUFBQWxzQixFQUFBLENBQ0EsSUFBQS9qQixFQUFBN0wsRUFBQTZMLE9BQ0EsTUFBQUEsRUFBQSxDQUNBLEdBQ0FBLEVBQUF3d0MsV0FBQXh3QyxFQUFBd3dDLFlBQUFyQixJQUNBbnZDLEVBQUEzZ0IsSUFDQSxDQUNBMGtDLEdBQUEsRUFDQSxNQUVBL2pCLEVBQUFpd0MsS0FDQXdKLEdBQUEsR0FFQXo1QyxZQUlBLElBQUEwNUMsRUFBQXJoRSxPQUFBbUYsS0FBQTA0QixHQUNBdmUsSUFBQSxTQUFBL2EsR0FBeUIsT0FBQSs4RCxHQUFBempDLEVBQUF0NUIsR0FBQSs2RCxLQUN6QnZ0RCxLQUFBLEtBRUEseUJBQUFzdkQsRUFBQSxLQUFBMzFCLEVBQUEsbUJBQUFBLEdBQUEwMUIsRUFBQSxlQUFBdGtDLEdBQUF1a0MsR0FBQSxRQUdBLFNBQUF2a0MsR0FBQXJzQixHQUNBLElBQUFxc0IsRUFBQSxLQUNBMTNCLEVBQUFxTCxFQUFBbkwsT0FDQSxNQUFBRixFQUNBMDNCLEVBQUEsR0FBQUEsRUFBQXJzQixFQUFBakcsYUFBQXBGLEdBRUEsT0FBQTAzQixJQUFBLEVBR0EsU0FBQXFrQyxHQUFBcmxELEdBQ0EsV0FBQUEsRUFBQTlNLE9BQ0EsU0FBQThNLEVBQUFsYixLQUdBa2IsRUFBQWtYLFNBQUErNUIsS0FBQW9VLEtBS0EsU0FBQUcsR0FDQXhsRCxFQUNBd2pELEdBRUEsSUFBQWlDLEVBQUF6bEQsRUFBQW1rQyxTQUFBLGNBQ0EsR0FBQW5rQyxFQUFBODdDLEtBQUE5N0MsRUFBQWdrRCxjQUFBeUIsRUFDQSxPQUFBeEIsR0FBQWprRCxFQUFBd2pELEVBQUFnQyxHQUFBLFFBRUEsR0FBQXhsRCxFQUFBOVUsTUFBQThVLEVBQUE4akQsYUFDQSxPQUFBQyxHQUFBL2pELEVBQUF3akQsRUFBQWdDLElBRUEsSUFBQW5KLEVBQUFyOEMsRUFBQXE4QyxZQUFBckIsR0FDQSxHQUNBdnNELE9BQUF1UixFQUFBcThDLFdBQ0FwcUQsRUFBQSxZQUFBb3FELEVBQUEsYUFDQSxhQUFBcjhDLEVBQUFsYixJQUNBa2IsRUFBQTg3QyxJQUFBMkosRUFDQSxJQUFBemxELEVBQUEsU0FBQXFrRCxHQUFBcmtELEVBQUF3akQsSUFBQSwwQkFDQWEsR0FBQXJrRCxFQUFBd2pELElBQUEsWUFDQUMsR0FBQXpqRCxFQUFBd2pELElBQUEsSUFFQWtDLEVBQUFySixFQUFBLGlCQUNBLGVBQVlyOEMsRUFBQXM4QyxZQUFBLG9CQUFBcnFELEVBQUF5ekQsRUFBQSxJQUdaLFNBQUFyQixHQUNBcmtELEVBQ0F3akQsRUFDQW1DLEVBQ0FDLEVBQ0FDLEdBRUEsSUFBQTN1QyxFQUFBbFgsRUFBQWtYLFNBQ0EsR0FBQUEsRUFBQTF0QixPQUFBLENBQ0EsSUFBQXM4RCxFQUFBNXVDLEVBQUEsR0FFQSxPQUFBQSxFQUFBMXRCLFFBQ0FzOEQsRUFBQTU2RCxLQUNBLGFBQUE0NkQsRUFBQWhoRSxLQUNBLFNBQUFnaEUsRUFBQWhoRSxJQUNBLENBQ0EsSUFBQXNsQyxFQUFBdTdCLEVBQ0FuQyxFQUFBSixlQUFBMEMsR0FBQSxVQUNBLEdBQ0EsVUFBQUYsR0FBQW5DLElBQUFxQyxFQUFBdEMsR0FBQXA1QixFQUVBLElBQUEyN0IsRUFBQUosRUFDQUssR0FBQTl1QyxFQUFBc3NDLEVBQUFKLGdCQUNBLEVBQ0ErQixFQUFBVSxHQUFBSSxHQUNBLFVBQUEvdUMsRUFBQTFULElBQUEsU0FBQWpDLEdBQThDLE9BQUE0akQsRUFBQTVqRCxFQUFBaWlELEtBQXdCdnRELEtBQUEsVUFBQTh2RCxFQUFBLElBQUFBLEVBQUEsS0FRdEUsU0FBQUMsR0FDQTl1QyxFQUNBa3NDLEdBR0EsSUFEQSxJQUFBN3FELEVBQUEsRUFDQWpQLEVBQUEsRUFBaUJBLEVBQUE0dEIsRUFBQTF0QixPQUFxQkYsSUFBQSxDQUN0QyxJQUFBMFcsRUFBQWtYLEVBQUE1dEIsR0FDQSxPQUFBMFcsRUFBQTlNLEtBQUEsQ0FHQSxHQUFBZ3pELEdBQUFsbUQsSUFDQUEsRUFBQW0rQyxjQUFBbitDLEVBQUFtK0MsYUFBQWxOLEtBQUEsU0FBQTF2QyxHQUErRCxPQUFBMmtELEdBQUEza0QsRUFBQTI2QyxTQUFzQyxDQUNyRzNqRCxFQUFBLEVBQ0EsT0FFQTZxRCxFQUFBcGpELElBQ0FBLEVBQUFtK0MsY0FBQW4rQyxFQUFBbStDLGFBQUFsTixLQUFBLFNBQUExdkMsR0FBK0QsT0FBQTZoRCxFQUFBN2hELEVBQUEyNkMsWUFDL0QzakQsRUFBQSxJQUdBLE9BQUFBLEVBR0EsU0FBQTJ0RCxHQUFBbG1ELEdBQ0EsWUFBQXZiLElBQUF1YixFQUFBOVUsS0FBQSxhQUFBOFUsRUFBQWxiLEtBQUEsU0FBQWtiLEVBQUFsYixJQUdBLFNBQUFtaEUsR0FBQWg2QyxFQUFBdTNDLEdBQ0EsV0FBQXYzQyxFQUFBL1ksS0FDQXV3RCxHQUFBeDNDLEVBQUF1M0MsR0FDRyxJQUFBdjNDLEVBQUEvWSxNQUFBK1ksRUFBQThMLFVBQ0hvdUMsR0FBQWw2QyxHQUVBbTZDLEdBQUFuNkMsR0FJQSxTQUFBbTZDLEdBQUF4Z0QsR0FDQSxpQkFBQUEsRUFBQTFTLEtBQ0EwUyxFQUFBbXNCLFdBQ0FzMEIsR0FBQWovRCxLQUFBRSxVQUFBc2UsVUFBQSxJQUdBLFNBQUF1Z0QsR0FBQXJQLEdBQ0EsWUFBQTF2RCxLQUFBRSxVQUFBd3ZELEVBQUFseEMsTUFBQSxJQUdBLFNBQUFzK0MsR0FBQWxrRCxFQUFBd2pELEdBQ0EsSUFBQTlFLEVBQUExK0MsRUFBQTArQyxVQUFBLFlBQ0F4bkMsRUFBQW10QyxHQUFBcmtELEVBQUF3akQsR0FDQWpyRCxFQUFBLE1BQUFtbUQsR0FBQXhuQyxFQUFBLElBQUFBLEVBQUEsSUFDQTJKLEVBQUE3Z0IsRUFBQTZnQixPQUFBN2dCLEVBQUFpa0MsYUFDQTZnQixJQUFBOWtELEVBQUE2Z0IsT0FBQSxJQUFBeGYsT0FBQXJCLEVBQUFpa0MsY0FBQSxJQUFBemdDLElBQUEsU0FBQXcwQixHQUFtRixPQUVuRnp0QyxLQUFBcW1CLEVBQUFvbkIsRUFBQXp0QyxNQUNBNUYsTUFBQXF6QyxFQUFBcnpDLE1BQ0FrL0MsUUFBQTdMLEVBQUE2TCxZQUVBLEtBQ0F5aUIsRUFBQXRtRCxFQUFBbWtDLFNBQUEsVUFVQSxPQVRBdGpCLElBQUF5bEMsR0FBQXB2QyxJQUNBM2UsR0FBQSxTQUVBc29CLElBQ0F0b0IsR0FBQSxJQUFBc29CLEdBRUF5bEMsSUFDQS90RCxJQUFBc29CLEVBQUEsZ0JBQUF5bEMsR0FFQS90RCxFQUFBLElBSUEsU0FBQTRyRCxHQUNBb0MsRUFDQXZtRCxFQUNBd2pELEdBRUEsSUFBQXRzQyxFQUFBbFgsRUFBQTRwQixlQUFBLEtBQUF5NkIsR0FBQXJrRCxFQUFBd2pELEdBQUEsR0FDQSxZQUFBK0MsRUFBQSxJQUFBbkMsR0FBQXBrRCxFQUFBd2pELElBQUF0c0MsRUFBQSxJQUFBQSxFQUFBLFFBR0EsU0FBQTR0QyxHQUFBdHBDLEdBR0EsSUFGQSxJQUFBZ3JDLEVBQUEsR0FDQUMsRUFBQSxHQUNBbjlELEVBQUEsRUFBaUJBLEVBQUFreUIsRUFBQWh5QixPQUFrQkYsSUFBQSxDQUNuQyxJQUFBNHpCLEVBQUExQixFQUFBbHlCLEdBQ0EzRSxFQUFBMGhFLEdBQUFucEMsRUFBQXY0QixPQUNBdTRCLEVBQUEybUIsUUFDQTRpQixHQUFBdnBDLEVBQUEsU0FBQXY0QixFQUFBLElBRUE2aEUsR0FBQSxJQUFBdHBDLEVBQUEsVUFBQXY0QixFQUFBLElBSUEsT0FEQTZoRSxFQUFBLElBQWtCQSxFQUFBNTNELE1BQUEsVUFDbEI2M0QsRUFDQSxNQUFBRCxFQUFBLEtBQUFDLEVBQUE3M0QsTUFBQSxXQUVBNDNELEVBS0EsU0FBQUgsR0FBQXpnRCxHQUNBLE9BQUFBLEVBQ0E3UixRQUFBLHFCQUNBQSxRQUFBLHFCQVNBLElBQUFpQixPQUFBLHVNQUlBcEssTUFBQSxLQUFBcUwsS0FBQSxrQkFHQSxJQUFBakIsT0FBQSwyQkFFQXBLLE1BQUEsS0FBQXFMLEtBQUEsOENBMkpBLFNBQUF5d0QsR0FBQXZmLEVBQUF3ZixHQUNBLElBQ0EsV0FBQXQwRCxTQUFBODBDLEdBQ0csTUFBQXhvQyxHQUVILE9BREFnb0QsRUFBQTU4RCxLQUFBLENBQWlCNFUsTUFBQXdvQyxTQUNqQngxQixHQUlBLFNBQUFpMUMsR0FBQUMsR0FDQSxJQUFBcDJDLEVBQUF2c0IsT0FBQW9ILE9BQUEsTUFFQSxnQkFDQTZ2RCxFQUNBMzBDLEVBQ0F1VSxHQUVBdlUsRUFBQWdMLEVBQUEsR0FBdUJoTCxHQUN2QkEsRUFBQTZQLFlBQ0E3UCxFQUFBNlAsS0FxQkEsSUFBQTV0QixFQUFBK2QsRUFBQTB1QyxXQUNBem1ELE9BQUErWCxFQUFBMHVDLFlBQUFpRyxFQUNBQSxFQUNBLEdBQUExcUMsRUFBQWhvQixHQUNBLE9BQUFnb0IsRUFBQWhvQixHQUlBLElBQUFxK0QsRUFBQUQsRUFBQTFMLEVBQUEzMEMsR0ErQkEsSUFBQWpPLEVBQUEsR0FDQXd1RCxFQUFBLEdBeUJBLE9BeEJBeHVELEVBQUEwcUIsT0FBQXlqQyxHQUFBSSxFQUFBN2pDLE9BQUE4akMsR0FDQXh1RCxFQUFBeXNCLGdCQUFBOGhDLEVBQUE5aEMsZ0JBQUF4aEIsSUFBQSxTQUFBMmpDLEdBQ0EsT0FBQXVmLEdBQUF2ZixFQUFBNGYsS0FzQkF0MkMsRUFBQWhvQixHQUFBOFAsR0FNQSxTQUFBeXVELEdBQUFDLEdBQ0EsZ0JBQUEvRyxHQUNBLFNBQUEyRyxFQUNBMUwsRUFDQTMwQyxHQUVBLElBQUEwZ0QsRUFBQWhqRSxPQUFBb0gsT0FBQTQwRCxHQUNBeUcsRUFBQSxHQUNBUSxFQUFBLEdBRUE5d0MsRUFBQSxTQUFBb3RCLEVBQUFDLEVBQUEwakIsSUFDQUEsRUFBQUQsRUFBQVIsR0FBQTU4RCxLQUFBMDVDLElBR0EsR0FBQWo5QixFQStCQSxRQUFBL2QsS0FaQStkLEVBQUF1TCxVQUNBbTFDLEVBQUFuMUMsU0FDQW11QyxFQUFBbnVDLFNBQUEsSUFBQTFRLE9BQUFtRixFQUFBdUwsVUFHQXZMLEVBQUEwVixhQUNBZ3JDLEVBQUFockMsV0FBQTFLLEVBQ0F0dEIsT0FBQW9ILE9BQUE0MEQsRUFBQWhrQyxZQUFBLE1BQ0ExVixFQUFBMFYsYUFJQTFWLEVBQ0EsWUFBQS9kLEdBQUEsZUFBQUEsSUFDQXkrRCxFQUFBeitELEdBQUErZCxFQUFBL2QsSUFLQXkrRCxFQUFBN3dDLE9BRUEsSUFBQXl3QyxFQUFBRyxFQUFBOUwsRUFBQXIwQyxPQUFBb2dELEdBTUEsT0FGQUosRUFBQUgsU0FDQUcsRUFBQUssT0FDQUwsRUFHQSxPQUNBRCxVQUNBUSxtQkFBQVQsR0FBQUMsS0FVQSxJQXlCQVMsR0F6QkFDLEdBQUFQLEdBQUEsU0FDQTdMLEVBQ0EzMEMsR0FFQSxJQUFBKzhDLEVBQUF4OUMsR0FBQW8xQyxFQUFBcjBDLE9BQUFOLElBQ0EsSUFBQUEsRUFBQTY1QyxVQUNBQSxHQUFBa0QsRUFBQS84QyxHQUVBLElBQUEyZ0MsRUFBQW1jLEdBQUFDLEVBQUEvOEMsR0FDQSxPQUNBKzhDLE1BQ0F0Z0MsT0FBQWtrQixFQUFBbGtCLE9BQ0ErQixnQkFBQW1pQixFQUFBbmlCLG1CQU1BcVMsR0FBQWt3QixHQUFBckgsSUFFQW1ILElBREFod0IsR0FBQXd2QixRQUNBeHZCLEdBQUFnd0Isb0JBTUEsU0FBQUcsR0FBQUMsR0FHQSxPQUZBSCxPQUFBbDBELFNBQUFFLGNBQUEsT0FDQWcwRCxHQUFBam9CLFVBQUFvb0IsRUFBQSxpQ0FDQUgsR0FBQWpvQixVQUFBL2lDLFFBQUEsU0FBcUMsRUFJckMsSUFBQXk3QyxLQUFBcmpDLEdBQUE4eUMsSUFBQSxHQUVBL04sS0FBQS9rQyxHQUFBOHlDLElBQUEsR0FJQUUsR0FBQWwzQyxFQUFBLFNBQUF4ZSxHQUNBLElBQUFnTyxFQUFBK0ssR0FBQS9ZLEdBQ0EsT0FBQWdPLEtBQUFxL0IsWUFHQXNvQixHQUFBdDhCLEdBQUFsbkMsVUFBQStqQyxPQTBFQSxTQUFBMC9CLEdBQUE1bkQsR0FDQSxHQUFBQSxFQUFBNm5ELFVBQ0EsT0FBQTduRCxFQUFBNm5ELFVBRUEsSUFBQUMsRUFBQTEwRCxTQUFBRSxjQUFBLE9BRUEsT0FEQXcwRCxFQUFBaDFELFlBQUFrTixFQUFBdTBDLFdBQUEsSUFDQXVULEVBQUF6b0IsVUEvRUFoVSxHQUFBbG5DLFVBQUErakMsT0FBQSxTQUNBbG9CLEVBQ0EybkIsR0FLQSxHQUhBM25CLEtBQUErSyxHQUFBL0ssR0FHQUEsSUFBQTVNLFNBQUF5USxNQUFBN0QsSUFBQTVNLFNBQUFzRSxnQkFJQSxPQUFBcFAsS0FHQSxJQUFBa2UsRUFBQWxlLEtBQUFvMUIsU0FFQSxJQUFBbFgsRUFBQXljLE9BQUEsQ0FDQSxJQUFBazRCLEVBQUEzMEMsRUFBQTIwQyxTQUNBLEdBQUFBLEVBQ0EscUJBQUFBLEVBQ0EsTUFBQUEsRUFBQXhzRCxPQUFBLEtBQ0F3c0QsRUFBQXVNLEdBQUF2TSxRQVNPLEtBQUFBLEVBQUF4YixTQU1QLE9BQUFyM0MsS0FMQTZ5RCxJQUFBOWIsZUFPS3IvQixJQUNMbTdDLEVBQUF5TSxHQUFBNW5ELElBRUEsR0FBQW03QyxFQUFBLENBRVUsRUFJVixJQUFBM3ZCLEVBQUE2N0IsR0FBQWxNLEVBQUEsQ0FDQXNCLG1CQUEyQixFQUMzQjFFLHdCQUNBMEIsK0JBQ0F2RSxXQUFBMXVDLEVBQUEwdUMsV0FDQXNILFNBQUFoMkMsRUFBQWcyQyxVQUNPbDBELE1BQ1AyNkIsRUFBQXVJLEVBQUF2SSxPQUNBK0IsRUFBQXdHLEVBQUF4RyxnQkFDQXhlLEVBQUF5YyxTQUNBemMsRUFBQXdlLG1CQVNBLE9BQUEyaUMsR0FBQTlpRSxLQUFBeUQsS0FBQTBYLEVBQUEybkIsSUFpQkEwRCxHQUFBdzdCLFFBQUFRLEdBRWVVLEVBQUEscURDbHNYZixJQUFBM2hFLEVBQWVwQyxFQUFRLFFBQ3ZCa1MsRUFBVWxTLEVBQVEsUUFDbEJpTSxFQUFrQmpNLEVBQVEsUUFDMUJtUyxFQUFlblMsRUFBUSxPQUFSQSxDQUF1QixZQUN0Q29TLEVBQUEsYUFDQTdPLEVBQUEsWUFHQThPLEVBQUEsV0FFQSxJQUlBQyxFQUpBQyxFQUFldlMsRUFBUSxPQUFSQSxDQUF1QixVQUN0Q3NGLEVBQUEyRyxFQUFBekcsT0FDQWdOLEVBQUEsSUFDQUMsRUFBQSxJQUVBRixFQUFBRyxNQUFBQyxRQUFBLE9BQ0UzUyxFQUFRLFFBQVM4TyxZQUFBeUQsR0FDbkJBLEVBQUFLLElBQUEsY0FHQU4sRUFBQUMsRUFBQU0sY0FBQXpELFNBQ0FrRCxFQUFBUSxPQUNBUixFQUFBUyxNQUFBUCxFQUFBLFNBQUFDLEVBQUEsb0JBQUFELEVBQUEsVUFBQUMsR0FDQUgsRUFBQVUsUUFDQVgsRUFBQUMsRUFBQTVMLEVBQ0EsTUFBQXBCLFdBQUErTSxFQUFBOU8sR0FBQTBJLEVBQUEzRyxJQUNBLE9BQUErTSxLQUdBblIsRUFBQUMsUUFBQWpCLE9BQUFvSCxRQUFBLFNBQUE0RSxFQUFBSyxHQUNBLElBQUF0TCxFQVFBLE9BUEEsT0FBQWlMLEdBQ0FrRyxFQUFBN08sR0FBQW5CLEVBQUE4SixHQUNBakwsRUFBQSxJQUFBbVIsRUFDQUEsRUFBQTdPLEdBQUEsS0FFQXRDLEVBQUFrUixHQUFBakcsR0FDR2pMLEVBQUFvUixTQUNINVIsSUFBQThMLEVBQUF0TCxFQUFBaVIsRUFBQWpSLEVBQUFzTCwwQkN2Q0EsSUFBQXBCLEVBQVduTCxFQUFRLFFBQ25CbUQsRUFBQWdJLEVBQUEvSCxPQUFBK0gsRUFBQS9ILEtBQUEsQ0FBdUNFLFVBQUFGLEtBQUFFLFlBQ3ZDcEMsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxPQUFBckIsRUFBQUcsVUFBQXlFLE1BQUE1RSxFQUFBZ0Qsa0NDSEEsSUFBQS9FLEVBQWFwQixFQUFRLFFBQ3JCOG5CLEVBQUExbUIsRUFBQTBtQixVQUVBNW1CLEVBQUFDLFFBQUEybUIsS0FBQXBRLFdBQUEsc0NDREEsSUFBQXRWLEVBQWVwQyxFQUFRLFFBQ3ZCd1QsRUFBZXhULEVBQVEsUUFDdkIyVixFQUFlM1YsRUFBUSxRQUN2QmtLLEVBQWdCbEssRUFBUSxRQUN4QmdrRSxFQUF5QmhrRSxFQUFRLFFBQ2pDbVUsRUFBaUJuVSxFQUFRLFFBQ3pCbU0sRUFBQWxFLEtBQUFrRSxJQUNBQyxFQUFBbkUsS0FBQW1FLElBQ0F3SSxFQUFBM00sS0FBQTJNLE1BQ0FxdkQsRUFBQSw0QkFDQUMsRUFBQSxvQkFFQUMsRUFBQSxTQUFBMy9ELEdBQ0EsWUFBQS9ELElBQUErRCxJQUFBaUcsT0FBQWpHLElBSUF4RSxFQUFRLE9BQVJBLENBQXVCLHFCQUFBbUssRUFBQWk2RCxFQUFBQyxFQUFBL3ZELEdBQ3ZCLE9BR0EsU0FBQWd3RCxFQUFBQyxHQUNBLElBQUFyNEQsRUFBQS9CLEVBQUE3RixNQUNBMkosT0FBQXhOLEdBQUE2akUsT0FBQTdqRSxFQUFBNmpFLEVBQUFGLEdBQ0EsWUFBQTNqRSxJQUFBd04sRUFDQUEsRUFBQXBOLEtBQUF5akUsRUFBQXA0RCxFQUFBcTRELEdBQ0FGLEVBQUF4akUsS0FBQTRKLE9BQUF5QixHQUFBbzRELEVBQUFDLElBSUEsU0FBQTd6RCxFQUFBNnpELEdBQ0EsSUFBQWh3RCxFQUFBRCxFQUFBK3ZELEVBQUEzekQsRUFBQXBNLEtBQUFpZ0UsR0FDQSxHQUFBaHdELEVBQUExSCxLQUFBLE9BQUEwSCxFQUFBNVQsTUFFQSxJQUFBNlQsRUFBQXBTLEVBQUFzTyxHQUNBekosRUFBQXdELE9BQUFuRyxNQUNBa2dFLEVBQUEsb0JBQUFELEVBQ0FDLElBQUFELEVBQUE5NUQsT0FBQTg1RCxJQUNBLElBQUFuakUsRUFBQW9ULEVBQUFwVCxPQUNBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBcWpFLEVBQUFqd0QsRUFBQXpKLFFBQ0F5SixFQUFBRSxVQUFBLEVBRUEsSUFBQWd3RCxFQUFBLEdBQ0EsU0FDQSxJQUFBempFLEVBQUFrVCxFQUFBSyxFQUFBdk4sR0FDQSxVQUFBaEcsRUFBQSxNQUVBLEdBREF5akUsRUFBQTMrRCxLQUFBOUUsSUFDQUcsRUFBQSxNQUNBLElBQUF1akUsRUFBQWw2RCxPQUFBeEosRUFBQSxJQUNBLEtBQUEwakUsSUFBQW53RCxFQUFBRSxVQUFBc3ZELEVBQUEvOEQsRUFBQTBPLEVBQUFuQixFQUFBRSxXQUFBK3ZELElBSUEsSUFGQSxJQUFBRyxFQUFBLEdBQ0FDLEVBQUEsRUFDQXYvRCxFQUFBLEVBQXFCQSxFQUFBby9ELEVBQUFsL0QsT0FBb0JGLElBQUEsQ0FDekNyRSxFQUFBeWpFLEVBQUFwL0QsR0FTQSxJQVJBLElBQUF3L0QsRUFBQXI2RCxPQUFBeEosRUFBQSxJQUNBOGpFLEVBQUE1NEQsRUFBQUMsRUFBQWxDLEVBQUFqSixFQUFBNkosT0FBQTdELEVBQUF6QixRQUFBLEdBQ0F3L0QsRUFBQSxHQU1BbitELEVBQUEsRUFBdUJBLEVBQUE1RixFQUFBdUUsT0FBbUJxQixJQUFBbStELEVBQUFqL0QsS0FBQW8rRCxFQUFBbGpFLEVBQUE0RixLQUMxQyxJQUFBbytELEVBQUFoa0UsRUFBQTZPLE9BQ0EsR0FBQTAwRCxFQUFBLENBQ0EsSUFBQVUsRUFBQSxDQUFBSixHQUFBem5ELE9BQUEybkQsRUFBQUQsRUFBQTk5RCxRQUNBeEcsSUFBQXdrRSxHQUFBQyxFQUFBbi9ELEtBQUFrL0QsR0FDQSxJQUFBRSxFQUFBMTZELE9BQUE4NUQsRUFBQXg4RCxXQUFBdEgsRUFBQXlrRSxTQUVBQyxFQUFBQyxFQUFBTixFQUFBNzlELEVBQUE4OUQsRUFBQUMsRUFBQUMsRUFBQVYsR0FFQVEsR0FBQUYsSUFDQUQsR0FBQTM5RCxFQUFBMkQsTUFBQWk2RCxFQUFBRSxHQUFBSSxFQUNBTixFQUFBRSxFQUFBRCxFQUFBdC9ELFFBR0EsT0FBQW8vRCxFQUFBMzlELEVBQUEyRCxNQUFBaTZELEtBS0EsU0FBQU8sRUFBQU4sRUFBQW4wRCxFQUFBbzBELEVBQUFDLEVBQUFDLEVBQUFFLEdBQ0EsSUFBQUUsRUFBQU4sRUFBQUQsRUFBQXQvRCxPQUNBOGlCLEVBQUEwOEMsRUFBQXgvRCxPQUNBaVEsRUFBQXl1RCxFQUtBLFlBSkF6akUsSUFBQXdrRSxJQUNBQSxFQUFBenhELEVBQUF5eEQsR0FDQXh2RCxFQUFBd3VELEdBRUFJLEVBQUF4akUsS0FBQXNrRSxFQUFBMXZELEVBQUEsU0FBQW9CLEVBQUEyaUMsR0FDQSxJQUFBcGYsRUFDQSxPQUFBb2YsRUFBQTd1QyxPQUFBLElBQ0Esa0JBQ0EsZUFBQW02RCxFQUNBLGVBQUFuMEQsRUFBQS9GLE1BQUEsRUFBQW02RCxHQUNBLGVBQUFwMEQsRUFBQS9GLE1BQUF5NkQsR0FDQSxRQUNBanJDLEVBQUE2cUMsRUFBQXpyQixFQUFBNXVDLE1BQUEsT0FDQSxNQUNBLFFBQ0EsSUFBQTJkLEdBQUFpeEIsRUFDQSxPQUFBanhCLEVBQUEsT0FBQTFSLEVBQ0EsR0FBQTBSLEVBQUFELEVBQUEsQ0FDQSxJQUFBdmxCLEVBQUE2UixFQUFBMlQsRUFBQSxJQUNBLFdBQUF4bEIsRUFBQThULEVBQ0E5VCxHQUFBdWxCLE9BQUE3bkIsSUFBQXVrRSxFQUFBamlFLEVBQUEsR0FBQXkyQyxFQUFBN3VDLE9BQUEsR0FBQXE2RCxFQUFBamlFLEVBQUEsR0FBQXkyQyxFQUFBN3VDLE9BQUEsR0FDQWtNLEVBRUF1akIsRUFBQTRxQyxFQUFBejhDLEVBQUEsR0FFQSxZQUFBOW5CLElBQUEyNUIsRUFBQSxHQUFBQSw2QkNsSEFsNUIsRUFBQUMsUUFBaUJuQixFQUFRLDJDQ0V6QixJQUFBbVgsRUFBZ0JuWCxFQUFRLFFBRXhCLFNBQUFzbEUsRUFBQTc1RCxHQUNBLElBQUEwTSxFQUFBaUIsRUFDQTlVLEtBQUE0VCxRQUFBLElBQUF6TSxFQUFBLFNBQUE4NUQsRUFBQXRxRCxHQUNBLFFBQUF4YSxJQUFBMFgsUUFBQTFYLElBQUEyWSxFQUFBLE1BQUFsVCxVQUFBLDJCQUNBaVMsRUFBQW90RCxFQUNBbnNELEVBQUE2QixJQUVBM1csS0FBQTZULFFBQUFoQixFQUFBZ0IsR0FDQTdULEtBQUE4VSxPQUFBakMsRUFBQWlDLEdBR0FsWSxFQUFBQyxRQUFBNEIsRUFBQSxTQUFBMEksR0FDQSxXQUFBNjVELEVBQUE3NUQsd0JDaEJBdkssRUFBQUMsUUFBQSxTQUFBaVUsRUFBQXpVLEdBQ0EsT0FDQXVFLGFBQUEsRUFBQWtRLEdBQ0EvTyxlQUFBLEVBQUErTyxHQUNBQyxXQUFBLEVBQUFELEdBQ0F6VSxnQ0NMQSxJQUFBMEIsRUFBZXJDLEVBQVEsUUFDdkJ1TyxFQUFVdk8sRUFBUSxRQUNsQjhyQixFQUFlOXJCLEVBQVEsUUFHdkJ3bEUsRUFBQSxzQkFHQUMsRUFBQXg5RCxLQUFBa0UsSUFDQXU1RCxFQUFBejlELEtBQUFtRSxJQXdEQSxTQUFBdTVELEVBQUFDLEVBQUFDLEVBQUFyakQsR0FDQSxJQUFBc2pELEVBQ0FDLEVBQ0FDLEVBQ0Eva0UsRUFDQWdsRSxFQUNBQyxFQUNBQyxFQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBRUEsc0JBQUFWLEVBQ0EsVUFBQTEvRCxVQUFBcy9ELEdBVUEsU0FBQWUsRUFBQUMsR0FDQSxJQUFBMStELEVBQUFnK0QsRUFDQTVqRCxFQUFBNmpELEVBS0EsT0FIQUQsRUFBQUMsT0FBQXRsRSxFQUNBMGxFLEVBQUFLLEVBQ0F2bEUsRUFBQTJrRSxFQUFBNzlELE1BQUFtYSxFQUFBcGEsR0FDQTdHLEVBR0EsU0FBQXdsRSxFQUFBRCxHQU1BLE9BSkFMLEVBQUFLLEVBRUFQLEVBQUFqM0QsV0FBQTAzRCxFQUFBYixHQUVBTyxFQUFBRyxFQUFBQyxHQUFBdmxFLEVBR0EsU0FBQTBsRSxFQUFBSCxHQUNBLElBQUFJLEVBQUFKLEVBQUFOLEVBQ0FXLEVBQUFMLEVBQUFMLEVBQ0FXLEVBQUFqQixFQUFBZSxFQUVBLE9BQUFQLEVBQ0FYLEVBQUFvQixFQUFBZCxFQUFBYSxHQUNBQyxFQUdBLFNBQUFDLEVBQUFQLEdBQ0EsSUFBQUksRUFBQUosRUFBQU4sRUFDQVcsRUFBQUwsRUFBQUwsRUFLQSxZQUFBMWxFLElBQUF5bEUsR0FBQVUsR0FBQWYsR0FDQWUsRUFBQSxHQUFBUCxHQUFBUSxHQUFBYixFQUdBLFNBQUFVLElBQ0EsSUFBQUYsRUFBQWo0RCxJQUNBLEdBQUF3NEQsRUFBQVAsR0FDQSxPQUFBUSxFQUFBUixHQUdBUCxFQUFBajNELFdBQUEwM0QsRUFBQUMsRUFBQUgsSUFHQSxTQUFBUSxFQUFBUixHQUtBLE9BSkFQLE9BQUF4bEUsRUFJQTZsRSxHQUFBUixFQUNBUyxFQUFBQyxJQUVBVixFQUFBQyxPQUFBdGxFLEVBQ0FRLEdBR0EsU0FBQWdtRSxTQUNBeG1FLElBQUF3bEUsR0FDQXQ5QixhQUFBczlCLEdBRUFFLEVBQUEsRUFDQUwsRUFBQUksRUFBQUgsRUFBQUUsT0FBQXhsRSxFQUdBLFNBQUFtbkIsSUFDQSxZQUFBbm5CLElBQUF3bEUsRUFBQWhsRSxFQUFBK2xFLEVBQUF6NEQsS0FHQSxTQUFBMjRELElBQ0EsSUFBQVYsRUFBQWo0RCxJQUNBNDRELEVBQUFKLEVBQUFQLEdBTUEsR0FKQVYsRUFBQTMvRCxVQUNBNC9ELEVBQUF6aEUsS0FDQTRoRSxFQUFBTSxFQUVBVyxFQUFBLENBQ0EsUUFBQTFtRSxJQUFBd2xFLEVBQ0EsT0FBQVEsRUFBQVAsR0FFQSxHQUFBRyxFQUdBLE9BREFKLEVBQUFqM0QsV0FBQTAzRCxFQUFBYixHQUNBVSxFQUFBTCxHQU1BLFlBSEF6bEUsSUFBQXdsRSxJQUNBQSxFQUFBajNELFdBQUEwM0QsRUFBQWIsSUFFQTVrRSxFQUlBLE9BMUdBNGtFLEVBQUEvNUMsRUFBQSs1QyxJQUFBLEVBQ0F4akUsRUFBQW1nQixLQUNBNGpELElBQUE1akQsRUFBQTRqRCxRQUNBQyxFQUFBLFlBQUE3akQsRUFDQXdqRCxFQUFBSyxFQUFBWixFQUFBMzVDLEVBQUF0SixFQUFBd2pELFVBQUEsRUFBQUgsR0FBQUcsRUFDQU0sRUFBQSxhQUFBOWpELE1BQUE4akQsWUFtR0FZLEVBQUFELFNBQ0FDLEVBQUF0L0MsUUFDQXMvQyxFQUdBaG1FLEVBQUFDLFFBQUF3a0UscUNDNUxBLElBQUFsMkQsRUFBaUJ6UCxFQUFRLFFBQ3pCQSxFQUFRLE9BQVJBLENBQW1CLENBQ25CMGMsT0FBQSxTQUNBbFQsT0FBQSxFQUNBNDlELE9BQUEzM0QsSUFBQSxJQUFBSSxNQUNDLENBQ0RBLEtBQUFKLDBCQ05BLElBQUF2RixFQUFnQmxLLEVBQVEsUUFDeEJvTSxFQUFBbkUsS0FBQW1FLElBQ0FsTCxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLE9BQUFBLEVBQUEsRUFBQTRILEVBQUFsQyxFQUFBMUYsR0FBQSwyQ0NKQSxJQUFBbkMsRUFBZXJDLEVBQVEsUUFDdkIrRSxFQUFlL0UsRUFBUSxRQUd2QnFuRSxFQUFBLElBR0FDLEVBQUEsYUFHQUMsRUFBQSxxQkFHQUMsRUFBQSxhQUdBQyxFQUFBLGNBR0FDLEVBQUFwMEIsU0F5QkEsU0FBQXhuQixFQUFBbnJCLEdBQ0Esb0JBQUFBLEVBQ0EsT0FBQUEsRUFFQSxHQUFBb0UsRUFBQXBFLEdBQ0EsT0FBQTBtRSxFQUVBLEdBQUFobEUsRUFBQTFCLEdBQUEsQ0FDQSxJQUFBZ25FLEVBQUEsbUJBQUFobkUsRUFBQXFILFFBQUFySCxFQUFBcUgsVUFBQXJILEVBQ0FBLEVBQUEwQixFQUFBc2xFLEtBQUEsR0FBQUEsRUFFQSxvQkFBQWhuRSxFQUNBLFdBQUFBLE9BRUFBLElBQUFvUCxRQUFBdTNELEVBQUEsSUFDQSxJQUFBTSxFQUFBSixFQUFBeG9ELEtBQUFyZSxHQUNBLE9BQUFpbkUsR0FBQUgsRUFBQXpvRCxLQUFBcmUsR0FDQSttRSxFQUFBL21FLEVBQUFpSyxNQUFBLEdBQUFnOUQsRUFBQSxLQUNBTCxFQUFBdm9ELEtBQUFyZSxHQUFBMG1FLEdBQUExbUUsRUFHQU8sRUFBQUMsUUFBQTJxQixzQkNqRUE1cUIsRUFBQUMsU0FBQSx3QkNBQSxJQUFBaUIsRUFBZXBDLEVBQVEsUUFDdkJxQyxFQUFlckMsRUFBUSxRQUN2QmlZLEVBQTJCalksRUFBUSxRQUVuQ2tCLEVBQUFDLFFBQUEsU0FBQXNLLEVBQUFJLEdBRUEsR0FEQXpKLEVBQUFxSixHQUNBcEosRUFBQXdKLE1BQUF5RSxjQUFBN0UsRUFBQSxPQUFBSSxFQUNBLElBQUFnOEQsRUFBQTV2RCxFQUFBbFYsRUFBQTBJLEdBQ0EwTSxFQUFBMHZELEVBQUExdkQsUUFFQSxPQURBQSxFQUFBdE0sR0FDQWc4RCxFQUFBM3ZELDZCQ1RBaFgsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxRQUFBL0QsR0FBQStELEVBQUEsTUFBQTBCLFVBQUEseUJBQUExQixHQUNBLE9BQUFBLHlCQ0hBLElBQUErUSxFQUFVdlYsRUFBUSxRQUNsQndDLEVBQWlCeEMsRUFBUSxRQUN6QnNDLEVBQWdCdEMsRUFBUSxRQUN4QnVDLEVBQWtCdkMsRUFBUSxRQUMxQnFCLEVBQVVyQixFQUFRLFFBQ2xCNnFCLEVBQXFCN3FCLEVBQVEsUUFDN0I4QyxFQUFBNUMsT0FBQXVILHlCQUVBdEcsRUFBQTRCLEVBQVkvQyxFQUFRLFFBQWdCOEMsRUFBQSxTQUFBb0osRUFBQTlHLEdBR3BDLEdBRkE4RyxFQUFBNUosRUFBQTRKLEdBQ0E5RyxFQUFBN0MsRUFBQTZDLEdBQUEsR0FDQXlsQixFQUFBLElBQ0EsT0FBQS9uQixFQUFBb0osRUFBQTlHLEdBQ0csTUFBQXBFLElBQ0gsR0FBQUssRUFBQTZLLEVBQUE5RyxHQUFBLE9BQUE1QyxHQUFBK1MsRUFBQXhTLEVBQUFsQyxLQUFBcUwsRUFBQTlHLEdBQUE4RyxFQUFBOUcsMkJDYkEsSUFBQTlDLEVBQWdCdEMsRUFBUSxRQUN4QjRGLEVBQWdDNUYsRUFBUSxRQUFnQitDLEVBRXhEL0MsRUFBUSxPQUFSQSxDQUF1QixzQ0FDdkIsZ0JBQUF3RSxFQUFBQyxHQUNBLE9BQUFtQixFQUFBdEQsRUFBQWtDLEdBQUFDLDRCQ0pBLElBQUFuQyxFQUFnQnRDLEVBQVEsUUFDeEIyVixFQUFlM1YsRUFBUSxRQUN2QjZiLEVBQXNCN2IsRUFBUSxRQUM5QmtCLEVBQUFDLFFBQUEsU0FBQTJhLEdBQ0EsZ0JBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFHQXRiLEVBSEF1TCxFQUFBNUosRUFBQXlaLEdBQ0F2VyxFQUFBbVEsRUFBQXpKLEVBQUExRyxRQUNBc0YsRUFBQStRLEVBQUFJLEVBQUF6VyxHQUlBLEdBQUFzVyxHQUFBRSxNQUFBLE1BQUF4VyxFQUFBc0YsRUFHQSxHQUZBbkssRUFBQXVMLEVBQUFwQixLQUVBbkssS0FBQSxjQUVLLEtBQVk2RSxFQUFBc0YsRUFBZUEsSUFBQSxJQUFBZ1IsR0FBQWhSLEtBQUFvQixJQUNoQ0EsRUFBQXBCLEtBQUFrUixFQUFBLE9BQUFGLEdBQUFoUixHQUFBLEVBQ0ssT0FBQWdSLElBQUEsdUNDbkJMLElBQUFnc0QsRUFBdUI5bkUsRUFBUSxRQUMvQmdXLEVBQVdoVyxFQUFRLFFBQ25Cb0ksRUFBZ0JwSSxFQUFRLFFBQ3hCc0MsRUFBZ0J0QyxFQUFRLFFBTXhCa0IsRUFBQUMsUUFBaUJuQixFQUFRLE9BQVJBLENBQXdCNFQsTUFBQSxpQkFBQW5ILEVBQUFsRCxHQUN6Q2pGLEtBQUFvSSxHQUFBcEssRUFBQW1LLEdBQ0FuSSxLQUFBcUksR0FBQSxFQUNBckksS0FBQVEsR0FBQXlFLEdBRUMsV0FDRCxJQUFBMkMsRUFBQTVILEtBQUFvSSxHQUNBbkQsRUFBQWpGLEtBQUFRLEdBQ0FnRyxFQUFBeEcsS0FBQXFJLEtBQ0EsT0FBQVQsR0FBQXBCLEdBQUFvQixFQUFBMUcsUUFDQWxCLEtBQUFvSSxRQUFBak0sRUFDQXVWLEVBQUEsSUFFQUEsRUFBQSxVQUFBek0sRUFBQXVCLEVBQ0EsVUFBQXZCLEVBQUEyQyxFQUFBcEIsR0FDQSxDQUFBQSxFQUFBb0IsRUFBQXBCLE1BQ0MsVUFHRDFDLEVBQUEyL0QsVUFBQTMvRCxFQUFBd0wsTUFFQWswRCxFQUFBLFFBQ0FBLEVBQUEsVUFDQUEsRUFBQSxpQ0NoQ0EsSUFBQWpsRSxFQUFZN0MsRUFBUSxRQUNwQmlNLEVBQWtCak0sRUFBUSxRQUUxQmtCLEVBQUFDLFFBQUFqQixPQUFBbUYsTUFBQSxTQUFBNkcsR0FDQSxPQUFBckosRUFBQXFKLEVBQUFELDBCQ0xBL0ssRUFBQUMsU0FBa0JuQixFQUFRLFVBQXNCQSxFQUFRLE9BQVJBLENBQWtCLFdBQ2xFLE9BQXVHLEdBQXZHRSxPQUFBcUgsZUFBK0J2SCxFQUFRLE9BQVJBLENBQXVCLFlBQWdCcUUsSUFBQSxXQUFtQixZQUFjRSx3QkNEdkcsSUFBQXdrQixFQUdBQSxFQUFBLFdBQ0EsT0FBQXprQixLQURBLEdBSUEsSUFFQXlrQixLQUFBLElBQUExYSxTQUFBLGlCQUNDLE1BQUFyTixHQUVELGtCQUFBaUssU0FBQThkLEVBQUE5ZCxRQU9BL0osRUFBQUMsUUFBQTRuQixzQkNuQkEsSUFBQS9hLEVBQUEsRUFDQW1QLEVBQUFsVixLQUFBbVYsU0FDQWxjLEVBQUFDLFFBQUEsU0FBQXNELEdBQ0EsZ0JBQUE0WSxZQUFBNWMsSUFBQWdFLEVBQUEsR0FBQUEsRUFBQSxRQUFBdUosRUFBQW1QLEdBQUE3YyxTQUFBLHlDQ0ZBLElBQUF3bkUsRUFBdUI5bkUsRUFBUSxRQUMvQmdXLEVBQVdoVyxFQUFRLFFBQ25Cb0ksRUFBZ0JwSSxFQUFRLFFBQ3hCc0MsRUFBZ0J0QyxFQUFRLFFBTXhCa0IsRUFBQUMsUUFBaUJuQixFQUFRLE9BQVJBLENBQXdCNFQsTUFBQSxpQkFBQW5ILEVBQUFsRCxHQUN6Q2pGLEtBQUFvSSxHQUFBcEssRUFBQW1LLEdBQ0FuSSxLQUFBcUksR0FBQSxFQUNBckksS0FBQVEsR0FBQXlFLEdBRUMsV0FDRCxJQUFBMkMsRUFBQTVILEtBQUFvSSxHQUNBbkQsRUFBQWpGLEtBQUFRLEdBQ0FnRyxFQUFBeEcsS0FBQXFJLEtBQ0EsT0FBQVQsR0FBQXBCLEdBQUFvQixFQUFBMUcsUUFDQWxCLEtBQUFvSSxRQUFBak0sRUFDQXVWLEVBQUEsSUFFQUEsRUFBQSxVQUFBek0sRUFBQXVCLEVBQ0EsVUFBQXZCLEVBQUEyQyxFQUFBcEIsR0FDQSxDQUFBQSxFQUFBb0IsRUFBQXBCLE1BQ0MsVUFHRDFDLEVBQUEyL0QsVUFBQTMvRCxFQUFBd0wsTUFFQWswRCxFQUFBLFFBQ0FBLEVBQUEsVUFDQUEsRUFBQSxpQ0NqQ0EsSUFBQXpsRSxFQUFlckMsRUFBUSxRQUN2QmtCLEVBQUFDLFFBQUEsU0FBQXFELEdBQ0EsSUFBQW5DLEVBQUFtQyxHQUFBLE1BQUEwQixVQUFBMUIsRUFBQSxzQkFDQSxPQUFBQSx5QkNIQXJELEVBQUE0QixFQUFZL0MsRUFBUSw4QkNBcEIsSUFBQXFCLEVBQVVyQixFQUFRLFFBQ2xCc0MsRUFBZ0J0QyxFQUFRLFFBQ3hCZ29FLEVBQW1CaG9FLEVBQVEsT0FBUkEsRUFBMkIsR0FDOUNtUyxFQUFlblMsRUFBUSxPQUFSQSxDQUF1QixZQUV0Q2tCLEVBQUFDLFFBQUEsU0FBQXNTLEVBQUEzTixHQUNBLElBR0FyQixFQUhBeUgsRUFBQTVKLEVBQUFtUixHQUNBbk8sRUFBQSxFQUNBckUsRUFBQSxHQUVBLElBQUF3RCxLQUFBeUgsRUFBQXpILEdBQUEwTixHQUFBOVEsRUFBQTZLLEVBQUF6SCxJQUFBeEQsRUFBQThFLEtBQUF0QixHQUVBLE1BQUFxQixFQUFBTixPQUFBRixFQUFBakUsRUFBQTZLLEVBQUF6SCxFQUFBcUIsRUFBQVIsU0FDQTBpRSxFQUFBL21FLEVBQUF3RCxJQUFBeEQsRUFBQThFLEtBQUF0QixJQUVBLE9BQUF4RCx5QkNkQSxJQUFBTSxFQUFjdkIsRUFBUSxRQUN0Qm1MLEVBQVduTCxFQUFRLFFBQ25Cd1AsRUFBWXhQLEVBQVEsUUFDcEJrQixFQUFBQyxRQUFBLFNBQUFPLEVBQUFtTyxHQUNBLElBQUE1QixHQUFBOUMsRUFBQWpMLFFBQUEsSUFBNkJ3QixJQUFBeEIsT0FBQXdCLEdBQzdCMGEsRUFBQSxHQUNBQSxFQUFBMWEsR0FBQW1PLEVBQUE1QixHQUNBMU0sSUFBQTBGLEVBQUExRixFQUFBbUYsRUFBQThJLEVBQUEsV0FBcUR2QixFQUFBLEtBQVMsU0FBQW1PLCtIQ1AvQyxTQUFBNnJELEVBQUF6cEQsRUFBQS9aLEVBQUE5RCxHQVlmLE9BWEE4RCxLQUFBK1osRUFDSTBwRCxJQUFzQjFwRCxFQUFBL1osRUFBQSxDQUMxQjlELFFBQ0F1RSxZQUFBLEVBQ0FtQixjQUFBLEVBQ0FnUCxVQUFBLElBR0FtSixFQUFBL1osR0FBQTlELEVBR0E2ZCxFQ1RlLFNBQUEycEQsRUFBQXpyRCxHQUNmLFFBQUFwWCxFQUFBLEVBQWlCQSxFQUFBYSxVQUFBWCxPQUFzQkYsSUFBQSxDQUN2QyxJQUFBd1IsRUFBQSxNQUFBM1EsVUFBQWIsR0FBQWEsVUFBQWIsR0FBQSxHQUVBNHNCLEVBQWtCazJDLElBQVl0eEQsR0FFYyxvQkFBN0J1eEQsRUFBQTlqRSxJQUNmMnRCLElBQUE3VSxPQUErQmdyRCxJQUE2QnZ4RCxHQUFBOFAsT0FBQSxTQUFBL2hCLEdBQzVELE9BQWV5akUsSUFBZ0N4eEQsRUFBQWpTLEdBQUFLLGVBSS9DZ3RCLEVBQUF6UyxRQUFBLFNBQUFoYixHQUNNd2pFLEVBQWN2ckQsRUFBQWpZLEVBQUFxUyxFQUFBclMsTUFJcEIsT0FBQWlZLEVBckJBMWMsRUFBQW9wQixFQUFBMjZDLEVBQUEsc0JBQUFvRSx3QkNBQWpuRSxFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLHdCQUFBQSxFQUFBLE9BQUFBLEVBQUEsb0JBQUFBLHVCQ0RBdEQsRUFBQUMsUUFBQSxTQUFBMEwsRUFBQWxNLEdBQ0EsT0FBVUEsUUFBQWtNLGlDQ0FWLElBQUFzSyxFQUFnQm5YLEVBQVEsUUFDeEJrQixFQUFBQyxRQUFBLFNBQUE4TSxFQUFBNUQsRUFBQTdFLEdBRUEsR0FEQTJSLEVBQUFsSixRQUNBeE4sSUFBQTRKLEVBQUEsT0FBQTRELEVBQ0EsT0FBQXpJLEdBQ0EsdUJBQUFqQixHQUNBLE9BQUEwSixFQUFBcE4sS0FBQXdKLEVBQUE5RixJQUVBLHVCQUFBQSxFQUFBZ0csR0FDQSxPQUFBMEQsRUFBQXBOLEtBQUF3SixFQUFBOUYsRUFBQWdHLElBRUEsdUJBQUFoRyxFQUFBZ0csRUFBQWdULEdBQ0EsT0FBQXRQLEVBQUFwTixLQUFBd0osRUFBQTlGLEVBQUFnRyxFQUFBZ1QsSUFHQSxrQkFDQSxPQUFBdFAsRUFBQWxHLE1BQUFzQyxFQUFBbEUsaUNDakJBakYsRUFBQUMsUUFBQSxTQUFBcUQsR0FDQSxzQkFBQUEsRUFBQSxNQUFBMEIsVUFBQTFCLEVBQUEsdUJBQ0EsT0FBQUEseUJDRkEsSUFBQXBDLEVBQWVwQyxFQUFRLFFBQ3ZCNnFCLEVBQXFCN3FCLEVBQVEsUUFDN0J1QyxFQUFrQnZDLEVBQVEsUUFDMUJnRCxFQUFBOUMsT0FBQXFILGVBRUFwRyxFQUFBNEIsRUFBWS9DLEVBQVEsUUFBZ0JFLE9BQUFxSCxlQUFBLFNBQUEyRSxFQUFBOUcsRUFBQTBsQixHQUlwQyxHQUhBMW9CLEVBQUE4SixHQUNBOUcsRUFBQTdDLEVBQUE2QyxHQUFBLEdBQ0FoRCxFQUFBMG9CLEdBQ0FELEVBQUEsSUFDQSxPQUFBN25CLEVBQUFrSixFQUFBOUcsRUFBQTBsQixHQUNHLE1BQUE5cEIsSUFDSCxXQUFBOHBCLEdBQUEsUUFBQUEsRUFBQSxNQUFBNWtCLFVBQUEsNEJBRUEsTUFEQSxVQUFBNGtCLElBQUE1ZSxFQUFBOUcsR0FBQTBsQixFQUFBbnFCLE9BQ0F1TCx5QkNkQSxJQUFBZixFQUFXbkwsRUFBUSxRQUNuQm9CLEVBQWFwQixFQUFRLFFBQ3JCd2IsRUFBQSxxQkFDQXpVLEVBQUEzRixFQUFBb2EsS0FBQXBhLEVBQUFvYSxHQUFBLEtBRUF0YSxFQUFBQyxRQUFBLFNBQUFzRCxFQUFBOUQsR0FDQSxPQUFBb0csRUFBQXRDLEtBQUFzQyxFQUFBdEMsUUFBQWhFLElBQUFFLElBQUEsTUFDQyxlQUFBb0YsS0FBQSxDQUNEMFYsUUFBQXRRLEVBQUFzUSxRQUNBQyxLQUFRMWIsRUFBUSxRQUFZLGdCQUM1QjJiLFVBQUEsK0RDVkEsSUFBQW5hLEVBQWV4QixFQUFRLFFBQ3ZCa0IsRUFBQUMsUUFBQSxTQUFBdWIsRUFBQTlKLEVBQUFaLEdBQ0EsUUFBQXZOLEtBQUFtTyxFQUFBcFIsRUFBQWtiLEVBQUFqWSxFQUFBbU8sRUFBQW5PLEdBQUF1TixHQUNBLE9BQUEwSyx1QkNGQXhiLEVBQUFDLFFBQUEsZ0dBRUF5RixNQUFBLDJCQ0hBMUYsRUFBQUMsUUFBaUJuQixFQUFRLDhCQ0F6QixJQUFBcUMsRUFBZXJDLEVBQVEsUUFDdkJrQixFQUFBQyxRQUFBLFNBQUFxRCxHQUNBLElBQUFuQyxFQUFBbUMsR0FBQSxNQUFBMEIsVUFBQTFCLEVBQUEsc0JBQ0EsT0FBQUEsdUJDRkEsSUFBQXBELEVBQUFGLEVBQUFDLFFBQUEsb0JBQUE4SixlQUFBaEQsV0FDQWdELE9BQUEsb0JBQUFrSSxXQUFBbEwsV0FBQWtMLEtBRUE5RSxTQUFBLGNBQUFBLEdBQ0EsaUJBQUErWSxVQUFBaG1CLHlCQ0xBLElBQUFDLEVBQVVyQixFQUFRLFFBQ2xCc0MsRUFBZ0J0QyxFQUFRLFFBQ3hCZ29FLEVBQW1CaG9FLEVBQVEsT0FBUkEsRUFBMkIsR0FDOUNtUyxFQUFlblMsRUFBUSxPQUFSQSxDQUF1QixZQUV0Q2tCLEVBQUFDLFFBQUEsU0FBQXNTLEVBQUEzTixHQUNBLElBR0FyQixFQUhBeUgsRUFBQTVKLEVBQUFtUixHQUNBbk8sRUFBQSxFQUNBckUsRUFBQSxHQUVBLElBQUF3RCxLQUFBeUgsRUFBQXpILEdBQUEwTixHQUFBOVEsRUFBQTZLLEVBQUF6SCxJQUFBeEQsRUFBQThFLEtBQUF0QixHQUVBLE1BQUFxQixFQUFBTixPQUFBRixFQUFBakUsRUFBQTZLLEVBQUF6SCxFQUFBcUIsRUFBQVIsU0FDQTBpRSxFQUFBL21FLEVBQUF3RCxJQUFBeEQsRUFBQThFLEtBQUF0QixJQUVBLE9BQUF4RCx5QkNkQSxJQUFBbUIsRUFBZXBDLEVBQVEsUUFDdkJtWCxFQUFnQm5YLEVBQVEsUUFDeEIwUCxFQUFjMVAsRUFBUSxPQUFSQSxDQUFnQixXQUM5QmtCLEVBQUFDLFFBQUEsU0FBQStLLEVBQUF4SCxHQUNBLElBQ0F1QyxFQURBd0UsRUFBQXJKLEVBQUE4SixHQUFBb0UsWUFFQSxZQUFBN1AsSUFBQWdMLFFBQUFoTCxJQUFBd0csRUFBQTdFLEVBQUFxSixHQUFBaUUsSUFBQWhMLEVBQUF5UyxFQUFBbFEsMEJDUEEsSUFBQXhGLEVBQVd6QixFQUFRLE9BQVJBLENBQWdCLFFBQzNCcUMsRUFBZXJDLEVBQVEsUUFDdkJxQixFQUFVckIsRUFBUSxRQUNsQnVvRSxFQUFjdm9FLEVBQVEsUUFBYytDLEVBQ3BDaUwsRUFBQSxFQUNBNm5CLEVBQUEzMUIsT0FBQTIxQixjQUFBLFdBQ0EsVUFFQTJ5QyxHQUFjeG9FLEVBQVEsT0FBUkEsQ0FBa0IsV0FDaEMsT0FBQTYxQixFQUFBMzFCLE9BQUF1b0Usa0JBQUEsT0FFQUMsRUFBQSxTQUFBbGtFLEdBQ0ErakUsRUFBQS9qRSxFQUFBL0MsRUFBQSxDQUFxQmQsTUFBQSxDQUNyQjJFLEVBQUEsT0FBQTBJLEVBQ0FxYixFQUFBLE9BR0FzL0MsRUFBQSxTQUFBbmtFLEVBQUE4QyxHQUVBLElBQUFqRixFQUFBbUMsR0FBQSx1QkFBQUEsS0FBQSxpQkFBQUEsRUFBQSxTQUFBQSxFQUNBLElBQUFuRCxFQUFBbUQsRUFBQS9DLEdBQUEsQ0FFQSxJQUFBbzBCLEVBQUFyeEIsR0FBQSxVQUVBLElBQUE4QyxFQUFBLFVBRUFvaEUsRUFBQWxrRSxHQUVHLE9BQUFBLEVBQUEvQyxHQUFBNkQsR0FFSHNqRSxFQUFBLFNBQUFwa0UsRUFBQThDLEdBQ0EsSUFBQWpHLEVBQUFtRCxFQUFBL0MsR0FBQSxDQUVBLElBQUFvMEIsRUFBQXJ4QixHQUFBLFNBRUEsSUFBQThDLEVBQUEsU0FFQW9oRSxFQUFBbGtFLEdBRUcsT0FBQUEsRUFBQS9DLEdBQUE0bkIsR0FHSHcvQyxFQUFBLFNBQUFya0UsR0FFQSxPQURBZ2tFLEdBQUE1SyxFQUFBa0wsTUFBQWp6QyxFQUFBcnhCLEtBQUFuRCxFQUFBbUQsRUFBQS9DLElBQUFpbkUsRUFBQWxrRSxHQUNBQSxHQUVBbzVELEVBQUExOEQsRUFBQUMsUUFBQSxDQUNBTyxJQUFBRCxFQUNBcW5FLE1BQUEsRUFDQUgsVUFDQUMsVUFDQUMsa0NDbkRBN29FLEVBQVEsUUFDUmtCLEVBQUFDLFFBQWlCbkIsRUFBUSxRQUFxQkUsT0FBQXlILHlEQ0E5QyxJQUFBb2hFLEVBQUEsZUFDQUMsRUFBQSxJQUFBaDRELE9BQUErM0QsRUFBQSxNQUNBRSxFQUFBLElBQUFqNEQsT0FBQSxJQUFBKzNELEVBQUEsV0FFQSxTQUFBRyxFQUFBdDRCLEVBQUFocUMsR0FDQSxJQUVBLE9BQUFvYyxtQkFBQTR0QixFQUFBMytCLEtBQUEsS0FDRSxNQUFBMEksSUFJRixPQUFBaTJCLEVBQUFwckMsT0FDQSxPQUFBb3JDLEVBR0FocUMsS0FBQSxFQUdBLElBQUErcEQsRUFBQS9mLEVBQUFobUMsTUFBQSxFQUFBaEUsR0FDQSs1QyxFQUFBL1AsRUFBQWhtQyxNQUFBaEUsR0FFQSxPQUFBZ04sTUFBQXpULFVBQUFrZCxPQUFBeGMsS0FBQSxHQUFBcW9FLEVBQUF2WSxHQUFBdVksRUFBQXZvQixJQUdBLFNBQUE5K0IsRUFBQVUsR0FDQSxJQUNBLE9BQUFTLG1CQUFBVCxHQUNFLE1BQUE1SCxHQUdGLElBRkEsSUFBQTIyQyxFQUFBL3VDLEVBQUExTCxNQUFBbXlELEdBRUExakUsRUFBQSxFQUFpQkEsRUFBQWdzRCxFQUFBOXJELE9BQW1CRixJQUNwQ2lkLEVBQUEybUQsRUFBQTVYLEVBQUFoc0QsR0FBQTJNLEtBQUEsSUFFQXEvQyxFQUFBL3VDLEVBQUExTCxNQUFBbXlELEdBR0EsT0FBQXptRCxHQUlBLFNBQUE0bUQsRUFBQTVtRCxHQUVBLElBQUE2bUQsRUFBQSxDQUNBQyxTQUFBLEtBQ0FDLFNBQUEsTUFHQXp5RCxFQUFBb3lELEVBQUFwNUQsS0FBQTBTLEdBQ0EsTUFBQTFMLEVBQUEsQ0FDQSxJQUVBdXlELEVBQUF2eUQsRUFBQSxJQUFBbU0sbUJBQUFuTSxFQUFBLElBQ0csTUFBQThELEdBQ0gsSUFBQTFaLEVBQUE0Z0IsRUFBQWhMLEVBQUEsSUFFQTVWLElBQUE0VixFQUFBLEtBQ0F1eUQsRUFBQXZ5RCxFQUFBLElBQUE1VixHQUlBNFYsRUFBQW95RCxFQUFBcDVELEtBQUEwUyxHQUlBNm1ELEVBQUEsV0FJQSxJQUZBLElBQUFwL0QsRUFBQTlKLE9BQUFtRixLQUFBK2pFLEdBRUE5akUsRUFBQSxFQUFnQkEsRUFBQTBFLEVBQUF4RSxPQUFvQkYsSUFBQSxDQUVwQyxJQUFBYixFQUFBdUYsRUFBQTFFLEdBQ0FpZCxJQUFBeFMsUUFBQSxJQUFBaUIsT0FBQXZNLEVBQUEsS0FBQTJrRSxFQUFBM2tFLElBR0EsT0FBQThkLEVBR0FyaEIsRUFBQUMsUUFBQSxTQUFBb29FLEdBQ0EscUJBQUFBLEVBQ0EsVUFBQXJqRSxVQUFBLDZEQUFBcWpFLEVBQUEsS0FHQSxJQUlBLE9BSEFBLElBQUF4NUQsUUFBQSxXQUdBaVQsbUJBQUF1bUQsR0FDRSxNQUFBNXVELEdBRUYsT0FBQXd1RCxFQUFBSSx3Q0N6RkFyb0UsRUFBQUMsUUFBQSxFQUFBOFAsRUFBQXU0RCxLQUNBLHFCQUFBdjRELEdBQUEsa0JBQUF1NEQsRUFDQSxVQUFBdGpFLFVBQUEsaURBR0EsUUFBQXNqRSxFQUNBLE9BQUF2NEQsR0FHQSxNQUFBdzRELEVBQUF4NEQsRUFBQXFILFFBQUFreEQsR0FFQSxXQUFBQyxFQUNBLENBQUF4NEQsR0FHQSxDQUNBQSxFQUFBckcsTUFBQSxFQUFBNitELEdBQ0F4NEQsRUFBQXJHLE1BQUE2K0QsRUFBQUQsRUFBQWhrRSxpQ0NuQkF0RSxFQUFBQyxRQUFpQm5CLEVBQVEsNEJDQXpCa0IsRUFBQUMsUUFBQSxTQUFBcUQsRUFBQXVFLEVBQUF4QyxFQUFBbWpFLEdBQ0EsS0FBQWxsRSxhQUFBdUUsU0FBQXRJLElBQUFpcEUsUUFBQWxsRSxFQUNBLE1BQUEwQixVQUFBSyxFQUFBLDJCQUNHLE9BQUEvQix5QkNGSCxJQUFBakQsRUFBY3ZCLEVBQVEsUUFFdEJ1QixJQUFBMEYsRUFBQTFGLEVBQUFtRixFQUFBLFVBQTBDNmYsT0FBU3ZtQixFQUFRLDhCQ0gzRGtCLEVBQUFDLFFBQUEsU0FBQXFELEdBQ0Esd0JBQUFBLEVBQUEsT0FBQUEsRUFBQSxvQkFBQUEseUJDREF0RCxFQUFBQyxRQUFpQm5CLEVBQVEsT0FBUkEsQ0FBbUIsNEJBQUFxTyxTQUFBL04sZ0NDQXBDLElBQUE4TyxFQUFlcFAsRUFBUSxRQUFXb1AsU0FDbENsTyxFQUFBQyxRQUFBaU8sS0FBQXNFLHNDQ0RBMVQsRUFBUSxRQUNSLElBQUFnVixFQUFjaFYsRUFBUSxRQUFxQkUsT0FDM0NnQixFQUFBQyxRQUFBLFNBQUFxRCxFQUFBQyxHQUNBLE9BQUF1USxFQUFBdk4seUJBQUFqRCxFQUFBQywwQkNIQSxJQUFBdVAsRUFBaUJoVSxFQUFRLFFBQ3pCcU0sRUFBbUJyTSxFQUFRLFFBRzNCMnBFLEVBQUEsa0JBbUJBLFNBQUE1a0UsRUFBQXBFLEdBQ0EsdUJBQUFBLEdBQ0EwTCxFQUFBMUwsSUFBQXFULEVBQUFyVCxJQUFBZ3BFLEVBR0F6b0UsRUFBQUMsUUFBQTREIiwiZmlsZSI6ImpzL2NodW5rLXZlbmRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7IiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3InKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yXCIpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIHggPT4gYCUke3guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsInZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmXG4gICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbnZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsXG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIHByZVByb2Nlc3NlZEhlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICBpZiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IHNlbGYuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICB9XG5cbiAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgfSlcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFzZWxmLmZldGNoKSB7XG4gIHNlbGYuZmV0Y2ggPSBmZXRjaFxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG59XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTtcbmNvbnN0IGRlY29kZUNvbXBvbmVudCA9IHJlcXVpcmUoJ2RlY29kZS11cmktY29tcG9uZW50Jyk7XG5jb25zdCBzcGxpdE9uRmlyc3QgPSByZXF1aXJlKCdzcGxpdC1vbi1maXJzdCcpO1xuXG5mdW5jdGlvbiBlbmNvZGVyRm9yQXJyYXlGb3JtYXQob3B0aW9ucykge1xuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4ga2V5ID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gcmVzdWx0Lmxlbmd0aDtcblx0XHRcdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1snLCBpbmRleCwgJ10nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdC4uLnJlc3VsdCxcblx0XHRcdFx0XHRbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbJywgZW5jb2RlKGluZGV4LCBvcHRpb25zKSwgJ109JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJylcblx0XHRcdFx0XTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdJ10uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdjb21tYSc6XG5cdFx0XHRyZXR1cm4ga2V5ID0+IChyZXN1bHQsIHZhbHVlLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRpZiAoIXZhbHVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRcdHJldHVybiBbW2VuY29kZShrZXksIG9wdGlvbnMpLCAnPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbW3Jlc3VsdCwgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignLCcpXTtcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSwgb3B0aW9ucyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJz0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0bGV0IHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdFx0cmV0dXJuIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikgPT4ge1xuXHRcdFx0XHRjb25zdCBpc0FycmF5ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5zcGxpdCgnJykuaW5kZXhPZignLCcpID4gLTE7XG5cdFx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gaXNBcnJheSA/IHZhbHVlLnNwbGl0KCcsJykgOiB2YWx1ZTtcblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IG5ld1ZhbHVlO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdChpbnB1dCkge1xuXHRjb25zdCBxdWVyeVN0YXJ0ID0gaW5wdXQuaW5kZXhPZignPycpO1xuXHRpZiAocXVlcnlTdGFydCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQuc2xpY2UocXVlcnlTdGFydCArIDEpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZGVjb2RlOiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZSdcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHRjb25zdCByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGlucHV0ID0gaW5wdXQudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIWlucHV0KSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZvciAoY29uc3QgcGFyYW0gb2YgaW5wdXQuc3BsaXQoJyYnKSkge1xuXHRcdGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3QocGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJyksICc9Jyk7XG5cblx0XHQvLyBNaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcblx0XHR2YWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlKHZhbHVlLCBvcHRpb25zKTtcblxuXHRcdGZvcm1hdHRlcihkZWNvZGUoa2V5LCBvcHRpb25zKSwgdmFsdWUsIHJldCk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0LmtleXMocmV0KS5zb3J0KCkucmVkdWNlKChyZXN1bHQsIGtleSkgPT4ge1xuXHRcdGNvbnN0IHZhbHVlID0gcmV0W2tleV07XG5cdFx0aWYgKEJvb2xlYW4odmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHQvLyBTb3J0IG9iamVjdCBrZXlzLCBub3QgdmFsdWVzXG5cdFx0XHRyZXN1bHRba2V5XSA9IGtleXNTb3J0ZXIodmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRba2V5XSA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufVxuXG5leHBvcnRzLmV4dHJhY3QgPSBleHRyYWN0O1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuXG5leHBvcnRzLnN0cmluZ2lmeSA9IChvYmplY3QsIG9wdGlvbnMpID0+IHtcblx0aWYgKCFvYmplY3QpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZW5jb2RlOiB0cnVlLFxuXHRcdHN0cmljdDogdHJ1ZSxcblx0XHRhcnJheUZvcm1hdDogJ25vbmUnXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IGZvcm1hdHRlciA9IGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRpb25zKTtcblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cblx0aWYgKG9wdGlvbnMuc29ydCAhPT0gZmFsc2UpIHtcblx0XHRrZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcblx0fVxuXG5cdHJldHVybiBrZXlzLm1hcChrZXkgPT4ge1xuXHRcdGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG5cblx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGVuY29kZShrZXksIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdC5yZWR1Y2UoZm9ybWF0dGVyKGtleSksIFtdKVxuXHRcdFx0XHQuam9pbignJicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRpb25zKSArICc9JyArIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdH0pLmZpbHRlcih4ID0+IHgubGVuZ3RoID4gMCkuam9pbignJicpO1xufTtcblxuZXhwb3J0cy5wYXJzZVVybCA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRjb25zdCBoYXNoU3RhcnQgPSBpbnB1dC5pbmRleE9mKCcjJyk7XG5cdGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR1cmw6IGlucHV0LnNwbGl0KCc/JylbMF0gfHwgJycsXG5cdFx0cXVlcnk6IHBhcnNlKGV4dHJhY3QoaW5wdXQpLCBvcHRpb25zKVxuXHR9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXQgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJGbiA9IGdldChpdCk7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICByZXR1cm4gYW5PYmplY3QoaXRlckZuLmNhbGwoaXQpKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi41JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIjsoZnVuY3Rpb24oKXt2YXIgaztmdW5jdGlvbiBsKGEpe3ZhciBiPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGI8YS5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6YVtiKytdfTp7ZG9uZTohMH19fXZhciBtPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsZSl7YSE9QXJyYXkucHJvdG90eXBlJiZhIT1PYmplY3QucHJvdG90eXBlJiYoYVtiXT1lLnZhbHVlKX0sbj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c9PT10aGlzP3RoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmbnVsbCE9Z2xvYmFsP2dsb2JhbDp0aGlzO2Z1bmN0aW9uIHAoKXtwPWZ1bmN0aW9uKCl7fTtuLlN5bWJvbHx8KG4uU3ltYm9sPXIpfXZhciByPWZ1bmN0aW9uKCl7dmFyIGE9MDtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuXCJqc2NvbXBfc3ltYm9sX1wiKyhifHxcIlwiKSthKyt9fSgpO1xuZnVuY3Rpb24gdSgpe3AoKTt2YXIgYT1uLlN5bWJvbC5pdGVyYXRvcjthfHwoYT1uLlN5bWJvbC5pdGVyYXRvcj1uLlN5bWJvbChcIml0ZXJhdG9yXCIpKTtcImZ1bmN0aW9uXCIhPXR5cGVvZiBBcnJheS5wcm90b3R5cGVbYV0mJm0oQXJyYXkucHJvdG90eXBlLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB2KGwodGhpcykpfX0pO3U9ZnVuY3Rpb24oKXt9fWZ1bmN0aW9uIHYoYSl7dSgpO2E9e25leHQ6YX07YVtuLlN5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307cmV0dXJuIGF9ZnVuY3Rpb24geChhKXt2YXIgYj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmFbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYj9iLmNhbGwoYSk6e25leHQ6bChhKX19dmFyIHk7XG5pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YpeT1PYmplY3Quc2V0UHJvdG90eXBlT2Y7ZWxzZXt2YXIgejthOnt2YXIgQT17czohMH0sQj17fTt0cnl7Qi5fX3Byb3RvX189QTt6PUIuczticmVhayBhfWNhdGNoKGEpe316PSExfXk9ej9mdW5jdGlvbihhLGIpe2EuX19wcm90b19fPWI7aWYoYS5fX3Byb3RvX18hPT1iKXRocm93IG5ldyBUeXBlRXJyb3IoYStcIiBpcyBub3QgZXh0ZW5zaWJsZVwiKTtyZXR1cm4gYX06bnVsbH12YXIgQz15O2Z1bmN0aW9uIEQoKXt0aGlzLmg9ITE7dGhpcy5jPW51bGw7dGhpcy5vPXZvaWQgMDt0aGlzLmI9MTt0aGlzLm09dGhpcy51PTA7dGhpcy5nPW51bGx9ZnVuY3Rpb24gRShhKXtpZihhLmgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7YS5oPSEwfUQucHJvdG90eXBlLmk9ZnVuY3Rpb24oYSl7dGhpcy5vPWF9O1xuRC5wcm90b3R5cGUuaj1mdW5jdGlvbihhKXt0aGlzLmc9e3Y6YSx3OiEwfTt0aGlzLmI9dGhpcy51fHx0aGlzLm19O0QucHJvdG90eXBlW1wicmV0dXJuXCJdPWZ1bmN0aW9uKGEpe3RoaXMuZz17XCJyZXR1cm5cIjphfTt0aGlzLmI9dGhpcy5tfTtmdW5jdGlvbiBGKGEsYixlKXthLmI9ZTtyZXR1cm57dmFsdWU6Yn19ZnVuY3Rpb24gRyhhKXt0aGlzLkE9YTt0aGlzLmw9W107Zm9yKHZhciBiIGluIGEpdGhpcy5sLnB1c2goYik7dGhpcy5sLnJldmVyc2UoKX1mdW5jdGlvbiBIKGEpe3RoaXMuYT1uZXcgRDt0aGlzLkI9YX1ILnByb3RvdHlwZS5pPWZ1bmN0aW9uKGEpe0UodGhpcy5hKTtpZih0aGlzLmEuYylyZXR1cm4gSSh0aGlzLHRoaXMuYS5jLm5leHQsYSx0aGlzLmEuaSk7dGhpcy5hLmkoYSk7cmV0dXJuIEoodGhpcyl9O1xuZnVuY3Rpb24gSyhhLGIpe0UoYS5hKTt2YXIgZT1hLmEuYztpZihlKXJldHVybiBJKGEsXCJyZXR1cm5cImluIGU/ZVtcInJldHVyblwiXTpmdW5jdGlvbihhKXtyZXR1cm57dmFsdWU6YSxkb25lOiEwfX0sYixhLmFbXCJyZXR1cm5cIl0pO2EuYVtcInJldHVyblwiXShiKTtyZXR1cm4gSihhKX1ILnByb3RvdHlwZS5qPWZ1bmN0aW9uKGEpe0UodGhpcy5hKTtpZih0aGlzLmEuYylyZXR1cm4gSSh0aGlzLHRoaXMuYS5jW1widGhyb3dcIl0sYSx0aGlzLmEuaSk7dGhpcy5hLmooYSk7cmV0dXJuIEoodGhpcyl9O1xuZnVuY3Rpb24gSShhLGIsZSxjKXt0cnl7dmFyIGQ9Yi5jYWxsKGEuYS5jLGUpO2lmKCEoZCBpbnN0YW5jZW9mIE9iamVjdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkl0ZXJhdG9yIHJlc3VsdCBcIitkK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7aWYoIWQuZG9uZSlyZXR1cm4gYS5hLmg9ITEsZDt2YXIgZj1kLnZhbHVlfWNhdGNoKGcpe3JldHVybiBhLmEuYz1udWxsLGEuYS5qKGcpLEooYSl9YS5hLmM9bnVsbDtjLmNhbGwoYS5hLGYpO3JldHVybiBKKGEpfWZ1bmN0aW9uIEooYSl7Zm9yKDthLmEuYjspdHJ5e3ZhciBiPWEuQihhLmEpO2lmKGIpcmV0dXJuIGEuYS5oPSExLHt2YWx1ZTpiLnZhbHVlLGRvbmU6ITF9fWNhdGNoKGUpe2EuYS5vPXZvaWQgMCxhLmEuaihlKX1hLmEuaD0hMTtpZihhLmEuZyl7Yj1hLmEuZzthLmEuZz1udWxsO2lmKGIudyl0aHJvdyBiLnY7cmV0dXJue3ZhbHVlOmJbXCJyZXR1cm5cIl0sZG9uZTohMH19cmV0dXJue3ZhbHVlOnZvaWQgMCxkb25lOiEwfX1cbmZ1bmN0aW9uIEwoYSl7dGhpcy5uZXh0PWZ1bmN0aW9uKGIpe3JldHVybiBhLmkoYil9O3RoaXNbXCJ0aHJvd1wiXT1mdW5jdGlvbihiKXtyZXR1cm4gYS5qKGIpfTt0aGlzW1wicmV0dXJuXCJdPWZ1bmN0aW9uKGIpe3JldHVybiBLKGEsYil9O3UoKTt0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319ZnVuY3Rpb24gTShhLGIpe3ZhciBlPW5ldyBMKG5ldyBIKGIpKTtDJiZDKGUsYS5wcm90b3R5cGUpO3JldHVybiBlfVxuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEJsb2ImJihcInVuZGVmaW5lZFwiPT09dHlwZW9mIEZvcm1EYXRhfHwhRm9ybURhdGEucHJvdG90eXBlLmtleXMpKXt2YXIgTj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgZT0wO2U8YS5sZW5ndGg7ZSsrKWIoYVtlXSl9LE89ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBiIGluc3RhbmNlb2YgQmxvYj9bU3RyaW5nKGEpLGIsdm9pZCAwIT09ZT9lK1wiXCI6XCJzdHJpbmdcIj09PXR5cGVvZiBiLm5hbWU/Yi5uYW1lOlwiYmxvYlwiXTpbU3RyaW5nKGEpLFN0cmluZyhiKV19LFA9ZnVuY3Rpb24oYSxiKXtpZihhLmxlbmd0aDxiKXRocm93IG5ldyBUeXBlRXJyb3IoYitcIiBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgXCIrYS5sZW5ndGgrXCIgcHJlc2VudC5cIik7fSxRPWZ1bmN0aW9uKGEpe3ZhciBiPXgoYSk7YT1iLm5leHQoKS52YWx1ZTtiPWIubmV4dCgpLnZhbHVlO2EgaW5zdGFuY2VvZiBCbG9iJiYoYT1uZXcgRmlsZShbYV0sYix7dHlwZTphLnR5cGUsbGFzdE1vZGlmaWVkOmEubGFzdE1vZGlmaWVkfSkpO1xucmV0dXJuIGF9LFI9XCJvYmplY3RcIj09PXR5cGVvZiB3aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsUz1SLkZvcm1EYXRhLFQ9Ui5YTUxIdHRwUmVxdWVzdCYmUi5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZCxVPVIuUmVxdWVzdCYmUi5mZXRjaCxWPVIubmF2aWdhdG9yJiZSLm5hdmlnYXRvci5zZW5kQmVhY29uO3AoKTt2YXIgVz1SLlN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnO1cmJihCbG9iLnByb3RvdHlwZVtXXXx8KEJsb2IucHJvdG90eXBlW1ddPVwiQmxvYlwiKSxcIkZpbGVcImluIFImJiFGaWxlLnByb3RvdHlwZVtXXSYmKEZpbGUucHJvdG90eXBlW1ddPVwiRmlsZVwiKSk7dHJ5e25ldyBGaWxlKFtdLFwiXCIpfWNhdGNoKGEpe1IuRmlsZT1mdW5jdGlvbihiLGUsYyl7Yj1uZXcgQmxvYihiLGMpO2M9YyYmdm9pZCAwIT09Yy5sYXN0TW9kaWZpZWQ/bmV3IERhdGUoYy5sYXN0TW9kaWZpZWQpOm5ldyBEYXRlO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGIsXG57bmFtZTp7dmFsdWU6ZX0sbGFzdE1vZGlmaWVkRGF0ZTp7dmFsdWU6Y30sbGFzdE1vZGlmaWVkOnt2YWx1ZTorY30sdG9TdHJpbmc6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEZpbGVdXCJ9fX0pO1cmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLFcse3ZhbHVlOlwiRmlsZVwifSk7cmV0dXJuIGJ9fXAoKTt1KCk7dmFyIFg9ZnVuY3Rpb24oYSl7dGhpcy5mPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoIWEpcmV0dXJuIHRoaXM7dmFyIGI9dGhpcztOKGEuZWxlbWVudHMsZnVuY3Rpb24oYSl7aWYoYS5uYW1lJiYhYS5kaXNhYmxlZCYmXCJzdWJtaXRcIiE9PWEudHlwZSYmXCJidXR0b25cIiE9PWEudHlwZSlpZihcImZpbGVcIj09PWEudHlwZSl7dmFyIGM9YS5maWxlcyYmYS5maWxlcy5sZW5ndGg/YS5maWxlczpbbmV3IEZpbGUoW10sXCJcIix7dHlwZTpcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifSldO04oYyxmdW5jdGlvbihjKXtiLmFwcGVuZChhLm5hbWUsYyl9KX1lbHNlXCJzZWxlY3QtbXVsdGlwbGVcIj09PVxuYS50eXBlfHxcInNlbGVjdC1vbmVcIj09PWEudHlwZT9OKGEub3B0aW9ucyxmdW5jdGlvbihjKXshYy5kaXNhYmxlZCYmYy5zZWxlY3RlZCYmYi5hcHBlbmQoYS5uYW1lLGMudmFsdWUpfSk6XCJjaGVja2JveFwiPT09YS50eXBlfHxcInJhZGlvXCI9PT1hLnR5cGU/YS5jaGVja2VkJiZiLmFwcGVuZChhLm5hbWUsYS52YWx1ZSk6KGM9XCJ0ZXh0YXJlYVwiPT09YS50eXBlP2EudmFsdWUucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIikucmVwbGFjZSgvXFxuL2csXCJcXHJcXG5cIik6YS52YWx1ZSxiLmFwcGVuZChhLm5hbWUsYykpfSl9O2s9WC5wcm90b3R5cGU7ay5hcHBlbmQ9ZnVuY3Rpb24oYSxiLGUpe1AoYXJndW1lbnRzLDIpO3ZhciBjPXgoTy5hcHBseShudWxsLGFyZ3VtZW50cykpO2E9Yy5uZXh0KCkudmFsdWU7Yj1jLm5leHQoKS52YWx1ZTtlPWMubmV4dCgpLnZhbHVlO2M9dGhpcy5mO2NbYV18fChjW2FdPVtdKTtjW2FdLnB1c2goW2IsZV0pfTtrW1wiZGVsZXRlXCJdPWZ1bmN0aW9uKGEpe1AoYXJndW1lbnRzLFxuMSk7ZGVsZXRlIHRoaXMuZltTdHJpbmcoYSldfTtrLmVudHJpZXM9ZnVuY3Rpb24gYigpe3ZhciBlPXRoaXMsYyxkLGYsZyxoLHE7cmV0dXJuIE0oYixmdW5jdGlvbihiKXtzd2l0Y2goYi5iKXtjYXNlIDE6Yz1lLmYsZj1uZXcgRyhjKTtjYXNlIDI6dmFyIHQ7YTp7Zm9yKHQ9ZjswPHQubC5sZW5ndGg7KXt2YXIgdz10LmwucG9wKCk7aWYodyBpbiB0LkEpe3Q9dzticmVhayBhfX10PW51bGx9aWYobnVsbD09KGQ9dCkpe2IuYj0wO2JyZWFrfWc9eChjW2RdKTtoPWcubmV4dCgpO2Nhc2UgNTppZihoLmRvbmUpe2IuYj0yO2JyZWFrfXE9aC52YWx1ZTtyZXR1cm4gRihiLFtkLFEocSldLDYpO2Nhc2UgNjpoPWcubmV4dCgpLGIuYj01fX0pfTtrLmZvckVhY2g9ZnVuY3Rpb24oYixlKXtQKGFyZ3VtZW50cywxKTtmb3IodmFyIGM9eCh0aGlzKSxkPWMubmV4dCgpOyFkLmRvbmU7ZD1jLm5leHQoKSl7dmFyIGY9eChkLnZhbHVlKTtkPWYubmV4dCgpLnZhbHVlO2Y9Zi5uZXh0KCkudmFsdWU7XG5iLmNhbGwoZSxmLGQsdGhpcyl9fTtrLmdldD1mdW5jdGlvbihiKXtQKGFyZ3VtZW50cywxKTt2YXIgZT10aGlzLmY7Yj1TdHJpbmcoYik7cmV0dXJuIGVbYl0/UShlW2JdWzBdKTpudWxsfTtrLmdldEFsbD1mdW5jdGlvbihiKXtQKGFyZ3VtZW50cywxKTtyZXR1cm4odGhpcy5mW1N0cmluZyhiKV18fFtdKS5tYXAoUSl9O2suaGFzPWZ1bmN0aW9uKGIpe1AoYXJndW1lbnRzLDEpO3JldHVybiBTdHJpbmcoYilpbiB0aGlzLmZ9O2sua2V5cz1mdW5jdGlvbiBlKCl7dmFyIGM9dGhpcyxkLGYsZyxoLHE7cmV0dXJuIE0oZSxmdW5jdGlvbihlKXsxPT1lLmImJihkPXgoYyksZj1kLm5leHQoKSk7aWYoMyE9ZS5iKXtpZihmLmRvbmUpe2UuYj0wO3JldHVybn1nPWYudmFsdWU7aD14KGcpO3E9aC5uZXh0KCkudmFsdWU7cmV0dXJuIEYoZSxxLDMpfWY9ZC5uZXh0KCk7ZS5iPTJ9KX07ay5zZXQ9ZnVuY3Rpb24oZSxjLGQpe1AoYXJndW1lbnRzLDIpO3ZhciBmPU8uYXBwbHkobnVsbCxhcmd1bWVudHMpO1xudGhpcy5mW2ZbMF1dPVtbZlsxXSxmWzJdXV19O2sudmFsdWVzPWZ1bmN0aW9uIGMoKXt2YXIgZD10aGlzLGYsZyxoLHEsdztyZXR1cm4gTShjLGZ1bmN0aW9uKGMpezE9PWMuYiYmKGY9eChkKSxnPWYubmV4dCgpKTtpZigzIT1jLmIpe2lmKGcuZG9uZSl7Yy5iPTA7cmV0dXJufWg9Zy52YWx1ZTtxPXgoaCk7cS5uZXh0KCk7dz1xLm5leHQoKS52YWx1ZTtyZXR1cm4gRihjLHcsMyl9Zz1mLm5leHQoKTtjLmI9Mn0pfTtYLnByb3RvdHlwZS5fYXNOYXRpdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGM9bmV3IFMsZD14KHRoaXMpLGY9ZC5uZXh0KCk7IWYuZG9uZTtmPWQubmV4dCgpKXt2YXIgZz14KGYudmFsdWUpO2Y9Zy5uZXh0KCkudmFsdWU7Zz1nLm5leHQoKS52YWx1ZTtjLmFwcGVuZChmLGcpfXJldHVybiBjfTtYLnByb3RvdHlwZS5fYmxvYj1mdW5jdGlvbigpe2Zvcih2YXIgYz1cIi0tLS1mb3JtZGF0YS1wb2x5ZmlsbC1cIitNYXRoLnJhbmRvbSgpLGQ9W10sZj14KHRoaXMpLGc9Zi5uZXh0KCk7IWcuZG9uZTtnPVxuZi5uZXh0KCkpe3ZhciBoPXgoZy52YWx1ZSk7Zz1oLm5leHQoKS52YWx1ZTtoPWgubmV4dCgpLnZhbHVlO2QucHVzaChcIi0tXCIrYytcIlxcclxcblwiKTtoIGluc3RhbmNlb2YgQmxvYj9kLnB1c2goJ0NvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cIicrZysnXCI7IGZpbGVuYW1lPVwiJytoLm5hbWUrJ1wiXFxyXFxuJyxcIkNvbnRlbnQtVHlwZTogXCIrKGgudHlwZXx8XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIikrXCJcXHJcXG5cXHJcXG5cIixoLFwiXFxyXFxuXCIpOmQucHVzaCgnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiJytnKydcIlxcclxcblxcclxcbicraCtcIlxcclxcblwiKX1kLnB1c2goXCItLVwiK2MrXCItLVwiKTtyZXR1cm4gbmV3IEJsb2IoZCx7dHlwZTpcIm11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PVwiK2N9KX07WC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX07WC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgRm9ybURhdGFdXCJ9O1xuVyYmKFgucHJvdG90eXBlW1ddPVwiRm9ybURhdGFcIik7VCYmKFIuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oYyl7YyBpbnN0YW5jZW9mIFg/KGM9Yy5fYmxvYigpLHRoaXMuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLGMudHlwZSksVC5jYWxsKHRoaXMsYykpOlQuY2FsbCh0aGlzLGMpfSk7aWYoVSl7dmFyIFk9Ui5mZXRjaDtSLmZldGNoPWZ1bmN0aW9uKGMsZCl7ZCYmZC5ib2R5JiZkLmJvZHkgaW5zdGFuY2VvZiBYJiYoZC5ib2R5PWQuYm9keS5fYmxvYigpKTtyZXR1cm4gWS5jYWxsKHRoaXMsYyxkKX19ViYmKFIubmF2aWdhdG9yLnNlbmRCZWFjb249ZnVuY3Rpb24oYyxkKXtkIGluc3RhbmNlb2YgWCYmKGQ9ZC5fYXNOYXRpdmUoKSk7cmV0dXJuIFYuY2FsbCh0aGlzLGMsZCl9KTtSLkZvcm1EYXRhPVh9O1xufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpOyIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMFxuICogKGMpIDIwMTQtMjAxOSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmcgc3RhdGljIGtleXMgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWljYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVlcyBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9O1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlU2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaFxuICAgICkge1xuICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxudmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbmZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7XG4gIHZhciBpblNpbmdsZSA9IGZhbHNlO1xuICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgdmFyIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcbiAgdmFyIGluUmVnZXggPSBmYWxzZTtcbiAgdmFyIGN1cmx5ID0gMDtcbiAgdmFyIHNxdWFyZSA9IDA7XG4gIHZhciBwYXJlbiA9IDA7XG4gIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICB2YXIgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVycztcblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJldiA9IGM7XG4gICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChpblNpbmdsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgeyBpbkRvdWJsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICBpZiAoYyA9PT0gMHg2MCAmJiBwcmV2ICE9PSAweDVDKSB7IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5SZWdleCkge1xuICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYyA9PT0gMHg3QyAmJiAvLyBwaXBlXG4gICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3QyAmJlxuICAgICAgIWN1cmx5ICYmICFzcXVhcmUgJiYgIXBhcmVuXG4gICAgKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGZpcnN0IGZpbHRlciwgZW5kIG9mIGV4cHJlc3Npb25cbiAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAweDIyOiBpbkRvdWJsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gXCJcbiAgICAgICAgY2FzZSAweDI3OiBpblNpbmdsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gJ1xuICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgIGNhc2UgMHgyODogcGFyZW4rKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIChcbiAgICAgICAgY2FzZSAweDI5OiBwYXJlbi0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKVxuICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgIGNhc2UgMHg1RDogc3F1YXJlLS07IGJyZWFrICAgICAgICAgICAgICAgIC8vIF1cbiAgICAgICAgY2FzZSAweDdCOiBjdXJseSsrOyBicmVhayAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gMHgyZikgeyAvLyAvXG4gICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgIHZhciBwID0gKHZvaWQgMCk7XG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgcHJldiBjaGFyXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuICAgICAgICAgIGlmIChwICE9PSAnICcpIHsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcCB8fCAhdmFsaWREaXZpc2lvbkNoYXJSRS50ZXN0KHApKSB7XG4gICAgICAgICAgaW5SZWdleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgcHVzaEZpbHRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgKGZpbHRlcnMgfHwgKGZpbHRlcnMgPSBbXSkpLnB1c2goZXhwLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpKTtcbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHByZXNzaW9uXG59XG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyAoYXJncyAhPT0gJyknID8gJywnICsgYXJncyA6IGFyZ3MpKVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmZ1bmN0aW9uIGJhc2VXYXJuIChtc2csIHJhbmdlKSB7XG4gIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSBjb21waWxlcl06IFwiICsgbXNnKSk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbmZ1bmN0aW9uIHBsdWNrTW9kdWxlRnVuY3Rpb24gKFxuICBtb2R1bGVzLFxuICBrZXlcbikge1xuICByZXR1cm4gbW9kdWxlc1xuICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICAoZWwucHJvcHMgfHwgKGVsLnByb3BzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlLCBkeW5hbWljKSB7XG4gIHZhciBhdHRycyA9IGR5bmFtaWNcbiAgICA/IChlbC5keW5hbWljQXR0cnMgfHwgKGVsLmR5bmFtaWNBdHRycyA9IFtdKSlcbiAgICA6IChlbC5hdHRycyB8fCAoZWwuYXR0cnMgPSBbXSkpO1xuICBhdHRycy5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG4vLyBhZGQgYSByYXcgYXR0ciAodXNlIHRoaXMgaW4gcHJlVHJhbnNmb3JtcylcbmZ1bmN0aW9uIGFkZFJhd0F0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgZWwuYXR0cnNNYXBbbmFtZV0gPSB2YWx1ZTtcbiAgZWwuYXR0cnNMaXN0LnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0sIHJhbmdlKSk7XG59XG5cbmZ1bmN0aW9uIGFkZERpcmVjdGl2ZSAoXG4gIGVsLFxuICBuYW1lLFxuICByYXdOYW1lLFxuICB2YWx1ZSxcbiAgYXJnLFxuICBpc0R5bmFtaWNBcmcsXG4gIG1vZGlmaWVycyxcbiAgcmFuZ2Vcbikge1xuICAoZWwuZGlyZWN0aXZlcyB8fCAoZWwuZGlyZWN0aXZlcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oe1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3TmFtZTogcmF3TmFtZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgYXJnOiBhcmcsXG4gICAgaXNEeW5hbWljQXJnOiBpc0R5bmFtaWNBcmcsXG4gICAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbiAgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyTWFya2VyIChzeW1ib2wsIG5hbWUsIGR5bmFtaWMpIHtcbiAgcmV0dXJuIGR5bmFtaWNcbiAgICA/IChcIl9wKFwiICsgbmFtZSArIFwiLFxcXCJcIiArIHN5bWJvbCArIFwiXFxcIilcIilcbiAgICA6IHN5bWJvbCArIG5hbWUgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlciAoXG4gIGVsLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzLFxuICBpbXBvcnRhbnQsXG4gIHdhcm4sXG4gIHJhbmdlLFxuICBkeW5hbWljXG4pIHtcbiAgbW9kaWZpZXJzID0gbW9kaWZpZXJzIHx8IGVtcHR5T2JqZWN0O1xuICAvLyB3YXJuIHByZXZlbnQgYW5kIHBhc3NpdmUgbW9kaWZpZXJcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4gJiZcbiAgICBtb2RpZmllcnMucHJldmVudCAmJiBtb2RpZmllcnMucGFzc2l2ZVxuICApIHtcbiAgICB3YXJuKFxuICAgICAgJ3Bhc3NpdmUgYW5kIHByZXZlbnQgY2FuXFwndCBiZSB1c2VkIHRvZ2V0aGVyLiAnICtcbiAgICAgICdQYXNzaXZlIGhhbmRsZXIgY2FuXFwndCBwcmV2ZW50IGRlZmF1bHQgZXZlbnQuJyxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuXG4gIC8vIG5vcm1hbGl6ZSBjbGljay5yaWdodCBhbmQgY2xpY2subWlkZGxlIHNpbmNlIHRoZXkgZG9uJ3QgYWN0dWFsbHkgZmlyZVxuICAvLyB0aGlzIGlzIHRlY2huaWNhbGx5IGJyb3dzZXItc3BlY2lmaWMsIGJ1dCBhdCBsZWFzdCBmb3Igbm93IGJyb3dzZXJzIGFyZVxuICAvLyB0aGUgb25seSB0YXJnZXQgZW52cyB0aGF0IGhhdmUgcmlnaHQvbWlkZGxlIGNsaWNrcy5cbiAgaWYgKG1vZGlmaWVycy5yaWdodCkge1xuICAgIGlmIChkeW5hbWljKSB7XG4gICAgICBuYW1lID0gXCIoXCIgKyBuYW1lICsgXCIpPT09J2NsaWNrJz8nY29udGV4dG1lbnUnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnY29udGV4dG1lbnUnO1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSBpZiAobW9kaWZpZXJzLm1pZGRsZSkge1xuICAgIGlmIChkeW5hbWljKSB7XG4gICAgICBuYW1lID0gXCIoXCIgKyBuYW1lICsgXCIpPT09J2NsaWNrJz8nbW91c2V1cCc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgbmFtZSA9ICdtb3VzZXVwJztcbiAgICB9XG4gIH1cblxuICAvLyBjaGVjayBjYXB0dXJlIG1vZGlmaWVyXG4gIGlmIChtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMuY2FwdHVyZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCchJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5vbmNlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5vbmNlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJ34nLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKG1vZGlmaWVycy5wYXNzaXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5wYXNzaXZlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyYnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuXG4gIHZhciBldmVudHM7XG4gIGlmIChtb2RpZmllcnMubmF0aXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgZXZlbnRzID0gZWwubmF0aXZlRXZlbnRzIHx8IChlbC5uYXRpdmVFdmVudHMgPSB7fSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gIH1cblxuICB2YXIgbmV3SGFuZGxlciA9IHJhbmdlU2V0SXRlbSh7IHZhbHVlOiB2YWx1ZS50cmltKCksIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpO1xuICBpZiAobW9kaWZpZXJzICE9PSBlbXB0eU9iamVjdCkge1xuICAgIG5ld0hhbmRsZXIubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuICB9XG5cbiAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG5cbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmF3QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHJldHVybiBlbC5yYXdBdHRyc01hcFsnOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwWyd2LWJpbmQ6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbbmFtZV1cbn1cblxuZnVuY3Rpb24gZ2V0QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgZ2V0U3RhdGljXG4pIHtcbiAgdmFyIGR5bmFtaWNWYWx1ZSA9XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJzonICsgbmFtZSkgfHxcbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1iaW5kOicgKyBuYW1lKTtcbiAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmlsdGVycyhkeW5hbWljVmFsdWUpXG4gIH0gZWxzZSBpZiAoZ2V0U3RhdGljICE9PSBmYWxzZSkge1xuICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpO1xuICAgIGlmIChzdGF0aWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhdGljVmFsdWUpXG4gICAgfVxuICB9XG59XG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmVtb3ZlRnJvbU1hcFxuKSB7XG4gIHZhciB2YWw7XG4gIGlmICgodmFsID0gZWwuYXR0cnNNYXBbbmFtZV0pICE9IG51bGwpIHtcbiAgICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAobGlzdFtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVtb3ZlRnJvbU1hcCkge1xuICAgIGRlbGV0ZSBlbC5hdHRyc01hcFtuYW1lXTtcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IChcbiAgZWwsXG4gIG5hbWVcbikge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBhdHRyID0gbGlzdFtpXTtcbiAgICBpZiAobmFtZS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgcmV0dXJuIGF0dHJcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmFuZ2VTZXRJdGVtIChcbiAgaXRlbSxcbiAgcmFuZ2Vcbikge1xuICBpZiAocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgaXRlbS5zdGFydCA9IHJhbmdlLnN0YXJ0O1xuICAgIH1cbiAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uZW5kID0gcmFuZ2UuZW5kO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXRlbVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlIGdlbmVyYXRpb24gZm9yIGNvbXBvbmVudCB2LW1vZGVsXG4gKi9cbmZ1bmN0aW9uIGdlbkNvbXBvbmVudE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcblxuICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnO1xuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gYmFzZVZhbHVlRXhwcmVzc2lvbjtcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPVxuICAgICAgXCIodHlwZW9mIFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiID09PSAnc3RyaW5nJ1wiICtcbiAgICAgIFwiPyBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIi50cmltKClcIiArXG4gICAgICBcIjogXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICB2YXIgYXNzaWdubWVudCA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuXG4gIGVsLm1vZGVsID0ge1xuICAgIHZhbHVlOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSxcbiAgICBleHByZXNzaW9uOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG4gICAgY2FsbGJhY2s6IChcImZ1bmN0aW9uIChcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIikge1wiICsgYXNzaWdubWVudCArIFwifVwiKVxuICB9O1xufVxuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGVnZW4gaGVscGVyIGZvciBnZW5lcmF0aW5nIHYtbW9kZWwgdmFsdWUgYXNzaWdubWVudCBjb2RlLlxuICovXG5mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAoXG4gIHZhbHVlLFxuICBhc3NpZ25tZW50XG4pIHtcbiAgdmFyIHJlcyA9IHBhcnNlTW9kZWwodmFsdWUpO1xuICBpZiAocmVzLmtleSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAodmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIiRzZXQoXCIgKyAocmVzLmV4cCkgKyBcIiwgXCIgKyAocmVzLmtleSkgKyBcIiwgXCIgKyBhc3NpZ25tZW50ICsgXCIpXCIpXG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhIHYtbW9kZWwgZXhwcmVzc2lvbiBpbnRvIGEgYmFzZSBwYXRoIGFuZCBhIGZpbmFsIGtleSBzZWdtZW50LlxuICogSGFuZGxlcyBib3RoIGRvdC1wYXRoIGFuZCBwb3NzaWJsZSBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogUG9zc2libGUgY2FzZXM6XG4gKlxuICogLSB0ZXN0XG4gKiAtIHRlc3Rba2V5XVxuICogLSB0ZXN0W3Rlc3QxW2tleV1dXG4gKiAtIHRlc3RbXCJhXCJdW2tleV1cbiAqIC0geHh4LnRlc3RbYVthXS50ZXN0MVtrZXldXVxuICogLSB0ZXN0Lnh4eC5hW1wiYXNhXCJdW3Rlc3QxW2tleV1dXG4gKlxuICovXG5cbnZhciBsZW4sIHN0ciwgY2hyLCBpbmRleCQxLCBleHByZXNzaW9uUG9zLCBleHByZXNzaW9uRW5kUG9zO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VNb2RlbCAodmFsKSB7XG4gIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL3B1bGwvNzczMFxuICAvLyBhbGxvdyB2LW1vZGVsPVwib2JqLnZhbCBcIiAodHJhaWxpbmcgd2hpdGVzcGFjZSlcbiAgdmFsID0gdmFsLnRyaW0oKTtcbiAgbGVuID0gdmFsLmxlbmd0aDtcblxuICBpZiAodmFsLmluZGV4T2YoJ1snKSA8IDAgfHwgdmFsLmxhc3RJbmRleE9mKCddJykgPCBsZW4gLSAxKSB7XG4gICAgaW5kZXgkMSA9IHZhbC5sYXN0SW5kZXhPZignLicpO1xuICAgIGlmIChpbmRleCQxID4gLTEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLnNsaWNlKDAsIGluZGV4JDEpLFxuICAgICAgICBrZXk6ICdcIicgKyB2YWwuc2xpY2UoaW5kZXgkMSArIDEpICsgJ1wiJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbCxcbiAgICAgICAga2V5OiBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RyID0gdmFsO1xuICBpbmRleCQxID0gZXhwcmVzc2lvblBvcyA9IGV4cHJlc3Npb25FbmRQb3MgPSAwO1xuXG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gMHg1Qikge1xuICAgICAgcGFyc2VCcmFja2V0KGNocik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHA6IHZhbC5zbGljZSgwLCBleHByZXNzaW9uUG9zKSxcbiAgICBrZXk6IHZhbC5zbGljZShleHByZXNzaW9uUG9zICsgMSwgZXhwcmVzc2lvbkVuZFBvcylcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0ICgpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgkMSlcbn1cblxuZnVuY3Rpb24gZW9mICgpIHtcbiAgcmV0dXJuIGluZGV4JDEgPj0gbGVuXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nU3RhcnQgKGNocikge1xuICByZXR1cm4gY2hyID09PSAweDIyIHx8IGNociA9PT0gMHgyN1xufVxuXG5mdW5jdGlvbiBwYXJzZUJyYWNrZXQgKGNocikge1xuICB2YXIgaW5CcmFja2V0ID0gMTtcbiAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjaHIgPT09IDB4NUIpIHsgaW5CcmFja2V0Kys7IH1cbiAgICBpZiAoY2hyID09PSAweDVEKSB7IGluQnJhY2tldC0tOyB9XG4gICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgZXhwcmVzc2lvbkVuZFBvcyA9IGluZGV4JDE7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gIHZhciBzdHJpbmdRdW90ZSA9IGNocjtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoY2hyID09PSBzdHJpbmdRdW90ZSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB3YXJuJDE7XG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG5mdW5jdGlvbiBtb2RlbCAoXG4gIGVsLFxuICBkaXIsXG4gIF93YXJuXG4pIHtcbiAgd2FybiQxID0gX3dhcm47XG4gIHZhciB2YWx1ZSA9IGRpci52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7XG4gIHZhciB0YWcgPSBlbC50YWc7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAgIC8vIHZhbHVlIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnZmlsZScpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgdHlwZT1cXFwiZmlsZVxcXCI+OlxcblwiICtcbiAgICAgICAgXCJGaWxlIGlucHV0cyBhcmUgcmVhZCBvbmx5LiBVc2UgYSB2LW9uOmNoYW5nZSBsaXN0ZW5lciBpbnN0ZWFkLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICBnZW5Db21wb25lbnRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgZ2VuU2VsZWN0KGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgIGdlbkNoZWNrYm94TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAncmFkaW8nKSB7XG4gICAgZ2VuUmFkaW9Nb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnIHx8IHRhZyA9PT0gJ3RleHRhcmVhJykge1xuICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAoIWNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICBnZW5Db21wb25lbnRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGVsZW1lbnQgdHlwZS4gXCIgK1xuICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgJ3dyYXAgYSBsaWJyYXJ5IGRlZGljYXRlZCBmb3IgdGhhdCBwdXJwb3NlIGluc2lkZSBhIGN1c3RvbSBjb21wb25lbnQuJyxcbiAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICApO1xuICB9XG5cbiAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhciB0cnVlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0cnVlLXZhbHVlJykgfHwgJ3RydWUnO1xuICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIFwiQXJyYXkuaXNBcnJheShcIiArIHZhbHVlICsgXCIpXCIgK1xuICAgIFwiP19pKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKT4tMVwiICsgKFxuICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnXG4gICAgICAgID8gKFwiOihcIiArIHZhbHVlICsgXCIpXCIpXG4gICAgICAgIDogKFwiOl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIilcIilcbiAgICApXG4gICk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLFxuICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBcIiQkYz0kJGVsLmNoZWNrZWQ/KFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKTooXCIgKyBmYWxzZVZhbHVlQmluZGluZyArIFwiKTtcIiArXG4gICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICBcInZhciAkJHY9XCIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgXCIsXCIgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBcImlmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5jb25jYXQoWyQkdl0pJykpICsgXCIpfVwiICtcbiAgICAgIFwiZWxzZXskJGk+LTEmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpJykpICsgXCIpfVwiICtcbiAgICBcIn1lbHNle1wiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRjJykpICsgXCJ9XCIsXG4gICAgbnVsbCwgdHJ1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YWx1ZUJpbmRpbmcgPSBudW1iZXIgPyAoXCJfbihcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSA6IHZhbHVlQmluZGluZztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCAoXCJfcShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHNlbGVjdGVkVmFsID0gXCJBcnJheS5wcm90b3R5cGUuZmlsdGVyXCIgK1xuICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgXCIubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcXFwiX3ZhbHVlXFxcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO1wiICtcbiAgICBcInJldHVybiBcIiArIChudW1iZXIgPyAnX24odmFsKScgOiAndmFsJykgKyBcIn0pXCI7XG5cbiAgdmFyIGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJztcbiAgdmFyIGNvZGUgPSBcInZhciAkJHNlbGVjdGVkVmFsID0gXCIgKyBzZWxlY3RlZFZhbCArIFwiO1wiO1xuICBjb2RlID0gY29kZSArIFwiIFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBhc3NpZ25tZW50KSk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2VuRGVmYXVsdE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAgLy8gd2FybiBpZiB2LWJpbmQ6dmFsdWUgY29uZmxpY3RzIHdpdGggdi1tb2RlbFxuICAvLyBleGNlcHQgZm9yIGlucHV0cyB3aXRoIHYtYmluZDp0eXBlXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHZhbHVlJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gfHwgZWwuYXR0cnNNYXBbJzp2YWx1ZSddO1xuICAgIHZhciB0eXBlQmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dHlwZSddIHx8IGVsLmF0dHJzTWFwWyc6dHlwZSddO1xuICAgIGlmICh2YWx1ZSQxICYmICF0eXBlQmluZGluZykge1xuICAgICAgdmFyIGJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gPyAndi1iaW5kOnZhbHVlJyA6ICc6dmFsdWUnO1xuICAgICAgd2FybiQxKFxuICAgICAgICBiaW5kaW5nICsgXCI9XFxcIlwiICsgdmFsdWUkMSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCB2LW1vZGVsIG9uIHRoZSBzYW1lIGVsZW1lbnQgXCIgK1xuICAgICAgICAnYmVjYXVzZSB0aGUgbGF0dGVyIGFscmVhZHkgZXhwYW5kcyB0byBhIHZhbHVlIGJpbmRpbmcgaW50ZXJuYWxseScsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwW2JpbmRpbmddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBsYXp5ID0gcmVmLmxhenk7XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuICB2YXIgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuICB2YXIgZXZlbnQgPSBsYXp5XG4gICAgPyAnY2hhbmdlJ1xuICAgIDogdHlwZSA9PT0gJ3JhbmdlJ1xuICAgICAgPyBSQU5HRV9UT0tFTlxuICAgICAgOiAnaW5wdXQnO1xuXG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSAnJGV2ZW50LnRhcmdldC52YWx1ZSc7XG4gIGlmICh0cmltKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCIkZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cblxuICB2YXIgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuICBpZiAobmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcbiAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICB9XG5cbiAgYWRkUHJvcChlbCwgJ3ZhbHVlJywgKFwiKFwiICsgdmFsdWUgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCBldmVudCwgY29kZSwgbnVsbCwgdHJ1ZSk7XG4gIGlmICh0cmltIHx8IG51bWJlcikge1xuICAgIGFkZEhhbmRsZXIoZWwsICdibHVyJywgJyRmb3JjZVVwZGF0ZSgpJyk7XG4gIH1cbn1cblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbnZhciBkZWZhdWx0VGFnUkUgPSAvXFx7XFx7KCg/Oi58XFxyP1xcbikrPylcXH1cXH0vZztcbnZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcblxudmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cblxuXG5mdW5jdGlvbiBwYXJzZVRleHQgKFxuICB0ZXh0LFxuICBkZWxpbWl0ZXJzXG4pIHtcbiAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7XG4gIGlmICghdGFnUkUudGVzdCh0ZXh0KSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHJhd1Rva2VucyA9IFtdO1xuICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgdmFyIG1hdGNoLCBpbmRleCwgdG9rZW5WYWx1ZTtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgdmFyIGV4cCA9IHBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO1xuICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcbiAgICByYXdUb2tlbnMucHVzaCh7ICdAYmluZGluZyc6IGV4cCB9KTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgpKTtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBleHByZXNzaW9uOiB0b2tlbnMuam9pbignKycpLFxuICAgIHRva2VuczogcmF3VG9rZW5zXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RhdGljQ2xhc3MpIHtcbiAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY0NsYXNzLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ2NsYXNzJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKGNsYXNzQmluZGluZykge1xuICAgIGVsLmNsYXNzQmluZGluZyA9IGNsYXNzQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGtsYXNzJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljQ2xhc3MnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSxcbiAgZ2VuRGF0YTogZ2VuRGF0YVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNTdHlsZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzdHlsZScpO1xuICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHJlcyA9IHBhcnNlVGV4dChzdGF0aWNTdHlsZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcInN0eWxlPVxcXCJcIiArIHN0YXRpY1N0eWxlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBzdHlsZT1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOnN0eWxlPVwidmFsXCI+LicsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3N0eWxlJ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuc3RhdGljU3R5bGUgPSBKU09OLnN0cmluZ2lmeShwYXJzZVN0eWxlVGV4dChzdGF0aWNTdHlsZSkpO1xuICB9XG5cbiAgdmFyIHN0eWxlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc3R5bGUnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoc3R5bGVCaW5kaW5nKSB7XG4gICAgZWwuc3R5bGVCaW5kaW5nID0gc3R5bGVCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY1N0eWxlKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY1N0eWxlOlwiICsgKGVsLnN0YXRpY1N0eWxlKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5zdHlsZUJpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwic3R5bGU6KFwiICsgKGVsLnN0eWxlQmluZGluZykgKyBcIiksXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIHN0eWxlJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljU3R5bGUnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSQxLFxuICBnZW5EYXRhOiBnZW5EYXRhJDFcbn07XG5cbi8qICAqL1xuXG52YXIgZGVjb2RlcjtcblxudmFyIGhlID0ge1xuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZSAoaHRtbCkge1xuICAgIGRlY29kZXIgPSBkZWNvZGVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZGVjb2Rlci50ZXh0Q29udGVudFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIGlzVW5hcnlUYWcgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicidcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxudmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBtYWtlTWFwKFxuICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSdcbik7XG5cbi8vIEhUTUw1IHRhZ3MgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sI2VsZW1lbnRzLTNcbi8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxudmFyIGlzTm9uUGhyYXNpbmdUYWcgPSBtYWtlTWFwKFxuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLCcgK1xuICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAnaDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsJyArXG4gICdvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsJyArXG4gICd0aXRsZSx0cix0cmFjaydcbik7XG5cbi8qKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gKi9cblxuLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG52YXIgYXR0cmlidXRlID0gL15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG52YXIgZHluYW1pY0FyZ0F0dHJpYnV0ZSA9IC9eXFxzKigoPzp2LVtcXHctXSs6fEB8OnwjKVxcW1tePV0rXFxdW15cXHNcIic8PlxcLz1dKikoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBuY25hbWUgPSBcIlthLXpBLVpfXVtcXFxcLVxcXFwuMC05X2EtekEtWlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSpcIjtcbnZhciBxbmFtZUNhcHR1cmUgPSBcIigoPzpcIiArIG5jbmFtZSArIFwiXFxcXDopP1wiICsgbmNuYW1lICsgXCIpXCI7XG52YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoXCJePFwiICsgcW5hbWVDYXB0dXJlKSk7XG52YXIgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xudmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoKFwiXjxcXFxcL1wiICsgcW5hbWVDYXB0dXJlICsgXCJbXj5dKj5cIikpO1xudmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbi8vICM3Mjk4OiBlc2NhcGUgLSB0byBhdm9pZCBiZWluZyBwYXNlZCBhcyBIVE1MIGNvbW1lbnQgd2hlbiBpbmxpbmVkIGluIHBhZ2VcbnZhciBjb21tZW50ID0gL148IVxcLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1BsYWluVGV4dEVsZW1lbnQgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJyxcbiAgJyYjOTsnOiAnXFx0JyxcbiAgJyYjMzk7JzogXCInXCJcbn07XG52YXIgZW5jb2RlZEF0dHIgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2c7XG52YXIgZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOXwjMTB8IzkpOy9nO1xuXG4vLyAjNTk5MlxudmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHNob3VsZElnbm9yZUZpcnN0TmV3bGluZSA9IGZ1bmN0aW9uICh0YWcsIGh0bWwpIHsgcmV0dXJuIHRhZyAmJiBpc0lnbm9yZU5ld2xpbmVUYWcodGFnKSAmJiBodG1sWzBdID09PSAnXFxuJzsgfTtcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gZGVjb2RpbmdNYXBbbWF0Y2hdOyB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGNhbkJlTGVmdE9wZW5UYWckJDEgPSBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1BsYWluVGV4dEVsZW1lbnQobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpLCBpbmRleCwgaW5kZXggKyBjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbmRpdGlvbmFsRW5kICsgMik7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7XG4gICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMV0sIGN1ckluZGV4LCBpbmRleCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IHRhZzpcbiAgICAgICAgdmFyIHN0YXJ0VGFnTWF0Y2ggPSBwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG4gICAgICAgICAgaGFuZGxlU3RhcnRUYWcoc3RhcnRUYWdNYXRjaCk7XG4gICAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFydFRhZ01hdGNoLnRhZ05hbWUsIGh0bWwpKSB7XG4gICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGFkdmFuY2UodGV4dC5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCwgaW5kZXggLSB0ZXh0Lmxlbmd0aCwgaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0RWxlbWVudChzdGFja2VkVGFnKSAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJykgLy8gIzcyOThcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdCQxLmxlbmd0aDtcbiAgICAgIGh0bWwgPSByZXN0JDE7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RhY2subGVuZ3RoICYmIG9wdGlvbnMud2Fybikge1xuICAgICAgICBvcHRpb25zLndhcm4oKFwiTWFsLWZvcm1hdHRlZCB0YWcgYXQgZW5kIG9mIHRlbXBsYXRlOiBcXFwiXCIgKyBodG1sICsgXCJcXFwiXCIpLCB7IHN0YXJ0OiBpbmRleCArIGh0bWwubGVuZ3RoIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goZHluYW1pY0FyZ0F0dHJpYnV0ZSkgfHwgaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhdHRyLnN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpO1xuICAgICAgICBhdHRyLmVuZCA9IGluZGV4O1xuICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3RhcnRUYWcgKG1hdGNoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyQkMSh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG4gICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgID8gb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWZcbiAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgIH07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gYXJncy5zdGFydCArIGFyZ3NbMF0ubWF0Y2goL15cXHMqLykubGVuZ3RoO1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBhcmdzLmVuZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycywgc3RhcnQ6IG1hdGNoLnN0YXJ0LCBlbmQ6IG1hdGNoLmVuZCB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgIGlmIChzdGFja1twb3NdLmxvd2VyQ2FzZWRUYWcgPT09IGxvd2VyQ2FzZWRUYWdOYW1lKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuICAgICAgcG9zID0gMDtcbiAgICB9XG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICBmb3IgKHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSBwb3M7IGktLSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIChpID4gcG9zIHx8ICF0YWdOYW1lKSAmJlxuICAgICAgICAgIG9wdGlvbnMud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICBvcHRpb25zLndhcm4oXG4gICAgICAgICAgICAoXCJ0YWcgPFwiICsgKHN0YWNrW2ldLnRhZykgKyBcIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuXCIpLFxuICAgICAgICAgICAgeyBzdGFydDogc3RhY2tbaV0uc3RhcnQsIGVuZDogc3RhY2tbaV0uZW5kIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgZGlyUkUgPSAvXnYtfF5AfF46LztcbnZhciBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG52YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbnZhciBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbnZhciBhcmdSRSA9IC86KC4qKSQvO1xudmFyIGJpbmRSRSA9IC9eOnxeXFwufF52LWJpbmQ6LztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLlxcXV0rKD89W15cXF1dKiQpL2c7XG5cbnZhciBzbG90UkUgPSAvXnYtc2xvdCg6fCQpfF4jLztcblxudmFyIGxpbmVCcmVha1JFID0gL1tcXHJcXG5dLztcbnZhciB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbnZhciBpbnZhbGlkQXR0cmlidXRlUkUgPSAvW1xcc1wiJzw+XFwvPV0vO1xuXG52YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpO1xuXG52YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9IFwiX2VtcHR5X1wiO1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDI7XG52YXIgZGVsaW1pdGVycztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHByZVRyYW5zZm9ybXM7XG52YXIgcG9zdFRyYW5zZm9ybXM7XG52YXIgcGxhdGZvcm1Jc1ByZVRhZztcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xudmFyIG1heWJlQ29tcG9uZW50O1xuXG5mdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgdGFnLFxuICBhdHRycyxcbiAgcGFyZW50XG4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxLFxuICAgIHRhZzogdGFnLFxuICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgcmF3QXR0cnNNYXA6IHt9LFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDIgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgbWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICB2YXIgcm9vdDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgdmFyIGluUHJlID0gZmFsc2U7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgd2FybiQyKG1zZywgcmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuICAgIGlmICghaW5WUHJlICYmICFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyB0cmVlIG1hbmFnZW1lbnRcbiAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgIGlmIChyb290LmlmICYmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNsb3RTY29wZSkge1xuICAgICAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgLy8gZmluZCBpdCBhcyB0aGUgcHJldiBub2RlLlxuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdcImRlZmF1bHRcIidcbiAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgLy8gZmlsdGVyIG91dCBzY29wZWQgc2xvdHNcbiAgICBlbGVtZW50LmNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICEoYykuc2xvdFNjb3BlOyB9KTtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG5cbiAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvc3RUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkge1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICBpZiAoIWluUHJlKSB7XG4gICAgICB2YXIgbGFzdE5vZGU7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIChsYXN0Tm9kZSA9IGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmXG4gICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLicsXG4gICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgd2Fybjogd2FybiQyLFxuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSwgc3RhcnQkMSwgZW5kKSB7XG4gICAgICAvLyBjaGVjayBuYW1lc3BhY2UuXG4gICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgIC8vIGhhbmRsZSBJRSBzdmcgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICBhdHRycyA9IGd1YXJkSUVTVkdCdWcoYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGVsZW1lbnQuc3RhcnQgPSBzdGFydCQxO1xuICAgICAgICAgIGVsZW1lbnQuZW5kID0gZW5kO1xuICAgICAgICAgIGVsZW1lbnQucmF3QXR0cnNNYXAgPSBlbGVtZW50LmF0dHJzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1bXVsYXRlZCwgYXR0cikge1xuICAgICAgICAgICAgY3VtdWxhdGVkW2F0dHIubmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgcmV0dXJuIGN1bXVsYXRlZFxuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgaWYgKGludmFsaWRBdHRyaWJ1dGVSRS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIGR5bmFtaWMgYXJndW1lbnQgZXhwcmVzc2lvbjogYXR0cmlidXRlIG5hbWVzIGNhbm5vdCBjb250YWluIFwiICtcbiAgICAgICAgICAgICAgXCJzcGFjZXMsIHF1b3RlcywgPCwgPiwgLyBvciA9LlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUuaW5kZXhPZihcIltcIiksXG4gICAgICAgICAgICAgICAgZW5kOiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZvcmJpZGRlblRhZyhlbGVtZW50KSAmJiAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSkge1xuICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXNcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGVsZW1lbnQuZW5kID0gZW5kJDE7XG4gICAgICB9XG4gICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgIChcInRleHQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZU9wdGlvbikge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgLy8gbGluZSBicmVhaywgb3RoZXJ3aXNlIGNvbmRlbnNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gJyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gcHJlc2VydmVXaGl0ZXNwYWNlID8gJyAnIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBpZiAoIWluUHJlICYmIHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBjb25kZW5zZSBjb25zZWN1dGl2ZSB3aGl0ZXNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hpdGVzcGFjZVJFJDEsICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCAhY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAvLyBhZGRpbmcgYW55dGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBpc0NvbW1lbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZm9yKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGVsLml0ZXJhdG9yMiB8fCBlbC5pdGVyYXRvcjE7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgXCJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLlwiLFxuICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSxcbiAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbC5rZXkgPSBleHA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JlZiAoZWwpIHtcbiAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gIGlmIChyZWYpIHtcbiAgICBlbC5yZWYgPSByZWY7XG4gICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICB2YXIgZXhwO1xuICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7XG4gICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoWzJdKSB7XG4gICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDIoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgY2hpbGRyZW5baV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UkJDEgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbi8vIGhhbmRsZSBjb250ZW50IGJlaW5nIHBhc3NlZCB0byBhIGNvbXBvbmVudCBhcyBzbG90LFxuLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG5mdW5jdGlvbiBwcm9jZXNzU2xvdENvbnRlbnQgKGVsKSB7XG4gIHZhciBzbG90U2NvcGU7XG4gIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICBzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2NvcGUnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ0aGUgXFxcInNjb3BlXFxcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgXCIgK1xuICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgXCJkZW5vdGUgc2NvcGVkIHNsb3RzLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGVsLnNsb3RUYXJnZXQgfHwgZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGUgdi1zbG90PiBjYW4gb25seSBhcHBlYXIgYXQgdGhlIHJvb3QgbGV2ZWwgaW5zaWRlIFwiICtcbiAgICAgICAgICAgICAgXCJ0aGUgcmVjZWl2aW5nIHRoZSBjb21wb25lbnRcIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyk7XG4gICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljID0gcmVmLmR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RUYXJnZXQgPSBuYW1lO1xuICAgICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47IC8vIGZvcmNlIGl0IGludG8gYSBzY29wZWQgc2xvdCBmb3IgcGVyZlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB2LXNsb3Qgb24gY29tcG9uZW50LCBkZW5vdGVzIGRlZmF1bHQgc2xvdFxuICAgICAgdmFyIHNsb3RCaW5kaW5nJDEgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZyQxKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFtYXliZUNvbXBvbmVudChlbCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJ2LXNsb3QgY2FuIG9ubHkgYmUgdXNlZCBvbiBjb21wb25lbnRzIG9yIDx0ZW1wbGF0ZT4uXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJUbyBhdm9pZCBzY29wZSBhbWJpZ3VpdHksIHRoZSBkZWZhdWx0IHNsb3Qgc2hvdWxkIGFsc28gdXNlIFwiICtcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGU+IHN5bnRheCB3aGVuIHRoZXJlIGFyZSBvdGhlciBuYW1lZCBzbG90cy5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiB0byBpdHMgZGVmYXVsdCBzbG90XG4gICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTtcbiAgICAgICAgdmFyIHJlZiQxID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmckMSk7XG4gICAgICAgIHZhciBuYW1lJDEgPSByZWYkMS5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYztcbiAgICAgICAgdmFyIHNsb3RDb250YWluZXIgPSBzbG90c1tuYW1lJDFdID0gY3JlYXRlQVNURWxlbWVudCgndGVtcGxhdGUnLCBbXSwgZWwpO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXQgPSBuYW1lJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBpZiAoIWMuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmckMS52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuO1xuICAgICAgICAvLyByZW1vdmUgY2hpbGRyZW4gYXMgdGhleSBhcmUgcmV0dXJuZWQgZnJvbSBzY29wZWRTbG90cyBub3dcbiAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgLy8gbWFyayBlbCBub24tcGxhaW4gc28gZGF0YSBnZXRzIGdlbmVyYXRlZFxuICAgICAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykge1xuICB2YXIgbmFtZSA9IGJpbmRpbmcubmFtZS5yZXBsYWNlKHNsb3RSRSwgJycpO1xuICBpZiAoIW5hbWUpIHtcbiAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHtcbiAgICAgIG5hbWUgPSAnZGVmYXVsdCc7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKVxuICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAvLyBzdGF0aWMgbmFtZVxuICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG59XG5cbi8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHNcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmtleSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuICAgICAgICBcImFuZCBjYW4gcG9zc2libHkgZXhwYW5kIGludG8gbXVsdGlwbGUgZWxlbWVudHMuIFwiICtcbiAgICAgICAgXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIixcbiAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudCAoZWwpIHtcbiAgdmFyIGJpbmRpbmc7XG4gIGlmICgoYmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnaXMnKSkpIHtcbiAgICBlbC5jb21wb25lbnQgPSBiaW5kaW5nO1xuICB9XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAnaW5saW5lLXRlbXBsYXRlJykgIT0gbnVsbCkge1xuICAgIGVsLmlubGluZVRlbXBsYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc3luYykge1xuICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChoeXBoZW5hdGUobmFtZSkgIT09IGNhbWVsaXplKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGh5cGhlbmF0ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBoYW5kbGVyIHcvIGR5bmFtaWMgZXZlbnQgbmFtZVxuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcIlxcXCJ1cGRhdGU6XFxcIisoXCIgKyBuYW1lICsgXCIpXCIpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKVxuICAgICAgICApKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgIC8vIHBhcnNlIGFyZ1xuICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTtcbiAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiZcbiAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHtcbiAgICB2YXIgbWFwID0gZWwuYXR0cnNNYXA7XG4gICAgaWYgKCFtYXBbJ3YtbW9kZWwnXSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHR5cGVCaW5kaW5nO1xuICAgIGlmIChtYXBbJzp0eXBlJ10gfHwgbWFwWyd2LWJpbmQ6dHlwZSddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHlwZScpO1xuICAgIH1cbiAgICBpZiAoIW1hcC50eXBlICYmICF0eXBlQmluZGluZyAmJiBtYXBbJ3YtYmluZCddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IFwiKFwiICsgKG1hcFsndi1iaW5kJ10pICsgXCIpLnR5cGVcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBpZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJywgdHJ1ZSk7XG4gICAgICB2YXIgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gKFwiJiYoXCIgKyBpZkNvbmRpdGlvbiArIFwiKVwiKSA6IFwiXCI7XG4gICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsO1xuICAgICAgdmFyIGVsc2VJZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnLCB0cnVlKTtcbiAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAvLyBwcm9jZXNzIGZvciBvbiB0aGUgbWFpbiBub2RlXG4gICAgICBwcm9jZXNzRm9yKGJyYW5jaDApO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMCwgb3B0aW9ucyk7XG4gICAgICBicmFuY2gwLnByb2Nlc3NlZCA9IHRydWU7IC8vIHByZXZlbnQgaXQgZnJvbSBkb3VibGUtcHJvY2Vzc2VkXG4gICAgICBicmFuY2gwLmlmID0gXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdjaGVja2JveCdcIiArIGlmQ29uZGl0aW9uRXh0cmE7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogYnJhbmNoMC5pZixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDBcbiAgICAgIH0pO1xuICAgICAgLy8gMi4gYWRkIHJhZGlvIGVsc2UtaWYgY29uZGl0aW9uXG4gICAgICB2YXIgYnJhbmNoMSA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDEsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gxLCAndHlwZScsICdyYWRpbycpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMSwgb3B0aW9ucyk7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdyYWRpbydcIiArIGlmQ29uZGl0aW9uRXh0cmEsXG4gICAgICAgIGJsb2NrOiBicmFuY2gxXG4gICAgICB9KTtcbiAgICAgIC8vIDMuIG90aGVyXG4gICAgICB2YXIgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDIsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbHNlSWZDb25kaXRpb24pIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicmFuY2gwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxufVxuXG52YXIgbW9kZWwkMSA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMSxcbiAgbW9kZWwkMVxuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICd0ZXh0Q29udGVudCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICdpbm5lckhUTUwnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpLCBkaXIpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufTtcblxuLyogICovXG5cbnZhciBiYXNlT3B0aW9ucyA9IHtcbiAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgbW9kdWxlczogbW9kdWxlcyQxLFxuICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzJDEsXG4gIGlzUHJlVGFnOiBpc1ByZVRhZyxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBjYW5CZUxlZnRPcGVuVGFnOiBjYW5CZUxlZnRPcGVuVGFnLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgc3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyhtb2R1bGVzJDEpXG59O1xuXG4vKiAgKi9cblxudmFyIGlzU3RhdGljS2V5O1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxudmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gIG1hcmtTdGF0aWMkMShyb290KTtcbiAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEgKGtleXMpIHtcbiAgcmV0dXJuIG1ha2VNYXAoXG4gICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwJyArXG4gICAgKGtleXMgPyAnLCcgKyBrZXlzIDogJycpXG4gIClcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyQxIChub2RlKSB7XG4gIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAvLyBkbyBub3QgbWFrZSBjb21wb25lbnQgc2xvdCBjb250ZW50IHN0YXRpYy4gdGhpcyBhdm9pZHNcbiAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG4gICAgLy8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuICAgIGlmIChcbiAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG4gICAgICBub2RlLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgICBub2RlLmF0dHJzTWFwWydpbmxpbmUtdGVtcGxhdGUnXSA9PSBudWxsXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIG1hcmtTdGF0aWMkMShjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICB2YXIgYmxvY2sgPSBub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrO1xuICAgICAgICBtYXJrU3RhdGljJDEoYmxvY2spO1xuICAgICAgICBpZiAoIWJsb2NrLnN0YXRpYykge1xuICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG4gICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICB9XG4gICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcbiAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcbiAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICApKSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2ssIGlzSW5Gb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIGZuRXhwUkUgPSAvXihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvblxccyooPzpbXFx3JF0rKT9cXHMqXFwoLztcbnZhciBmbkludm9rZVJFID0gL1xcKFteKV0qP1xcKTsqJC87XG52YXIgc2ltcGxlUGF0aFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLztcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIGFsaWFzZXNcbnZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNwYWNlOiAzMixcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgJ2RlbGV0ZSc6IFs4LCA0Nl1cbn07XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5IGFsaWFzZXNcbnZhciBrZXlOYW1lcyA9IHtcbiAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gIGVzYzogWydFc2MnLCAnRXNjYXBlJ10sXG4gIHRhYjogJ1RhYicsXG4gIGVudGVyOiAnRW50ZXInLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBTcGFjZWJhcmAgZm9yIFNwYWNlIGtleSBuYW1lLlxuICBzcGFjZTogWycgJywgJ1NwYWNlYmFyJ10sXG4gIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gIHVwOiBbJ1VwJywgJ0Fycm93VXAnXSxcbiAgbGVmdDogWydMZWZ0JywgJ0Fycm93TGVmdCddLFxuICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gIGRvd246IFsnRG93bicsICdBcnJvd0Rvd24nXSxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgRGVsYCBmb3IgRGVsZXRlIGtleSBuYW1lLlxuICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG59O1xuXG4vLyAjNDg2ODogbW9kaWZpZXJzIHRoYXQgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsaXN0ZW5lclxuLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuLy8gdGhlIGxpc3RlbmVyIGZvciAub25jZVxudmFyIGdlbkd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbikgeyByZXR1cm4gKFwiaWYoXCIgKyBjb25kaXRpb24gKyBcIilyZXR1cm4gbnVsbDtcIik7IH07XG5cbnZhciBtb2RpZmllckNvZGUgPSB7XG4gIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JyxcbiAgcHJldmVudDogJyRldmVudC5wcmV2ZW50RGVmYXVsdCgpOycsXG4gIHNlbGY6IGdlbkd1YXJkKFwiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXRcIiksXG4gIGN0cmw6IGdlbkd1YXJkKFwiISRldmVudC5jdHJsS2V5XCIpLFxuICBzaGlmdDogZ2VuR3VhcmQoXCIhJGV2ZW50LnNoaWZ0S2V5XCIpLFxuICBhbHQ6IGdlbkd1YXJkKFwiISRldmVudC5hbHRLZXlcIiksXG4gIG1ldGE6IGdlbkd1YXJkKFwiISRldmVudC5tZXRhS2V5XCIpLFxuICBsZWZ0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAwXCIpLFxuICBtaWRkbGU6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDFcIiksXG4gIHJpZ2h0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyXCIpXG59O1xuXG5mdW5jdGlvbiBnZW5IYW5kbGVycyAoXG4gIGV2ZW50cyxcbiAgaXNOYXRpdmVcbikge1xuICB2YXIgcHJlZml4ID0gaXNOYXRpdmUgPyAnbmF0aXZlT246JyA6ICdvbjonO1xuICB2YXIgc3RhdGljSGFuZGxlcnMgPSBcIlwiO1xuICB2YXIgZHluYW1pY0hhbmRsZXJzID0gXCJcIjtcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICB2YXIgaGFuZGxlckNvZGUgPSBnZW5IYW5kbGVyKGV2ZW50c1tuYW1lXSk7XG4gICAgaWYgKGV2ZW50c1tuYW1lXSAmJiBldmVudHNbbmFtZV0uZHluYW1pYykge1xuICAgICAgZHluYW1pY0hhbmRsZXJzICs9IG5hbWUgKyBcIixcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY0hhbmRsZXJzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY0hhbmRsZXJzID0gXCJ7XCIgKyAoc3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY0hhbmRsZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIFwiX2QoXCIgKyBzdGF0aWNIYW5kbGVycyArIFwiLFtcIiArIChkeW5hbWljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyBzdGF0aWNIYW5kbGVyc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIoaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgfVxuXG4gIHZhciBpc01ldGhvZFBhdGggPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25FeHByZXNzaW9uID0gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkludm9jYXRpb24gPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlLnJlcGxhY2UoZm5JbnZva2VSRSwgJycpKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaXNGdW5jdGlvbkludm9jYXRpb24gPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpIDogaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgICAvLyBsZWZ0L3JpZ2h0XG4gICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgIHZhciBtb2RpZmllcnMgPSAoaGFuZGxlci5tb2RpZmllcnMpO1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gZ2VuR3VhcmQoXG4gICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAhbW9kaWZpZXJzW2tleU1vZGlmaWVyXTsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAoXCIkZXZlbnQuXCIgKyBrZXlNb2RpZmllciArIFwiS2V5XCIpOyB9KVxuICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHtcbiAgICAgIGNvZGUgKz0gZ2VuTW9kaWZpZXJDb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIoJGV2ZW50KVwiKVxuICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICA/IChcInJldHVybiAoXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIikoJGV2ZW50KVwiKVxuICAgICAgICA6IGlzRnVuY3Rpb25JbnZvY2F0aW9uXG4gICAgICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpXG4gICAgICAgICAgOiBoYW5kbGVyLnZhbHVlO1xuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgY29kZSArIGhhbmRsZXJDb2RlICsgXCJ9XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuS2V5RmlsdGVyIChrZXlzKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBrZXkgZmlsdGVycyBvbmx5IGFwcGx5IHRvIEtleWJvYXJkRXZlbnRzXG4gICAgLy8gIzk0NDE6IGNhbid0IHVzZSAna2V5Q29kZScgaW4gJGV2ZW50IGJlY2F1c2UgQ2hyb21lIGF1dG9maWxsIGZpcmVzIGZha2VcbiAgICAvLyBrZXkgZXZlbnRzIHRoYXQgZG8gbm90IGhhdmUga2V5Q29kZSBwcm9wZXJ0eS4uLlxuICAgIFwiaWYoISRldmVudC50eXBlLmluZGV4T2YoJ2tleScpJiZcIiArXG4gICAgKGtleXMubWFwKGdlbkZpbHRlckNvZGUpLmpvaW4oJyYmJykpICsgXCIpcmV0dXJuIG51bGw7XCJcbiAgKVxufVxuXG5mdW5jdGlvbiBnZW5GaWx0ZXJDb2RlIChrZXkpIHtcbiAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICBpZiAoa2V5VmFsKSB7XG4gICAgcmV0dXJuIChcIiRldmVudC5rZXlDb2RlIT09XCIgKyBrZXlWYWwpXG4gIH1cbiAgdmFyIGtleUNvZGUgPSBrZXlDb2Rlc1trZXldO1xuICB2YXIga2V5TmFtZSA9IGtleU5hbWVzW2tleV07XG4gIHJldHVybiAoXG4gICAgXCJfaygkZXZlbnQua2V5Q29kZSxcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleSkpICsgXCIsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyBcIixcIiArXG4gICAgXCIkZXZlbnQua2V5LFwiICtcbiAgICBcIlwiICsgKEpTT04uc3RyaW5naWZ5KGtleU5hbWUpKSArXG4gICAgXCIpXCJcbiAgKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gb24gKGVsLCBkaXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGlyLm1vZGlmaWVycykge1xuICAgIHdhcm4oXCJ2LW9uIHdpdGhvdXQgYXJndW1lbnQgZG9lcyBub3Qgc3VwcG9ydCBtb2RpZmllcnMuXCIpO1xuICB9XG4gIGVsLndyYXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiX2coXCIgKyBjb2RlICsgXCIsXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKTsgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmQkMSAoZWwsIGRpcikge1xuICBlbC53cmFwRGF0YSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIChcIl9iKFwiICsgY29kZSArIFwiLCdcIiArIChlbC50YWcpICsgXCInLFwiICsgKGRpci52YWx1ZSkgKyBcIixcIiArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICd0cnVlJyA6ICdmYWxzZScpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5zeW5jID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGJhc2VEaXJlY3RpdmVzID0ge1xuICBvbjogb24sXG4gIGJpbmQ6IGJpbmQkMSxcbiAgY2xvYWs6IG5vb3Bcbn07XG5cbi8qICAqL1xuXG5cblxuXG5cbnZhciBDb2RlZ2VuU3RhdGUgPSBmdW5jdGlvbiBDb2RlZ2VuU3RhdGUgKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy53YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB0aGlzLnRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcbiAgdGhpcy5kYXRhR2VuRm5zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdnZW5EYXRhJyk7XG4gIHRoaXMuZGlyZWN0aXZlcyA9IGV4dGVuZChleHRlbmQoe30sIGJhc2VEaXJlY3RpdmVzKSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIHRoaXMubWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG4gIHRoaXMub25jZUlkID0gMDtcbiAgdGhpcy5zdGF0aWNSZW5kZXJGbnMgPSBbXTtcbiAgdGhpcy5wcmUgPSBmYWxzZTtcbn07XG5cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZSAoXG4gIGFzdCxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBDb2RlZ2VuU3RhdGUob3B0aW9ucyk7XG4gIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QsIHN0YXRlKSA6ICdfYyhcImRpdlwiKSc7XG4gIHJldHVybiB7XG4gICAgcmVuZGVyOiAoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIGNvZGUgKyBcIn1cIiksXG4gICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5FbGVtZW50IChlbCwgc3RhdGUpIHtcbiAgaWYgKGVsLnBhcmVudCkge1xuICAgIGVsLnByZSA9IGVsLnByZSB8fCBlbC5wYXJlbnQucHJlO1xuICB9XG5cbiAgaWYgKGVsLnN0YXRpY1Jvb3QgJiYgIWVsLnN0YXRpY1Byb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLm9uY2UgJiYgIWVsLm9uY2VQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuT25jZShlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFRhcmdldCAmJiAhc3RhdGUucHJlKSB7XG4gICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3ZvaWQgMCdcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIHJldHVybiBnZW5TbG90KGVsLCBzdGF0ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGF0YTtcbiAgICAgIGlmICghZWwucGxhaW4gfHwgKGVsLnByZSAmJiBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkpKSB7XG4gICAgICAgIGRhdGEgPSBnZW5EYXRhJDIoZWwsIHN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG4gICAgfVxuICAgIC8vIG1vZHVsZSB0cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS50cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2RlID0gc3RhdGUudHJhbnNmb3Jtc1tpXShlbCwgY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH1cbn1cblxuLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbmZ1bmN0aW9uIGdlblN0YXRpYyAoZWwsIHN0YXRlKSB7XG4gIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7XG4gIC8vIFNvbWUgZWxlbWVudHMgKHRlbXBsYXRlcykgbmVlZCB0byBiZWhhdmUgZGlmZmVyZW50bHkgaW5zaWRlIG9mIGEgdi1wcmVcbiAgLy8gbm9kZS4gIEFsbCBwcmUgbm9kZXMgYXJlIHN0YXRpYyByb290cywgc28gd2UgY2FuIHVzZSB0aGlzIGFzIGEgbG9jYXRpb24gdG9cbiAgLy8gd3JhcCBhIHN0YXRlIGNoYW5nZSBhbmQgcmVzZXQgaXQgdXBvbiBleGl0aW5nIHRoZSBwcmUgbm9kZS5cbiAgdmFyIG9yaWdpbmFsUHJlU3RhdGUgPSBzdGF0ZS5wcmU7XG4gIGlmIChlbC5wcmUpIHtcbiAgICBzdGF0ZS5wcmUgPSBlbC5wcmU7XG4gIH1cbiAgc3RhdGUuc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiKSk7XG4gIHN0YXRlLnByZSA9IG9yaWdpbmFsUHJlU3RhdGU7XG4gIHJldHVybiAoXCJfbShcIiArIChzdGF0ZS5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMSkgKyAoZWwuc3RhdGljSW5Gb3IgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG59XG5cbi8vIHYtb25jZVxuZnVuY3Rpb24gZ2VuT25jZSAoZWwsIHN0YXRlKSB7XG4gIGVsLm9uY2VQcm9jZXNzZWQgPSB0cnVlO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yKSB7XG4gICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0ZS53YXJuKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Ytb25jZSddXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgIH1cbiAgICByZXR1cm4gKFwiX28oXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwiLFwiICsgKHN0YXRlLm9uY2VJZCsrKSArIFwiLFwiICsga2V5ICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSlcbn1cblxuZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChcbiAgY29uZGl0aW9ucyxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsdEVtcHR5IHx8ICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucywgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSlcbiAgfVxuXG4gIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcbiAgICByZXR1cm4gYWx0R2VuXG4gICAgICA/IGFsdEdlbihlbCwgc3RhdGUpXG4gICAgICA6IGVsLm9uY2VcbiAgICAgICAgPyBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5Gb3IgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0SGVscGVyXG4pIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmXG4gICAgZWwudGFnICE9PSAnc2xvdCcgJiZcbiAgICBlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAhZWwua2V5XG4gICkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1mb3I9XFxcIlwiICsgYWxpYXMgKyBcIiBpbiBcIiArIGV4cCArIFwiXFxcIj46IGNvbXBvbmVudCBsaXN0cyByZW5kZXJlZCB3aXRoIFwiICtcbiAgICAgIFwidi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gXCIgK1xuICAgICAgXCJTZWUgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvbGlzdC5odG1sI2tleSBmb3IgbW9yZSBpbmZvLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10sXG4gICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICk7XG4gIH1cblxuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIChhbHRIZWxwZXIgfHwgJ19sJykgKyBcIigoXCIgKyBleHAgKyBcIiksXCIgK1xuICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICBcInJldHVybiBcIiArICgoYWx0R2VuIHx8IGdlbkVsZW1lbnQpKGVsLCBzdGF0ZSkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczpcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCIsXCI7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gXCJkb21Qcm9wczpcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCIsXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNsb3RUYXJnZXQgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLCBlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICB9XG4gIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gIGlmIChlbC5tb2RlbCkge1xuICAgIGRhdGEgKz0gXCJtb2RlbDp7dmFsdWU6XCIgKyAoZWwubW9kZWwudmFsdWUpICsgXCIsY2FsbGJhY2s6XCIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgXCIsZXhwcmVzc2lvbjpcIiArIChlbC5tb2RlbC5leHByZXNzaW9uKSArIFwifSxcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LlxuICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgZGF0YSA9IFwiX2IoXCIgKyBkYXRhICsgXCIsXFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCIgKyAoZ2VuUHJvcHMoZWwuZHluYW1pY0F0dHJzKSkgKyBcIilcIjtcbiAgfVxuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICAvLyB2LW9uIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcExpc3RlbmVycykge1xuICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgc3RhdGUud2Fybik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcIiArIChkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IChcIlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSkpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgfVxuICB9XG4gIGlmIChoYXNSdW50aW1lKSB7XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwsIHN0YXRlKSB7XG4gIHZhciBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLFxuICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICk7XG4gIH1cbiAgaWYgKGFzdCAmJiBhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICBlbCxcbiAgc2xvdHMsXG4gIHN0YXRlXG4pIHtcbiAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgXCJzdGFibGVcIiwgdGhpcyBhbGxvd3MgY2hpbGRcbiAgLy8gY29tcG9uZW50cyB3aXRoIG9ubHkgc2NvcGVkIHNsb3RzIHRvIHNraXAgZm9yY2VkIHVwZGF0ZXMgZnJvbSBwYXJlbnQuXG4gIC8vIGJ1dCBpbiBzb21lIGNhc2VzIHdlIGhhdmUgdG8gYmFpbC1vdXQgb2YgdGhpcyBvcHRpbWl6YXRpb25cbiAgLy8gZm9yIGV4YW1wbGUgaWYgdGhlIHNsb3QgY29udGFpbnMgZHluYW1pYyBuYW1lcywgaGFzIHYtaWYgb3Igdi1mb3Igb24gdGhlbS4uLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9IGVsLmZvciB8fCBPYmplY3Qua2V5cyhzbG90cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHNsb3QgPSBzbG90c1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBzbG90LnNsb3RUYXJnZXREeW5hbWljIHx8XG4gICAgICBzbG90LmlmIHx8XG4gICAgICBzbG90LmZvciB8fFxuICAgICAgY29udGFpbnNTbG90Q2hpbGQoc2xvdCkgLy8gaXMgcGFzc2luZyBkb3duIHNsb3QgZnJvbSBwYXJlbnQgd2hpY2ggbWF5IGJlIGR5bmFtaWNcbiAgICApXG4gIH0pO1xuXG4gIC8vICM5NTM0OiBpZiBhIGNvbXBvbmVudCB3aXRoIHNjb3BlZCBzbG90cyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBicmFuY2gsXG4gIC8vIGl0J3MgcG9zc2libGUgZm9yIHRoZSBzYW1lIGNvbXBvbmVudCB0byBiZSByZXVzZWQgYnV0IHdpdGggZGlmZmVyZW50XG4gIC8vIGNvbXBpbGVkIHNsb3QgY29udGVudC4gVG8gYXZvaWQgdGhhdCwgd2UgZ2VuZXJhdGUgYSB1bmlxdWUga2V5IGJhc2VkIG9uXG4gIC8vIHRoZSBnZW5lcmF0ZWQgY29kZSBvZiBhbGwgdGhlIHNsb3QgY29udGVudHMuXG4gIHZhciBuZWVkc0tleSA9ICEhZWwuaWY7XG5cbiAgLy8gT1Igd2hlbiBpdCBpcyBpbnNpZGUgYW5vdGhlciBzY29wZWQgc2xvdCBvciB2LWZvciAodGhlIHJlYWN0aXZpdHkgbWF5IGJlXG4gIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSlcbiAgLy8gIzk0MzgsICM5NTA2XG4gIC8vIFRPRE86IHRoaXMgY2FuIGJlIGZ1cnRoZXIgb3B0aW1pemVkIGJ5IHByb3Blcmx5IGFuYWx5emluZyBpbi1zY29wZSBiaW5kaW5nc1xuICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuXG4gIGlmICghbmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocGFyZW50LnNsb3RTY29wZSAmJiBwYXJlbnQuc2xvdFNjb3BlICE9PSBlbXB0eVNsb3RTY29wZVRva2VuKSB8fFxuICAgICAgICBwYXJlbnQuZm9yXG4gICAgICApIHtcbiAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LmlmKSB7XG4gICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGdlbmVyYXRlZFNsb3RzID0gT2JqZWN0LmtleXMoc2xvdHMpXG4gICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KHNsb3RzW2tleV0sIHN0YXRlKTsgfSlcbiAgICAuam9pbignLCcpO1xuXG4gIHJldHVybiAoXCJzY29wZWRTbG90czpfdShbXCIgKyBnZW5lcmF0ZWRTbG90cyArIFwiXVwiICsgKG5lZWRzRm9yY2VVcGRhdGUgPyBcIixudWxsLHRydWVcIiA6IFwiXCIpICsgKCFuZWVkc0ZvcmNlVXBkYXRlICYmIG5lZWRzS2V5ID8gKFwiLG51bGwsZmFsc2UsXCIgKyAoaGFzaChnZW5lcmF0ZWRTbG90cykpKSA6IFwiXCIpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MTtcbiAgdmFyIGkgPSBzdHIubGVuZ3RoO1xuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuICByZXR1cm4gaGFzaCA+Pj4gMFxufVxuXG5mdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBlbC5jaGlsZHJlbi5zb21lKGNvbnRhaW5zU2xvdENoaWxkKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCAmJiAhaXNMZWdhY3lTeW50YXgpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90LCBcIm51bGxcIilcbiAgfVxuICBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdClcbiAgfVxuICB2YXIgc2xvdFNjb3BlID0gZWwuc2xvdFNjb3BlID09PSBlbXB0eVNsb3RTY29wZVRva2VuXG4gICAgPyBcIlwiXG4gICAgOiBTdHJpbmcoZWwuc2xvdFNjb3BlKTtcbiAgdmFyIGZuID0gXCJmdW5jdGlvbihcIiArIHNsb3RTY29wZSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGVsLmlmICYmIGlzTGVnYWN5U3ludGF4XG4gICAgICAgID8gKFwiKFwiICsgKGVsLmlmKSArIFwiKT9cIiArIChnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnKSArIFwiOnVuZGVmaW5lZFwiKVxuICAgICAgICA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCdcbiAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiO1xuICAvLyByZXZlcnNlIHByb3h5IHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gIHZhciByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBcIlwiIDogXCIscHJveHk6dHJ1ZVwiO1xuICByZXR1cm4gKFwie2tleTpcIiArIChlbC5zbG90VGFyZ2V0IHx8IFwiXFxcImRlZmF1bHRcXFwiXCIpICsgXCIsZm46XCIgKyBmbiArIHJldmVyc2VQcm94eSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGVsJDEuZm9yICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgZWwkMS50YWcgIT09ICdzbG90J1xuICAgICkge1xuICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gY2hlY2tTa2lwXG4gICAgICAgID8gc3RhdGUubWF5YmVDb21wb25lbnQoZWwkMSkgPyBcIiwxXCIgOiBcIiwwXCJcbiAgICAgICAgOiBcIlwiO1xuICAgICAgcmV0dXJuIChcIlwiICsgKChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKSkgKyBub3JtYWxpemF0aW9uVHlwZSlcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlJDEgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSQxID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUkMSkgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChcbiAgY2hpbGRyZW4sXG4gIG1heWJlQ29tcG9uZW50XG4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWwgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG59XG5cbmZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUsIHN0YXRlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7XG4gIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgfHwgZWwuZHluYW1pY0F0dHJzXG4gICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHtcbiAgICAgICAgLy8gc2xvdCBwcm9wcyBhcmUgY2FtZWxpemVkXG4gICAgICAgIG5hbWU6IGNhbWVsaXplKGF0dHIubmFtZSksXG4gICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLFxuICAgICAgICBkeW5hbWljOiBhdHRyLmR5bmFtaWNcbiAgICAgIH0pOyB9KSlcbiAgICA6IG51bGw7XG4gIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQkJDEpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQkJDEpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZCQkMTtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoXG4gIGNvbXBvbmVudE5hbWUsXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhJDIoZWwsIHN0YXRlKSkgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG4gIHZhciBzdGF0aWNQcm9wcyA9IFwiXCI7XG4gIHZhciBkeW5hbWljUHJvcHMgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcbiAgICB2YXIgdmFsdWUgPSB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSk7XG4gICAgaWYgKHByb3AuZHluYW1pYykge1xuICAgICAgZHluYW1pY1Byb3BzICs9IChwcm9wLm5hbWUpICsgXCIsXCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNQcm9wcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgdmFsdWUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljUHJvcHMgPSBcIntcIiArIChzdGF0aWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljUHJvcHMpIHtcbiAgICByZXR1cm4gKFwiX2QoXCIgKyBzdGF0aWNQcm9wcyArIFwiLFtcIiArIChkeW5hbWljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RhdGljUHJvcHNcbiAgfVxufVxuXG4vLyAjMzg5NSwgIzQyNjhcbmZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKVxuICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxufVxuXG4vKiAgKi9cblxuXG5cbi8vIHRoZXNlIGtleXdvcmRzIHNob3VsZCBub3QgYXBwZWFyIGluc2lkZSBleHByZXNzaW9ucywgYnV0IG9wZXJhdG9ycyBsaWtlXG4vLyB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkXG52YXIgcHJvaGliaXRlZEtleXdvcmRSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArXG4gICdzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsJyArXG4gICdleHRlbmRzLGZpbmFsbHksY29udGludWUsZGVidWdnZXIsZnVuY3Rpb24sYXJndW1lbnRzJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykgKyAnXFxcXGInKTtcblxuLy8gdGhlc2UgdW5hcnkgb3BlcmF0b3JzIHNob3VsZCBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eS9tZXRob2QgbmFtZXNcbnZhciB1bmFyeU9wZXJhdG9yc1JFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZGVsZXRlLHR5cGVvZix2b2lkJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCl8XFxcXGInKSArICdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpJyk7XG5cbi8vIHN0cmlwIHN0cmluZ3MgaW4gZXhwcmVzc2lvbnNcbnZhciBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5cbi8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlXG5mdW5jdGlvbiBkZXRlY3RFcnJvcnMgKGFzdCwgd2Fybikge1xuICBpZiAoYXN0KSB7XG4gICAgY2hlY2tOb2RlKGFzdCwgd2Fybik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tOb2RlIChub2RlLCB3YXJuKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApIHtcbiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHZhciByYW5nZSA9IG5vZGUucmF3QXR0cnNNYXBbbmFtZV07XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICd2LWZvcicpIHtcbiAgICAgICAgICAgIGNoZWNrRm9yKG5vZGUsIChcInYtZm9yPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGNoZWNrRXZlbnQodmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIHdhcm4pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uLCBub2RlLnRleHQsIHdhcm4sIG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXZlbnQgKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdmFyIHN0aXBwZWQgPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJyk7XG4gIHZhciBrZXl3b3JkTWF0Y2ggPSBzdGlwcGVkLm1hdGNoKHVuYXJ5T3BlcmF0b3JzUkUpO1xuICBpZiAoa2V5d29yZE1hdGNoICYmIHN0aXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHtcbiAgICB3YXJuKFxuICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IHVuYXJ5IG9wZXJhdG9yIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cbiAgY2hlY2tFeHByZXNzaW9uKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvciAobm9kZSwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZm9yIHx8ICcnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMSwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjIsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyIChcbiAgaWRlbnQsXG4gIHR5cGUsXG4gIHRleHQsXG4gIHdhcm4sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHR5cGVvZiBpZGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKChcInZhciBcIiArIGlkZW50ICsgXCI9X1wiKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybigoXCJpbnZhbGlkIFwiICsgdHlwZSArIFwiIFxcXCJcIiArIGlkZW50ICsgXCJcXFwiIGluIGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSksIHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCJcXG4gIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImludmFsaWQgZXhwcmVzc2lvbjogXCIgKyAoZS5tZXNzYWdlKSArIFwiIGluXFxuXFxuXCIgK1xuICAgICAgICBcIiAgICBcIiArIGV4cCArIFwiXFxuXFxuXCIgK1xuICAgICAgICBcIiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSArIFwiXFxuXCIsXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHJhbmdlID0gMjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUgKFxuICBzb3VyY2UsXG4gIHN0YXJ0LFxuICBlbmRcbikge1xuICBpZiAoIHN0YXJ0ID09PSB2b2lkIDAgKSBzdGFydCA9IDA7XG4gIGlmICggZW5kID09PSB2b2lkIDAgKSBlbmQgPSBzb3VyY2UubGVuZ3RoO1xuXG4gIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgY291bnQgPSAwO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xuICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgZm9yICh2YXIgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpIHsgY29udGludWUgfVxuICAgICAgICByZXMucHVzaCgoXCJcIiArIChqICsgMSkgKyAocmVwZWF0JDEoXCIgXCIsIDMgLSBTdHJpbmcoaiArIDEpLmxlbmd0aCkpICsgXCJ8ICBcIiArIChsaW5lc1tqXSkpKTtcbiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICB2YXIgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIiBcIiwgcGFkKSArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCQxID0gTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpO1xuICAgICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgkMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy5qb2luKCdcXG4nKVxufVxuXG5mdW5jdGlvbiByZXBlYXQkMSAoc3RyLCBuKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKG4gPiAwKSB7XG4gICAgd2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKG4gJiAxKSB7IHJlc3VsdCArPSBzdHI7IH1cbiAgICAgIG4gPj4+PSAxO1xuICAgICAgaWYgKG4gPD0gMCkgeyBicmVhayB9XG4gICAgICBzdHIgKz0gc3RyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24gKGNvZGUsIGVycm9ycykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICByZXR1cm4gbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4gKGNvbXBpbGUpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zLFxuICAgIHZtXG4gICkge1xuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICAgIHZhciB3YXJuJCQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgZGVsZXRlIG9wdGlvbnMud2FybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGNhY2hlXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcblxuICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVDb2RlRnJhbWUodGVtcGxhdGUsIGUuc3RhcnQsIGUuZW5kKSxcbiAgICAgICAgICAgICAgdm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgZm5HZW5FcnJvcnMubWFwKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSByZWYuZXJyO1xuICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgcmV0dXJuICgoZXJyLnRvU3RyaW5nKCkpICsgXCIgaW5cXG5cXG5cIiArIGNvZGUgKyBcIlxcblwiKTtcbiAgICAgICAgfSkuam9pbignXFxuJyksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciAoYmFzZUNvbXBpbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGNvbXBpbGUgKFxuICAgICAgdGVtcGxhdGUsXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgdGlwcyA9IFtdO1xuXG4gICAgICB2YXIgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB2YXIgbGVhZGluZ1NwYWNlTGVuZ3RoID0gdGVtcGxhdGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMubW9kdWxlcyA9XG4gICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIGRpcmVjdGl2ZXNcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucy5kaXJlY3RpdmVzIHx8IG51bGwpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIHZhciBjb21waWxlZCA9IGJhc2VDb21waWxlKHRlbXBsYXRlLnRyaW0oKSwgZmluYWxPcHRpb25zKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QsIHdhcm4pO1xuICAgICAgfVxuICAgICAgY29tcGlsZWQuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7XG4gICAgICByZXR1cm4gY29tcGlsZWRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIGNvbXBpbGVUb0Z1bmN0aW9uczogY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25Gbihjb21waWxlKVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuLy8gcGFyc2VyL29wdGltaXplci9jb2RlZ2VuLCBlLmcgdGhlIFNTUiBvcHRpbWl6aW5nIGNvbXBpbGVyLlxuLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuXG52YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHtcbiAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB9XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZSA9IHJlZiQxLmNvbXBpbGU7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4vKiAgKi9cblxuLy8gY2hlY2sgd2hldGhlciBjdXJyZW50IGJyb3dzZXIgZW5jb2RlcyBhIGNoYXIgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXNcbnZhciBkaXY7XG5mdW5jdGlvbiBnZXRTaG91bGREZWNvZGUgKGhyZWYpIHtcbiAgZGl2ID0gZGl2IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoJyYjMTA7JykgPiAwXG59XG5cbi8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUoZmFsc2UpIDogZmFsc2U7XG4vLyAjNjgyODogY2hyb21lIGVuY29kZXMgY29udGVudCBpbiBhW2hyZWZdXG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gIHJldHVybiBlbCAmJiBlbC5pbm5lckhUTUxcbn0pO1xuXG52YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSwge1xuICAgICAgICBvdXRwdXRTb3VyY2VSYW5nZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICBjb21tZW50czogb3B0aW9ucy5jb21tZW50c1xuICAgICAgfSwgdGhpcyk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh0aGlzLl9uYW1lKSArIFwiIGNvbXBpbGVcIiksICdjb21waWxlJywgJ2NvbXBpbGUgZW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vKipcbiAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MIChlbCkge1xuICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTFxuICB9IGVsc2Uge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTFxuICB9XG59XG5cblZ1ZS5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKTtcbnZhciAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0geyBzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5IH0pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIik7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsImltcG9ydCBfT2JqZWN0JGRlZmluZVByb3BlcnR5IGZyb20gXCIuLi8uLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgZnJvbSBcIi4uLy4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiO1xuaW1wb3J0IF9PYmplY3QkZ2V0T3duUHJvcGVydHlTeW1ib2xzIGZyb20gXCIuLi8uLi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHNcIjtcbmltcG9ydCBfT2JqZWN0JGtleXMgZnJvbSBcIi4uLy4uL2NvcmUtanMvb2JqZWN0L2tleXNcIjtcbmltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIHZhciBvd25LZXlzID0gX09iamVjdCRrZXlzKHNvdXJjZSk7XG5cbiAgICBpZiAodHlwZW9mIF9PYmplY3QkZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoX09iamVjdCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzXCIpOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRva2VuID0gJyVbYS1mMC05XXsyfSc7XG52YXIgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAodG9rZW4sICdnaScpO1xudmFyIG11bHRpTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKSsnLCAnZ2knKTtcblxuZnVuY3Rpb24gZGVjb2RlQ29tcG9uZW50cyhjb21wb25lbnRzLCBzcGxpdCkge1xuXHR0cnkge1xuXHRcdC8vIFRyeSB0byBkZWNvZGUgdGhlIGVudGlyZSBzdHJpbmcgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbignJykpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKHN0cmluZywgc2VwYXJhdG9yKSA9PiB7XG5cdGlmICghKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZXBhcmF0b3IgPT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBhcmd1bWVudHMgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCcpO1xuXHR9XG5cblx0aWYgKHNlcGFyYXRvciA9PT0gJycpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN0cmluZy5pbmRleE9mKHNlcGFyYXRvcik7XG5cblx0aWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBbc3RyaW5nXTtcblx0fVxuXG5cdHJldHVybiBbXG5cdFx0c3RyaW5nLnNsaWNlKDAsIHNlcGFyYXRvckluZGV4KSxcblx0XHRzdHJpbmcuc2xpY2Uoc2VwYXJhdG9ySW5kZXggKyBzZXBhcmF0b3IubGVuZ3RoKVxuXHRdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG59O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\"")
}
